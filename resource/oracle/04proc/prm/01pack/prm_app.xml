<?xml version="1.0" encoding="UTF-8" ?>
<root>

	<sql id="PKG_PRM_APP" type="proc"><![CDATA[
	CREATE OR REPLACE PACKAGE PKG_PRM_APP AS

   /*-------------------------------------------------------------------------*/
   /* 变量声明区                                                              */
   /*-------------------------------------------------------------------------*/
   def_OK                    CONSTANT NUMBER      := 0;            -- 成功
   def_ERR                   CONSTANT NUMBER      := -1 ;          -- 系统错误
   def_WARNING               CONSTANT NUMBER      := 100;          -- 系统警告
   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Dept_Evaluate
   || 功能描述 ：科室考评计算
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Dept_Evaluate( prm_group_id          IN   NUMBER         --集团
                               ,prm_hos_id            IN   NUMBER         --医院
                               ,prm_copy_code         IN   VARCHAR2       --账套
                               ,prm_acc_year          IN   VARCHAR2       --年度   
                               ,prm_acc_month         IN   VARCHAR2       --月份
                               ,prm_goal_code         IN   VARCHAR2       --目标编码
                               ,prm_AppCode           Out  Number         --执行代码
                               ,prm_ErrTxt            Out  Varchar2       --错误信息 
                              ) ;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Insert_DeptKpiScore
   || 功能描述 ：生成科室KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Insert_DeptKpiScore(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度   
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_goal_code         IN   VARCHAR2       --目标编码
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                     ) ;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Calc_DeptKpiScore
   || 功能描述 ：计算科室KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Calc_DeptKpiScore(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度   
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_goal_code         IN   VARCHAR2       --目标编码
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                   ) ;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Check_DeptKpiScore
   || 功能描述 ：检查计算前所有信息维护完整性
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Check_DeptKpiScore(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度   
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_goal_code         IN   VARCHAR2       --目标编码
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                    ) ;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Hos_Evaluate
   || 功能描述 ：医院考评计算
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Hos_Evaluate(  prm_group_id          IN   NUMBER         --集团
                               ,prm_hos_id            IN   NUMBER         --医院
                               ,prm_copy_code         IN   VARCHAR2       --账套
                               ,prm_acc_year          IN   VARCHAR2       --年度   
                               ,prm_acc_month         IN   VARCHAR2       --月份
                               ,prm_goal_code         IN   VARCHAR2       --目标编码
                               ,prm_AppCode           Out  Number         --执行代码
                               ,prm_ErrTxt            Out  Varchar2       --错误信息 
                              ) ;                                 
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Insert_HosKpiScore
   || 功能描述 ：生成医院KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Insert_HosKpiScore(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度   
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_goal_code         IN   VARCHAR2       --目标编码
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                    ) ;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Calc_HosKpiScore
   || 功能描述 ：计算医院KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Calc_HosKpiScore(   prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度   
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_goal_code         IN   VARCHAR2       --目标编码
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                   ) ;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Check_HosKpiScore
   || 功能描述 ：检查计算前所有信息维护完整性
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Check_HosKpiScore(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度   
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_goal_code         IN   VARCHAR2       --目标编码
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                   ) ;    
                                   
    /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Emp_Evaluate
   || 功能描述 ：职工考评计算
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Emp_Evaluate( prm_group_id          IN   NUMBER         --集团
                              ,prm_hos_id            IN   NUMBER         --医院
                              ,prm_copy_code         IN   VARCHAR2       --账套
                              ,prm_acc_year          IN   VARCHAR2       --年度   
                              ,prm_acc_month         IN   VARCHAR2       --月份
                              ,prm_goal_code         IN   VARCHAR2       --目标编码
                              ,prm_AppCode           Out  Number         --执行代码
                              ,prm_ErrTxt            Out  Varchar2       --错误信息 
                              ) ;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Insert_EmpKpiScore
   || 功能描述 ：生成职工KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Insert_EmpKpiScore(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度   
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_goal_code         IN   VARCHAR2       --目标编码
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                    ) ;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Calc_EmpKpiScore
   || 功能描述 ：计算职工KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Calc_EmpKpiScore(  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度   
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_goal_code         IN   VARCHAR2       --目标编码
                                   ,prm_AppCode           Out  Number         --执行代码
                                   ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                  ) ;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Check_EmpKpiScore
   || 功能描述 ：检查计算前所有信息维护完整性
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Check_EmpKpiScore(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度   
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_goal_code         IN   VARCHAR2       --目标编码
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                   ) ;                                                            

END PKG_PRM_APP;

	]]></sql>
	<sql id="PKG_PRM_APP_BODY" type="proc"><![CDATA[
	create or replace package body PKG_PRM_APP AS

   /*-------------------------------------------------------------------------*/
   /* 私有全局常量声明                                                        */
   /*-------------------------------------------------------------------------*/
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Dept_Evaluate
   || 功能描述 ：科室考评计算
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Dept_Evaluate( prm_group_id          IN   NUMBER         --集团
                               ,prm_hos_id            IN   NUMBER         --医院
                               ,prm_copy_code         IN   VARCHAR2       --账套
                               ,prm_acc_year          IN   VARCHAR2       --年度   
                               ,prm_acc_month         IN   VARCHAR2       --月份
                               ,prm_goal_code         IN   VARCHAR2       --目标编码
                               ,prm_AppCode           Out  Number         --执行代码
                               ,prm_ErrTxt            Out  Varchar2       --错误信息 
                              ) 
   IS
     --定义变量
     n_record_exist      number(4)                                  ; --容错   
   begin 
     --初始化变量       
     prm_AppCode     := def_OK;  
     prm_ErrTxt      := '计算成功!';  
   
     --1、检查计算前所有信息维护完整性
     prc_Check_DeptKpiScore(  prm_group_id               --集团
                             ,prm_hos_id                 --医院
                             ,prm_copy_code              --账套
                             ,prm_acc_year               --年度   
                             ,prm_acc_month              --月份
                             ,prm_goal_code              --目标编码
                             ,prm_AppCode                --执行代码
                             ,prm_ErrTxt                 --错误信息 
                            ) 
     ;
     
     if prm_AppCode <> def_OK then
       return;
     end if;
     
     --2、生成科室KPI指标考评计算表数据
     prc_Insert_DeptKpiScore(   prm_group_id               --集团
                               ,prm_hos_id                 --医院
                               ,prm_copy_code              --账套
                               ,prm_acc_year               --年度   
                               ,prm_acc_month              --月份
                               ,prm_goal_code              --目标编码
                               ,prm_AppCode                --执行代码
                               ,prm_ErrTxt                 --错误信息 
                              ) 
     ;
       
     if prm_AppCode <> def_OK then
       return;
     end if;
     
     --3、计算科室KPI指标考评计算表数据
     prc_Calc_DeptKpiScore(   prm_group_id               --集团
                             ,prm_hos_id                 --医院
                             ,prm_copy_code              --账套
                             ,prm_acc_year               --年度   
                             ,prm_acc_month              --月份
                             ,prm_goal_code              --目标编码
                             ,prm_AppCode                --执行代码
                             ,prm_ErrTxt                 --错误信息 
                            ) 
     ;
       
     if prm_AppCode <> def_OK then
       return;
     end if;
     
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '科室绩效考评计算失败！'||SQLERRM;
      
   END prc_Dept_Evaluate;                             
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Insert_DeptKpiScore
   || 功能描述 ：生成科室KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Insert_DeptKpiScore(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度   
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_goal_code         IN   VARCHAR2       --目标编码
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                     ) 
           
   IS
     --定义变量
     n_record_exist      number(4)                                  ; --容错   
   begin
     --初始化变量 
     prm_AppCode    := def_OK ;
     n_record_exist := 0      ;
     
     select count(1)
       into n_record_exist
       from PRM_DEPT_KPI_SCORE t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.goal_code = prm_goal_code
      ;
     
     --先删除数据再插入
     if n_record_exist > 1 then 
        delete 
          from PRM_DEPT_KPI_SCORE  t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.acc_year  = prm_acc_year
            and t.acc_month = prm_acc_month
            and t.goal_code = prm_goal_code
          ; 
     end if;     
     
     --生成科室KPI指标考评计算表数据
     insert 
       into PRM_DEPT_KPI_SCORE(
                     GROUP_ID       
                    ,HOS_ID         
                    ,COPY_CODE      
                    ,ACC_YEAR       
                    ,ACC_MONTH      
                    ,GOAL_CODE      
                    ,KPI_CODE       
                    ,DEPT_NO        
                    ,DEPT_ID        
                    ,SUPER_KPI_CODE 
                    ,ORDER_NO       
                    ,KPI_LEVEL      
                    ,IS_LAST        
                    ,KPI_SCORE      
                    ,IS_AUDIT   
                    )
         select  GROUP_ID      
                ,HOS_ID         
                ,COPY_CODE      
                ,ACC_YEAR       
                ,ACC_MONTH      
                ,GOAL_CODE      
                ,KPI_CODE       
                ,DEPT_NO        
                ,DEPT_ID        
                ,SUPER_KPI_CODE 
                ,ORDER_NO       
                ,KPI_LEVEL      
                ,IS_LAST        
                ,0 as KPI_SCORE 
                ,0 as IS_AUDIT     
          from PRM_DEPT_SCHEME 
         where GROUP_ID   = prm_group_id  
           and HOS_ID     = prm_hos_id
           and COPY_CODE  = prm_copy_code  
           and ACC_YEAR   = prm_acc_year
           and ACC_MONTH  = prm_acc_month
           and GOAL_CODE  = prm_goal_code
           ;   
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '科室绩效方案未制定！['||prm_goal_code||']';
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '生成考评计算表时失败！'||SQLERRM;
      
   END prc_Insert_DeptKpiScore;  

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Calc_DeptKpiScore
   || 功能描述 ：计算科室KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Calc_DeptKpiScore(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度   
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_goal_code         IN   VARCHAR2       --目标编码
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                   ) 
           
   IS
     --定义计算公式游标
     CURSOR cur_prm_dept_kpi_score  (  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year        IN   VARCHAR2       --开始年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_goal_code         IN   VARCHAR2       --目标编码
                                     )   
       IS        
        select t1.DEPT_NO               --科室变更ID
             , t1.DEPT_ID               --科室ID
             , t1.KPI_CODE              --指标编码
             , t1.GOAL_VALUE            --目标值
             , t1.FULL_SCORE            --满分标准
             , t1.GRADE_METH_CODE       --评分方法
             , t2.kpi_value             --实际值
             , t1.ratio                  --权重
          from PRM_DEPT_SCHEME t1
          left join PRM_DEPT_KPI_VALUE t2
            on t1.group_id = t2.group_id
           and t1.hos_id = t2.hos_id
           and t1.copy_code = t2.copy_code
           and t1.acc_year  = t2.acc_year
           and t1.acc_month = t2.acc_month
           and t1.goal_code = t2.goal_code
           and t1.kpi_code  = t2.kpi_code
           and t1.dept_no   = t2.dept_no
           and t1.dept_id   = t2.dept_id
         where t1.group_id  = prm_group_id
           and t1.HOS_ID    = prm_hos_id
           and t1.COPY_CODE = prm_copy_code
           and t1.ACC_YEAR  = prm_acc_year
           and t1.ACC_MONTH = prm_acc_month
           and t1.GOAL_CODE = prm_goal_code
           and t1.is_last = 1
           ;
     
     --定义计算公式游标
     CURSOR cur_prm_dept_kpi_score_led  (  prm_group_id          IN   NUMBER         --集团
                                          ,prm_hos_id            IN   NUMBER         --医院
                                          ,prm_copy_code         IN   VARCHAR2       --账套
                                          ,prm_acc_year        IN   VARCHAR2       --开始年度
                                          ,prm_acc_month         IN   VARCHAR2       --月份
                                          ,prm_goal_code         IN   VARCHAR2       --目标编码
                                         )   
       IS        
        select t1.DEPT_NO               --科室变更ID
             , t1.DEPT_ID               --科室ID
             , t1.KPI_CODE              --指标编码
             , t1.kpi_score             --KPI得分
          from prm_dept_kpi_score t1
         where t1.group_id  = prm_group_id
           and t1.HOS_ID    = prm_hos_id
           and t1.COPY_CODE = prm_copy_code
           and t1.ACC_YEAR  = prm_acc_year
           and t1.ACC_MONTH = prm_acc_month
           and t1.GOAL_CODE = prm_goal_code
           and t1.is_last = 0
           ;
           
     --定义变量
     V_KPI_CODE          PRM_DEPT_SCHEME.Kpi_Code%type        ;
     V_DEPT_NO           PRM_DEPT_SCHEME.Dept_No%type         ;
     V_DEPT_ID           PRM_DEPT_SCHEME.Dept_Id%type         ;
     V_GOAL_VALUE        PRM_DEPT_SCHEME.Goal_Value%type      ;
     V_FULL_SCORE        PRM_DEPT_SCHEME.Full_Score%type      ;
     V_GRADE_METH_CODE   PRM_DEPT_SCHEME.Grade_Meth_Code%type ;
     V_KPI_VALUE         PRM_DEPT_KPI_VALUE.KPI_VALUE%type    ;
     
     v_section_max       PRM_DEPT_KPI_SECTION.Section%type    ;
     V_NATURE_CODE       PRM_DEPT_KPI.Nature_Code%type        ; --指标性质：01正向  02：反向
     
     v_section           PRM_DEPT_KPI_SECTION.Section%type    ;
     v_kpi_beg_value     PRM_DEPT_KPI_SECTION.Kpi_Beg_Value%type    ;
     v_kpi_end_value     PRM_DEPT_KPI_SECTION.kpi_end_value%type    ;
     v_kpi_beg_score     PRM_DEPT_KPI_SECTION.kpi_beg_score%type    ;
     v_kpi_end_score     PRM_DEPT_KPI_SECTION.kpi_end_score%type    ;
     
     v_kpi_beg_value_near     PRM_DEPT_KPI_SECTION.Kpi_Beg_Value%type    ;  --临近区间
     v_kpi_end_value_near     PRM_DEPT_KPI_SECTION.kpi_end_value%type    ;  --临近区间
     v_kpi_beg_score_near     PRM_DEPT_KPI_SECTION.kpi_beg_score%type    ;  --临近区间
     v_kpi_end_score_near     PRM_DEPT_KPI_SECTION.kpi_end_score%type    ;  --临近区间
     
     V_KPI_SCORE         PRM_DEPT_KPI_SCORE.Kpi_Score%type          ; --KPI得分
     V_K                 numeric(20,6)                              ; --斜率
     V_B                 numeric(20,6)                              ; --截距
     
     n_record_exist      number(4)                                  ; --容错
     
     v_kpi_range_value   PRM_DEPT_KPI_AD.Kpi_Range_Value%type       ; --值距
     v_kpi_range_score   PRM_DEPT_KPI_AD.Kpi_Range_Score%type       ; --分距
     
     v_dept_kind_code    APHI_DEPT.Dept_Kind_Code%type              ; --科室分类
    
     v_max_kpi_value     PRM_DEPT_KPI_VALUE.Kpi_Value%type          ; --最大KPI指标实际值
     v_min_kpi_value     PRM_DEPT_KPI_VALUE.Kpi_Value%type          ; --最小KPI指标实际值
     
     v_SEC_CODE          PRM_DEPT_KPI_SCORE.Sec_Code%type           ; --指示灯编码
     v_SEC_CODE_min      PRM_DEPT_KPI_SCORE.Sec_Code%type           ; --指示灯编码(最小)
     v_SEC_CODE_max      PRM_DEPT_KPI_SCORE.Sec_Code%type           ; --指示灯编码(最大)
     
     v_para_value0702    acc_para.para_value%type                   ; --参数编码
     v_para_value0703    acc_para.para_value%type                   ; --参数编码
     
     V_KPI_CODE_LED      PRM_DEPT_SCHEME.Kpi_Code%type              ;
     V_DEPT_NO_LED       PRM_DEPT_SCHEME.Dept_No%type               ;
     V_DEPT_ID_LED       PRM_DEPT_SCHEME.Dept_Id%type               ;
     V_KPI_SCORE_LED     PRM_DEPT_KPI_SCORE.Kpi_Score%type          ; --KPI得分
     
     v_FM_eng            PRM_DEPT_KPI_FORMULA.FORMULA_METHOD_ENG%type; --计算公式
     
   begin
     --初始化变量 
     prm_AppCode     := def_OK       ;
     
     v_section_max   := 1            ;
     V_NATURE_CODE   := '01'         ;
     
     v_section       := 1            ;
     v_kpi_beg_value := 0            ;
     v_kpi_end_value := 0            ;
     v_kpi_beg_score := 0            ;
     v_kpi_end_score := 0            ;
     
     v_kpi_beg_value_near := 0       ;
     v_kpi_end_value_near := 0       ;
     v_kpi_beg_score_near := 0       ;
     v_kpi_end_score_near := 0       ;
     
     V_KPI_SCORE     := 0            ;
     V_K             := 0            ;
     V_B             := 0            ;
     
     n_record_exist  := 1            ;
     
     v_kpi_range_value :=  0         ;
     v_kpi_range_score :=  0         ;
     
     --打开游标 
     open cur_prm_dept_kpi_score(  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --开始年度
                                  ,prm_acc_month              --月份
                                  ,prm_goal_code              --目标编码
                                );
     LOOP
        --提取游标
        FETCH cur_prm_dept_kpi_score 
          INTO V_DEPT_NO
              ,V_DEPT_ID
              ,V_KPI_CODE
              ,V_GOAL_VALUE
              ,V_FULL_SCORE
              ,V_GRADE_METH_CODE  --'01 :区间法  02:加分法 03:扣分法 04:参照法 05:比较法'
              ,V_KPI_VALUE
              ,V_RATIO
          ;    
          
        IF cur_prm_dept_kpi_score%NOTFOUND THEN
           if cur_prm_dept_kpi_score%isopen then 
              CLOSE cur_prm_dept_kpi_score;  
           end if;
           EXIT;
        END IF;
        
        --获取指标性质 01:正向 02:反向
        select nvl(NATURE_CODE,'01') 
          into V_NATURE_CODE
          from PRM_DEPT_KPI t
         where t.group_id  = prm_group_id
           and t.HOS_ID    = prm_hos_id
           and t.COPY_CODE = prm_copy_code
           and t.ACC_YEAR  = prm_acc_year
           and t.GOAL_CODE = prm_goal_code
           and t.kpi_code  = V_KPI_CODE 
         ;  
        
        --区间法
        IF V_GRADE_METH_CODE = '01' THEN
          
          --获取最大区间号
          select max(section)
            into v_section_max
            from PRM_DEPT_KPI_SECTION t
           where t.group_id  = prm_group_id
             and t.HOS_ID    = prm_hos_id
             and t.COPY_CODE = prm_copy_code
             and t.ACC_YEAR  = prm_acc_year
             and t.ACC_MONTH = prm_acc_month
             and t.GOAL_CODE = prm_goal_code
             and t.dept_no   = V_DEPT_NO
             and t.dept_id   = V_DEPT_ID
             and t.kpi_code  = V_KPI_CODE
            ;
           
           if V_NATURE_CODE = '01' then   --正向
             
               select  count(1)
                 into  n_record_exist  
                  from PRM_DEPT_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.dept_no   = v_dept_no
                   and t.dept_id   = v_dept_id
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value < kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value >= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value >= kpi_beg_value   and v_kpi_value < kpi_end_value)
                                or (kpi_beg_value = kpi_end_value and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                 ; 
                 
                if n_record_exist > 1 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '区间维护不连续！KPI代码['||v_kpi_code||']';
                   return;
                end if;
                
                if n_record_exist = 0 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '评分标准维护不完整，指标值未落到任何区间！KPI代码['||v_kpi_code||']';
                   return;
                end if;        
               --获取区间值  
               select  t.section
                      ,nvl(t.kpi_beg_value,0)
                      ,nvl(t.kpi_end_value,0)
                      ,nvl(t.kpi_beg_score,0)
                      ,nvl(t.kpi_end_score,0)
                 into  v_section   
                      ,v_kpi_beg_value 
                      ,v_kpi_end_value 
                      ,v_kpi_beg_score
                      ,v_kpi_end_score   
                  from PRM_DEPT_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.dept_no   = v_dept_no
                   and t.dept_id   = v_dept_id
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value < kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value >= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value >= kpi_beg_value   and v_kpi_value < kpi_end_value)
                                or (kpi_beg_value = kpi_end_value and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                   and rownum = 1    
                  ;
                  
                --第一区间指标得分计算       
                if v_section = 1 then
                    if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                    elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给结束值对应得分
                       V_KPI_SCORE := v_kpi_end_score;       
                       
                    elsif v_kpi_beg_value <> 0 then  --如果第一区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;
                       
                    else   --按临近区间比例计算
                        if v_section_max <= 2 then    --区间小于两个时按临近区间计算无意义
                           --当实际值 < 结束值 给最小分数，否则给最大分数  
                           if V_KPI_VALUE < v_kpi_end_value then
                              V_KPI_SCORE := v_kpi_beg_score ;
                           else  
                              V_KPI_SCORE := v_kpi_end_score ;
                           end if;  
                        end if;
                          
                        if v_section_max > 2 then
                            --提取第二区间的斜率及截距
                            select   nvl(t.kpi_beg_value,0)
                                    ,nvl(t.kpi_end_value,0)
                                    ,nvl(t.kpi_beg_score,0)
                                    ,nvl(t.kpi_end_score,0)
                               into  v_kpi_beg_value_near 
                                    ,v_kpi_end_value_near 
                                    ,v_kpi_beg_score_near
                                    ,v_kpi_end_score_near   
                                from PRM_DEPT_KPI_SECTION t
                               where t.group_id  = prm_group_id
                                 and t.hos_id    = prm_hos_id
                                 and t.copy_code = prm_copy_code
                                 and t.acc_year  = prm_acc_year
                                 and t.acc_month = prm_acc_month
                                 and t.goal_code = prm_goal_code
                                 and t.dept_no   = v_dept_no
                                 and t.dept_id   = v_dept_id
                                 and t.kpi_code  = v_kpi_code
                                 and t.section   = 2
                                 and rownum      = 1
                              ;
                              
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值 < 结束值 给最小分数，否则给最大分数  
                                if V_KPI_VALUE < v_kpi_end_value then
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_end_score ;
                                end if;   
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near );
                                
                                V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;
                            end if;  
                      end if; --<<按临近区间计算>>
                        
                    end if;
                end if; --<<第一区间计算结束>>    
                
                --最大区间指标得分计算
                if v_section = v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                  
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;    
                       
                   elsif v_kpi_end_value <> 0 then  --如果最大区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;    
                   else
                       if v_section_max <= 2 then   --区间小于两个时按临近区间计算无意义
                          --当实际值>开始值 给最大分值  
                          if V_KPI_VALUE > v_kpi_beg_value then
                             V_KPI_SCORE := v_kpi_end_score ;
                          else  
                             V_KPI_SCORE := v_kpi_beg_score ;
                          end if;   
                       end if;
                       
                       if v_section_max > 2 then 
                          --提取倒数第二区间的斜率及截距
                          select   nvl(t.kpi_beg_value,0)
                                  ,nvl(t.kpi_end_value,0)
                                  ,nvl(t.kpi_beg_score,0)
                                  ,nvl(t.kpi_end_score,0)
                             into  v_kpi_beg_value_near 
                                  ,v_kpi_end_value_near 
                                  ,v_kpi_beg_score_near
                                  ,v_kpi_end_score_near   
                              from PRM_DEPT_KPI_SECTION t
                             where t.group_id  = prm_group_id
                               and t.hos_id    = prm_hos_id
                               and t.copy_code = prm_copy_code
                               and t.acc_year  = prm_acc_year
                               and t.acc_month = prm_acc_month
                               and t.goal_code = prm_goal_code
                               and t.dept_no   = v_dept_no
                               and t.dept_id   = v_dept_id
                               and t.kpi_code  = v_kpi_code
                               and t.section   = v_section_max -1
                               and rownum      = 1
                            ;
                            
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值>开始值 给最大分值  
                                if V_KPI_VALUE > v_kpi_beg_value then
                                   V_KPI_SCORE := v_kpi_end_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                end if;   
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near);
                                
                                V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                           end if;  
                       end if;--<<临近区间计算结束>>     
                   end if; 
                end if; --<<最大区间计算结束>>
                
                --中间区间指标得分计算
                if v_section > 1 and  v_section < v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score   then  --如果指标分相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;
                   else
                           
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                            
                       V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                            
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                   end if; 
                end if;  --<<中间区间计算结束>>
                
                
             end if;   --<<正向指标计算结束>>       
  

          if V_NATURE_CODE = '02' then   --反向
            
               select  count(1)
                 into  n_record_exist  
                  from PRM_DEPT_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.dept_no   = v_dept_no
                   and t.dept_id   = v_dept_id
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value > kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value <= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value <= kpi_beg_value  and v_kpi_value > kpi_end_value)
                                or (kpi_beg_value = kpi_end_value and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                 ; 
                 
                if n_record_exist > 1 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '区间维护不连续！KPI代码['||v_kpi_code||']';
                   return;
                end if;
                
                if n_record_exist = 0 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '评分标准维护不完整，指标值未落到任何区间！KPI代码['||v_kpi_code||']';
                   return;
                end if; 
                            
               --获取区间值  
               select  t.section
                      ,nvl(t.kpi_beg_value,0)
                      ,nvl(t.kpi_end_value,0)
                      ,nvl(t.kpi_beg_score,0)
                      ,nvl(t.kpi_end_score,0)
                 into  v_section   
                      ,v_kpi_beg_value 
                      ,v_kpi_end_value 
                      ,v_kpi_beg_score
                      ,v_kpi_end_score   
                  from PRM_DEPT_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.dept_no   = v_dept_no
                   and t.dept_id   = v_dept_id
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value > kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value <= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value <= kpi_beg_value  and v_kpi_value > kpi_end_value)
                                or (kpi_beg_value = kpi_end_value and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                   and rownum = 1    
                  ;
                  
                --第一区间指标得分计算       
                if v_section = 1 then
                    if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                    elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给结束值对应得分
                       V_KPI_SCORE := v_kpi_end_score;   
                           
                    elsif v_kpi_beg_value <> 0 then  --如果第一区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                       
                    else   --按临近区间比例计算
                        if v_section_max <= 2 then    --区间小于两个时按临近区间计算无意义
                           --当实际值 > 终止值 给开始分，否则给结束分  
                           if V_KPI_VALUE > v_kpi_end_value then
                              V_KPI_SCORE := v_kpi_beg_score ;
                           else  
                              V_KPI_SCORE := v_kpi_end_score ;
                           end if;  
                        end if;
                          
                        if v_section_max > 2 then
                            --提取第二区间的斜率及截距
                            select   nvl(t.kpi_beg_value,0)
                                    ,nvl(t.kpi_end_value,0)
                                    ,nvl(t.kpi_beg_score,0)
                                    ,nvl(t.kpi_end_score,0)
                               into  v_kpi_beg_value_near 
                                    ,v_kpi_end_value_near 
                                    ,v_kpi_beg_score_near
                                    ,v_kpi_end_score_near   
                                from PRM_DEPT_KPI_SECTION t
                               where t.group_id  = prm_group_id
                                 and t.hos_id    = prm_hos_id
                                 and t.copy_code = prm_copy_code
                                 and t.acc_year  = prm_acc_year
                                 and t.acc_month = prm_acc_month
                                 and t.goal_code = prm_goal_code
                                 and t.dept_no   = v_dept_no
                                 and t.dept_id   = v_dept_id
                                 and t.kpi_code  = v_kpi_code
                                 and t.section   = 2
                                 and rownum      = 1
                              ;
                              
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值 > 开始值 给结束分，否则给开始分  
                                if V_KPI_VALUE > v_kpi_end_value then
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_end_score ;
                                end if;  
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near);
                                
                                V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;
                            end if;  
                      end if; --<<按临近区间计算>>
                        
                    end if;
                end if; --<<第一区间计算结束>>    
                
                --最大区间指标得分计算
                if v_section = v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                  
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;    
                       
                   elsif v_kpi_end_value <> 0 then  --如果最大区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;    
                   else
                       if v_section_max <= 2 then   --区间小于两个时按临近区间计算无意义
                          --当实际值<开始值 给最大分值 ,否则给开始分 
                          if V_KPI_VALUE < v_kpi_beg_value then
                             V_KPI_SCORE := v_kpi_end_score ;
                          else  
                             V_KPI_SCORE := v_kpi_beg_score ;
                          end if;   
                       end if;
                       
                       if v_section_max > 2 then 
                          --提取倒数第二区间的斜率及截距
                          select   nvl(t.kpi_beg_value,0)
                                  ,nvl(t.kpi_end_value,0)
                                  ,nvl(t.kpi_beg_score,0)
                                  ,nvl(t.kpi_end_score,0)
                             into  v_kpi_beg_value_near 
                                  ,v_kpi_end_value_near 
                                  ,v_kpi_beg_score_near
                                  ,v_kpi_end_score_near   
                              from PRM_DEPT_KPI_SECTION t
                             where t.group_id  = prm_group_id
                               and t.hos_id    = prm_hos_id
                               and t.copy_code = prm_copy_code
                               and t.acc_year  = prm_acc_year
                               and t.acc_month = prm_acc_month
                               and t.goal_code = prm_goal_code
                               and t.dept_no   = v_dept_no
                               and t.dept_id   = v_dept_id
                               and t.kpi_code  = v_kpi_code
                               and t.section   = v_section_max -1
                               and rownum      = 1
                            ;
                            
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值<开始值 给最大分值 ,否则给开始分 
                                if V_KPI_VALUE < v_kpi_beg_value then
                                   V_KPI_SCORE := v_kpi_end_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                end if;     
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near);
                                
                                V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                           end if;  
                       end if;--<<临近区间计算结束>>     
                   end if; 
                end if; --<<最大区间计算结束>>
                
                --中间区间指标得分计算
                if v_section > 1 and  v_section < v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score   then  --如果指标分相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;
                   else
                           
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                            
                       V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                            
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                   end if; 
                end if;  --<<中间区间计算结束>>
                
             end if;   --<<区间法反向指标计算结束>> 
             
        END IF;--<<区间法计算结束>>
        
        IF V_GRADE_METH_CODE = '02' THEN --加分法
          
            --提取加分法评分标准
            select t.kpi_range_value
                  ,t.kpi_range_score 
              into v_kpi_range_value 
                  ,v_kpi_range_score 
              from PRM_DEPT_KPI_AD t
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.goal_code = prm_goal_code
               and t.dept_no   = v_dept_no
               and t.dept_id   = V_DEPT_ID
               and t.kpi_code  = V_KPI_CODE
               and rownum = 1
             ;  
             
             if V_NATURE_CODE = '01' then   --正向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
             if V_NATURE_CODE = '02' then   --反向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
        END IF;--<<加分法计算结束>>
        
        IF V_GRADE_METH_CODE = '03' THEN --扣分法
          
            --提取扣分法评分标准
            select t.kpi_range_value
                  ,t.kpi_range_score 
              into v_kpi_range_value 
                  ,v_kpi_range_score 
              from PRM_DEPT_KPI_AD t
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.goal_code = prm_goal_code
               and t.dept_no   = v_dept_no
               and t.dept_id   = V_DEPT_ID
               and t.kpi_code  = V_KPI_CODE
               and rownum = 1
             ;  
             
             if V_NATURE_CODE = '01' then   --正向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
             if V_NATURE_CODE = '02' then   --反向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
        END IF;--<<扣分法计算结束>>
        
        IF V_GRADE_METH_CODE = '04' THEN --参照法 实际值/目标值 * 满分标准
          
           if V_NATURE_CODE = '01' then  --正向    
              
              --当实际值与目标值分别在两个方向时，实际值>目标值 则 满分 ，否则0分   
              if V_KPI_VALUE *  V_GOAL_VALUE <= 0 then 
                 if V_KPI_VALUE >= V_GOAL_VALUE then
                    V_KPI_SCORE := V_FULL_SCORE ;
                 else
                    V_KPI_SCORE := 0 ; 
                 end if;  
              else      
                 V_KPI_SCORE := V_KPI_VALUE / V_GOAL_VALUE * V_FULL_SCORE;
              end if;   
           end if; --<<正向计算结束>>
           
           if V_NATURE_CODE = '02' then  --反向      
             
              --当实际值与目标值分别在两个方向时，实际值<目标值 则 满分 ，否则0分 
              if V_KPI_VALUE *  V_GOAL_VALUE <= 0 then 
                  if V_KPI_VALUE <= V_GOAL_VALUE then
                    V_KPI_SCORE := V_FULL_SCORE ;
                 else
                    V_KPI_SCORE := 0 ; 
                 end if;  
              else        
                 V_KPI_SCORE :=  V_GOAL_VALUE /  V_KPI_VALUE * V_FULL_SCORE;
              end if;   
           end if; --<<正向计算结束>>
           
               
        END IF;--<<参照法计算结束>>
        
        IF V_GRADE_METH_CODE = '05' THEN --比较法 指标值同类科室最大为满分，其他按比例计算得分
           --提取科室分类
           select count(1)
             into n_record_exist
             from aphi_dept t
            where t.group_id = prm_group_id
              and t.hos_id = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.dept_id = V_DEPT_ID
              and rownum = 1;
                  
           if n_record_exist = 0 then   
              prm_AppCode := def_WARNING;
              prm_ErrTxt := '存在科室未维护分类！['||to_char(V_DEPT_ID)||']';
              return;
           end if;  
                 
           select t.dept_kind_code
             into v_dept_kind_code
             from aphi_dept t
            where t.group_id = prm_group_id
              and t.hos_id = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.dept_id = V_DEPT_ID
              and rownum = 1;
              
           if V_NATURE_CODE = '01' then  --正向
              
               --提取同类科室最大KPI指标值
               select max(t.KPI_VALUE) 
                 into v_max_kpi_value
                 from PRM_DEPT_KPI_VALUE t
                where t.group_id  = prm_group_id
                  and t.hos_id    = prm_hos_id
                  and t.copy_code = prm_copy_code     
                  and t.goal_code = prm_goal_code
                  and t.acc_year  = prm_acc_year
                  and t.acc_month = prm_acc_month
                  and t.kpi_code  = V_KPI_CODE
                  and t.dept_id   in ( select t1.dept_id 
                                         from aphi_dept t1
                                        where t1.group_id   = prm_group_id
                                          and t1.hos_id     = prm_hos_id
                                          and t1.copy_code  = prm_copy_code
                                          and t1.dept_kind_code = v_dept_kind_code
                                     )
                 ;
                 
                 --当实际值与最佳科室指标值分别在两个方向时，实际值>=最佳值 则 满分 ，否则0分   
                 if V_KPI_VALUE *  v_max_kpi_value <= 0 then    
                    if V_KPI_VALUE >= v_max_kpi_value then 
                       V_KPI_SCORE := V_FULL_SCORE ;
                    else
                       V_KPI_SCORE := 0 ; 
                    end if;
                 else
                    V_KPI_SCORE := V_KPI_VALUE / v_max_kpi_value * V_FULL_SCORE;   
                 end if;           
           end if; --<<比较法正向计算结束>>
           
           if V_NATURE_CODE = '02' then  --反向
              --提取同类科室最大KPI指标值
              select min(t.KPI_VALUE) 
                into v_min_kpi_value
                from PRM_DEPT_KPI_VALUE t
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and t.goal_code = prm_goal_code
                 and t.acc_year  = prm_acc_year
                 and t.acc_month = prm_acc_month
                 and t.kpi_code  = V_KPI_CODE
                 and t.dept_id  in ( select t1.dept_id 
                                       from aphi_dept t1
                                      where t1.group_id   = prm_group_id
                                        and t1.hos_id     = prm_hos_id
                                        and t1.copy_code  = prm_copy_code
                                        and t1.dept_kind_code = v_dept_kind_code
                                   )
                ;
                 
                    
                --当实际值与最佳科室指标值分别在两个方向时，实际值<=最佳值 则 满分 ，否则0分   
                if V_KPI_VALUE *  v_min_kpi_value <= 0 then  
                   if V_KPI_VALUE <= v_min_kpi_value then 
                      V_KPI_SCORE := V_FULL_SCORE ;
                   else
                      V_KPI_SCORE := 0            ; 
                   end if;
                else
                   V_KPI_SCORE := v_min_kpi_value / V_KPI_VALUE  * V_FULL_SCORE ;   
                end if;  
           end if; --<<比较法反向计算结束>>
        END IF;--<<比较法计算结束>>
        
        IF V_GRADE_METH_CODE = '06' THEN --公式法
         
           -- 获取公式
           select  REPLACE(REPLACE(dbms_lob.substr(t.formula_method_chs,2000), '{', ''), '}', '') as formula_method_chs
             into v_FM_eng
             from PRM_DEPT_KPI_FORMULA t
            where t.group_id = prm_group_id
              and t.hos_id = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.goal_code = prm_goal_code
              and t.acc_year = prm_acc_year
              and t.acc_month = prm_acc_month
              and t.kpi_code = V_KPI_CODE
              and t.dept_no    = V_DEPT_NO
              and t.dept_id    = v_DEPT_ID
              and t.kpi_code = V_KPI_CODE
               and rownum = 1;
               
               
              --替换函数中实际值
              if instr(v_FM_eng,'实际完成值') > 0  then
                 
                 v_FM_eng := replace(v_FM_eng,'实际完成值',V_KPI_VALUE);
             
              end if;
         
              --替换函数中目标值
              if instr(v_FM_eng,'目标值') > 0  then
                 
                 v_FM_eng := replace(v_FM_eng,'目标值',V_GOAL_VALUE);
             
              end if;
              
              --替换函数中满分值
              if instr(v_FM_eng,'满分标准') > 0  then
                 
                 v_FM_eng := replace(v_FM_eng,'满分标准',V_FULL_SCORE);
                
              end if;
              
              --替换函数中权重值
              if instr(v_FM_eng,'权重值') > 0  then
                 
                 v_FM_eng := replace(v_FM_eng,'权重值',V_RATIO);
            
              end if;
              
              --如果出现特殊符号
              
              if instr(v_FM_eng,'%') > 0  then
                 
                 v_FM_eng := replace(v_FM_eng,'%','/100');
                 
              end if;
              
              execute immediate 'select' || CHR(32) ||v_FM_eng || CHR(32)||'from dual' into V_KPI_SCORE ;
              
                 
        END IF;--<<公式法计算结束>>
        
        --获取满分制参数 0:否 ,1:是
        select nvl(para_value,1)
          into v_para_value0703          --是否采用满分制 0:否 ,1:是
          from acc_para
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code
           and mod_code  = '07'
           and para_code = '0703'
           and rownum    = 1 
          ;
        
        if v_para_value0703 = 1 then   --满分制
           if V_KPI_SCORE > V_FULL_SCORE then 
              V_KPI_SCORE := V_FULL_SCORE ; 
           end if;
           
            if V_KPI_SCORE < 0  then 
              V_KPI_SCORE := 0 ; 
           end if;
        end if; 
        
        V_KPI_SCORE := round(V_KPI_SCORE,2);
        
        --获取指示灯参数,是否按指标设置 0:否 ,1:是
        select nvl(para_value,1)
          into v_para_value0702           --指标灯是否按指标设置 0:否 ,1:是
          from acc_para
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code
           and mod_code  = '07'
           and para_code = '0702'
           and rownum    = 1 
          ;
        
        --获取指示灯
        if  v_para_value0702 = 1 then
            
            n_record_exist := 0 ;
            
            select count(1) 
              into n_record_exist 
              from PRM_DEPT_KPI_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code     
               and t.goal_code = prm_goal_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.kpi_code  = V_KPI_CODE
               and t.dept_no   = v_dept_no
               and t.dept_id   = V_DEPT_ID
               ;
               
            if n_record_exist = 0 then
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '存在指标未维护指示灯！[KPI指标：'||V_KPI_CODE||']|科室ID['||to_char(V_DEPT_ID)||']';
               return;
            end if;
            
            --获取指示灯最小等级及最大等级
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_DEPT_KPI_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code     
               and t.goal_code = prm_goal_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.kpi_code  = V_KPI_CODE
               and t.dept_no   = v_dept_no
               and t.dept_id   = V_DEPT_ID
            ;
            
            --提取KPI指标对应指示灯
            begin
                select t.sec_code
                  into v_sec_code
                  from PRM_DEPT_KPI_LED t 
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code     
                   and t.goal_code = prm_goal_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.kpi_code  = V_KPI_CODE
                   and t.dept_no   = v_dept_no
                   and t.dept_id   = V_DEPT_ID
                   and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE < KPI_END_SCORE)
                                                           or(V_KPI_SCORE = 0 and  V_KPI_SCORE = KPI_END_SCORE)
                                                          )
                         )                                 
                     or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE >= KPI_BEG_SCORE) 
                     or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                        and (  (V_KPI_SCORE >= KPI_BEG_SCORE and V_KPI_SCORE < KPI_END_SCORE)
                             or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE = KPI_BEG_SCORE) 
                            ) 
                        )
                     ) 
                   and rownum = 1 
                ;
           EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);      
           end;     
        else      --读取统一指标灯设置
            n_record_exist := 0 ;
        
            select count(1)
              into n_record_exist
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            if n_record_exist = 0 then
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '未维护指示灯！';
               return;
            end if;
            
            --读取统一指标灯设置
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            --读取指示灯区间
            begin
              select t.sec_code
                into v_sec_code
                from PRM_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE < KPI_END_SCORE)
                                                         or(V_KPI_SCORE = 0 and  V_KPI_SCORE = KPI_END_SCORE)
                                                        )
                       )                                 
                   or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE >= KPI_BEG_SCORE) 
                   or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                      and (  (V_KPI_SCORE >= KPI_BEG_SCORE and V_KPI_SCORE < KPI_END_SCORE)
                           or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE = KPI_BEG_SCORE) 
                          ) 
                      )
                   ) 
                 and rownum = 1 
              ; 
              
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);    
            end ;  
        end if;
        
        --更新指标得分及指示灯
        update PRM_DEPT_KPI_SCORE
           set KPI_SCORE = V_KPI_SCORE
              ,SEC_CODE  = V_SEC_CODE
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code     
           and goal_code = prm_goal_code
           and acc_year  = prm_acc_year
           and acc_month = prm_acc_month
           and kpi_code  = V_KPI_CODE
           and dept_no   = v_dept_no
           and dept_id   = V_DEPT_ID     
        ;     
     END LOOP; --<<计算末级指标得分及指灯更新结束>>
     
     if cur_prm_dept_kpi_score%isopen then 
        CLOSE cur_prm_dept_kpi_score;  
     end if; 
     
     --1、清空非末级KPI得分
     update PRM_DEPT_KPI_SCORE t1
        set kpi_score = 0
      where t1.group_id  = prm_group_id
        and t1.hos_id    = prm_hos_id
        and t1.copy_code = prm_copy_code
        and t1.acc_year  = prm_acc_year
        and t1.acc_month = prm_acc_month
        and t1.goal_code = prm_goal_code
        and t1.is_last   = 0
       ;   
     
     --2、递归更新非末级KPI得分 = 权重 * 指标得分 
     update PRM_DEPT_KPI_SCORE t1
        set kpi_score =
           (select sum(round((t2.ratio * t2.kpi_score),2))
                 from  ( select a.group_id
                               ,a.hos_id
                               ,a.copy_code
                               ,a.acc_year
                               ,a.acc_month
                               ,a.goal_code
                               ,a.kpi_code
                               ,a.super_kpi_code
                               ,a.dept_no
                               ,a.dept_id
                               ,a.kpi_score
                               ,b.ratio
                          from PRM_DEPT_KPI_SCORE a
                          left join PRM_DEPT_SCHEME b
                            on a.group_id  = b.group_id
                           and a.hos_id    = b.hos_id
                           and a.copy_code = b.copy_code
                           and a.acc_year  = b.acc_year
                           and a.acc_month = b.acc_month
                           and a.goal_code = b.goal_code
                           and a.dept_no   = b.dept_no
                           and a.dept_id   = b.dept_id
                           and a.kpi_code  = b.kpi_code
                        ) t2 
            start with t2.group_id  = t1.group_id 
                   and t2.hos_id    = t1.hos_id 
                   and t2.copy_code = t1.copy_code
                   and t2.acc_year  = t1.acc_year 
                   and t2.acc_month = t1.acc_month
                   and t2.goal_code = t1.goal_code 
                   and t2.dept_no   = t1.dept_no
                   and t2.dept_id   = t1.dept_id
                   and t2.kpi_code  = t1.kpi_code 
                   and t2.super_kpi_code = t1.super_kpi_code
      connect by prior t2.kpi_code = t2.super_kpi_code 
             and prior t2.group_id = t2.group_id
             and prior t2.hos_id = t2.hos_id 
             and prior t2.copy_code = t2.copy_code 
             and prior t2.acc_year = t2.acc_year
             and prior t2.acc_month = t2.acc_month 
             and prior t2.goal_code = t2.goal_code
             and prior t2.dept_no   = t2.dept_no
             and prior t2.dept_id   = t2.dept_id
             )
     where t1.group_id  = prm_group_id
       and t1.hos_id    = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.acc_year  = prm_acc_year
       and t1.acc_month = prm_acc_month
       and t1.goal_code = prm_goal_code
       and t1.is_last   = 0
       ;
       
     --更新非末级指标的指示灯
     
     --打开游标 
     open cur_prm_dept_kpi_score_led(  prm_group_id               --集团
                                      ,prm_hos_id                 --医院
                                      ,prm_copy_code              --账套
                                      ,prm_acc_year               --开始年度
                                      ,prm_acc_month              --月份
                                      ,prm_goal_code              --目标编码
                                    );
     LOOP
        --提取游标
        FETCH cur_prm_dept_kpi_score_led 
          INTO V_DEPT_NO_LED
              ,V_DEPT_ID_LED
              ,V_KPI_CODE_LED
              ,V_KPI_SCORE_LED
          ;    
          
        IF cur_prm_dept_kpi_score_led%NOTFOUND THEN
           if cur_prm_dept_kpi_score_led%isopen then 
              CLOSE cur_prm_dept_kpi_score_led;  
           end if;
           EXIT;
        END IF;
        
        
        
        --获取指示灯参数,是否按指标设置 0:否 ,1:是
        select nvl(para_value,1)
          into v_para_value0702           --指标灯是否按指标设置 0:否 ,1:是
          from acc_para
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code
           and mod_code  = '07'
           and para_code = '0702'
           and rownum    = 1 
          ;
          
        --获取指示灯
        if  v_para_value0702 = 1 then
          
            n_record_exist := 0 ;
            
            select count(1)
              into n_record_exist  
              from PRM_DEPT_KPI_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code     
               and t.goal_code = prm_goal_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.kpi_code  = V_KPI_CODE_LED
               and t.dept_no   = V_DEPT_NO_LED
               and t.dept_id   = V_DEPT_ID_LED
            ;  
            
            if n_record_exist = 0 then
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '存在KPI指标未维护指示灯！[KPI指标:'||V_KPI_CODE_LED||']|科室ID['||to_char(V_DEPT_ID_LED)||']';
               return;
            end if;
            
            --获取指示灯最大值与最小值
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_DEPT_KPI_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code     
               and t.goal_code = prm_goal_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.kpi_code  = V_KPI_CODE_LED
               and t.dept_no   = V_DEPT_NO_LED
               and t.dept_id   = V_DEPT_ID_LED
            ;
            
            --读取指示灯区间值
            begin
              select t.sec_code
                into v_sec_code
                from PRM_DEPT_KPI_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and t.goal_code = prm_goal_code
                 and t.acc_year  = prm_acc_year
                 and t.acc_month = prm_acc_month
                 and t.kpi_code  = V_KPI_CODE_LED
                 and t.dept_no   = v_dept_no_LED
                 and t.dept_id   = V_DEPT_ID_LED
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE_LED < KPI_END_SCORE)
                                                       or(V_KPI_SCORE_LED = 0 and  V_KPI_SCORE_LED = KPI_END_SCORE)
                                                      )
                       )                               
                   or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE_LED >= KPI_BEG_SCORE) 
                   or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                      and (  (V_KPI_SCORE_LED >= KPI_BEG_SCORE and V_KPI_SCORE_LED < KPI_END_SCORE)
                           or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE_LED = KPI_BEG_SCORE) 
                          ) 
                      )
                   )     
                 and rownum = 1 
               ;  
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);   
            end;     
            
        else  --读取统一指示灯
          
            n_record_exist := 0 ;
            
            select count(1)
              into n_record_exist
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            if n_record_exist = 0 then
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '未维护指示灯！';
               return;
            end if;
            
            --读取指标灯最大值与最小值
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            --读取指示灯区间值
            begin
              select t.sec_code
                into v_sec_code
                from PRM_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE_LED < KPI_END_SCORE)
                                                         or(V_KPI_SCORE_LED = 0 and  V_KPI_SCORE_LED = KPI_END_SCORE)
                                                        )
                       )                                 
                     or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE_LED >= KPI_BEG_SCORE) 
                     or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                        and (  (V_KPI_SCORE_LED >= KPI_BEG_SCORE and V_KPI_SCORE_LED < KPI_END_SCORE)
                             or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE_LED = KPI_BEG_SCORE) 
                            ) 
                        )
                     )    
                
                 and rownum = 1 
              ; 
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0); 
            end;   
        end if;
        
        --更新指标得分及指示灯
        update PRM_DEPT_KPI_SCORE
           set SEC_CODE  = V_SEC_CODE
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code     
           and goal_code = prm_goal_code
           and acc_year  = prm_acc_year
           and acc_month = prm_acc_month
           and kpi_code  = V_KPI_CODE_LED
           and dept_no   = v_dept_no_LED
           and dept_id   = V_DEPT_ID_LED    
        ;  
     END LOOP; --<<非末级指示灯更新结束>>
     
     if cur_prm_dept_kpi_score_led%isopen then 
        CLOSE cur_prm_dept_kpi_score_led;  
     end if; 
     prm_AppCode := def_OK;
     prm_ErrTxt := '考评计算完成！';
     
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '考评计算失败！'||SQLERRM;
      
   END prc_Calc_DeptKpiScore;    

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Check_DeptKpiScore
   || 功能描述 ：检查计算前所有信息维护完整性
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Check_DeptKpiScore(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度   
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_goal_code         IN   VARCHAR2       --目标编码
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                    ) 
           
   IS
     --定义变量
     n_record_exist      number(4)                                  ; --容错  
     v_para_value0702    acc_para.para_value%type                   ; --参数编码 
   begin
     
     --初始化变量
     prm_AppCode      := def_OK  ;
     n_record_exist   := 0       ;
     v_para_value0702 := 0       ;
     
     --1、检查本月考评结果是否审核完成
     n_record_exist := 0 ;
     select count(1)
       into n_record_exist
       from PRM_DEPT_KPI_SCORE t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.is_audit  = 1
      ;
      
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '本月考评结果已审核！';
        return;
     end if;  
     
     --2、科室绩效方案是否审核完成
     select count(1)
       into n_record_exist
       from PRM_GOAL t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.is_audit  = 1 
      ;  
     
     if n_record_exist = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '科室绩效方案未审核！';
        return;
     end if;
     
     --3、检查科室KPI指标数据是否审核完成
     select count(1)
       into n_record_exist
       from PRM_DEPT_KPI_VALUE t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.is_audit  = 0 
      ;  
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '科室KPI指标数据未审核！';
        return;
     end if;
     
     --4、检查权重是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_DEPT_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.ratio     = 0
     ;
        
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标权重未维护！';
        return;
     end if;  
     
     --5、检查目标值是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_DEPT_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.GOAL_VALUE is null 
        and t.is_last   = 1
        and t.grade_meth_code in('02','03','04')      --加分法、扣分法、参照法 
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '评分方法为[加/扣分法及参照法]的KPI指标目标值必须维护！';
        return;
     end if;  
     
     --6、检查满分标准是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_DEPT_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and nvl(t.full_score ,0) = 0  
        and t.is_last   = 1 
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标满分标准未维护！';
        return;
     end if;  
     
     --7、检查评分方法是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_DEPT_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.grade_meth_code  is null   
        and t.is_last   = 1
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标评分方法未维护！';
        return;
     end if;  
     
     --8、检查区间法评分标准是否维护
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_DEPT_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.grade_meth_code = '01'
        and t.is_last   = 1
        and to_char(t.dept_id) ||'|'|| t.kpi_code not in 
            (select to_char(t1.dept_id) ||'|'|| t1.kpi_code 
               from PRM_DEPT_KPI_SECTION  t1
             where t1.group_id  = prm_group_id  
               and t1.hos_id    = prm_hos_id
               and t1.copy_code = prm_copy_code
               and t1.acc_year  = prm_acc_year
               and t1.acc_month = prm_acc_month
               and t1.goal_code = prm_goal_code
             )
                                                      
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在评分方法[区间法]的KPI指标,评分标准未维护！';
        return;
     end if;  
     
     --9、检查加扣分评分标准是否维护
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_DEPT_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.is_last   = 1
        and t.grade_meth_code in( '02','03')
        and to_char(t.dept_id) ||'|'|| t.kpi_code not in 
        (select to_char(t1.dept_id) ||'|'|| t1.kpi_code 
           from PRM_DEPT_KPI_AD  t1
          where t1.group_id  = prm_group_id  
            and t1.hos_id    = prm_hos_id
            and t1.copy_code = prm_copy_code
            and t1.acc_year  = prm_acc_year
            and t1.acc_month = prm_acc_month
            and t1.goal_code = prm_goal_code
         )
                                                      
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在评分方法[加/扣分法]的KPI指标,评分标准未维护！';
        return;
     end if; 
     
     --10、检查指示灯是否维护完成
     n_record_exist := 0 ;
     
     select nvl(para_value,1)
       into v_para_value0702           --指标灯是否按指标设置 0:否 ,1:是
       from acc_para
      where group_id  = prm_group_id
        and hos_id    = prm_hos_id
        and copy_code = prm_copy_code
        and mod_code  = '07'
        and para_code = '0702'
        and rownum    = 1 
      ;
      
     if v_para_value0702 = 1 then
         select count(1)
           into n_record_exist
           from PRM_DEPT_SCHEME t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.goal_code = prm_goal_code
            and t.acc_year  = prm_acc_year
            and t.acc_month = prm_acc_month
            and to_char(t.dept_id) ||'|'|| t.kpi_code not in 
            (select to_char(t1.dept_id) ||'|'|| t1.kpi_code 
               from PRM_DEPT_KPI_LED  t1
              where t1.group_id  = prm_group_id  
                and t1.hos_id    = prm_hos_id
                and t1.copy_code = prm_copy_code
                and t1.acc_year  = prm_acc_year
                and t1.acc_month = prm_acc_month
                and t1.goal_code = prm_goal_code
             )                                            
         ;
         
         if n_record_exist > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '存在KPI指标的指示灯未维护！';
            return;
         end if;    
     else
         select count(1) 
           into n_record_exist
           from PRM_LED t
          where t.group_id  =  prm_group_id
            and t.hos_id    =  prm_hos_id
            and t.copy_code = prm_copy_code
          ;
          
          if n_record_exist = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '指示灯未维护！';
            return;
          end if;  
     end if;   
        
     --11、检查KPI指标值是否维护
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_DEPT_SCHEME t
      where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.goal_code = prm_goal_code
            and t.acc_year  = prm_acc_year
            and t.acc_month = prm_acc_month
            and t.is_last   = 1
            and to_char(t.dept_id) ||'|'|| t.kpi_code not in 
            (select to_char(t1.dept_id) ||'|'|| t1.kpi_code 
               from PRM_DEPT_KPI_VALUE  t1
              where t1.group_id  = prm_group_id  
                and t1.hos_id    = prm_hos_id
                and t1.copy_code = prm_copy_code
                and t1.acc_year  = prm_acc_year
                and t1.acc_month = prm_acc_month
                and t1.goal_code = prm_goal_code
             ) 
     ;  
            
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标数据采集不完整！';
        return;
     end if;  
      
     --12、检查公式评分标准是否维护
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_DEPT_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.is_last   = 1
        and t.grade_meth_code in( '06')
        and to_char(t.dept_id) ||'|'|| t.kpi_code not in 
        (select to_char(t1.dept_id) ||'|'|| t1.kpi_code 
           from PRM_DEPT_KPI_FORMULA  t1
          where t1.group_id  = prm_group_id  
            and t1.hos_id    = prm_hos_id
            and t1.copy_code = prm_copy_code
            and t1.acc_year  = prm_acc_year
            and t1.acc_month = prm_acc_month
            and t1.goal_code = prm_goal_code
            and dbms_lob.substr(t1.formula_method_chs,2000) IS NOT NULL  
         )
                                                      
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在评分方法[公式法]的KPI指标,评分标准未维护！';
        return;
     end if; 
     
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '考评计算前完整性检查失败！'||SQLERRM;
   END prc_Check_DeptKpiScore;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Hos_Evaluate
   || 功能描述 ：医院考评计算
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Hos_Evaluate(  prm_group_id          IN   NUMBER         --集团
                               ,prm_hos_id            IN   NUMBER         --医院
                               ,prm_copy_code         IN   VARCHAR2       --账套
                               ,prm_acc_year          IN   VARCHAR2       --年度   
                               ,prm_acc_month         IN   VARCHAR2       --月份
                               ,prm_goal_code         IN   VARCHAR2       --目标编码
                               ,prm_AppCode           Out  Number         --执行代码
                               ,prm_ErrTxt            Out  Varchar2       --错误信息 
                              ) 
   IS
     --定义变量
     n_record_exist      number(4)                                  ; --容错   
   begin 
     --初始化变量       
     prm_AppCode     := def_OK;  
     prm_ErrTxt      := '计算成功!';  
   
     --1、检查计算前所有信息维护完整性
     prc_Check_HosKpiScore(  prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度   
                            ,prm_acc_month              --月份
                            ,prm_goal_code              --目标编码
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息 
                           ) 
     ;
     
     if prm_AppCode <> def_OK then
       return;
     end if;
     
     --2、生成医院KPI指标考评计算表数据
     prc_Insert_HosKpiScore(   prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度   
                              ,prm_acc_month              --月份
                              ,prm_goal_code              --目标编码
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息 
                             ) 
     ;
       
     if prm_AppCode <> def_OK then
       return;
     end if;
     
     --3、计算医院KPI指标考评计算表数据
     prc_Calc_HosKpiScore(   prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度   
                            ,prm_acc_month              --月份
                            ,prm_goal_code              --目标编码
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息 
                           ) 
     ;
       
     if prm_AppCode <> def_OK then
       return;
     end if;
     
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '医院绩效考评计算失败！'||SQLERRM;
      
   END prc_Hos_Evaluate;                             
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Insert_HosKpiScore
   || 功能描述 ：生成医院KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Insert_HosKpiScore(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度   
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_goal_code         IN   VARCHAR2       --目标编码
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                     ) 
           
   IS
     --定义变量
     n_record_exist      number(4)                                  ; --容错   
   begin
     --初始化变量 
     prm_AppCode    := def_OK ;
     n_record_exist := 0      ;
     
     select count(1)
       into n_record_exist
       from PRM_Hos_KPI_SCORE t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.goal_code = prm_goal_code
      ;
     
     --先删除数据再插入
     if n_record_exist > 1 then 
        delete 
          from PRM_HOS_KPI_SCORE  t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.acc_year  = prm_acc_year
            and t.acc_month = prm_acc_month
            and t.goal_code = prm_goal_code
          ; 
     end if;     
     
     --生成医院KPI指标考评计算表数据
     insert 
       into PRM_HOS_KPI_SCORE(
                     GROUP_ID       
                    ,HOS_ID         
                    ,COPY_CODE      
                    ,ACC_YEAR       
                    ,ACC_MONTH      
                    ,GOAL_CODE      
                    ,KPI_CODE       
                    ,check_hos_id        
                    ,SUPER_KPI_CODE 
                    ,ORDER_NO       
                    ,KPI_LEVEL      
                    ,IS_LAST        
                    ,KPI_SCORE      
                    ,IS_AUDIT   
                    )
         select  GROUP_ID      
                ,HOS_ID         
                ,COPY_CODE      
                ,ACC_YEAR       
                ,ACC_MONTH      
                ,GOAL_CODE      
                ,KPI_CODE       
                ,check_hos_id        
                ,SUPER_KPI_CODE 
                ,ORDER_NO       
                ,KPI_LEVEL      
                ,IS_LAST        
                ,0 as KPI_SCORE 
                ,0 as IS_AUDIT     
          from PRM_HOS_SCHEME t
         where GROUP_ID   = prm_group_id  
           and HOS_ID     = prm_hos_id
           and COPY_CODE  = prm_copy_code  
           and ACC_YEAR   = prm_acc_year
           and ACC_MONTH  = prm_acc_month
           and GOAL_CODE  = prm_goal_code
           ;   
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '医院绩效方案未制定！['||prm_goal_code||']';
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '医院考评计算表时失败！'||SQLERRM;
      
   END prc_Insert_HosKpiScore;  

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Calc_HosKpiScore
   || 功能描述 ：计算医院KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Calc_HosKpiScore(  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度   
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_goal_code         IN   VARCHAR2       --目标编码
                                   ,prm_AppCode           Out  Number         --执行代码
                                   ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                  ) 
           
   IS
     --定义计算公式游标
     CURSOR cur_prm_hos_kpi_score  (  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year        IN   VARCHAR2       --开始年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_goal_code         IN   VARCHAR2       --目标编码
                                    )   
       IS        
        select t1.check_hos_id          --医院ID
             , t1.KPI_CODE              --指标编码
             , t1.GOAL_VALUE            --目标值
             , t1.FULL_SCORE            --满分标准
             , t1.GRADE_METH_CODE       --评分方法
             , t2.kpi_value             --实际值
          from PRM_HOS_SCHEME t1
          left join PRM_HOS_KPI_VALUE t2
            on t1.group_id = t2.group_id
           and t1.hos_id = t2.hos_id
           and t1.copy_code = t2.copy_code
           and t1.acc_year  = t2.acc_year
           and t1.acc_month = t2.acc_month
           and t1.goal_code = t2.goal_code
           and t1.kpi_code  = t2.kpi_code
           and t1.check_hos_id  = t2.check_hos_id
         where t1.group_id  = prm_group_id
           and t1.HOS_ID    = prm_hos_id
           and t1.COPY_CODE = prm_copy_code
           and t1.ACC_YEAR  = prm_acc_year
           and t1.ACC_MONTH = prm_acc_month
           and t1.GOAL_CODE = prm_goal_code
           and t1.is_last = 1
           ;
     
     --定义计算公式游标
     CURSOR cur_prm_hos_kpi_score_led  (  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year        IN   VARCHAR2       --开始年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_goal_code         IN   VARCHAR2       --目标编码
                                        )   
       IS        
        select t1.check_hos_id          --医院ID
             , t1.KPI_CODE              --指标编码
             , t1.kpi_score             --KPI得分
          from prm_hos_kpi_score t1
         where t1.group_id  = prm_group_id
           and t1.HOS_ID    = prm_hos_id
           and t1.COPY_CODE = prm_copy_code
           and t1.ACC_YEAR  = prm_acc_year
           and t1.ACC_MONTH = prm_acc_month
           and t1.GOAL_CODE = prm_goal_code
           and t1.is_last = 0
           ;
           
     --定义变量
     V_KPI_CODE          PRM_HOS_SCHEME.Kpi_Code%type         ;
     V_CHECK_HOS_ID      PRM_HOS_SCHEME.Check_Hos_Id%type     ;
     V_GOAL_VALUE        PRM_HOS_SCHEME.Goal_Value%type       ;
     V_FULL_SCORE        PRM_HOS_SCHEME.Full_Score%type       ;
     V_GRADE_METH_CODE   PRM_HOS_SCHEME.Grade_Meth_Code%type  ;
     V_KPI_VALUE         PRM_HOS_KPI_VALUE.KPI_VALUE%type     ;
     
     v_section_max       PRM_HOS_KPI_SECTION.Section%type    ;
     V_NATURE_CODE       PRM_HOS_KPI.Nature_Code%type        ; --指标性质：01正向  02：反向
     
     v_section           PRM_HOS_KPI_SECTION.Section%type    ;
     v_kpi_beg_value     PRM_HOS_KPI_SECTION.Kpi_Beg_Value%type    ;
     v_kpi_end_value     PRM_HOS_KPI_SECTION.kpi_end_value%type    ;
     v_kpi_beg_score     PRM_HOS_KPI_SECTION.kpi_beg_score%type    ;
     v_kpi_end_score     PRM_HOS_KPI_SECTION.kpi_end_score%type    ;
     
     v_kpi_beg_value_near     PRM_HOS_KPI_SECTION.Kpi_Beg_Value%type    ;  --临近区间
     v_kpi_end_value_near     PRM_HOS_KPI_SECTION.kpi_end_value%type    ;  --临近区间
     v_kpi_beg_score_near     PRM_HOS_KPI_SECTION.kpi_beg_score%type    ;  --临近区间
     v_kpi_end_score_near     PRM_HOS_KPI_SECTION.kpi_end_score%type    ;  --临近区间
     
     V_KPI_SCORE         PRM_HOS_KPI_SCORE.Kpi_Score%type          ; --KPI得分
     V_K                 numeric(20,6)                              ; --斜率
     V_B                 numeric(20,6)                              ; --截距
     
     n_record_exist      number(4)                                  ; --容错
     
     v_kpi_range_value   PRM_HOS_KPI_AD.Kpi_Range_Value%type       ; --值距
     v_kpi_range_score   PRM_HOS_KPI_AD.Kpi_Range_Score%type       ; --分距
     
     v_group_id          SYS_GROUP.Group_Id%type                   ; --集团ID
    
     v_max_kpi_value     PRM_HOS_KPI_VALUE.Kpi_Value%type          ; --最大KPI指标实际值
     v_min_kpi_value     PRM_HOS_KPI_VALUE.Kpi_Value%type          ; --最小KPI指标实际值
     
     v_SEC_CODE          PRM_HOS_KPI_SCORE.Sec_Code%type           ; --指示灯编码
     v_SEC_CODE_min      PRM_HOS_KPI_SCORE.Sec_Code%type           ; --指示灯编码(最小)
     v_SEC_CODE_max      PRM_HOS_KPI_SCORE.Sec_Code%type           ; --指示灯编码(最大)
     
     v_para_value0702    acc_para.para_value%type                   ; --参数编码
     v_para_value0703    acc_para.para_value%type                   ; --参数编码
     
     V_KPI_CODE_LED      PRM_HOS_SCHEME.Kpi_Code%type              ;
     V_CHECK_HOS_ID_LED  PRM_HOS_SCHEME.Check_Hos_Id%type               ;
     V_KPI_SCORE_LED     PRM_HOS_KPI_SCORE.Kpi_Score%type          ; --KPI得分
     
   begin
     --初始化变量 
     prm_AppCode     := def_OK       ;
     
     v_section_max   := 1            ;
     V_NATURE_CODE   := '01'         ;
     
     v_section       := 1            ;
     v_kpi_beg_value := 0            ;
     v_kpi_end_value := 0            ;
     v_kpi_beg_score := 0            ;
     v_kpi_end_score := 0            ;
     
     v_kpi_beg_value_near := 0       ;
     v_kpi_end_value_near := 0       ;
     v_kpi_beg_score_near := 0       ;
     v_kpi_end_score_near := 0       ;
     
     V_KPI_SCORE     := 0            ;
     V_K             := 0            ;
     V_B             := 0            ;
     
     n_record_exist  := 1            ;
     
     v_kpi_range_value :=  0         ;
     v_kpi_range_score :=  0         ;
     
     --打开游标 
     open cur_prm_hos_kpi_score(  prm_group_id               --集团
                                 ,prm_hos_id                 --医院
                                 ,prm_copy_code              --账套
                                 ,prm_acc_year               --开始年度
                                 ,prm_acc_month              --月份
                                 ,prm_goal_code              --目标编码
                               );
     LOOP
        --提取游标
        FETCH cur_prm_hos_kpi_score 
          INTO V_CHECK_HOS_ID
              ,V_KPI_CODE
              ,V_GOAL_VALUE
              ,V_FULL_SCORE
              ,V_GRADE_METH_CODE  --'01 :区间法  02:加分法 03:扣分法 04:参照法 05:比较法'
              ,V_KPI_VALUE
          ;    
          
        IF cur_prm_hos_kpi_score%NOTFOUND THEN
           if cur_prm_hos_kpi_score%isopen then 
              CLOSE cur_prm_hos_kpi_score;  
           end if;
           EXIT;
        END IF;
        
        --获取指标性质 01:正向 02:反向
        select nvl(NATURE_CODE,'01') 
          into V_NATURE_CODE
          from PRM_hos_KPI t
         where t.group_id  = prm_group_id
           and t.HOS_ID    = prm_hos_id
           and t.COPY_CODE = prm_copy_code
           and t.ACC_YEAR  = prm_acc_year
           and t.GOAL_CODE = prm_goal_code
           and t.kpi_code  = V_KPI_CODE 
         ;  
        
        --区间法
        IF V_GRADE_METH_CODE = '01' THEN
          
          --获取最大区间号
          select max(section)
            into v_section_max
            from PRM_HOS_KPI_SECTION t
           where t.group_id     = prm_group_id
             and t.HOS_ID       = prm_hos_id
             and t.COPY_CODE    = prm_copy_code
             and t.ACC_YEAR     = prm_acc_year
             and t.ACC_MONTH    = prm_acc_month
             and t.GOAL_CODE    = prm_goal_code
             and t.check_hos_id = V_CHECK_HOS_ID
             and t.kpi_code     = V_KPI_CODE
            ;
           
           if V_NATURE_CODE = '01' then   --正向
             
               select  count(1)
                 into  n_record_exist  
                  from PRM_HOS_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.check_hos_id   = V_CHECK_HOS_ID
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value < kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value >= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value >= kpi_beg_value   and v_kpi_value < kpi_end_value)
                                or (kpi_beg_value = kpi_end_value  and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                 ; 
                 
                if n_record_exist > 1 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '区间维护不连续！KPI代码['||v_kpi_code||']';
                   return;
                end if;
                
                if n_record_exist = 0 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '评分标准维护不完整，指标值未落到任何区间！KPI代码['||v_kpi_code||']';
                   return;
                end if;        
               --获取区间值  
               select  t.section
                      ,nvl(t.kpi_beg_value,0)
                      ,nvl(t.kpi_end_value,0)
                      ,nvl(t.kpi_beg_score,0)
                      ,nvl(t.kpi_end_score,0)
                 into  v_section   
                      ,v_kpi_beg_value 
                      ,v_kpi_end_value 
                      ,v_kpi_beg_score
                      ,v_kpi_end_score   
                  from PRM_HOS_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.check_hos_id   = V_CHECK_HOS_ID
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value < kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value >= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value >= kpi_beg_value   and v_kpi_value < kpi_end_value)
                                or (kpi_beg_value = kpi_end_value  and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                   and rownum = 1    
                  ;
                  
                --第一区间指标得分计算       
                if v_section = 1 then
                    if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                    elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给结束值对应得分
                       V_KPI_SCORE := v_kpi_end_score;       
                       
                    elsif v_kpi_beg_value <> 0 then  --如果第一区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;
                       
                    else   --按临近区间比例计算
                        if v_section_max <= 2 then    --区间小于两个时按临近区间计算无意义
                           --当实际值 < 结束值 给最小分数，否则给最大分数  
                           if V_KPI_VALUE < v_kpi_end_value then
                              V_KPI_SCORE := v_kpi_beg_score ;
                           else  
                              V_KPI_SCORE := v_kpi_end_score ;
                           end if;  
                        end if;
                          
                        if v_section_max > 2 then
                            --提取第二区间的斜率及截距
                            select   nvl(t.kpi_beg_value,0)
                                    ,nvl(t.kpi_end_value,0)
                                    ,nvl(t.kpi_beg_score,0)
                                    ,nvl(t.kpi_end_score,0)
                               into  v_kpi_beg_value_near 
                                    ,v_kpi_end_value_near 
                                    ,v_kpi_beg_score_near
                                    ,v_kpi_end_score_near   
                                from PRM_HOS_KPI_SECTION t
                               where t.group_id  = prm_group_id
                                 and t.hos_id    = prm_hos_id
                                 and t.copy_code = prm_copy_code
                                 and t.acc_year  = prm_acc_year
                                 and t.acc_month = prm_acc_month
                                 and t.goal_code = prm_goal_code
                                 and t.check_hos_id = V_CHECK_HOS_ID
                                 and t.kpi_code  = v_kpi_code
                                 and t.section   = 2
                                 and rownum      = 1
                              ;
                              
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值 < 结束值 给最小分数，否则给最大分数  
                                if V_KPI_VALUE < v_kpi_end_value then
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_end_score ;
                                end if;   
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near );
                                
                                V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;
                            end if;  
                      end if; --<<按临近区间计算>>
                        
                    end if;
                end if; --<<第一区间计算结束>>    
                
                --最大区间指标得分计算
                if v_section = v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                  
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;    
                       
                   elsif v_kpi_end_value <> 0 then  --如果最大区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;    
                   else
                       if v_section_max <= 2 then   --区间小于两个时按临近区间计算无意义
                          --当实际值>开始值 给最大分值  
                          if V_KPI_VALUE > v_kpi_beg_value then
                             V_KPI_SCORE := v_kpi_end_score ;
                          else  
                             V_KPI_SCORE := v_kpi_beg_score ;
                          end if;   
                       end if;
                       
                       if v_section_max > 2 then 
                          --提取倒数第二区间的斜率及截距
                          select   nvl(t.kpi_beg_value,0)
                                  ,nvl(t.kpi_end_value,0)
                                  ,nvl(t.kpi_beg_score,0)
                                  ,nvl(t.kpi_end_score,0)
                             into  v_kpi_beg_value_near 
                                  ,v_kpi_end_value_near 
                                  ,v_kpi_beg_score_near
                                  ,v_kpi_end_score_near   
                              from PRM_HOS_KPI_SECTION t
                             where t.group_id  = prm_group_id
                               and t.hos_id    = prm_hos_id
                               and t.copy_code = prm_copy_code
                               and t.acc_year  = prm_acc_year
                               and t.acc_month = prm_acc_month
                               and t.goal_code = prm_goal_code
                               and t.check_hos_id = V_CHECK_HOS_ID
                               and t.kpi_code  = v_kpi_code
                               and t.section   = v_section_max -1
                               and rownum      = 1
                            ;
                            
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值>开始值 给最大分值  
                                if V_KPI_VALUE > v_kpi_beg_value then
                                   V_KPI_SCORE := v_kpi_end_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                end if;   
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near);
                                
                                V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                           end if;  
                       end if;--<<临近区间计算结束>>     
                   end if; 
                end if; --<<最大区间计算结束>>
                
                --中间区间指标得分计算
                if v_section > 1 and  v_section < v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score   then  --如果指标分相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;
                   else
                           
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                            
                       V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                            
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                   end if; 
                end if;  --<<中间区间计算结束>>
                
                
             end if;   --<<正向指标计算结束>>       
  

          if V_NATURE_CODE = '02' then   --反向
            
               select  count(1)
                 into  n_record_exist  
                  from PRM_HOS_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.check_hos_id   = V_CHECK_HOS_ID
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value > kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value <= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value <= kpi_beg_value  and v_kpi_value > kpi_end_value)
                                or (kpi_beg_value = kpi_end_value and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                 ; 
                 
                if n_record_exist > 1 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '区间维护不连续！KPI代码['||v_kpi_code||']';
                   return;
                end if;
                
                if n_record_exist = 0 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '评分标准维护不完整，指标值未落到任何区间！KPI代码['||v_kpi_code||']';
                   return;
                end if; 
                            
               --获取区间值  
               select  t.section
                      ,nvl(t.kpi_beg_value,0)
                      ,nvl(t.kpi_end_value,0)
                      ,nvl(t.kpi_beg_score,0)
                      ,nvl(t.kpi_end_score,0)
                 into  v_section   
                      ,v_kpi_beg_value 
                      ,v_kpi_end_value 
                      ,v_kpi_beg_score
                      ,v_kpi_end_score   
                  from PRM_HOS_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.check_hos_id = V_CHECK_HOS_ID
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value > kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value <= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value <= kpi_beg_value  and v_kpi_value > kpi_end_value)
                                or (kpi_beg_value = kpi_end_value and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                   and rownum = 1    
                  ;
                  
                --第一区间指标得分计算       
                if v_section = 1 then
                    if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                    elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给结束值对应得分
                       V_KPI_SCORE := v_kpi_end_score;   
                           
                    elsif v_kpi_beg_value <> 0 then  --如果第一区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                       
                    else   --按临近区间比例计算
                        if v_section_max <= 2 then    --区间小于两个时按临近区间计算无意义
                           --当实际值 > 终止值 给开始分，否则给结束分  
                           if V_KPI_VALUE > v_kpi_end_value then
                              V_KPI_SCORE := v_kpi_beg_score ;
                           else  
                              V_KPI_SCORE := v_kpi_end_score ;
                           end if;  
                        end if;
                          
                        if v_section_max > 2 then
                            --提取第二区间的斜率及截距
                            select   nvl(t.kpi_beg_value,0)
                                    ,nvl(t.kpi_end_value,0)
                                    ,nvl(t.kpi_beg_score,0)
                                    ,nvl(t.kpi_end_score,0)
                               into  v_kpi_beg_value_near 
                                    ,v_kpi_end_value_near 
                                    ,v_kpi_beg_score_near
                                    ,v_kpi_end_score_near   
                                from PRM_HOS_KPI_SECTION t
                               where t.group_id  = prm_group_id
                                 and t.hos_id    = prm_hos_id
                                 and t.copy_code = prm_copy_code
                                 and t.acc_year  = prm_acc_year
                                 and t.acc_month = prm_acc_month
                                 and t.goal_code = prm_goal_code
                                 and t.check_hos_id = V_CHECK_HOS_ID
                                 and t.kpi_code  = v_kpi_code
                                 and t.section   = 2
                                 and rownum      = 1
                              ;
                              
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值 > 开始值 给结束分，否则给开始分  
                                if V_KPI_VALUE > v_kpi_end_value then
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_end_score ;
                                end if;  
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near);
                                
                                V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;
                            end if;  
                      end if; --<<按临近区间计算>>
                        
                    end if;
                end if; --<<第一区间计算结束>>    
                
                --最大区间指标得分计算
                if v_section = v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                  
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;    
                       
                   elsif v_kpi_end_value <> 0 then  --如果最大区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;    
                   else
                       if v_section_max <= 2 then   --区间小于两个时按临近区间计算无意义
                          --当实际值<开始值 给最大分值 ,否则给开始分 
                          if V_KPI_VALUE < v_kpi_beg_value then
                             V_KPI_SCORE := v_kpi_end_score ;
                          else  
                             V_KPI_SCORE := v_kpi_beg_score ;
                          end if;   
                       end if;
                       
                       if v_section_max > 2 then 
                          --提取倒数第二区间的斜率及截距
                          select   nvl(t.kpi_beg_value,0)
                                  ,nvl(t.kpi_end_value,0)
                                  ,nvl(t.kpi_beg_score,0)
                                  ,nvl(t.kpi_end_score,0)
                             into  v_kpi_beg_value_near 
                                  ,v_kpi_end_value_near 
                                  ,v_kpi_beg_score_near
                                  ,v_kpi_end_score_near   
                              from PRM_HOS_KPI_SECTION t
                             where t.group_id  = prm_group_id
                               and t.hos_id    = prm_hos_id
                               and t.copy_code = prm_copy_code
                               and t.acc_year  = prm_acc_year
                               and t.acc_month = prm_acc_month
                               and t.goal_code = prm_goal_code
                               and t.check_hos_id = V_CHECK_HOS_ID
                                and t.kpi_code  = v_kpi_code
                               and t.section   = v_section_max -1
                               and rownum      = 1
                            ;
                            
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值<开始值 给最大分值 ,否则给开始分 
                                if V_KPI_VALUE < v_kpi_beg_value then
                                   V_KPI_SCORE := v_kpi_end_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                end if;     
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near);
                                
                                V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                           end if;  
                       end if;--<<临近区间计算结束>>     
                   end if; 
                end if; --<<最大区间计算结束>>
                
                --中间区间指标得分计算
                if v_section > 1 and  v_section < v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score   then  --如果指标分相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;
                   else
                           
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                            
                       V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                            
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                   end if; 
                end if;  --<<中间区间计算结束>>
                
             end if;   --<<区间法反向指标计算结束>> 
             
        END IF;--<<区间法计算结束>>
        
        IF V_GRADE_METH_CODE = '02' THEN --加分法
          
            --提取加分法评分标准
            select t.kpi_range_value
                  ,t.kpi_range_score 
              into v_kpi_range_value 
                  ,v_kpi_range_score 
              from PRM_HOS_KPI_AD t
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.goal_code = prm_goal_code
               and t.check_hos_id = V_CHECK_HOS_ID
               and t.kpi_code  = V_KPI_CODE
               and rownum = 1
             ;  
             
             if V_NATURE_CODE = '01' then   --正向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
             if V_NATURE_CODE = '02' then   --反向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
        END IF;--<<加分法计算结束>>
        
        IF V_GRADE_METH_CODE = '03' THEN --扣分法
          
            --提取扣分法评分标准
            select t.kpi_range_value
                  ,t.kpi_range_score 
              into v_kpi_range_value 
                  ,v_kpi_range_score 
              from PRM_HOS_KPI_AD t
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.goal_code = prm_goal_code
               and t.check_hos_id   = V_CHECK_HOS_ID
               and t.kpi_code  = V_KPI_CODE
               and rownum = 1
             ;  
             
             if V_NATURE_CODE = '01' then   --正向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
             if V_NATURE_CODE = '02' then   --反向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
        END IF;--<<扣分法计算结束>>
        
        IF V_GRADE_METH_CODE = '04' THEN --参照法 实际值/目标值 * 满分标准
          
           if V_NATURE_CODE = '01' then  --正向    
              
              --当实际值与目标值分别在两个方向时，实际值>目标值 则 满分 ，否则0分   
              if V_KPI_VALUE *  V_GOAL_VALUE <= 0 then 
                 if V_KPI_VALUE >= V_GOAL_VALUE then
                    V_KPI_SCORE := V_FULL_SCORE ;
                 else
                    V_KPI_SCORE := 0 ; 
                 end if;  
              else      
                 V_KPI_SCORE := V_KPI_VALUE / V_GOAL_VALUE * V_FULL_SCORE;
              end if;   
           end if; --<<正向计算结束>>
           
           if V_NATURE_CODE = '02' then  --反向      
             
              --当实际值与目标值分别在两个方向时，实际值<目标值 则 满分 ，否则0分 
              if V_KPI_VALUE *  V_GOAL_VALUE <= 0 then 
                  if V_KPI_VALUE <= V_GOAL_VALUE then
                    V_KPI_SCORE := V_FULL_SCORE ;
                 else
                    V_KPI_SCORE := 0 ; 
                 end if;  
              else        
                 V_KPI_SCORE :=  V_GOAL_VALUE /  V_KPI_VALUE * V_FULL_SCORE;
              end if;   
           end if; --<<正向计算结束>>
           
               
        END IF;--<<参照法计算结束>>
        
        IF V_GRADE_METH_CODE = '05' THEN --比较法 指标值同类科室最大为满分，其他按比例计算得分
           
           if V_NATURE_CODE = '01' then  --正向
              
               --提取同类医院最大KPI指标值
               select max(t.KPI_VALUE) 
                 into v_max_kpi_value
                 from PRM_HOS_KPI_VALUE t
                where t.group_id  = prm_group_id
                  and t.hos_id    = prm_hos_id
                  and t.copy_code = prm_copy_code     
                  and t.goal_code = prm_goal_code
                  and t.acc_year  = prm_acc_year
                  and t.acc_month = prm_acc_month
                  and t.kpi_code  = V_KPI_CODE
                  and t.check_hos_id  in ( select t1.hos_id 
                                             from hos_info t1
                                            where t1.group_id   = prm_group_id
                                              and t1.is_stop = 0
                                              and t1.is_last = 1
                                         )
                 ;
                 
                 --当实际值与最佳医院指标值分别在两个方向时，实际值>=最佳值 则 满分 ，否则0分   
                 if V_KPI_VALUE *  v_max_kpi_value <= 0 then    
                    if V_KPI_VALUE >= v_max_kpi_value then 
                       V_KPI_SCORE := V_FULL_SCORE ;
                    else
                       V_KPI_SCORE := 0 ; 
                    end if;
                 else
                    V_KPI_SCORE := V_KPI_VALUE / v_max_kpi_value * V_FULL_SCORE;   
                 end if;           
           end if; --<<比较法正向计算结束>>
           
           if V_NATURE_CODE = '02' then  --反向
              --提取同类医院最大KPI指标值
              select min(t.KPI_VALUE) 
                into v_min_kpi_value
                from PRM_HOS_KPI_VALUE t
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and t.goal_code = prm_goal_code
                 and t.acc_year  = prm_acc_year
                 and t.acc_month = prm_acc_month
                 and t.kpi_code  = V_KPI_CODE
                 and t.check_hos_id  in ( select t1.hos_id 
                                             from hos_info t1
                                            where t1.group_id   = prm_group_id
                                              and t1.is_stop = 0
                                              and t1.is_last = 1
                                        )
                ;
                 
                    
                --当实际值与最佳医院指标值分别在两个方向时，实际值<=最佳值 则 满分 ，否则0分   
                if V_KPI_VALUE *  v_min_kpi_value <= 0 then  
                   if V_KPI_VALUE <= v_min_kpi_value then 
                      V_KPI_SCORE := V_FULL_SCORE ;
                   else
                      V_KPI_SCORE := 0            ; 
                   end if;
                else
                   V_KPI_SCORE := v_min_kpi_value / V_KPI_VALUE  * V_FULL_SCORE ;   
                end if;  
           end if; --<<比较法反向计算结束>>
        END IF;--<<比较法计算结束>>
        
        --获取满分制参数 0:否 ,1:是
        select nvl(para_value,1)
          into v_para_value0703          --是否采用满分制 0:否 ,1:是
          from acc_para
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code
           and mod_code  = '07'
           and para_code = '0703'
           and rownum    = 1 
          ;
        
        if v_para_value0703 = 1 then   --满分制
           if V_KPI_SCORE > V_FULL_SCORE then 
              V_KPI_SCORE := V_FULL_SCORE ; 
           end if;
           
            if V_KPI_SCORE < 0  then 
              V_KPI_SCORE := 0 ; 
           end if;
        end if;  
        
        --对指标得分进行四舍五入,保留两位小数
        V_KPI_SCORE := round(V_KPI_SCORE,2);
        
        --获取指示灯参数,是否按指标设置 0:否 ,1:是
        select nvl(para_value,1)
          into v_para_value0702           --指标灯是否按指标设置 0:否 ,1:是
          from acc_para
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code
           and mod_code  = '07'
           and para_code = '0702'
           and rownum    = 1 
          ;
        
        --获取指示灯
        if  v_para_value0702 = 1 then
          
             n_record_exist := 0 ;
            
             select count(1)
               into n_record_exist
               from PRM_HOS_KPI_LED t 
              where t.group_id  = prm_group_id
                and t.hos_id    = prm_hos_id
                and t.copy_code = prm_copy_code     
                and t.goal_code = prm_goal_code
                and t.acc_year  = prm_acc_year
                and t.acc_month = prm_acc_month
                and t.kpi_code  = V_KPI_CODE
                and t.check_hos_id = v_check_hos_id
               ;
               
            if n_record_exist = 0 then
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '存在指标未维护指示灯！[KPI指标：'||V_KPI_CODE||']|医院ID['||to_char(v_check_hos_id)||']';
               return;
            end if;
            
            --读取指示灯最大值与最小值
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_HOS_KPI_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code     
               and t.goal_code = prm_goal_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.kpi_code  = V_KPI_CODE
               and t.check_hos_id = v_check_hos_id
            ;
            
            --读取区间指示灯
            begin
              select t.sec_code
                into v_sec_code
                from PRM_HOS_KPI_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and t.goal_code = prm_goal_code
                 and t.acc_year  = prm_acc_year
                 and t.acc_month = prm_acc_month
                 and t.kpi_code  = V_KPI_CODE
                 and t.check_hos_id   = v_check_hos_id
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE < KPI_END_SCORE)
                                                           or(V_KPI_SCORE = 0 and  V_KPI_SCORE = KPI_END_SCORE)
                                                          )
                         )                                 
                     or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE >= KPI_BEG_SCORE) 
                     or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                        and (  (V_KPI_SCORE >= KPI_BEG_SCORE and V_KPI_SCORE < KPI_END_SCORE)
                             or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE = KPI_BEG_SCORE) 
                            ) 
                        )
                     )
                 and rownum = 1 
              ;
              
           EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);   
           end ;   
        else --读取统一的指示灯设置
            n_record_exist := 0 ;
             
            select count(1)
              into n_record_exist
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            if n_record_exist = 0 then
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '未维护指示灯！';
               return;
            end if;
            
            --读取区间指示灯
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            --读取区间指示灯
            begin
              select t.sec_code
                into v_sec_code
                from PRM_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE < KPI_END_SCORE)
                                                         or(V_KPI_SCORE = 0 and  V_KPI_SCORE = KPI_END_SCORE)
                                                          )
                         )                                 
                     or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE >= KPI_BEG_SCORE) 
                     or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                        and (  (V_KPI_SCORE >= KPI_BEG_SCORE and V_KPI_SCORE < KPI_END_SCORE)
                             or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE = KPI_BEG_SCORE) 
                            ) 
                        )
                     )
                 and rownum = 1 
              ; 
              
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);    
            end ;  
        end if;
        
        --更新指标得分及指示灯
        update PRM_HOS_KPI_SCORE
           set KPI_SCORE = V_KPI_SCORE
              ,SEC_CODE  = V_SEC_CODE
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code     
           and goal_code = prm_goal_code
           and acc_year  = prm_acc_year
           and acc_month = prm_acc_month
           and kpi_code  = V_KPI_CODE
           and check_hos_id = v_check_hos_id
        ;     
     END LOOP; --<<计算末级指标得分及指灯更新结束>>
     
     if cur_prm_hos_kpi_score%isopen then 
        CLOSE cur_prm_hos_kpi_score;  
     end if; 
     
     --1、清空非末级KPI得分
     update PRM_HOS_KPI_SCORE t1
        set kpi_score = 0
      where t1.group_id  = prm_group_id
        and t1.hos_id    = prm_hos_id
        and t1.copy_code = prm_copy_code
        and t1.acc_year  = prm_acc_year
        and t1.acc_month = prm_acc_month
        and t1.goal_code = prm_goal_code
        and t1.is_last   = 0
       ;   
     
     --2、递归更新非末级KPI得分 = 权重 * 指标得分 
     update PRM_HOS_KPI_SCORE t1
        set kpi_score =
           (select sum(round((t2.ratio * t2.kpi_score),2))
                 from  ( select a.group_id
                               ,a.hos_id
                               ,a.copy_code
                               ,a.acc_year
                               ,a.acc_month
                               ,a.goal_code
                               ,a.kpi_code
                               ,a.super_kpi_code
                               ,a.check_hos_id
                               ,a.kpi_score
                               ,b.ratio
                          from PRM_HOS_KPI_SCORE a
                          left join PRM_HOS_SCHEME b
                            on a.group_id  = b.group_id
                           and a.hos_id    = b.hos_id
                           and a.copy_code = b.copy_code
                           and a.acc_year  = b.acc_year
                           and a.acc_month = b.acc_month
                           and a.goal_code = b.goal_code
                           and a.check_hos_id = b.check_hos_id
                           and a.kpi_code  = b.kpi_code
                        ) t2 
            start with t2.group_id  = t1.group_id 
                   and t2.hos_id    = t1.hos_id 
                   and t2.copy_code = t1.copy_code
                   and t2.acc_year  = t1.acc_year 
                   and t2.acc_month = t1.acc_month
                   and t2.goal_code = t1.goal_code 
                   and t2.check_hos_id   = t1.check_hos_id
                   and t2.kpi_code  = t1.kpi_code 
                   and t2.super_kpi_code = t1.super_kpi_code
      connect by prior t2.kpi_code = t2.super_kpi_code 
             and prior t2.group_id = t2.group_id
             and prior t2.hos_id = t2.hos_id 
             and prior t2.copy_code = t2.copy_code 
             and prior t2.acc_year = t2.acc_year
             and prior t2.acc_month = t2.acc_month 
             and prior t2.goal_code = t2.goal_code
             and prior t2.check_hos_id   = t2.check_hos_id
             )
     where t1.group_id  = prm_group_id
       and t1.hos_id    = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.acc_year  = prm_acc_year
       and t1.acc_month = prm_acc_month
       and t1.goal_code = prm_goal_code
       and t1.is_last   = 0
       ;
       
     --更新非末级指标的指示灯
     
     --打开游标 
     open cur_prm_hos_kpi_score_led(  prm_group_id               --集团
                                     ,prm_hos_id                 --医院
                                     ,prm_copy_code              --账套
                                     ,prm_acc_year               --开始年度
                                     ,prm_acc_month              --月份
                                     ,prm_goal_code              --目标编码
                                    );
     LOOP
        --提取游标
        FETCH cur_prm_hos_kpi_score_led 
          INTO V_CHECK_HOS_ID_LED
              ,V_KPI_CODE_LED
              ,V_KPI_SCORE_LED
          ;    
          
        IF cur_prm_hos_kpi_score_led%NOTFOUND THEN
           if cur_prm_hos_kpi_score_led%isopen then 
              CLOSE cur_prm_hos_kpi_score_led;  
           end if;
           EXIT;
        END IF;
        
        
        
        --获取指示灯参数,是否按指标设置 0:否 ,1:是
        select nvl(para_value,1)
          into v_para_value0702           --指标灯是否按指标设置 0:否 ,1:是
          from acc_para
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code
           and mod_code  = '07'
           and para_code = '0702'
           and rownum    = 1 
          ;
          
        --获取指示灯
        if  v_para_value0702 = 1 then
            
            n_record_exist := 0 ;
            
            select count(1)
             into n_record_exist
             from PRM_HOS_KPI_LED t 
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code     
              and t.goal_code = prm_goal_code
              and t.acc_year  = prm_acc_year
              and t.acc_month = prm_acc_month
              and t.kpi_code  = V_KPI_CODE_LED
              and t.check_hos_id = V_CHECK_HOS_ID_LED
            ;
            
            if n_record_exist = 0 then 
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '存在指标未维护指示灯！[KPI指标：'||V_KPI_CODE_LED||']|医院ID['||to_char(V_CHECK_HOS_ID_LED)||']';
               return;
            end if;
            
            --读取指示灯最大值与最小值
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_HOS_KPI_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code     
               and t.goal_code = prm_goal_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.kpi_code  = V_KPI_CODE_LED
               and t.check_hos_id = V_CHECK_HOS_ID_LED
            ;
            
            --读取区间指示灯
            begin
              select t.sec_code
                into v_sec_code
                from PRM_HOS_KPI_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and t.goal_code = prm_goal_code
                 and t.acc_year  = prm_acc_year
                 and t.acc_month = prm_acc_month
                 and t.kpi_code  = V_KPI_CODE_LED
                 and t.check_hos_id = V_CHECK_HOS_ID_LED
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE_LED < KPI_END_SCORE)
                                                         or(V_KPI_SCORE_LED = 0 and  V_KPI_SCORE_LED = KPI_END_SCORE)
                                                        )
                       )                                 
                     or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE_LED >= KPI_BEG_SCORE) 
                     or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                        and (  (V_KPI_SCORE_LED >= KPI_BEG_SCORE and V_KPI_SCORE_LED < KPI_END_SCORE)
                             or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE_LED = KPI_BEG_SCORE) 
                            ) 
                        )
                     )   
                 and rownum = 1 
              ;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);   
            end ;  
        else  --读取统一区间指标判断
            n_record_exist := 0 ;
            
            select count(1)
              into n_record_exist 
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;   
            
            if n_record_exist = 0  then
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '未维护指示灯！';
               return;
            end if;
            
            --获取指示灯最大值与最小值 
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            --读取区间指示灯
            begin
              select t.sec_code
                into v_sec_code
                from PRM_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE_LED < KPI_END_SCORE)
                                                         or(V_KPI_SCORE_LED = 0 and  V_KPI_SCORE_LED = KPI_END_SCORE)
                                                        )
                       )                                 
                     or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE_LED >= KPI_BEG_SCORE) 
                     or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                        and (  (V_KPI_SCORE_LED >= KPI_BEG_SCORE and V_KPI_SCORE_LED < KPI_END_SCORE)
                             or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE_LED = KPI_BEG_SCORE) 
                            ) 
                        )
                     )   
                 and rownum = 1 
              ; 
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);    
            end ;   
        end if;
        
        --更新指标得分及指示灯
        update PRM_HOS_KPI_SCORE
           set SEC_CODE  = V_SEC_CODE
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code     
           and goal_code = prm_goal_code
           and acc_year  = prm_acc_year
           and acc_month = prm_acc_month
           and kpi_code  = V_KPI_CODE_LED
           and CHECK_HOS_ID = V_CHECK_HOS_ID_LED
         ;  
     END LOOP; --<<非末级指示灯更新结束>>
     
     if cur_prm_hos_kpi_score_led%isopen then 
        CLOSE cur_prm_hos_kpi_score_led;  
     end if; 
     prm_AppCode := def_OK;
     prm_ErrTxt := '考评计算完成！';
     
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '考评计算失败！'||SQLERRM;
      
   END prc_Calc_HosKpiScore;    

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Check_HosKpiScore
   || 功能描述 ：检查计算前所有信息维护完整性
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Check_HosKpiScore(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度   
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_goal_code         IN   VARCHAR2       --目标编码
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                   ) 
           
   IS
     --定义变量
     n_record_exist      number(4)                                  ; --容错  
     v_para_value0702    acc_para.para_value%type                   ; --参数编码 
   begin
     
     --初始化变量
     prm_AppCode      := def_OK  ;
     n_record_exist   := 0       ;
     v_para_value0702 := 0       ;
     
     --1、检查本月考评结果是否审核完成
     n_record_exist := 0 ;
     select count(1)
       into n_record_exist
       from PRM_HOS_KPI_SCORE t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.is_audit  = 1
      ;
      
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '本月考评结果已审核！';
        return;
     end if;  
     
     --2、科室绩效方案是否审核完成
     select count(1)
       into n_record_exist
       from PRM_GOAL t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.is_audit  = 1 
      ;  
     
     if n_record_exist = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '科室绩效方案未审核！';
        return;
     end if;
     
     --3、检查医院KPI指标数据是否审核完成
     select count(1)
       into n_record_exist
       from PRM_HOS_KPI_VALUE t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.is_audit  = 0 
      ;  
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '科室KPI指标数据未审核！';
        return;
     end if;
     
     --4、检查权重是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_HOS_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.ratio     = 0
     ;
        
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标权重未维护！';
        return;
     end if;  
     
     --5、检查目标值是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_HOS_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.GOAL_VALUE is null 
        and t.is_last   = 1
        and t.grade_meth_code in('02','03','04')      --加分法、扣分法、参照法 
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '评分方法为[加/扣分法及参照法]的KPI指标目标值必须维护！';
        return;
     end if;  
     
     --6、检查满分标准是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_HOS_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and nvl(t.full_score ,0) = 0  
        and t.is_last   = 1 
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标满分标准未维护！';
        return;
     end if;  
     
     --7、检查评分方法是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_HOS_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.grade_meth_code  is null   
        and t.is_last   = 1
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标评分方法未维护！';
        return;
     end if;  
     
     --8、检查区间法评分标准是否维护
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_HOS_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.grade_meth_code = '01'
        and t.is_last   = 1
        and to_char(t.check_hos_id) ||'|'|| t.kpi_code not in 
            (select to_char(t1.check_hos_id) ||'|'|| t1.kpi_code 
               from PRM_HOS_KPI_SECTION  t1
             where t1.group_id  = prm_group_id  
               and t1.hos_id    = prm_hos_id
               and t1.copy_code = prm_copy_code
               and t1.acc_year  = prm_acc_year
               and t1.acc_month = prm_acc_month
               and t1.goal_code = prm_goal_code
             )
                                                      
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在评分方法[区间法]的KPI指标,评分标准未维护！';
        return;
     end if;  
     
     --9、检查加扣分评分标准是否维护
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_HOS_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.is_last   = 1
        and t.grade_meth_code in( '02','03')
        and to_char(t.check_hos_id) ||'|'|| t.kpi_code not in 
        (select to_char(t1.check_hos_id) ||'|'|| t1.kpi_code 
           from PRM_HOS_KPI_AD  t1
          where t1.group_id  = prm_group_id  
            and t1.hos_id    = prm_hos_id
            and t1.copy_code = prm_copy_code
            and t1.acc_year  = prm_acc_year
            and t1.acc_month = prm_acc_month
            and t1.goal_code = prm_goal_code
         )
                                                      
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在评分方法[加/扣分法]的KPI指标,评分标准未维护！';
        return;
     end if; 
     
     --10、检查指示灯是否维护完成
     n_record_exist := 0 ;
     
     select nvl(para_value,1)
       into v_para_value0702           --指标灯是否按指标设置 0:否 ,1:是
       from acc_para
      where group_id  = prm_group_id
        and hos_id    = prm_hos_id
        and copy_code = prm_copy_code
        and mod_code  = '07'
        and para_code = '0702'
        and rownum    = 1 
      ;
      
     if v_para_value0702 = 1 then
         select count(1)
           into n_record_exist
           from PRM_HOS_SCHEME t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.goal_code = prm_goal_code
            and t.acc_year  = prm_acc_year
            and t.acc_month = prm_acc_month
            and to_char(t.check_hos_id) ||'|'|| t.kpi_code not in 
            (select to_char(t1.check_hos_id) ||'|'|| t1.kpi_code 
               from PRM_HOS_KPI_LED  t1
              where t1.group_id  = prm_group_id  
                and t1.hos_id    = prm_hos_id
                and t1.copy_code = prm_copy_code
                and t1.acc_year  = prm_acc_year
                and t1.acc_month = prm_acc_month
                and t1.goal_code = prm_goal_code
             )                                            
         ;
         
         if n_record_exist > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '存在KPI指标的指示灯未维护！';
            return;
         end if;    
     else
         select count(1) 
           into n_record_exist
           from PRM_LED t
          where t.group_id  =  prm_group_id
            and t.hos_id    =  prm_hos_id
            and t.copy_code = prm_copy_code
          ;
          
          if n_record_exist = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '指示灯未维护！';
            return;
          end if;  
     end if;   
        
     --11、检查KPI指标值是否维护
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_HOS_SCHEME t
      where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.goal_code = prm_goal_code
            and t.acc_year  = prm_acc_year
            and t.acc_month = prm_acc_month
            and t.is_last   = 1
            and to_char(t.check_hos_id) ||'|'|| t.kpi_code not in 
            (select to_char(t1.check_hos_id) ||'|'|| t1.kpi_code 
               from PRM_HOS_KPI_VALUE  t1
              where t1.group_id  = prm_group_id  
                and t1.hos_id    = prm_hos_id
                and t1.copy_code = prm_copy_code
                and t1.acc_year  = prm_acc_year
                and t1.acc_month = prm_acc_month
                and t1.goal_code = prm_goal_code
             ) 
     ;  
            
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标数据采集不完整！';
        return;
     end if;   
       
     
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '考评计算前完整性检查失败！'||SQLERRM;
   END prc_Check_HosKpiScore;
   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_EMP_Evaluate
   || 功能描述 ：职工考评计算
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Emp_Evaluate( prm_group_id          IN   NUMBER         --集团
                              ,prm_hos_id            IN   NUMBER         --医院
                              ,prm_copy_code         IN   VARCHAR2       --账套
                              ,prm_acc_year          IN   VARCHAR2       --年度   
                              ,prm_acc_month         IN   VARCHAR2       --月份
                              ,prm_goal_code         IN   VARCHAR2       --目标编码
                              ,prm_AppCode           Out  Number         --执行代码
                              ,prm_ErrTxt            Out  Varchar2       --错误信息 
                             ) 
   IS
     --定义变量
     n_record_exist      number(4)                                  ; --容错   
   begin 
     --初始化变量       
     prm_AppCode     := def_OK;  
     prm_ErrTxt      := '计算成功!';  
   
     --1、检查计算前所有信息维护完整性
     prc_Check_EmpKpiScore(  prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度   
                            ,prm_acc_month              --月份
                            ,prm_goal_code              --目标编码
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息 
                           ) 
     ;
     
     if prm_AppCode <> def_OK then
       return;
     end if;
     
     --2、生成职工KPI指标考评计算表数据
     prc_Insert_EmpKpiScore(   prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度   
                              ,prm_acc_month              --月份
                              ,prm_goal_code              --目标编码
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息 
                             ) 
     ;
       
     if prm_AppCode <> def_OK then
       return;
     end if;
     
     --3、计算职工KPI指标考评计算表数据
     prc_Calc_EmpKpiScore(   prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度   
                            ,prm_acc_month              --月份
                            ,prm_goal_code              --目标编码
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息 
                           ) 
     ;
       
     if prm_AppCode <> def_OK then
       return;
     end if;
     
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '职工绩效考评计算失败！'||SQLERRM;
      
   END prc_Emp_Evaluate;                             
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Insert_EmpKpiScore
   || 功能描述 ：生成职工KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Insert_EmpKpiScore(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度   
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_goal_code         IN   VARCHAR2       --目标编码
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                    ) 
           
   IS
     --定义变量
     n_record_exist      number(4)                                  ; --容错   
   begin
     --初始化变量 
     prm_AppCode    := def_OK ;
     n_record_exist := 0      ;
     
     select count(1)
       into n_record_exist
       from PRM_EMP_KPI_SCORE t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.goal_code = prm_goal_code
      ;
     
     --先删除数据再插入
     if n_record_exist > 1 then 
        delete 
          from PRM_EMP_KPI_SCORE  t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.acc_year  = prm_acc_year
            and t.acc_month = prm_acc_month
            and t.goal_code = prm_goal_code
          ; 
     end if;     
     
     --生成科室KPI指标考评计算表数据
     insert 
       into PRM_EMP_KPI_SCORE(
                     GROUP_ID       
                    ,HOS_ID         
                    ,COPY_CODE      
                    ,ACC_YEAR       
                    ,ACC_MONTH      
                    ,GOAL_CODE      
                    ,KPI_CODE       
                    ,EMP_NO        
                    ,EMP_ID      
                    ,SUPER_KPI_CODE 
                    ,ORDER_NO       
                    ,KPI_LEVEL      
                    ,IS_LAST        
                    ,KPI_SCORE      
                    ,IS_AUDIT   
                    )
         select  GROUP_ID      
                ,HOS_ID         
                ,COPY_CODE      
                ,ACC_YEAR       
                ,ACC_MONTH      
                ,GOAL_CODE      
                ,KPI_CODE       
                ,EMP_NO        
                ,EMP_ID        
                ,SUPER_KPI_CODE 
                ,ORDER_NO       
                ,KPI_LEVEL      
                ,IS_LAST        
                ,0 as KPI_SCORE 
                ,0 as IS_AUDIT     
          from PRM_EMP_SCHEME 
         where GROUP_ID   = prm_group_id  
           and HOS_ID     = prm_hos_id
           and COPY_CODE  = prm_copy_code  
           and ACC_YEAR   = prm_acc_year
           and ACC_MONTH  = prm_acc_month
           and GOAL_CODE  = prm_goal_code
           ;   
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '职工绩效方案未制定！['||prm_goal_code||']';
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '生成考评计算表时失败！'||SQLERRM;
      
   END prc_Insert_EmpKpiScore;  

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Calc_EmpKpiScore
   || 功能描述 ：计算职工KPI指标考评计算表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Calc_EmpKpiScore(  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度   
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_goal_code         IN   VARCHAR2       --目标编码
                                   ,prm_AppCode           Out  Number         --执行代码
                                   ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                  ) 
           
   IS
     --定义计算公式游标
     CURSOR cur_prm_emp_kpi_score  (  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year        IN   VARCHAR2       --开始年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_goal_code         IN   VARCHAR2       --目标编码
                                    )   
       IS        
        select t3.dept_no               --科室变更ID
             , t3.dept_id               --科室ID
             , t1.EMP_NO                --职工变更ID
             , t1.EMP_ID                --职工ID
             , t1.KPI_CODE              --指标编码
             , t1.GOAL_VALUE            --目标值
             , t1.FULL_SCORE            --满分标准
             , t1.GRADE_METH_CODE       --评分方法
             , t2.kpi_value             --实际值
          from PRM_EMP_SCHEME t1
          left join PRM_EMP_KPI_VALUE t2
            on t1.group_id = t2.group_id
           and t1.hos_id = t2.hos_id
           and t1.copy_code = t2.copy_code
           and t1.acc_year  = t2.acc_year
           and t1.acc_month = t2.acc_month
           and t1.goal_code = t2.goal_code
           and t1.kpi_code  = t2.kpi_code
           and t1.emp_no    = t2.emp_no
           and t1.emp_id    = t2.emp_id
         left join Aphi_Emp t3
            on t1.group_id  = t3.group_id
           and t1.hos_id    = t3.hos_id
           and t1.copy_code = t3.copy_code
           and t1.emp_id    = t3.emp_id
           and t3.is_stop   = 0
           and t3.is_acc    = 1
         where t1.group_id  = prm_group_id
           and t1.HOS_ID    = prm_hos_id
           and t1.COPY_CODE = prm_copy_code
           and t1.ACC_YEAR  = prm_acc_year
           and t1.ACC_MONTH = prm_acc_month
           and t1.GOAL_CODE = prm_goal_code
           and t1.is_last = 1
           ;
     
     --定义计算公式游标
     CURSOR cur_prm_emp_kpi_score_led  (  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year        IN   VARCHAR2       --开始年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_goal_code         IN   VARCHAR2       --目标编码
                                        )   
       IS        
        select t1.emp_no               --职工变更ID
             , t1.emp_id               --职工ID
             , t1.KPI_CODE             --指标编码
             , t1.kpi_score            --KPI得分
          from prm_emp_kpi_score t1
         where t1.group_id  = prm_group_id
           and t1.HOS_ID    = prm_hos_id
           and t1.COPY_CODE = prm_copy_code
           and t1.ACC_YEAR  = prm_acc_year
           and t1.ACC_MONTH = prm_acc_month
           and t1.GOAL_CODE = prm_goal_code
           and t1.is_last = 0
           ;
           
     --定义变量
     V_KPI_CODE          PRM_EMP_SCHEME.Kpi_Code%type        ;
     V_DEPT_NO           PRM_EMP_KPI.Dept_No%type            ;
     v_DEPT_ID           PRM_EMP_KPI.Dept_Id%type            ;
     V_EMP_NO            PRM_EMP_SCHEME.Emp_No%type         ;
     V_EMP_ID            PRM_EMP_SCHEME.Emp_Id%type         ;
     V_GOAL_VALUE        PRM_EMP_SCHEME.Goal_Value%type      ;
     V_FULL_SCORE        PRM_EMP_SCHEME.Full_Score%type      ;
     V_GRADE_METH_CODE   PRM_EMP_SCHEME.Grade_Meth_Code%type ;
     V_KPI_VALUE         PRM_EMP_KPI_VALUE.KPI_VALUE%type    ;
     
     v_section_max       PRM_EMP_KPI_SECTION.Section%type    ;
     V_NATURE_CODE       PRM_EMP_KPI.Nature_Code%type        ; --指标性质：01正向  02：反向
     
     v_section           PRM_EMP_KPI_SECTION.Section%type    ;
     v_kpi_beg_value     PRM_EMP_KPI_SECTION.Kpi_Beg_Value%type    ;
     v_kpi_end_value     PRM_EMP_KPI_SECTION.kpi_end_value%type    ;
     v_kpi_beg_score     PRM_EMP_KPI_SECTION.kpi_beg_score%type    ;
     v_kpi_end_score     PRM_EMP_KPI_SECTION.kpi_end_score%type    ;
     
     v_kpi_beg_value_near     PRM_EMP_KPI_SECTION.Kpi_Beg_Value%type    ;  --临近区间
     v_kpi_end_value_near     PRM_EMP_KPI_SECTION.kpi_end_value%type    ;  --临近区间
     v_kpi_beg_score_near     PRM_EMP_KPI_SECTION.kpi_beg_score%type    ;  --临近区间
     v_kpi_end_score_near     PRM_EMP_KPI_SECTION.kpi_end_score%type    ;  --临近区间
     
     V_KPI_SCORE         PRM_EMP_KPI_SCORE.Kpi_Score%type          ; --KPI得分
     V_K                 numeric(20,6)                              ; --斜率
     V_B                 numeric(20,6)                              ; --截距
     
     n_record_exist      number(4)                                  ; --容错
     
     v_kpi_range_value   PRM_EMP_KPI_AD.Kpi_Range_Value%type       ; --值距
     v_kpi_range_score   PRM_EMP_KPI_AD.Kpi_Range_Score%type       ; --分距
     
     v_max_kpi_value     PRM_EMP_KPI_VALUE.Kpi_Value%type          ; --最大KPI指标实际值
     v_min_kpi_value     PRM_EMP_KPI_VALUE.Kpi_Value%type          ; --最小KPI指标实际值
     
     v_SEC_CODE          PRM_EMP_KPI_SCORE.Sec_Code%type           ; --指示灯编码
     v_SEC_CODE_min      PRM_EMP_KPI_SCORE.Sec_Code%type           ; --指示灯编码(最小)
     v_SEC_CODE_max      PRM_EMP_KPI_SCORE.Sec_Code%type           ; --指示灯编码(最大)
     
     v_para_value0702    acc_para.para_value%type                   ; --参数编码
     v_para_value0703    acc_para.para_value%type                   ; --参数编码
     
     V_KPI_CODE_LED      PRM_EMP_SCHEME.Kpi_Code%type              ;
     V_EMP_NO_LED        PRM_EMP_SCHEME.Emp_No%type               ;
     V_EMP_ID_LED        PRM_EMP_SCHEME.Emp_Id%type               ;
     V_KPI_SCORE_LED     PRM_EMP_KPI_SCORE.Kpi_Score%type          ; --KPI得分
     
   begin
     --初始化变量 
     prm_AppCode     := def_OK       ;
     
     v_section_max   := 1            ;
     V_NATURE_CODE   := '01'         ;
     
     v_section       := 1            ;
     v_kpi_beg_value := 0            ;
     v_kpi_end_value := 0            ;
     v_kpi_beg_score := 0            ;
     v_kpi_end_score := 0            ;
     
     v_kpi_beg_value_near := 0       ;
     v_kpi_end_value_near := 0       ;
     v_kpi_beg_score_near := 0       ;
     v_kpi_end_score_near := 0       ;
     
     V_KPI_SCORE     := 0            ;
     V_K             := 0            ;
     V_B             := 0            ;
     
     n_record_exist  := 1            ;
     
     v_kpi_range_value :=  0         ;
     v_kpi_range_score :=  0         ;
     
     --打开游标 
     open cur_prm_emp_kpi_score(  prm_group_id               --集团
                                 ,prm_hos_id                 --医院
                                 ,prm_copy_code              --账套
                                 ,prm_acc_year               --开始年度
                                 ,prm_acc_month              --月份
                                 ,prm_goal_code              --目标编码
                               );
     LOOP
        --提取游标
        FETCH cur_prm_emp_kpi_score 
          INTO V_DEPT_NO
              ,v_DEPT_ID
              ,V_EMP_NO
              ,V_EMP_ID
              ,V_KPI_CODE
              ,V_GOAL_VALUE
              ,V_FULL_SCORE
              ,V_GRADE_METH_CODE  --'01 :区间法  02:加分法 03:扣分法 04:参照法 05:比较法'
              ,V_KPI_VALUE
          ;    
          
        IF cur_prm_emp_kpi_score%NOTFOUND THEN
           if cur_prm_emp_kpi_score%isopen then 
              CLOSE cur_prm_emp_kpi_score;  
           end if;
           EXIT;
        END IF;
        
        --获取指标性质 01:正向 02:反向
        select nvl(NATURE_CODE,'01') 
          into V_NATURE_CODE
          from PRM_EMP_KPI t
         where t.group_id  = prm_group_id
           and t.HOS_ID    = prm_hos_id
           and t.COPY_CODE = prm_copy_code
           and t.ACC_YEAR  = prm_acc_year
           and t.GOAL_CODE = prm_goal_code
           and t.kpi_code  = V_KPI_CODE 
           and t.dept_no   = V_DEPT_NO
           and t.dept_id   = V_DEPT_ID
         ;  
        
        --区间法
        IF V_GRADE_METH_CODE = '01' THEN
          
          --获取最大区间号
          select max(section)
            into v_section_max
            from PRM_EMP_KPI_SECTION t
           where t.group_id  = prm_group_id
             and t.HOS_ID    = prm_hos_id
             and t.COPY_CODE = prm_copy_code
             and t.ACC_YEAR  = prm_acc_year
             and t.ACC_MONTH = prm_acc_month
             and t.GOAL_CODE = prm_goal_code
             and t.emp_no    = V_EMP_NO
             and t.emp_id    = V_EMP_ID
             and t.kpi_code  = V_KPI_CODE
            ;
           
           if V_NATURE_CODE = '01' then   --正向
             
               select  count(1)
                 into  n_record_exist  
                  from PRM_EMP_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.emp_no    = V_EMP_NO
                   and t.Emp_Id    = V_EMP_ID
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value < kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value >= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value >= kpi_beg_value   and v_kpi_value < kpi_end_value)
                                or (kpi_beg_value = kpi_end_value  and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                 ; 
                 
                if n_record_exist > 1 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '区间维护不连续！KPI代码['||v_kpi_code||']';
                   return;
                end if;
                
                if n_record_exist = 0 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '评分标准维护不完整，指标值未落到任何区间！KPI代码['||v_kpi_code||']';
                   return;
                end if;        
               --获取区间值  
               select  t.section
                      ,nvl(t.kpi_beg_value,0)
                      ,nvl(t.kpi_end_value,0)
                      ,nvl(t.kpi_beg_score,0)
                      ,nvl(t.kpi_end_score,0)
                 into  v_section   
                      ,v_kpi_beg_value 
                      ,v_kpi_end_value 
                      ,v_kpi_beg_score
                      ,v_kpi_end_score   
                  from PRM_EMP_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.emp_no    = V_EMP_NO
                   and t.emp_id    = V_EMP_ID
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value < kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value >= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value >= kpi_beg_value   and v_kpi_value < kpi_end_value)
                                or (kpi_beg_value = kpi_end_value  and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                   and rownum = 1    
                  ;
                  
                --第一区间指标得分计算       
                if v_section = 1 then
                    if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                    elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给结束值对应得分
                       V_KPI_SCORE := v_kpi_end_score;       
                       
                    elsif v_kpi_beg_value <> 0 then  --如果第一区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;
                       
                    else   --按临近区间比例计算
                        if v_section_max <= 2 then    --区间小于两个时按临近区间计算无意义
                           --当实际值 < 结束值 给最小分数，否则给最大分数  
                           if V_KPI_VALUE < v_kpi_end_value then
                              V_KPI_SCORE := v_kpi_beg_score ;
                           else  
                              V_KPI_SCORE := v_kpi_end_score ;
                           end if;  
                        end if;
                          
                        if v_section_max > 2 then
                            --提取第二区间的斜率及截距
                            select   nvl(t.kpi_beg_value,0)
                                    ,nvl(t.kpi_end_value,0)
                                    ,nvl(t.kpi_beg_score,0)
                                    ,nvl(t.kpi_end_score,0)
                               into  v_kpi_beg_value_near 
                                    ,v_kpi_end_value_near 
                                    ,v_kpi_beg_score_near
                                    ,v_kpi_end_score_near   
                                from PRM_EMP_KPI_SECTION t
                               where t.group_id  = prm_group_id
                                 and t.hos_id    = prm_hos_id
                                 and t.copy_code = prm_copy_code
                                 and t.acc_year  = prm_acc_year
                                 and t.acc_month = prm_acc_month
                                 and t.goal_code = prm_goal_code
                                 and t.emp_no    = V_EMP_NO
                                 and t.emp_id    = V_EMP_ID
                                 and t.kpi_code  = v_kpi_code
                                 and t.section   = 2
                                 and rownum      = 1
                              ;
                              
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值 < 结束值 给最小分数，否则给最大分数  
                                if V_KPI_VALUE < v_kpi_end_value then
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_end_score ;
                                end if;   
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near );
                                
                                V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;
                            end if;  
                      end if; --<<按临近区间计算>>
                        
                    end if;
                end if; --<<第一区间计算结束>>    
                
                --最大区间指标得分计算
                if v_section = v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                  
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;    
                       
                   elsif v_kpi_end_value <> 0 then  --如果最大区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;    
                   else
                       if v_section_max <= 2 then   --区间小于两个时按临近区间计算无意义
                          --当实际值>开始值 给最大分值  
                          if V_KPI_VALUE > v_kpi_beg_value then
                             V_KPI_SCORE := v_kpi_end_score ;
                          else  
                             V_KPI_SCORE := v_kpi_beg_score ;
                          end if;   
                       end if;
                       
                       if v_section_max > 2 then 
                          --提取倒数第二区间的斜率及截距
                          select   nvl(t.kpi_beg_value,0)
                                  ,nvl(t.kpi_end_value,0)
                                  ,nvl(t.kpi_beg_score,0)
                                  ,nvl(t.kpi_end_score,0)
                             into  v_kpi_beg_value_near 
                                  ,v_kpi_end_value_near 
                                  ,v_kpi_beg_score_near
                                  ,v_kpi_end_score_near   
                              from PRM_EMP_KPI_SECTION t
                             where t.group_id  = prm_group_id
                               and t.hos_id    = prm_hos_id
                               and t.copy_code = prm_copy_code
                               and t.acc_year  = prm_acc_year
                               and t.acc_month = prm_acc_month
                               and t.goal_code = prm_goal_code
                               and t.emp_no    = V_EMP_NO
                               and t.emp_id    = V_EMP_ID
                               and t.kpi_code  = v_kpi_code
                               and t.section   = v_section_max -1
                               and rownum      = 1
                            ;
                            
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值>开始值 给最大分值  
                                if V_KPI_VALUE > v_kpi_beg_value then
                                   V_KPI_SCORE := v_kpi_end_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                end if;   
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near);
                                
                                V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                           end if;  
                       end if;--<<临近区间计算结束>>     
                   end if; 
                end if; --<<最大区间计算结束>>
                
                --中间区间指标得分计算
                if v_section > 1 and  v_section < v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score   then  --如果指标分相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;
                   else
                           
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                            
                       V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                            
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                   end if; 
                end if;  --<<中间区间计算结束>>
                
                
             end if;   --<<正向指标计算结束>>       
  

          if V_NATURE_CODE = '02' then   --反向
            
               select  count(1)
                 into  n_record_exist  
                  from PRM_EMP_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.emp_no    = V_EMP_NO
                   and t.emp_id    = V_EMP_ID
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value > kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value <= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value <= kpi_beg_value  and v_kpi_value > kpi_end_value)
                                or (kpi_beg_value = kpi_end_value and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                 ; 
                 
                if n_record_exist > 1 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '区间维护不连续！KPI代码['||v_kpi_code||']';
                   return;
                end if;
                
                if n_record_exist = 0 then 
                   prm_AppCode := def_WARNING;
                   prm_ErrTxt := '评分标准维护不完整，指标值未落到任何区间！KPI代码['||v_kpi_code||']';
                   return;
                end if; 
                            
               --获取区间值  
               select  t.section
                      ,nvl(t.kpi_beg_value,0)
                      ,nvl(t.kpi_end_value,0)
                      ,nvl(t.kpi_beg_score,0)
                      ,nvl(t.kpi_end_score,0)
                 into  v_section   
                      ,v_kpi_beg_value 
                      ,v_kpi_end_value 
                      ,v_kpi_beg_score
                      ,v_kpi_end_score   
                  from PRM_EMP_KPI_SECTION t
                 where t.group_id  = prm_group_id
                   and t.hos_id    = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.acc_year  = prm_acc_year
                   and t.acc_month = prm_acc_month
                   and t.goal_code = prm_goal_code
                   and t.emp_no    = V_EMP_NO
                   and t.emp_id    = V_EMP_ID
                   and t.kpi_code  = v_kpi_code
                   and (   (t.section = 1 and v_kpi_value > kpi_end_value) 
                        or (t.section = v_section_max and v_kpi_value <= kpi_beg_value) 
                        or (t.section > 1 and t.section < v_section_max 
                            and((   v_kpi_value <= kpi_beg_value  and v_kpi_value > kpi_end_value)
                                or (kpi_beg_value = kpi_end_value and v_kpi_value = kpi_beg_value )     
                               )
                            )
                        )
                   and rownum = 1    
                  ;
                  
                --第一区间指标得分计算       
                if v_section = 1 then
                    if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                    elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给结束值对应得分
                       V_KPI_SCORE := v_kpi_end_score;   
                           
                    elsif v_kpi_beg_value <> 0 then  --如果第一区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                       
                    else   --按临近区间比例计算
                        if v_section_max <= 2 then    --区间小于两个时按临近区间计算无意义
                           --当实际值 > 终止值 给开始分，否则给结束分  
                           if V_KPI_VALUE > v_kpi_end_value then
                              V_KPI_SCORE := v_kpi_beg_score ;
                           else  
                              V_KPI_SCORE := v_kpi_end_score ;
                           end if;  
                        end if;
                          
                        if v_section_max > 2 then
                            --提取第二区间的斜率及截距
                            select   nvl(t.kpi_beg_value,0)
                                    ,nvl(t.kpi_end_value,0)
                                    ,nvl(t.kpi_beg_score,0)
                                    ,nvl(t.kpi_end_score,0)
                               into  v_kpi_beg_value_near 
                                    ,v_kpi_end_value_near 
                                    ,v_kpi_beg_score_near
                                    ,v_kpi_end_score_near   
                                from PRM_EMP_KPI_SECTION t
                               where t.group_id  = prm_group_id
                                 and t.hos_id    = prm_hos_id
                                 and t.copy_code = prm_copy_code
                                 and t.acc_year  = prm_acc_year
                                 and t.acc_month = prm_acc_month
                                 and t.goal_code = prm_goal_code
                                 and t.emp_no    = V_EMP_NO
                                 and t.emp_id    = V_EMP_ID
                                 and t.kpi_code  = v_kpi_code
                                 and t.section   = 2
                                 and rownum      = 1
                              ;
                              
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值 > 开始值 给结束分，否则给开始分  
                                if V_KPI_VALUE > v_kpi_end_value then
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_end_score ;
                                end if;  
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near);
                                
                                V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;
                            end if;  
                      end if; --<<按临近区间计算>>
                        
                    end if;
                end if; --<<第一区间计算结束>>    
                
                --最大区间指标得分计算
                if v_section = v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score then  --如果相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                  
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;    
                       
                   elsif v_kpi_end_value <> 0 then  --如果最大区间明确为线段时,按比例计算
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                                
                       V_B := v_kpi_end_score - V_K * v_kpi_end_value;
                                    
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;    
                   else
                       if v_section_max <= 2 then   --区间小于两个时按临近区间计算无意义
                          --当实际值<开始值 给最大分值 ,否则给开始分 
                          if V_KPI_VALUE < v_kpi_beg_value then
                             V_KPI_SCORE := v_kpi_end_score ;
                          else  
                             V_KPI_SCORE := v_kpi_beg_score ;
                          end if;   
                       end if;
                       
                       if v_section_max > 2 then 
                          --提取倒数第二区间的斜率及截距
                          select   nvl(t.kpi_beg_value,0)
                                  ,nvl(t.kpi_end_value,0)
                                  ,nvl(t.kpi_beg_score,0)
                                  ,nvl(t.kpi_end_score,0)
                             into  v_kpi_beg_value_near 
                                  ,v_kpi_end_value_near 
                                  ,v_kpi_beg_score_near
                                  ,v_kpi_end_score_near   
                              from PRM_EMP_KPI_SECTION t
                             where t.group_id  = prm_group_id
                               and t.hos_id    = prm_hos_id
                               and t.copy_code = prm_copy_code
                               and t.acc_year  = prm_acc_year
                               and t.acc_month = prm_acc_month
                               and t.goal_code = prm_goal_code
                               and t.emp_no    = V_EMP_NO
                               and t.emp_id    = V_EMP_ID
                               and t.kpi_code  = v_kpi_code
                               and t.section   = v_section_max -1
                               and rownum      = 1
                            ;
                            
                            --临近区间如果值或分相等时
                            if  v_kpi_beg_value_near = v_kpi_end_value_near or  v_kpi_beg_score_near = v_kpi_end_score_near then  
                                
                                --当实际值<开始值 给最大分值 ,否则给开始分 
                                if V_KPI_VALUE < v_kpi_beg_value then
                                   V_KPI_SCORE := v_kpi_end_score ;
                                else  
                                   V_KPI_SCORE := v_kpi_beg_score ;
                                end if;     
                            else
                                V_K := (v_kpi_end_score_near - v_kpi_beg_score_near) / (v_kpi_end_value_near - v_kpi_beg_value_near);
                                
                                V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                                
                                V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                           end if;  
                       end if;--<<临近区间计算结束>>     
                   end if; 
                end if; --<<最大区间计算结束>>
                
                --中间区间指标得分计算
                if v_section > 1 and  v_section < v_section_max then
                   if v_kpi_beg_score = v_kpi_end_score   then  --如果指标分相等，则不需要按比例计算
                     
                       V_KPI_SCORE := v_kpi_beg_score;
                       
                   elsif v_kpi_beg_value = v_kpi_end_value then  --如果指标值相等，给开始值对应得分
                   
                       V_KPI_SCORE := v_kpi_beg_score;
                   else
                           
                       V_K := (v_kpi_end_score - v_kpi_beg_score) / (v_kpi_end_value - v_kpi_beg_value);
                            
                       V_B := v_kpi_beg_score - V_K * v_kpi_beg_value;
                            
                       V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                   end if; 
                end if;  --<<中间区间计算结束>>
                
             end if;   --<<区间法反向指标计算结束>> 
             
        END IF;--<<区间法计算结束>>
        
        IF V_GRADE_METH_CODE = '02' THEN --加分法
          
            --提取加分法评分标准
            select t.kpi_range_value
                  ,t.kpi_range_score 
              into v_kpi_range_value 
                  ,v_kpi_range_score 
              from PRM_EMP_KPI_AD t
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.goal_code = prm_goal_code
               and t.emp_no    = V_EMP_NO
               and t.emp_id    = V_EMP_ID
               and t.kpi_code  = V_KPI_CODE
               and rownum = 1
             ;  
             
             if V_NATURE_CODE = '01' then   --正向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
             if V_NATURE_CODE = '02' then   --反向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
        END IF;--<<加分法计算结束>>
        
        IF V_GRADE_METH_CODE = '03' THEN --扣分法
          
            --提取扣分法评分标准
            select t.kpi_range_value
                  ,t.kpi_range_score 
              into v_kpi_range_value 
                  ,v_kpi_range_score 
              from PRM_EMP_KPI_AD t
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.goal_code = prm_goal_code
               and t.emp_no    = V_EMP_NO
               and t.emp_id    = V_EMP_ID
               and t.kpi_code  = V_KPI_CODE
               and rownum = 1
             ;  
             
             if V_NATURE_CODE = '01' then   --正向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
             if V_NATURE_CODE = '02' then   --反向
               
                if v_kpi_range_score = 0 or v_kpi_range_value = 0 then   --相当于没有增长
                   V_KPI_SCORE := V_FULL_SCORE;
                else
                   V_K := v_kpi_range_score / v_kpi_range_value;
                            
                   V_B := V_FULL_SCORE - V_K * V_GOAL_VALUE;
                            
                   V_KPI_SCORE := V_K * V_KPI_VALUE + V_B ;   
                end if;
             end if; --<<正向计算结束>>  
             
        END IF;--<<扣分法计算结束>>
        
        IF V_GRADE_METH_CODE = '04' THEN --参照法 实际值/目标值 * 满分标准
          
           if V_NATURE_CODE = '01' then  --正向    
              
              --当实际值与目标值分别在两个方向时，实际值>目标值 则 满分 ，否则0分   
              if V_KPI_VALUE *  V_GOAL_VALUE <= 0 then 
                 if V_KPI_VALUE >= V_GOAL_VALUE then
                    V_KPI_SCORE := V_FULL_SCORE ;
                 else
                    V_KPI_SCORE := 0 ; 
                 end if;  
              else      
                 V_KPI_SCORE := V_KPI_VALUE / V_GOAL_VALUE * V_FULL_SCORE;
              end if;   
           end if; --<<正向计算结束>>
           
           if V_NATURE_CODE = '02' then  --反向      
             
              --当实际值与目标值分别在两个方向时，实际值<目标值 则 满分 ，否则0分 
              if V_KPI_VALUE *  V_GOAL_VALUE <= 0 then 
                  if V_KPI_VALUE <= V_GOAL_VALUE then
                    V_KPI_SCORE := V_FULL_SCORE ;
                 else
                    V_KPI_SCORE := 0 ; 
                 end if;  
              else        
                 V_KPI_SCORE :=  V_GOAL_VALUE /  V_KPI_VALUE * V_FULL_SCORE;
              end if;   
           end if; --<<正向计算结束>>
           
               
        END IF;--<<参照法计算结束>>
        
        IF V_GRADE_METH_CODE = '05' THEN --比较法 指标值同类科室最大为满分，其他按比例计算得分
           
           if V_NATURE_CODE = '01' then  --正向
              
               --提取同类科室最大KPI指标值
               select max(t.KPI_VALUE) 
                 into v_max_kpi_value
                 from PRM_EMP_KPI_VALUE t
                where t.group_id  = prm_group_id
                  and t.hos_id    = prm_hos_id
                  and t.copy_code = prm_copy_code     
                  and t.goal_code = prm_goal_code
                  and t.acc_year  = prm_acc_year
                  and t.acc_month = prm_acc_month
                  and t.kpi_code  = V_KPI_CODE
                  and t.emp_id   in ( select t1.emp_id 
                                         from aphi_emp t1
                                        where t1.group_id   = prm_group_id
                                          and t1.hos_id     = prm_hos_id
                                          and t1.copy_code  = prm_copy_code
                                          and t1.dept_no    = V_DEPT_NO
                                          and t1.dept_id    = v_DEPT_ID
                                     )
                 ;
                 
                 --当实际值与最佳科室指标值分别在两个方向时，实际值>=最佳值 则 满分 ，否则0分   
                 if V_KPI_VALUE *  v_max_kpi_value <= 0 then    
                    if V_KPI_VALUE >= v_max_kpi_value then 
                       V_KPI_SCORE := V_FULL_SCORE ;
                    else
                       V_KPI_SCORE := 0 ; 
                    end if;
                 else
                    V_KPI_SCORE := V_KPI_VALUE / v_max_kpi_value * V_FULL_SCORE;   
                 end if;           
           end if; --<<比较法正向计算结束>>
           
           if V_NATURE_CODE = '02' then  --反向
              --提取同类科室最大KPI指标值
              select min(t.KPI_VALUE) 
                into v_min_kpi_value
                from PRM_EMP_KPI_VALUE t
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and t.goal_code = prm_goal_code
                 and t.acc_year  = prm_acc_year
                 and t.acc_month = prm_acc_month
                 and t.kpi_code  = V_KPI_CODE
                 and t.emp_id  in ( select t1.emp_id
                                       from aphi_emp t1
                                      where t1.group_id   = prm_group_id
                                        and t1.hos_id     = prm_hos_id
                                        and t1.copy_code  = prm_copy_code
                                        and t1.dept_no    = V_DEPT_NO
                                        and t1.dept_id    = v_DEPT_ID
                                   )
                ;
                 
                    
                --当实际值与最佳科室指标值分别在两个方向时，实际值<=最佳值 则 满分 ，否则0分   
                if V_KPI_VALUE *  v_min_kpi_value <= 0 then  
                   if V_KPI_VALUE <= v_min_kpi_value then 
                      V_KPI_SCORE := V_FULL_SCORE ;
                   else
                      V_KPI_SCORE := 0            ; 
                   end if;
                else
                   V_KPI_SCORE := v_min_kpi_value / V_KPI_VALUE  * V_FULL_SCORE ;   
                end if;  
           end if; --<<比较法反向计算结束>>
        END IF;--<<比较法计算结束>>
        
         --获取满分制参数 0:否 ,1:是
        select nvl(para_value,1)
          into v_para_value0703          --是否采用满分制 0:否 ,1:是
          from acc_para
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code
           and mod_code  = '07'
           and para_code = '0703'
           and rownum    = 1 
          ;
        
        if v_para_value0703 = 1 then   --满分制
           if V_KPI_SCORE > V_FULL_SCORE then 
              V_KPI_SCORE := V_FULL_SCORE ; 
           end if;
           
            if V_KPI_SCORE < 0  then 
              V_KPI_SCORE := 0 ; 
           end if;
        end if; 
        
        --对指标得分进行四舍五入,保留两位小数
        V_KPI_SCORE := round(V_KPI_SCORE,2);
        
        --获取指示灯参数,是否按指标设置 0:否 ,1:是
        select nvl(para_value,1)
          into v_para_value0702           --指标灯是否按指标设置 0:否 ,1:是
          from acc_para
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code
           and mod_code  = '07'
           and para_code = '0702'
           and rownum    = 1 
          ;
        
        --获取指示灯
        if  v_para_value0702 = 1 then
            
            n_record_exist := 0 ;
            
            select count(1)
              into n_record_exist
              from PRM_EMP_KPI_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code     
               and t.goal_code = prm_goal_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.kpi_code  = V_KPI_CODE
               and t.emp_no    = V_EMP_NO
               and t.emp_id    = V_EMP_ID
             ;
             
            if n_record_exist = 0 then
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '存在指标未维护指示灯！[KPI指标：'||V_KPI_CODE||']|[职工ID:'||to_char(V_EMP_ID)||']';
               return;
            end if;
            
            --获取指示灯等级最大值与最小值 
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_EMP_KPI_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code     
               and t.goal_code = prm_goal_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.kpi_code  = V_KPI_CODE
               and t.emp_no    = V_EMP_NO
               and t.emp_id    = V_EMP_ID
            ;
            
            --获取区间指示灯
            begin
              select t.sec_code
                into v_sec_code
                from PRM_EMP_KPI_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and t.goal_code = prm_goal_code
                 and t.acc_year  = prm_acc_year
                 and t.acc_month = prm_acc_month
                 and t.kpi_code  = V_KPI_CODE
                 and t.emp_no    = V_EMP_NO
                 and t.emp_id    = V_EMP_ID
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE < KPI_END_SCORE)
                                                         or(V_KPI_SCORE = 0 and  V_KPI_SCORE = KPI_END_SCORE)
                                                          )
                         )                                 
                     or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE >= KPI_BEG_SCORE) 
                     or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                        and (  (V_KPI_SCORE >= KPI_BEG_SCORE and V_KPI_SCORE < KPI_END_SCORE)
                             or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE = KPI_BEG_SCORE) 
                            ) 
                        )
                     )
                 and rownum = 1 
              ;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);   
            end ;  
        else  --读取统一指示灯配置
          
            n_record_exist := 0 ;
            
            select count(1)
              into n_record_exist
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            if n_record_exist = 0 then
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '未维护指示灯！';
               return;
            end if;
            
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            --获取区间指示灯
            begin
              select t.sec_code
                into v_sec_code
                from PRM_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE < KPI_END_SCORE)
                                                           or(V_KPI_SCORE = 0 and  V_KPI_SCORE = KPI_END_SCORE)
                                                          )
                         )                                 
                     or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE >= KPI_BEG_SCORE) 
                     or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                        and (  (V_KPI_SCORE >= KPI_BEG_SCORE and V_KPI_SCORE < KPI_END_SCORE)
                             or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE = KPI_BEG_SCORE) 
                            ) 
                        )
                     )
                 and rownum = 1 
              ;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);   
            end ;
        end if;
        
        --更新指标得分及指示灯
        update PRM_EMP_KPI_SCORE
           set KPI_SCORE = V_KPI_SCORE
              ,SEC_CODE  = V_SEC_CODE
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code     
           and goal_code = prm_goal_code
           and acc_year  = prm_acc_year
           and acc_month = prm_acc_month
           and kpi_code  = V_KPI_CODE
           and emp_no    = V_EMP_NO
           and emp_id    = V_EMP_ID     
        ;     
     END LOOP; --<<计算末级指标得分及指灯更新结束>>
     
     if cur_prm_emp_kpi_score%isopen then 
        CLOSE cur_prm_emp_kpi_score;  
     end if; 
     
     --1、清空非末级KPI得分
     update PRM_EMP_KPI_SCORE t1
        set kpi_score = 0
      where t1.group_id  = prm_group_id
        and t1.hos_id    = prm_hos_id
        and t1.copy_code = prm_copy_code
        and t1.acc_year  = prm_acc_year
        and t1.acc_month = prm_acc_month
        and t1.goal_code = prm_goal_code
        and t1.is_last   = 0
       ;   
     
     --2、递归更新非末级KPI得分 = 权重 * 指标得分 
     update PRM_EMP_KPI_SCORE t1
        set kpi_score =
           (select sum(round((t2.ratio * t2.kpi_score),2))
                 from  ( select a.group_id
                               ,a.hos_id
                               ,a.copy_code
                               ,a.acc_year
                               ,a.acc_month
                               ,a.goal_code
                               ,a.kpi_code
                               ,a.super_kpi_code
                               ,a.emp_no
                               ,a.emp_id
                               ,a.kpi_score
                               ,b.ratio
                          from PRM_EMP_KPI_SCORE a
                          left join PRM_EMP_SCHEME b
                            on a.group_id  = b.group_id
                           and a.hos_id    = b.hos_id
                           and a.copy_code = b.copy_code
                           and a.acc_year  = b.acc_year
                           and a.acc_month = b.acc_month
                           and a.goal_code = b.goal_code
                           and a.emp_no    = b.emp_no
                           and a.emp_id    = b.emp_id
                           and a.kpi_code  = b.kpi_code
                        ) t2 
            start with t2.group_id  = t1.group_id 
                   and t2.hos_id    = t1.hos_id 
                   and t2.copy_code = t1.copy_code
                   and t2.acc_year  = t1.acc_year 
                   and t2.acc_month = t1.acc_month
                   and t2.goal_code = t1.goal_code 
                   and t2.emp_no    = t1.emp_no
                   and t2.emp_id    = t1.emp_id
                   and t2.kpi_code  = t1.kpi_code 
                   and t2.super_kpi_code = t1.super_kpi_code
      connect by prior t2.kpi_code = t2.super_kpi_code 
             and prior t2.group_id = t2.group_id
             and prior t2.hos_id = t2.hos_id 
             and prior t2.copy_code = t2.copy_code 
             and prior t2.acc_year = t2.acc_year
             and prior t2.acc_month = t2.acc_month 
             and prior t2.goal_code = t2.goal_code
             and prior t2.emp_no    = t2.emp_no
             and prior t2.emp_id    = t2.emp_id
             )
     where t1.group_id  = prm_group_id
       and t1.hos_id    = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.acc_year  = prm_acc_year
       and t1.acc_month = prm_acc_month
       and t1.goal_code = prm_goal_code
       and t1.is_last   = 0
       ;
       
     --更新非末级指标的指示灯
     
     --打开游标 
     open cur_prm_emp_kpi_score_led(  prm_group_id               --集团
                                     ,prm_hos_id                 --医院
                                     ,prm_copy_code              --账套
                                     ,prm_acc_year               --开始年度
                                     ,prm_acc_month              --月份
                                     ,prm_goal_code              --目标编码
                                   );
     LOOP
        --提取游标
        FETCH cur_prm_emp_kpi_score_led 
          INTO V_EMP_NO_LED
              ,V_EMP_ID_LED
              ,V_KPI_CODE_LED
              ,V_KPI_SCORE_LED
          ;    
          
        IF cur_prm_emp_kpi_score_led%NOTFOUND THEN
           if cur_prm_emp_kpi_score_led%isopen then 
              CLOSE cur_prm_emp_kpi_score_led;  
           end if;
           EXIT;
        END IF;
        
        
        
        --获取指示灯参数,是否按指标设置 0:否 ,1:是
        select nvl(para_value,1)
          into v_para_value0702           --指标灯是否按指标设置 0:否 ,1:是
          from acc_para
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code
           and mod_code  = '07'
           and para_code = '0702'
           and rownum    = 1 
          ;
          
        --获取指示灯
        if  v_para_value0702 = 1 then
          
            n_record_exist := 0 ;
            
            select count(1)
              into n_record_exist
              from PRM_EMP_KPI_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code     
               and t.goal_code = prm_goal_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.kpi_code  = V_KPI_CODE_LED
               and t.emp_no    = V_EMP_NO_LED
               and t.emp_id    = V_EMP_ID_LED
            ;
            
            if n_record_exist = 0 then 
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '存在指标未维护指示灯！[KPI指标：'||V_EMP_NO_LED||']|[职工ID:'||to_char(V_EMP_ID_LED)||']';
               return;
            end if;
            
            --获取指示灯等级最大值与最小值
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_EMP_KPI_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code     
               and t.goal_code = prm_goal_code
               and t.acc_year  = prm_acc_year
               and t.acc_month = prm_acc_month
               and t.kpi_code  = V_KPI_CODE_LED
               and t.emp_no    = V_EMP_NO_LED
               and t.emp_id    = V_EMP_ID_LED
            ;
            --获取区间指示灯
            begin
              select t.sec_code
                into v_sec_code
                from PRM_EMP_KPI_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and t.goal_code = prm_goal_code
                 and t.acc_year  = prm_acc_year
                 and t.acc_month = prm_acc_month
                 and t.kpi_code  = V_KPI_CODE_LED
                 and t.emp_no    = V_EMP_NO_LED
                 and t.emp_id    = V_EMP_ID_LED
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE_LED < KPI_END_SCORE)
                                                         or(V_KPI_SCORE_LED = 0 and  V_KPI_SCORE_LED = KPI_END_SCORE)
                                                        )
                       )                                 
                     or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE_LED >= KPI_BEG_SCORE) 
                     or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                        and (  (V_KPI_SCORE_LED >= KPI_BEG_SCORE and V_KPI_SCORE_LED < KPI_END_SCORE)
                             or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE_LED = KPI_BEG_SCORE) 
                            ) 
                        )
                     )  
                 and rownum = 1 
              ;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);    
            end ;   
        else
            n_record_exist := 0 ;
        
            select count(1)
              into n_record_exist
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            if n_record_exist = 0 then
               prm_AppCode := def_WARNING;
               prm_ErrTxt := '未维护指示灯！';
               return;
            end if;
            
            --获取指示灯等级最大值与最小值
            select min(sec_code)
                  ,max(sec_code) 
              into v_sec_code_min
                  ,v_SEC_CODE_max  
              from PRM_LED t 
             where t.group_id  = prm_group_id
               and t.hos_id    = prm_hos_id
               and t.copy_code = prm_copy_code   
            ;  
            
            --获取区间指示灯
            begin
              select t.sec_code
                into v_sec_code
                from PRM_LED t 
               where t.group_id  = prm_group_id
                 and t.hos_id    = prm_hos_id
                 and t.copy_code = prm_copy_code     
                 and ( (t.sec_code = v_sec_code_min and (  (V_KPI_SCORE_LED < KPI_END_SCORE)
                                                         or(V_KPI_SCORE_LED = 0 and  V_KPI_SCORE_LED = KPI_END_SCORE)
                                                        )
                       )                                 
                     or(t.sec_code = v_SEC_CODE_max and V_KPI_SCORE_LED >= KPI_BEG_SCORE) 
                     or(    t.sec_code > v_sec_code_min  and t.sec_code < v_SEC_CODE_max
                        and (  (V_KPI_SCORE_LED >= KPI_BEG_SCORE and V_KPI_SCORE_LED < KPI_END_SCORE)
                             or(KPI_BEG_SCORE = KPI_END_SCORE and V_KPI_SCORE_LED = KPI_BEG_SCORE) 
                            ) 
                        )
                     )  
                 and rownum = 1 
              ; 
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
               v_sec_code := nvl(v_sec_code_min,0);   
            end ;
        end if;
        
        --更新指标得分及指示灯
        update PRM_EMP_KPI_SCORE
           set SEC_CODE  = V_SEC_CODE
         where group_id  = prm_group_id
           and hos_id    = prm_hos_id
           and copy_code = prm_copy_code     
           and goal_code = prm_goal_code
           and acc_year  = prm_acc_year
           and acc_month = prm_acc_month
           and kpi_code  = V_KPI_CODE_LED
           and emp_no    = V_EMP_NO_LED
           and emp_id    = V_EMP_ID_LED    
        ;  
     END LOOP; --<<非末级指示灯更新结束>>
     
     if cur_prm_emp_kpi_score_led%isopen then 
        CLOSE cur_prm_emp_kpi_score_led;  
     end if; 
     prm_AppCode := def_OK;
     prm_ErrTxt := '考评计算完成！';
     
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '考评计算失败！'||SQLERRM;
      
   END prc_Calc_EmpKpiScore;    

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_Check_EmpKpiScore
   || 功能描述 ：检查计算前所有信息维护完整性
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_goal_code      目标编码         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2  
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_Check_EmpKpiScore(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度   
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_goal_code         IN   VARCHAR2       --目标编码
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息 
                                   ) 
           
   IS
     --定义变量
     n_record_exist      number(4)                                  ; --容错  
     v_para_value0702    acc_para.para_value%type                   ; --参数编码 
   begin
     
     --初始化变量
     prm_AppCode      := def_OK  ;
     n_record_exist   := 0       ;
     v_para_value0702 := 0       ;
     
     --1、检查本月考评结果是否审核完成
     n_record_exist := 0 ;
     select count(1)
       into n_record_exist
       from PRM_EMP_KPI_SCORE t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.is_audit  = 1
      ;
      
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '本月考评结果已审核！';
        return;
     end if;  
     
     --2、科室绩效方案是否审核完成
     select count(1)
       into n_record_exist
       from PRM_GOAL t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.is_audit  = 1 
      ;  
     
     if n_record_exist = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '职工绩效方案未审核！';
        return;
     end if;
     
     --3、检查科室KPI指标数据是否审核完成
     select count(1)
       into n_record_exist
       from PRM_EMP_KPI_VALUE t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.is_audit  = 0 
      ;  
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '职工KPI指标数据未审核！';
        return;
     end if;
     
     --4、检查权重是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_EMP_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.ratio     = 0
     ;
        
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标权重未维护！';
        return;
     end if;  
     
     --5、检查目标值是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_EMP_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.GOAL_VALUE is null 
        and t.is_last   = 1
        and t.grade_meth_code in('02','03','04')      --加分法、扣分法、参照法 
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '评分方法为[加/扣分法及参照法]的KPI指标目标值必须维护！';
        return;
     end if;  
     
     --6、检查满分标准是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_EMP_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and nvl(t.full_score ,0) = 0  
        and t.is_last   = 1 
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标满分标准未维护！';
        return;
     end if;  
     
     --7、检查评分方法是否维护完整
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_EMP_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.grade_meth_code  is null   
        and t.is_last   = 1
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标评分方法未维护！';
        return;
     end if;  
     
     --8、检查区间法评分标准是否维护
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_EMP_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.grade_meth_code = '01'
        and t.is_last   = 1
        and to_char(t.emp_id) ||'|'|| t.kpi_code not in 
            (select to_char(t1.emp_id) ||'|'|| t1.kpi_code 
               from PRM_EMP_KPI_SECTION  t1
             where t1.group_id  = prm_group_id  
               and t1.hos_id    = prm_hos_id
               and t1.copy_code = prm_copy_code
               and t1.acc_year  = prm_acc_year
               and t1.acc_month = prm_acc_month
               and t1.goal_code = prm_goal_code
             )
                                                      
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在评分方法[区间法]的KPI指标,评分标准未维护！';
        return;
     end if;  
     
     --9、检查加扣分评分标准是否维护
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_EMP_SCHEME t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.goal_code = prm_goal_code
        and t.acc_year  = prm_acc_year
        and t.acc_month = prm_acc_month
        and t.is_last   = 1
        and t.grade_meth_code in( '02','03')
        and to_char(t.emp_id) ||'|'|| t.kpi_code not in 
        (select to_char(t1.emp_id) ||'|'|| t1.kpi_code 
           from PRM_EMP_KPI_AD  t1
          where t1.group_id  = prm_group_id  
            and t1.hos_id    = prm_hos_id
            and t1.copy_code = prm_copy_code
            and t1.acc_year  = prm_acc_year
            and t1.acc_month = prm_acc_month
            and t1.goal_code = prm_goal_code
         )
                                                      
     ;
     
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在评分方法[加/扣分法]的KPI指标,评分标准未维护！';
        return;
     end if; 
     
     --10、检查指示灯是否维护完成
     n_record_exist := 0 ;
     
     select nvl(para_value,1)
       into v_para_value0702           --指标灯是否按指标设置 0:否 ,1:是
       from acc_para
      where group_id  = prm_group_id
        and hos_id    = prm_hos_id
        and copy_code = prm_copy_code
        and mod_code  = '07'
        and para_code = '0702'
        and rownum    = 1 
      ;
      
     if v_para_value0702 = 1 then
         select count(1)
           into n_record_exist
           from PRM_EMP_SCHEME t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.goal_code = prm_goal_code
            and t.acc_year  = prm_acc_year
            and t.acc_month = prm_acc_month
            and to_char(t.emp_id) ||'|'|| t.kpi_code not in 
            (select to_char(t1.emp_id) ||'|'|| t1.kpi_code 
               from PRM_EMP_KPI_LED  t1
              where t1.group_id  = prm_group_id  
                and t1.hos_id    = prm_hos_id
                and t1.copy_code = prm_copy_code
                and t1.acc_year  = prm_acc_year
                and t1.acc_month = prm_acc_month
                and t1.goal_code = prm_goal_code
             )                                            
         ;
         
         if n_record_exist > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '存在KPI指标的指示灯未维护！';
            return;
         end if;    
     else
         select count(1) 
           into n_record_exist
           from PRM_LED t
          where t.group_id  =  prm_group_id
            and t.hos_id    =  prm_hos_id
            and t.copy_code = prm_copy_code
          ;
          
          if n_record_exist = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '指示灯未维护！';
            return;
          end if;  
     end if;   
        
     --11、检查KPI指标值是否维护
     n_record_exist := 0 ;
     
     select count(1)
       into n_record_exist
       from PRM_EMP_SCHEME t
      where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.goal_code = prm_goal_code
            and t.acc_year  = prm_acc_year
            and t.acc_month = prm_acc_month
            and t.is_last   = 1
            and to_char(t.emp_id) ||'|'|| t.kpi_code not in 
            (select to_char(t1.emp_id) ||'|'|| t1.kpi_code 
               from PRM_EMP_KPI_VALUE  t1
              where t1.group_id  = prm_group_id  
                and t1.hos_id    = prm_hos_id
                and t1.copy_code = prm_copy_code
                and t1.acc_year  = prm_acc_year
                and t1.acc_month = prm_acc_month
                and t1.goal_code = prm_goal_code
             ) 
     ;  
            
     if n_record_exist > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在KPI指标数据采集不完整！';
        return;
     end if;   
       
     
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '考评计算前完整性检查失败！'||SQLERRM;
   END prc_Check_EmpKpiScore;
end PKG_PRM_APP;
				
	]]></sql>
	
</root>

