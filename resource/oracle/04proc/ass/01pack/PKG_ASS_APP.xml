<?xml version="1.0" encoding="UTF-8" ?>
<root>

	<sql id="PKG_ASS_APP" type="proc"><![CDATA[
	CREATE OR REPLACE PACKAGE PKG_ASS_APP AS

   /*-------------------------------------------------------------------------*/
   /* 变量声明区                                                              */
   /*-------------------------------------------------------------------------*/
   def_OK                    CONSTANT NUMBER      := 0;            -- 成功
   def_ERR                   CONSTANT NUMBER      := -1 ;          -- 系统错误
   def_WARNING               CONSTANT NUMBER      := 100;          -- 系统警告

   --定义卡片结构体
   TYPE type_rec_card IS RECORD(
          Naturs_Code            Ass_Naturs.Naturs_Code%type                    --资产性质
         ,ASS_CARD_NO            ASS_CARD_SPECIAL.Ass_Card_No%type              --卡片号
         ,PRICE                  ASS_CARD_SPECIAL.Price%type                    --原值
         ,NOW_DEPRE_MONEY        ASS_DEPRE_ACC_SPECIAL.Now_Depre_Amount%type    --本期折旧
         ,NOW_MANAGE_DEPRE       ASS_DEPRE_MANAGE_SPECIAL.Now_Depre_Amount%type --本期分摊
         ,ADD_DEPRE_MONEY        ASS_CARD_SPECIAL.Depre_Money%type              --累计折旧
         ,ADD_MANAGE_DEPRE       ASS_DEPRE_MANAGE_SPECIAL.Add_Depre_Amount%type --累计分摊
         ,ADD_DEPRE_MONTH        ASS_CARD_SPECIAL.Add_Depre_Month%type          --累计折旧月数
         ,ADD_MANAGE_MONTH       ASS_DEPRE_MANAGE_SPECIAL.Add_Depre_Month%type  --累计分摊月数
         ,CUR_MONEY              ASS_CARD_SPECIAL.Cur_Money%type                --现值
         ,FORE_MONEY             ASS_CARD_SPECIAL.Fore_Money%type               --预留残值
         ,USE_STATE              ASS_CARD_SPECIAL.Use_State%type                --使用状态
         ,DEPRE_METHOD           ASS_CARD_SPECIAL.Depr_Method%type              --折旧方法
         ,ACC_DEPRE_AMOUNT       ASS_CARD_SPECIAL.Acc_Depre_Amount%type         --折旧年限
         ,MANAGE_DEPRE_METHOD    ASS_CARD_SPECIAL.Manage_Depr_Method%type       --分摊方法
         ,MANAGE_DEPRE_AMOUNT    ASS_CARD_SPECIAL.Acc_Depre_Amount%type         --分摊年限
         ,BACK_ADD_DEPRE_MONEY   ASS_CARD_SPECIAL.Depre_Money%type              --冲减累计折旧
         ,BACK_ADD_MANAGE_DEPRE  ASS_CARD_SPECIAL.Depre_Money%type              --冲减累计分摊
         ,IN_DATE                ASS_CARD_SPECIAL.In_Date%type                  --入库日期
         ,NOTE                   ASS_CARD_SPECIAL.Note%type                     --备注
        );

   --构建卡片二维表
   TYPE type_tab_card IS TABLE OF type_rec_card INDEX BY BINARY_INTEGER;

   --定义卡片结构体[存储计算折旧用]
   TYPE type_rec_card_source IS RECORD(
          Naturs_Code            Ass_Naturs.Naturs_Code%type                    --资产性质
         ,ASS_CARD_NO            ASS_CARD_SPECIAL.Ass_Card_No%type              --卡片号
         ,SOURCE_ID              ASS_DEPRE_ACC_SPECIAL.Source_Id%type           --资金来源
         ,PRICE                  ASS_CARD_SPECIAL.Price%type                    --原值
         ,NOW_DEPRE_MONEY        ASS_DEPRE_ACC_SPECIAL.Now_Depre_Amount%type    --本期折旧
         ,NOW_MANAGE_DEPRE       ASS_DEPRE_MANAGE_SPECIAL.Now_Depre_Amount%type --本期分摊
         ,ADD_DEPRE_MONEY        ASS_CARD_SPECIAL.Depre_Money%type              --累计折旧
         ,ADD_MANAGE_DEPRE       ASS_DEPRE_MANAGE_SPECIAL.Add_Depre_Amount%type --累计分摊
         ,ADD_DEPRE_MONTH        ASS_CARD_SPECIAL.Add_Depre_Month%type          --累计折旧月数
         ,ADD_MANAGE_MONTH       ASS_DEPRE_MANAGE_SPECIAL.Add_Depre_Month%type  --累计分摊月数
         ,CUR_MONEY              ASS_CARD_SPECIAL.Cur_Money%type                --现值
         ,FORE_MONEY             ASS_CARD_SPECIAL.Fore_Money%type               --预留残值
         ,USE_STATE              ASS_CARD_SPECIAL.Use_State%type                --使用状态
         ,DEPRE_METHOD           ASS_CARD_SPECIAL.Depr_Method%type              --折旧方法
         ,ACC_DEPRE_AMOUNT       ASS_CARD_SPECIAL.Acc_Depre_Amount%type         --折旧年限
         ,MANAGE_DEPRE_METHOD    ASS_CARD_SPECIAL.Manage_Depr_Method%type       --分摊方法
         ,MANAGE_DEPRE_AMOUNT    ASS_CARD_SPECIAL.Acc_Depre_Amount%type         --分摊年限
         ,BACK_ADD_DEPRE_MONEY   ASS_CARD_SPECIAL.Depre_Money%type              --冲减累计折旧
         ,BACK_ADD_MANAGE_DEPRE  ASS_CARD_SPECIAL.Depre_Money%type              --冲减累计分摊
         ,IN_DATE                ASS_CARD_SPECIAL.In_Date%type                  --入库日期
         ,NOTE                   ASS_CARD_SPECIAL.Note%type                     --备注
        );

   --构建卡片二维表
   TYPE type_tab_card_source IS TABLE OF type_rec_card_source INDEX BY BINARY_INTEGER;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadPara
   || 功能描述 ：初始化全局参数变量
   || 参数描述 ：参数标识           名称        输入/输出  类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   || 作    者 ：               完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：
   ||-------------------------------------------------------------------------*/
    Procedure prc_LoadPara(  prm_group_id          IN   NUMBER         --集团
                            ,prm_hos_id            IN   NUMBER         --医院
                            ,prm_copy_code         IN   VARCHAR2       --账套
                            ,prm_AppCode           Out  Number
                            ,prm_ErrTxt            Out  Varchar2
                           );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InitCalcStack
   || 功能描述 ：初始化计算数据栈
   || 参数描述 ：参数标识           名称        输入/输出  类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   || 作    者 ：               完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：
   ||-------------------------------------------------------------------------*/
    Procedure prc_InitCalcStack( prm_AppCode    Out Number
                                ,prm_ErrTxt     Out Varchar2
                               );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InitResultStack
   || 功能描述 ：初始化结果数据栈
   || 参数描述 ：参数标识           名称        输入/输出  类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   || 作    者 ：               完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：
   ||-------------------------------------------------------------------------*/
    Procedure prc_InitResultStack( prm_AppCode    Out Number
                                  ,prm_ErrTxt     Out Varchar2
                                  );
   /*-------------------------------------------------------------------------
   || 函数名称 ：fun_cal_num
   || 功能描述 ：计算公式中工资项个数｛以花括号分割｝
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_InputStr        字符串           IN           VARCHAR2
   ||            prm_GroupName       JSON组名         IN           VARCHAR2
   ||            prm_KeyName         键名             IN           VARCHAR2
   ||            prm_KeyValue        键值             IN           VARCHAR2
   ||            prm_KeyType         键值类型         IN           VARCHAR2
   ||            prm_GupFlag         组标识           IN           NUMBER
   ||            prm_RowFlag         行标识           IN           NUMBER
   ||            prm_KeyFlag         键标识           IN           NUMBER
   ||            prm_JsonFlag        JSON标识         IN           NUMBER
   ||
   || 返 回 值 ：                   JSON字符串       OUT           NUMBER
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   FUNCTION fun_CreateJson(prm_InputStr     IN VARCHAR2   --字符串
                          ,prm_GroupName    IN VARCHAR2   --JSON组名
                          ,prm_KeyName      IN VARCHAR2   --键名
                          ,prm_KeyValue     IN VARCHAR2   --键值
                          ,prm_KeyType      IN VARCHAR2   --键值类型 NUMBER,VARCHAR2
                          ,prm_JsonFlag     IN number     --JSON标识 1:首个  2:中间 9:末尾
                          ,prm_GupFlag      IN number     --组标识   0:仅一个 1:首个  2:中间 9:末尾
                          ,prm_RowFlag      IN number     --行标识   0:仅一个 1:首个  2:中间 9:末尾
                          ,prm_KeyFlag      IN number     --键标识   0:仅一个 1:首个  2:中间 9:末尾
                         ) RETURN VARCHAR2;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardSpecialAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreSpecialAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreSpecialAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardSpecialAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcSpecialAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreSpecialALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreSpecialALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreSpecialAll
   || 功能描述 ：根据卡片计算栈数据出栈插入折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreSpecialAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreSpecialAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardSpecialAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardSpecialAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageSpecialAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageSpecialAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageSpecialAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageSpecialAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageSpecialALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageSpecialALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreSpecialAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreSpecialAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );                                
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageSpecialAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageSpecialAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageSpecialAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageSpecialAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageSpecialAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcSpecialPortALL
   || 功能描述 ：专用设备折旧接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcSpecialPortALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardGeneralAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreGeneralAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreGeneralAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardGeneralAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcGeneralAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreGeneralALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreGeneralALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreGeneralAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreGeneralAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );                                 
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreGeneralAll
   || 功能描述 ：根据卡片计算栈数据出栈插入折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreGeneralAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreGeneralAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardGeneralAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardGeneralAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageGeneralAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageGeneralAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageGeneralAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageGeneralAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageGeneralALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageGeneralALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageGeneralAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageGeneralAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageGeneralAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageGeneralAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageGeneralAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcGeneralPortALL
   || 功能描述 ：专用设备折旧接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcGeneralPortALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardHouseAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardHouseAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreHouseAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreHouseAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardHouseAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardHouseAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcHouseAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcHouseAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreHouseALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreHouseALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
                                   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreHouseAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreHouseAll(   prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );                                

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreHouseAll
   || 功能描述 ：根据卡片计算栈数据出栈插入折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreHouseAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreHouseAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreHouseAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardHouseAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardHouseAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageHouseAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageHouseAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageHouseAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageHouseAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageHouseAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageHouseAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageHouseAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageHouseAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageHouseALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageHouseALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageHouseAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageHouseAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageHouseAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageHouseAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageHouseAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageHouseAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcHousePortALL
   || 功能描述 ：专用设备折旧接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcHousePortALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardOtherAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardOtherAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreOtherAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreOtherAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardOtherAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardOtherAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcOtherAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcOtherAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreOtherALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreOtherALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreOtherAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreOtherAll(   prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );                                
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreOtherAll
   || 功能描述 ：根据卡片计算栈数据出栈插入折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreOtherAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreOtherAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreOtherAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardOtherAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardOtherAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageOtherAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageOtherAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageOtherAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageOtherAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageOtherAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageOtherAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageOtherAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageOtherAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageOtherALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageOtherALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageOtherAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageOtherAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageOtherAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageOtherAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageOtherAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageOtherAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcOtherPortALL
   || 功能描述 ：专用设备折旧接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcOtherPortALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardInassetsAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreInassetsAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreInassetsAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardInassetsAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcInassetsAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreInassetsALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreInassetsALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreInassetsAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );                                

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreInassetsAll
   || 功能描述 ：根据卡片计算栈数据出栈插入折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreInassetsAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreInassetsAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardInassetsAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardInassetsAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageInassetsAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageInassetsAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageInassetsAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageInassetsAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageInassetsALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageInassetsALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageInassetsAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageInassetsAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageInassetsAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageInassetsAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageInassetsAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcInassetsPortALL
   || 功能描述 ：专用设备折旧接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcInassetsPortALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardLandAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardLandAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreLandAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreLandAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardLandAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardLandAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcLandAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcLandAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreLandALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreLandALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
                                   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreLandAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreLandAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );                                

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreLandAll
   || 功能描述 ：根据卡片计算栈数据出栈插入折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreLandAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreLandAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreLandAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardLandAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardLandAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageLandAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageLandAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageLandAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageLandAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageLandAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageLandAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageLandAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageLandAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageLandALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageLandALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageLandAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageLandAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageLandAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageLandAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageLandAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageLandAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcLandPortALL
   || 功能描述 ：专用设备折旧接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcLandPortALL(   prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_operator          IN   VARCHAR2       --操作员
                                   ,prm_AppCode           Out  Number         --执行代码
                                   ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardSpecialSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardSpecialSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardSpecialSingle
   || 功能描述 ：加载要计算折旧卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardSpecialSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcCardSpecialSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreSpecialSingle(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageSpecialSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageSpecialSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageSpecialSingle
   || 功能描述 ：加载要计算分摊卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageSpecialSingle( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                         );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageSpecialSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageSpecialSingle(  prm_group_id          IN   NUMBER         --集团
                                          ,prm_hos_id            IN   NUMBER         --医院
                                          ,prm_copy_code         IN   VARCHAR2       --账套
                                          ,prm_acc_year          IN   VARCHAR2       --年度
                                          ,prm_acc_month         IN   VARCHAR2       --月份
                                          ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                          ,prm_AppCode           Out  Number         --执行代码
                                          ,prm_ErrTxt            Out  Varchar2       --错误信息
                                        );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcSpecialPortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcSpecialPortSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardGeneralSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardGeneralSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardGeneralSingle
   || 功能描述 ：加载要计算折旧卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardGeneralSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreGeneralSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreGeneralSingle(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageGeneralSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageGeneralSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageGeneralSingle
   || 功能描述 ：加载要计算分摊卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageGeneralSingle( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                         );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageGeneralSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageGeneralSingle(  prm_group_id          IN   NUMBER         --集团
                                          ,prm_hos_id            IN   NUMBER         --医院
                                          ,prm_copy_code         IN   VARCHAR2       --账套
                                          ,prm_acc_year          IN   VARCHAR2       --年度
                                          ,prm_acc_month         IN   VARCHAR2       --月份
                                          ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                          ,prm_AppCode           Out  Number         --执行代码
                                          ,prm_ErrTxt            Out  Varchar2       --错误信息
                                        );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcGeneralPortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcGeneralPortSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardHouseSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardHouseSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardHouseSingle
   || 功能描述 ：加载要计算折旧卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardHouseSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreHouseSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreHouseSingle(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageHouseSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageHouseSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageHouseSingle
   || 功能描述 ：加载要计算分摊卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageHouseSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageHouseSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageHouseSingle(  prm_group_id          IN   NUMBER         --集团
                                        ,prm_hos_id            IN   NUMBER         --医院
                                        ,prm_copy_code         IN   VARCHAR2       --账套
                                        ,prm_acc_year          IN   VARCHAR2       --年度
                                        ,prm_acc_month         IN   VARCHAR2       --月份
                                        ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                        ,prm_AppCode           Out  Number         --执行代码
                                        ,prm_ErrTxt            Out  Varchar2       --错误信息
                                      );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcHousePortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcHousePortSingle( prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                     ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardOtherSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardOtherSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardOtherSingle
   || 功能描述 ：加载要计算折旧卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardOtherSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreOtherSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreOtherSingle(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                      );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageOtherSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageOtherSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageOtherSingle
   || 功能描述 ：加载要计算分摊卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageOtherSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageOtherSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageOtherSingle(  prm_group_id          IN   NUMBER         --集团
                                        ,prm_hos_id            IN   NUMBER         --医院
                                        ,prm_copy_code         IN   VARCHAR2       --账套
                                        ,prm_acc_year          IN   VARCHAR2       --年度
                                        ,prm_acc_month         IN   VARCHAR2       --月份
                                        ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                        ,prm_AppCode           Out  Number         --执行代码
                                        ,prm_ErrTxt            Out  Varchar2       --错误信息
                                      );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcOtherPortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcOtherPortSingle( prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                     ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardInassetsSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardInassetsSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreInassetsSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreInassetsSingle(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageInassetsSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageInassetsSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    );

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageInassetsSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageInassetsSingle(  prm_group_id          IN   NUMBER         --集团
                                        ,prm_hos_id            IN   NUMBER         --医院
                                        ,prm_copy_code         IN   VARCHAR2       --账套
                                        ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                        ,prm_AppCode           Out  Number         --执行代码
                                        ,prm_ErrTxt            Out  Varchar2       --错误信息
                                      );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcInassetsPortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcInassetsPortSingle( prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                     ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_SpliceJsonSingle
   || 功能描述 ：组装JSON并返回结果
   || 参数描述 ：参数标识           名称        输入/输出  类型
   ||            -------------------------------------------------------------
    ||           prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   || 作    者 ：               完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：
   ||-------------------------------------------------------------------------*/
    Procedure prc_SpliceJsonSingle(  prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                    ,prm_AppCode           Out  Number
                                    ,prm_ErrTxt            Out  Varchar2
                                   );


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreSingle
   || 功能描述 ：计算资产卡片折旧统一接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_naturs     资产性质         IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_bus_type       业务类型         IN           VARCHAR2 
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreSingle( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_ass_naturs        IN   VARCHAR2       --资产性质
                                 ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                 ,prm_bus_type          IN   VARCHAR2       --业务类型[A:申报、R:记录]
                                 ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                 ,prm_AppCode           Out  Number         --执行代码
                                 ,prm_ErrTxt            Out  Varchar2       --错误信息
                               );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreNatursALL
   || 功能描述 ：计算资产所有卡片统一接口(区分资产性质)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_naturs     资产性质         IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreNatursALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_ass_naturs        IN   VARCHAR2       --资产性质
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DelDepreNatursALL
   || 功能描述 ：回退资产所有卡片折旧统一接口(区分资产性质)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_naturs     资产性质         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DelDepreNatursALL( prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_ass_naturs        IN   VARCHAR2       --资产性质
                                   ,prm_AppCode           Out  Number         --执行代码
                                   ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreALL
   || 功能描述 ：计算资产所有卡片统一接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreALL(  prm_group_id          IN   NUMBER         --集团
                               ,prm_hos_id            IN   NUMBER         --医院
                               ,prm_copy_code         IN   VARCHAR2       --账套
                               ,prm_acc_year          IN   VARCHAR2       --年度
                               ,prm_acc_month         IN   VARCHAR2       --月份
                               ,prm_operator          IN   VARCHAR2       --操作员
                               ,prm_AppCode           Out  Number         --执行代码
                               ,prm_ErrTxt            Out  Varchar2       --错误信息
                             );
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DelDepreALL
   || 功能描述 ：回退资产所有卡片折旧统一接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DelDepreALL( prm_group_id          IN   NUMBER         --集团
                             ,prm_hos_id            IN   NUMBER         --医院
                             ,prm_copy_code         IN   VARCHAR2       --账套
                             ,prm_acc_year          IN   VARCHAR2       --年度
                             ,prm_acc_month         IN   VARCHAR2       --月份
                             ,prm_AppCode           Out  Number         --执行代码
                             ,prm_ErrTxt            Out  Varchar2       --错误信息
                             );
                             
    /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreALLAssOrInass
   || 功能描述 ：区分固定资产无形资产计算资产所有卡片统一接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_type           资产分类         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreALLAssOrInass(  prm_group_id          IN   NUMBER         --集团
                               ,prm_hos_id            IN   NUMBER         --医院
                               ,prm_copy_code         IN   VARCHAR2       --账套
                               ,prm_acc_year          IN   VARCHAR2       --年度
                               ,prm_acc_month         IN   VARCHAR2       --月份
                               ,prm_operator          IN   VARCHAR2       --操作员
                               ,prm_type              IN   VARCHAR2       --0固定资产,1无形资产
                               ,prm_AppCode           Out  Number         --执行代码
                               ,prm_ErrTxt            Out  Varchar2       --错误信息
                               
                             );
                             
                             
    /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DelDepreALLAssOrInass
   || 功能描述 ：区分固定资产和无形资产回退资产所有卡片折旧统一接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_type           资产分类         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DelDepreALLAssOrInass( prm_group_id          IN   NUMBER         --集团
                             ,prm_hos_id            IN   NUMBER         --医院
                             ,prm_copy_code         IN   VARCHAR2       --账套
                             ,prm_acc_year          IN   VARCHAR2       --年度
                             ,prm_acc_month         IN   VARCHAR2       --月份
                             ,prm_type              IN   VARCHAR2       --0固定资产,1无形资产
                             ,prm_AppCode           Out  Number         --执行代码
                             ,prm_ErrTxt            Out  Varchar2       --错误信息
                             );                                                   
END PKG_ASS_APP;

	]]></sql>
	<sql id="PKG_ASS_APP_BODY" type="proc"><![CDATA[
	create or replace package body PKG_ASS_APP AS

   /**************************重大版本修改说明*********************************
    *
    * 政策文件：《政府会计准则第3号——固定资产》
    *
    * 政策内容： 固定资产应当按月计提折旧，当月增加的固定资产，当月开始计提折旧；
    *            当月减少的固定资产，当月不再计提折旧。
    *
    * 附加内容:  增加参数05104处置申报是否冲减折旧
    *
    * 版本号：7.0          修改日期：2018-08-21       修改人: hang
    *
    ***************************************************************************/

   /*-------------------------------------------------------------------------*/
   /* 私有全局常量声明                                                        */
   /*-------------------------------------------------------------------------*/
   g_tab_card_source       type_tab_card_source     ;            --卡片资金来源
   g_tab_card_ret          type_tab_card            ;            --卡片结果栈
   g_tab_card_fill         type_tab_card_source     ;            --卡片补充栈
   g_tab_card_source_ret   type_tab_card_source     ;            --卡片资金来源栈
   g_para_05007            acc_para.para_value%type ;            --卡片计提方式
   g_para_05104            acc_para.para_value%type ;            --处置申报冲减折旧
   g_bus_type              varchar2(10)             ;            --处置类型(A:申报、R:记录）        
   g_year_month            varchar2(10)             ;            --折旧年月
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadPara
   || 功能描述 ：初始化全局参数变量
   || 参数描述 ：参数标识           名称        输入/输出  类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   || 作    者 ：               完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：
   ||-------------------------------------------------------------------------*/
    Procedure prc_LoadPara(  prm_group_id          IN   NUMBER         --集团
                            ,prm_hos_id            IN   NUMBER         --医院
                            ,prm_copy_code         IN   VARCHAR2       --账套
                            ,prm_AppCode           Out  Number
                            ,prm_ErrTxt            Out  Varchar2
                           )

    Is
    BEGIN
      prm_AppCode := def_OK         ;
      prm_ErrTxt  := '参数加载成功!';
      g_para_05007 := 1             ;
      g_para_05104 := 1             ;--新制度修改
      g_bus_type   := 'R'           ;
      
      --参数05007计提折旧方式 1:入账后计提 2：使用后计提
     select nvl(t.para_value,'1')
       into g_para_05007
       from acc_para t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.para_code = '05007'
        and rownum = 1;
     
     --新制度修改:参数05104处置申报冲减折旧：1：是 0：否
     select nvl(t.para_value,'1')
       into g_para_05104
       from acc_para t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.para_code = '05104'
        and rownum = 1;
     
    EXCEPTION
      WHEN OTHERS THEN
         g_para_05007 := 1;
         g_para_05104 := 1;--新制度修改
    END prc_LoadPara;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InitCalcStack
   || 功能描述 ：初始化计算数据栈
   || 参数描述 ：参数标识           名称        输入/输出  类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   || 作    者 ：               完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：
   ||-------------------------------------------------------------------------*/
    Procedure prc_InitCalcStack( prm_AppCode    Out Number
                                ,prm_ErrTxt     Out Varchar2
                               )

    Is
    BEGIN
      prm_AppCode := def_OK             ;
      prm_ErrTxt  := '初始化计算栈成功!';

      if g_tab_card_source.count() > 0 then
         g_tab_card_source.delete   ;
      end if;

      if g_tab_card_fill.count() > 0 then
         g_tab_card_fill.delete   ;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '初始化计算栈失败！'||SQLERRM;
    END prc_InitCalcStack;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InitResultStack
   || 功能描述 ：初始化结果数据栈
   || 参数描述 ：参数标识           名称        输入/输出  类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   || 作    者 ：               完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：
   ||-------------------------------------------------------------------------*/
    Procedure prc_InitResultStack( prm_AppCode    Out Number
                                  ,prm_ErrTxt     Out Varchar2
                               )

    Is
    BEGIN
      prm_AppCode := def_OK             ;
      prm_ErrTxt  := '初始化结果栈成功!';

      if g_tab_card_ret.count() > 0 then
         g_tab_card_ret.delete   ;
      end if;

      if g_tab_card_source_ret.count() > 0 then
         g_tab_card_source_ret.delete   ;
      end if;

    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '初始化结果栈失败！'||SQLERRM;
    END prc_InitResultStack;
   /*-------------------------------------------------------------------------
   || 函数名称 ：fun_cal_num
   || 功能描述 ：计算公式中工资项个数｛以花括号分割｝
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_InputStr        字符串           IN           VARCHAR2
   ||            prm_GroupName       JSON组名         IN           VARCHAR2
   ||            prm_KeyName         键名             IN           VARCHAR2
   ||            prm_KeyValue        键值             IN           VARCHAR2
   ||            prm_KeyType         键值类型         IN           VARCHAR2
   ||            prm_GupFlag         组标识           IN           NUMBER
   ||            prm_RowFlag         行标识           IN           NUMBER
   ||            prm_KeyFlag         键标识           IN           NUMBER
   ||            prm_JsonFlag        JSON标识         IN           NUMBER
   ||
   || 返 回 值 ：                    JSON字符串       OUT          NUMBER
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   FUNCTION fun_CreateJson(prm_InputStr     IN VARCHAR2   --字符串
                          ,prm_GroupName    IN VARCHAR2   --JSON组名
                          ,prm_KeyName      IN VARCHAR2   --键名
                          ,prm_KeyValue     IN VARCHAR2   --键值
                          ,prm_KeyType      IN VARCHAR2   --键值类型 NUMBER,VARCHAR2
                          ,prm_JsonFlag     IN number     --JSON标识 1:首个  2:中间 9:末尾
                          ,prm_GupFlag      IN number     --组标识   0:仅一个 1:首个  2:中间 9:末尾
                          ,prm_RowFlag      IN number     --行标识   0:仅一个 1:首个  2:中间 9:末尾
                          ,prm_KeyFlag      IN number     --键标识   0:仅一个 1:首个  2:中间 9:末尾
                         ) RETURN VARCHAR2

   IS
      v_JsonStr Varchar(4000);
   begin

/*********************************************************************************************************
{
  "Card":[
         {"CardNo":"P01","Price":8,"NowDepre":1,"AddDepre":2,"NowManage":1,"AddManage":2,"Cur":6,"Fore":0}
  ],
  "Source":[
             {"ID":1,"Price":6,"NowDepre":1,"AddDepre":2,"NowManage":1,"AddManage":2,"Cur":4,"Fore":0},
             {"ID":2,"Price":2,"NowDepre":1,"AddDepre":1,"NowManage":1,"AddManage":1,"Cur":1,"Fore":0}
  ]
}
*********************************************************************************************************/
      v_JsonStr := prm_InputStr ;

      if(    (prm_JsonFlag = 1)
         and ( prm_GupFlag = 1 or prm_GupFlag = 0)
         and ( prm_KeyFlag = 1 or prm_KeyFlag = 0)
        )
        then
         v_JsonStr := v_JsonStr || '{';
         v_JsonStr := v_JsonStr || CHR(10); --换行
      end if;

      --当为第一组或仅为一组，且
      if (   ( prm_RowFlag = 1 or prm_RowFlag = 0)
          and( prm_KeyFlag = 1 or prm_KeyFlag = 0)
         ) then
         v_JsonStr := v_JsonStr || CHR(32)|| CHR(32);--双空格
         v_JsonStr := v_JsonStr || '"'    || prm_GroupName   || '"' || ':[';
         v_JsonStr := v_JsonStr || CHR(10); --换行
      end if;

      --当为首个键值对或键值对仅一个时，拼四个空格+'{'
      if (prm_KeyFlag = 1 or prm_KeyFlag = 0) then
         v_JsonStr := v_JsonStr|| CHR(32)|| CHR(32)|| CHR(32)|| CHR(32);--四空格
         v_JsonStr := v_JsonStr || '{';
      end if;

      --仅一个键值对时，不拼','
      if prm_KeyFlag = 0 then
         v_JsonStr := v_JsonStr ||  '"' || prm_KeyName || '"' || ':';

         if prm_KeyType = 'NUMBER' then
            v_JsonStr := v_JsonStr ||  prm_KeyValue ;
         else
            v_JsonStr := v_JsonStr ||  '"' || prm_KeyValue || '"';
         end if;

      end if;

      --中间键值对时，拼','
      if prm_KeyFlag > 0 and prm_KeyFlag < 9 then
         v_JsonStr := v_JsonStr ||  '"' || prm_KeyName || '"' || ':';

         if prm_KeyType = 'NUMBER' then
            v_JsonStr := v_JsonStr || prm_KeyValue || ',';
         else
            v_JsonStr := v_JsonStr ||  '"' || prm_KeyValue || '"'|| ',';
         end if;

      end if;

      --如果最后一个键时，不拼','
      if prm_KeyFlag = 9 then
         v_JsonStr := v_JsonStr ||  '"' || prm_KeyName || '"' || ':';

         if prm_KeyType = 'NUMBER' then
            v_JsonStr := v_JsonStr || prm_KeyValue  ;

         else
            v_JsonStr := v_JsonStr ||  '"' || prm_KeyValue || '"'      ;

         end if;
      end if;

      --如果为仅一行或最后一行时，拼’｝'||CHR(10)
      if (     (prm_RowFlag = 0 or prm_RowFlag = 9)
           and (prm_KeyFlag = 0 or prm_KeyFlag = 9)
         ) then
          v_JsonStr := v_JsonStr || '}';
          v_JsonStr := v_JsonStr || CHR(10);
      end if;

      --如果为中间行时，拼'},'||CHR(10)
      if (     (prm_RowFlag > 0 and prm_RowFlag < 9)
           and (prm_KeyFlag = 0 or  prm_KeyFlag = 9)
         ) then
          v_JsonStr := v_JsonStr || '}';
          v_JsonStr := v_JsonStr || ',';
          v_JsonStr := v_JsonStr || CHR(10);
      end if;

      --当组为最后一组或仅为一组，且行为最后一行或仅为一行，同时键值对为最后一个或仅为一个时，拼双空格+']}'
      if (   ( prm_GupFlag = 9 or prm_GupFlag = 0)
          and( prm_RowFlag = 9 or prm_RowFlag = 0)
          and( prm_KeyFlag = 9 or prm_KeyFlag = 0)
         ) then
         v_JsonStr := v_JsonStr|| CHR(32)|| CHR(32);--双空格
         v_JsonStr := v_JsonStr || ']';
         v_JsonStr := v_JsonStr || CHR(10); --换行
      end if;

      --当组为中间组，且行为最后一行或仅为一行，同时键值对为最后一个或仅为一个时，拼双空格+']}'
      if (   ( prm_GupFlag > 0 and prm_GupFlag < 9 )
          and( prm_RowFlag = 9 or  prm_RowFlag = 0 )
          and( prm_KeyFlag = 9 or  prm_KeyFlag = 0 )
         ) then
         v_JsonStr := v_JsonStr|| CHR(32)|| CHR(32);--双空格
         v_JsonStr := v_JsonStr || ']';
         v_JsonStr := v_JsonStr || ',';
         v_JsonStr := v_JsonStr || CHR(10); --换行
      end if;

      if (    (prm_JsonFlag = 9)
          and ( prm_GupFlag = 9 or prm_GupFlag = 0)
          and ( prm_RowFlag = 9 or prm_RowFlag = 0)
          and ( prm_KeyFlag = 9 or prm_KeyFlag = 0)
          ) then
         v_JsonStr := v_JsonStr || '}';
      end if;

      return v_JsonStr;

   END fun_CreateJson;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardSpecialAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

     --v_before_year          varchar2(4)                            ;
     --v_before_month         varchar2(2)                            ;
     v_price                ASS_CARD_SPECIAL.Price%type            ;
     v_depre_money          ASS_CARD_SPECIAL.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_SPECIAL.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_SPECIAL.Fore_Money%type       ;

     v_price_source         ASS_CARD_SPECIAL.Price%type            ;
     v_depre_money_source   ASS_CARD_SPECIAL.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_SPECIAL.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_SPECIAL.Fore_Money%type       ;
     --v_depre_money_add      ASS_CARD_SPECIAL.Depre_Money%type      ;
     --v_change_depre         ASS_DEPRE_DETAIL_SPECIAL.Change_Depre%type;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '专用设备卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_special t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改:包含本月入库卡片
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_SPECIAL t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_special t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改:包含本月入库卡片
        and nvl(t1.is_depr,0)     =  1
        and ((nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
         or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         )--新制度修改:不包含本月处置卡片
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_SPECIAL t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;


     --处置申报日期不能大于处置日期
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_special t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改:包含本月入库卡片
        and nvl(t1.is_depr,0)     =  1
        and nvl(t1.use_state,0)   = '7'
        and nvl(to_char(t1.apply_date,'YYYYMM'),'000000') > nvl(to_char(t1.dispose_date,'YYYYMM'),'000000')
        and nvl(t1.cur_money,0) > 0
         ;

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在处置申报日期大于处置日期的资产!';
        return;
     end if;

     /*******************--新制度修改:要求入库当月计提折旧****************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ********************************************************************************/
     
     --校验新增资产不允许跨两月提折旧
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_SPECIAL t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改:不包含本月处置卡片
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改:包含本月入库卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算折旧的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_SPECIAL t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_SPECIAL t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_depr,0) = 1
                           and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                )--新制度修改:不包含本月处置卡片
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )--新制度修改:包含本月入库卡片
                      )
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计折旧
     /* 新制度修改:屏蔽无效变量 */
     --v_exist_flag := 0 ;

    /* select sum(t1.depre_money)
       into v_depre_money_add
       from ASS_CARD_SPECIAL t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.depre_money,0) > 0
        and nvl(t1.is_depr,0) = 1
        and nvl(t1.cur_money,0) > 0
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= v_before_year||v_before_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= v_before_year||v_before_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
            )
        and not exists(
                        select 1
                          from ASS_DEPRE_ACC_SPECIAL t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )
       \* and  not exists(select 1
                         from ASS_DEPRE_DETAIL_SPECIAL t3
                         left join ASS_DEPRE_SPECIAL t4
                            on t3.group_id = t4.group_id
                           and t3.hos_id = t4.hos_id
                           and t3.copy_code = t4.copy_code
                           and t3.CHANGE_no = t4.CHANGE_no
                         where t3.group_id    = t1.group_id
                           and t3.hos_id      = t1.hos_id
                           and t3.copy_code   = t1.copy_code
                           and t3.ass_card_no = t1.ass_card_no
                           and to_char(t4.AUDIT_DATE,'YYYYMM') >= prm_acc_year||prm_acc_month
                           and t4.state = 2     --0:新建 1:审核 2:确认
                      )*\
        ;

        select sum(t3.change_depre)
          into v_change_depre
         from ASS_DEPRE_DETAIL_SPECIAL t3
         left join ASS_DEPRE_SPECIAL t4
            on t3.group_id = t4.group_id
           and t3.hos_id = t4.hos_id
           and t3.copy_code = t4.copy_code
           and t3.CHANGE_no = t4.CHANGE_no
         where to_char(t4.AUDIT_DATE,'YYYYMM') >= prm_acc_year||prm_acc_month
           and t4.state = 2

           and not exists(
                        select 1
                          from ASS_DEPRE_ACC_SPECIAL t2
                         where t4.group_id  = t2.group_id
                           and t4.hos_id    = t2.hos_id
                           and t4.copy_code = t2.copy_code
                           and t3.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )

        ;
        if nvl(v_depre_money_add,0) - nvl(v_change_depre,0) > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提折旧或期初累计折旧未维护!';
            return;
        end if;*/


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardSpecialAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreSpecialAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreSpecialAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     n_note_count           integer                                ;
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '专用设备删除成功！';
     v_exist_flag := 0  ;
     n_note_count := 1  ;
     
     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '折旧年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_ACC_SPECIAL t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计折旧
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month                          
                      from ASS_DEPRE_ACC_SPECIAL t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop
            
            --如果本月存在含补提，累计折旧月份退2，否则退1
            if prm_acc_year || prm_acc_month = '201901' then 
               select count(1)
                 into n_note_count 
                 from ASS_DEPRE_ACC_SPECIAL t
                where t.group_id    =  prm_group_id
                  and t.hos_id      =  prm_hos_id
                  and t.copy_code   =  prm_copy_code
                  and t.depre_year  =  prm_acc_year
                  and t.depre_month =  prm_acc_month
                  and t.ass_card_no =  rec.ass_card_no
                  and nvl(t.now_depre_amount,0) > 0
                  and t.note like '%含补提%'                
                  ;
               if n_note_count > 0  then 
                  n_note_count := 2 ;
               else 
                  n_note_count := 1 ; 
               end if;  
            else
               n_note_count := 1;  
            end if;  
                    
            if rec.now_depre_amount <> 0 then
               update ASS_CARD_SPECIAL t
                  set t.depre_money = t.depre_money - rec.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - rec.now_depre_amount) - nvl(t.fore_money,0)
                     ,t.add_depre_month = nvl(t.add_depre_month,0)
                                          - (rec.max_depre_month - rec.min_depre_month 
                                             + n_note_count
                                            )
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;

        end loop;

        --还原资金来源表累计折旧
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_ACC_SPECIAL t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
               update ASS_RESOURCE_SPECIAL t
                  set t.depre_money = t.depre_money - recsource.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - recsource.now_depre_amount) - nvl(t.fore_money,0)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = recsource.ass_card_no
                  and t.source_id   = recsource.source_id
                  ;
            end if;
        end loop;

        --删除折旧表数据
        delete
          from ASS_DEPRE_ACC_SPECIAL t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备删除折旧表数据失败！'||SQLERRM;
   END prc_DeleteDepreSpecialAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardSpecialAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                /*,nvl(b.prim_money,nvl(a.price,0)) as price
                  ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                  ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                  ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                  ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
                ,t.in_date
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                          ,a.in_date
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'02' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.depre_money,0) as depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_depre_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.depr_method,'01') as depr_method
                                     ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                                     ,t1.in_date
                                from ass_card_special t1
                                left join ASS_RESOURCE_SPECIAL t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      )--新制度修改：包含本月入库卡片
                                  and nvl(t1.is_depr,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )--新制度修改：不包含本月处置卡片
                           ) a
                   /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_ACC_SPECIAL t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/        
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_SPECIAL.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_SPECIAL.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_SPECIAL.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_SPECIAL.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_SPECIAL.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_SPECIAL.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_SPECIAL.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_SPECIAL.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_SPECIAL.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_SPECIAL.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_SPECIAL.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_SPECIAL.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_SPECIAL.Add_Depre_Month%type;   --累计折旧月数
      v_in_date              ASS_CARD_SPECIAL.In_Date%type          ;      --入库日期

      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_SPECIAL.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_SPECIAL.CHANGE_Depre%type;   --累计折旧调整金额
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '专用设备卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;


     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                          ,v_in_date               --入库日期
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,不需要计算本月折旧，但需要生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,不需要计算本月计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,不需要计算本月折旧，但生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,不需要计算本月折旧，但生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 6 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
                  V_USE_STATE  := 6 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_SPECIAL t1
              left join ASS_CHANGE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_SPECIAL t1
              left join ASS_DEPRE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧
              g_tab_card_source(v_i).in_date          := v_in_date             ;      --入库日期
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片装载失败！'||SQLERRM;

   END prc_LoadCardSpecialAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcSpecialAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
         select a.Naturs_Code
               ,a.ass_card_no
               ,a.source_id
               ,a.price
               ,a.depre_money
               ,a.cur_money
               ,a.fore_money
               ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (select '02' as Naturs_Code
                   , t1.ass_card_no
                   , t1.source_id
                   , t1.price
                   , t1.depre_money
                   , t1.cur_money
                   , t1.fore_money
                   , t2.add_depre_month
              from ASS_RESOURCE_SPECIAL t1
              left join ass_card_special t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.ass_card_no = t2.ass_card_no
             where t1.cur_money   <= 0      --资金来源: 现值<=0
               and t2.cur_money   > 0       --卡片    : 现值 > 0
               and t1.group_id    =  prm_group_id
               and t1.hos_id      =  prm_hos_id
               and t1.copy_code   =  prm_copy_code
               and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      )--新制度修改：包含本月入库卡片
                    and nvl(t2.is_depr,0)          =  1
                    and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                          or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                          or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                         )--新制度修改：不包含本月处置卡片
             ) a
             left join (select t3.ass_card_no
                              ,t3.source_id
                              ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                         from ASS_DEPRE_ACC_SPECIAL t3
                        where t3.group_id    = prm_group_id
                          and t3.hos_id      = prm_hos_id
                          and t3.copy_code   = prm_copy_code
                          and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                         else prm_acc_year
                                     end
                                   )
                          and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                         else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                     end
                                    )
                         group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                  ,t3.ass_card_no,t3.source_id
                         ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;

      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_SPECIAL.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_SPECIAL.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_SPECIAL.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_SPECIAL.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_SPECIAL.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_SPECIAL.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_SPECIAL.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_SPECIAL.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_SPECIAL.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '专用设备补算卡片装载完成!'         ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_SPECIAL t1
              left join ASS_CHANGE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_SPECIAL t1
              left join ASS_DEPRE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '专用设备补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillCalcSpecialAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreSpecialALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreSpecialALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS

      --定义变量
      v_card_no              ASS_CARD_SPECIAL.Ass_Card_No%type;
      v_card_price           ASS_CARD_SPECIAL.Price%type;
      v_card_now_depre_money ASS_CARD_SPECIAL.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_SPECIAL.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_SPECIAL.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_SPECIAL.Cur_Money%type;
      v_card_fore_money      ASS_CARD_SPECIAL.Fore_Money%type;
      v_card_use_state       ASS_CARD_SPECIAL.Use_State%type;
      v_card_depr_method     ASS_CARD_SPECIAL.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_SPECIAL.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_SPECIAL.Depre_Money%type;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '专用设备计算折旧成功!'                 ;



     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_no              := '';
         v_card_price           := 0 ;
         v_card_now_depre_money := 0 ;
         v_card_add_depre_money := 0 ;
         v_card_cur_money       := 0 ;
         v_card_fore_money      := 0 ;
         v_card_add_depre_month := 0 ;
         v_BACK_ADD_DEPRE_MONEY := 0 ;
         v_card_use_state       := 0 ;
         v_card_depr_method     := '01';
         v_ACC_DEPRE_AMOUNT     := '0' ;


         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}折旧方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_DEPRE_MONTH >= g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;
                 
                 --2019年01月进行双月计提
                 if g_year_month = '201901' and to_char(g_tab_card_source(i).in_date,'YYYY-MM-DD') < '2019-01-01' then 
                    --计算本月折旧
                    if g_tab_card_source(i).ADD_DEPRE_MONTH + 2 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                    else
                       --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                       /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                       - g_tab_card_source(i).FORE_MONEY
                                                                       )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                     ,2);*/

                        g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                       )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                          - nvl(g_tab_card_source(i).ADD_DEPRE_MONTH,0)
                                                                         )
                                                                     ,2) * 2;
                        if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                           g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                        end if;
                    end if;
                    
                    --计算累计折旧月份
                    g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 2;
                    
                    if g_tab_card_source(i).ADD_DEPRE_MONTH > g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).ADD_DEPRE_MONTH := g_tab_card_source(i).ACC_DEPRE_AMOUNT*12;
                    else
                       g_tab_card_source(i).NOTE := '含补提';   
                    end if;  
                 else  
                     --计算本月折旧
                     if g_tab_card_source(i).ADD_DEPRE_MONTH + 1 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                         g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                     else
                         --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                        /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                         - g_tab_card_source(i).FORE_MONEY
                                                                         )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                       ,2);*/

                         g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                         )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                            - nvl(g_tab_card_source(i).ADD_DEPRE_MONTH,0)
                                                                           )
                                                                       ,2);
                         if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                            g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                         end if;
                     end if;

                     --计算累计折旧月份
                     g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 1;
                     
                 end if;
                 
                 --计算累计折旧
                 g_tab_card_source(i).ADD_DEPRE_MONEY :=  nvl(g_tab_card_source(i).ADD_DEPRE_MONEY,0)
                                                         +g_tab_card_source(i).NOW_DEPRE_MONEY;

                 if   g_tab_card_source(i).ADD_DEPRE_MONEY
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计折旧维护不正确!';
                    return;
                 end if;

                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;

                 --新制度修改：增加处置申报是否冲减折旧参数
                 if  ((g_para_05104 = '1' and g_tab_card_source(i).USE_STATE = '6') 
                   or g_tab_card_source(i).USE_STATE = '7' )
                  then
                    --计算冲减累计折旧
                    g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);
                 end if;  
                 
             end if; --<<平均年限法>>


             --卡片结果数据压栈
             v_j := v_j + 1 ;
             g_tab_card_source_ret(v_j).Naturs_Code      := '02'                                ;
             g_tab_card_source_ret(v_j).ASS_CARD_NO      := g_tab_card_source(i).ass_card_no    ;
             g_tab_card_source_ret(v_j).SOURCE_ID        := g_tab_card_source(i).SOURCE_ID      ;
             g_tab_card_source_ret(v_j).PRICE            := g_tab_card_source(i).PRICE          ;
             g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := g_tab_card_source(i).NOW_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := g_tab_card_source(i).ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := g_tab_card_source(i).ADD_DEPRE_MONTH;
             g_tab_card_source_ret(v_j).CUR_MONEY        := g_tab_card_source(i).CUR_MONEY;
             g_tab_card_source_ret(v_j).FORE_MONEY       := g_tab_card_source(i).FORE_MONEY;
             g_tab_card_source_ret(v_j).USE_STATE        := g_tab_card_source(i).USE_STATE;
             g_tab_card_source_ret(v_j).DEPRE_METHOD     := g_tab_card_source(i).DEPRE_METHOD;
             g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).NOTE             := g_tab_card_source(i).NOTE;
             g_tab_card_source_ret(v_j).in_date          := g_tab_card_source(i).in_date;
             
             --如果存在多张卡片且到第二张卡片时，将上一张卡片压栈
             if ( g_tab_card_source.count() > 1 and i  >  1) then
                 --当为最后一条数据 or 切换卡片时
                 if (g_tab_card_source(i).ASS_CARD_NO <>  g_tab_card_source(i-1).ASS_CARD_NO) then
                     --卡片结果数据压栈
                     v_i := v_i + 1 ;
                     g_tab_card_ret(v_i).Naturs_Code      := '02'                     ;
                     g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                     g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                     g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                     g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                     g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                     g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                     g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                     g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                     g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                     g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                     g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;
                     
                     v_card_no              := '';
                     v_card_price           := 0 ;
                     v_card_now_depre_money := 0 ;
                     v_card_add_depre_money := 0 ;
                     v_card_cur_money       := 0 ;
                     v_card_fore_money      := 0 ;
                     v_card_add_depre_month := 0 ;
                     v_BACK_ADD_DEPRE_MONEY := 0 ;
                     v_card_use_state       := 0 ;
                     v_card_depr_method     := '01';
                     v_ACC_DEPRE_AMOUNT     := '0';
               end if;
             end if;

             --计算卡片压栈数据
             v_card_no          := g_tab_card_source(i).ass_card_no ;
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_DEPRE_MONEY;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_DEPRE_MONEY;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_DEPRE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;

             --如果仅存在一张卡片或循环到最后一张卡片时，将卡片压栈
             if ( g_tab_card_source.count() > 1 and i  >  1) then
                --当最后一条数据
                if ( i = g_tab_card_source.count() )  then

                   --卡片结果数据压栈
                   v_i := v_i + 1 ;
                   g_tab_card_ret(v_i).Naturs_Code      := '02'                     ;
                   g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                   g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                   g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                   g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                   g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                   g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                   g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                   g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                   g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                   g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                   g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;

                   v_card_no              := '';
                   v_card_price           := 0 ;
                   v_card_now_depre_money := 0 ;
                   v_card_add_depre_money := 0 ;
                   v_card_cur_money       := 0 ;
                   v_card_fore_money      := 0 ;
                   v_card_add_depre_month := 0 ;
                   v_BACK_ADD_DEPRE_MONEY := 0 ;
                   v_card_use_state       := 0 ;
                   v_card_depr_method     := '01';
                   v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --如果仅为一张卡片时，卡片数据压栈
             if ( g_tab_card_source.count() = 1 )
                then
                 --卡片结果数据压栈
                 v_i := v_i + 1 ;
                 g_tab_card_ret(v_i).Naturs_Code      := '02'                     ;
                 g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                 g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                 g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                 g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                 g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                 g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                 g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                 g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                 g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                 g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                 g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;

                 v_card_no              := '';
                 v_card_price           := 0 ;
                 v_card_now_depre_money := 0 ;
                 v_card_add_depre_money := 0 ;
                 v_card_cur_money       := 0 ;
                 v_card_fore_money      := 0 ;
                 v_card_add_depre_month := 0 ;
                 v_BACK_ADD_DEPRE_MONEY := 0 ;
                 v_card_use_state       := 0 ;
                 v_card_depr_method     := '01';
                 v_ACC_DEPRE_AMOUNT     := '0';
             end if;

         end loop;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备折旧计提失败！'||SQLERRM;

   END prc_CalcDepreSpecialALL;
   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreSpecialAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreSpecialAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     v_prim_money           ASS_DEPRE_ACC_SPECIAL.Prim_Money%type  ;
     v_now_depre_amount     ASS_DEPRE_ACC_SPECIAL.Now_Depre_Amount%type;
     v_now_depre_bridge     ASS_DEPRE_ACC_SPECIAL.Now_Depre_Amount%type;
     n_count                integer                                ;
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '专用设备折旧修正检验成功！';
     v_exist_flag := 0  ;
     v_prim_money := 0  ;
     v_now_depre_amount := 0 ;
     v_now_depre_bridge := 0 ;
         
     for i in 1..g_tab_card_source_ret.count() loop
       
       --如果本次折旧与累计折旧相等，说明首次折旧，不需要与上月校验
       if g_tab_card_source_ret(i).ADD_DEPRE_MONEY = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
          continue;
       end if;  
       
       --如果已折完的卡片，需要将剩余净值全部提完，不需要与上月校验小数位
       if g_tab_card_source_ret(i).cur_money = 0 then 
          continue;
       end if;
       
       --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
       begin
          select count(1)
            into v_exist_flag
            from ASS_CHANGE_SOURCE_SPECIAL t1
            left join ASS_CHANGE_SPECIAL t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.CHANGE_date,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
             WHEN OTHERS THEN
               v_exist_flag := 0;
        end;
        
        --本月发生原值变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if;  
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select count(1)
            into v_exist_flag
            from ASS_DEPRE_SOURCE_SPECIAL t1
            left join ASS_DEPRE_SPECIAL t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
           WHEN OTHERS THEN
             v_exist_flag := 0;
        end;   
          
        --本月发生累计折旧变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if; 
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select sum(nvl(t3.prim_money,0)) as prim_money
                ,sum(nvl(t3.NOW_depre_amount,0)) as NOW_depre_amount
            into v_prim_money
                ,v_NOW_depre_amount    
           from ASS_DEPRE_ACC_SPECIAL t3
          where t3.group_id    = prm_group_id
            and t3.hos_id      = prm_hos_id
            and t3.copy_code   = prm_copy_code
            and t3.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
            and t3.source_id   = g_tab_card_source_ret(i).SOURCE_ID
            and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                           else prm_acc_year
                       end
                     )
            and t3.depre_month = (case when prm_acc_month = '01' then '12'
                           else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                       end
                      )
            ;
          EXCEPTION
           WHEN OTHERS THEN
             v_prim_money := 0       ;
             v_NOW_depre_amount := 0 ;             
        end; 
         
        --如果上月原值与本月原值不一致时，不需要进行修正校验
        if nvl(v_prim_money,0) <> g_tab_card_source_ret(i).PRICE then 
           continue;
        end if;
        
        --如果上月折旧与本月折旧完全一致，不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
           continue;
        end if;
        
        --如果上月折旧为0时，不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) = 0  then
           continue;
        end if;
        
        --如果上月折旧与本月折旧差的绝对值小于1且上月折旧数大于0时，那么取上月折旧
        if abs(nvl(v_NOW_depre_amount,0) - g_tab_card_source_ret(i).NOW_DEPRE_MONEY) < 1 
           and abs(nvl(v_NOW_depre_amount,0)) > 0  then
           g_tab_card_source_ret(i).Add_depre_money := g_tab_card_source_ret(i).Add_depre_money 
                                                    -  g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                    +  nvl(v_NOW_depre_amount,0);
           g_tab_card_source_ret(i).cur_money :=   g_tab_card_source_ret(i).cur_money 
                                                 + g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                 -  nvl(v_NOW_depre_amount,0);
                                                 
           v_now_depre_bridge :=  g_tab_card_source_ret(i).NOW_DEPRE_MONEY;
                                                                                       
           g_tab_card_source_ret(i).NOW_DEPRE_MONEY := nvl(v_NOW_depre_amount,0);
           
           for j in 1..g_tab_card_ret.count() loop
               if g_tab_card_ret(j).ASS_CARD_NO = g_tab_card_source_ret(i).ASS_CARD_NO then
                  g_tab_card_ret(j).Add_depre_money := g_tab_card_ret(j).Add_depre_money 
                                                    -  nvl(v_now_depre_bridge,0)
                                                    +  nvl(v_NOW_depre_amount,0);
                  g_tab_card_ret(j).cur_money :=   g_tab_card_ret(j).cur_money 
                                                   + nvl(v_now_depre_bridge,0)
                                                   -  nvl(v_NOW_depre_amount,0);
                                                                                                
                  g_tab_card_ret(j).NOW_DEPRE_MONEY := g_tab_card_ret(j).NOW_DEPRE_MONEY 
                                                       - nvl(v_now_depre_bridge,0)
                                                       + nvl(v_NOW_depre_amount,0);                                                       
                  exit;
               end if;           
           end loop;
           
           v_now_depre_bridge := 0 ;   
                     
        end if;     
     end loop;
     
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备折旧修正检验失败！'||SQLERRM;
   END prc_ModifyDepreSpecialAll;
   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreSpecialAll
   || 功能描述 ：根据卡片计算栈数据出栈插入折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreSpecialAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_SPECIAL.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_SPECIAL.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_SPECIAL.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_SPECIAL.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_SPECIAL.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_SPECIAL.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_SPECIAL.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_SPECIAL.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_SPECIAL.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_SPECIAL.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_SPECIAL.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_SPECIAL.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_SPECIAL.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_SPECIAL.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_SPECIAL.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_SPECIAL.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_SPECIAL.Fore_Money%type;
      V_CHANGE_depre               ASS_DEPRE_SOURCE_SPECIAL.Change_Depre%type;
      V_CHANGE_depre_note          ASS_DEPRE_SOURCE_SPECIAL.Change_Depre%type;
      V_CHANGE_depre_TOT           ASS_DEPRE_SOURCE_SPECIAL.Change_Depre%type;
      V_NOTE                       ASS_DEPRE_ACC_SPECIAL.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '专用设备折旧计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;
     V_CHANGE_depre             :=0            ;
     V_CHANGE_depre_note        :=0            ;
     V_CHANGE_depre_TOT         :=0            ;
     V_NOTE                     :=''           ;

     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;
       V_CHANGE_depre             :=0            ;
       V_CHANGE_depre_note        :=0            ;
       V_CHANGE_depre_TOT         :=0            ;
       V_NOTE                     :=''           ;

       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_SPECIAL t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;

       BEGIN
           --提取本月累计折旧变动数据
           select sum(nvl(t1.CHANGE_depre,0)) as CHANGE_depre
             into v_CHANGE_depre
            from ASS_DEPRE_SOURCE_SPECIAL t1
            left join ASS_DEPRE_SPECIAL t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ass_card_no
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
             ;
       EXCEPTION
          WHEN NO_DATA_FOUND THEN
               v_CHANGE_depre:=0;
          WHEN OTHERS THEN
             prm_AppCode := def_ERR;
             prm_ErrTxt := '专用设备折旧计提失败！'||SQLERRM;
       END;

       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_SPECIAL t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
              V_CHANGE_depre_note := V_CHANGE_depre;
           else
              --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
                 V_CHANGE_depre_note := V_CHANGE_depre - V_CHANGE_depre_TOT;
              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
                 V_CHANGE_depre_note := round(V_CHANGE_depre * v_USE_PERCENT,2);

                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                 V_CHANGE_depre_TOT    := V_CHANGE_depre_TOT    + V_CHANGE_depre_note;
              end if;
           end if;

           --如果存在冲减折旧时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;

           if V_CHANGE_depre_note <> 0 then
              V_NOTE := '含补增['||to_char(V_CHANGE_depre_note)||']';
           else
              V_NOTE := '';
           end if;

           --插入折旧数据表
           insert
             into ASS_DEPRE_ACC_SPECIAL(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,V_NOTE||g_tab_card_source_ret(i).NOTE
               );

         --如果存在冲销累计折旧时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_ACC_SPECIAL(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备折旧计提失败！'||SQLERRM;

   END prc_InsertDepreSpecialAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreSpecialAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计折旧，且为本月之前的入库的资产,需要本月产生累计折旧记录
     *
     * 当月入库，但入库单时已存累计折旧的资产，本月产生累计折旧记录。如：盘盈
     *
     * 用户按正式投入日期折旧的资产，且在入库时产生的累计折旧，本月产生累计折旧记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1:是 0:否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'02' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.depre_money,0) as depre_money
                         ,nvl(t2.cur_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                    from ass_card_special t1
                    left join ASS_RESOURCE_SPECIAL t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_depr,0)          =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.depre_money,0)      >  0
                      and (   (     nvl(t2.cur_money,0)   <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              ) --新制度修改：已提完
                           or (    (      prm_para_05007 = '2'
                                     and (to_char(t1.run_date,'YYYYMM')    > prm_acc_year||prm_acc_month)
                                     and (to_char(t1.in_date ,'YYYYMM')    < prm_acc_year||prm_acc_month )
                                    ) --新制度修改：不包含本月入库卡片
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       ) --新制度修改：不包含本月处置申报卡片
                                    or (    (to_char(t1.dispose_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )--新制度修改：不包含本月处置卡片
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                            or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              ) --新制度修改：本月处置申报、处置卡片单独处理  
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_SPECIAL.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_SPECIAL.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_SPECIAL.Depre_Money%type      ;      --累计折旧
      V_ORI_CUR_MONEY        ASS_CARD_SPECIAL.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_SPECIAL.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_SPECIAL.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_SPECIAL.Now_Depre_Amount%type;  --本期折旧
      V_ADD_DEPRE_MONEY      ASS_CARD_SPECIAL.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_SPECIAL.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_SPECIAL.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_SPECIAL.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_SPECIAL.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_SPECIAL.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_SPECIAL.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_SPECIAL.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_SPECIAL.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_SPECIAL.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_SPECIAL.Add_Depre_Month%type;   --累计折旧月数

      v_AREA_sum             ASS_SHARE_DEPT_R_SPECIAL.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_SPECIAL.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_SPECIAL.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_SPECIAL.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_SPECIAL.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_SPECIAL.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_SPECIAL.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_SPECIAL.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_SPECIAL.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_SPECIAL.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '专用设备累计折旧补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计折旧
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_SPECIAL t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_SPECIAL t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

              if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;
             --插入折旧数据表
             insert
               into ASS_DEPRE_ACC_SPECIAL(
                     GROUP_ID                      --集团ID
                    ,HOS_ID                        --医院ID
                    ,COPY_CODE                     --账套编码
                    ,DEPRE_NO                      --折旧序号
                    ,DEPRE_YEAR                    --折旧年度
                    ,DEPRE_MONTH                   --折旧期间
                    ,ASS_CARD_NO                   --资产卡片号
                    ,SOURCE_ID                     --资金来源
                    ,USE_DEPT_ID                   --使用科室ID
                    ,USE_DEPT_NO                   --使用科室NO
                    ,USE_PERCENT                   --分摊比例
                    ,PRIM_MONEY                    --原值
                    ,NOW_DEPRE_AMOUNT              --本期折旧
                    ,ADD_DEPRE_AMOUNT              --累计折旧
                    ,ADD_DEPRE_MONTH               --累计折旧月份
                    ,CUR_MONEY                     --资产净值
                    ,FORE_MONEY                    --预留残值
                    ,OPERATOR                      --操作员
                    ,DEAL_DATE                     --处理日期
                    ,EQUI_DEPRE_CODE               --使用折旧方法
                    ,NOTE                          --摘要
                    )
                 values(
                    prm_group_id
                   ,prm_hos_id
                   ,prm_copy_code
                   ,1
                   ,prm_acc_year
                   ,prm_acc_month
                   ,v_ASS_CARD_NO
                   ,v_soure_id
                   ,v_USE_DEPT_ID
                   ,v_USE_DEPT_NO
                   ,v_USE_PERCENT
                   ,V_PRICE
                   ,V_NOW_DEPRE_MONEY
                   ,V_ADD_DEPRE_MONEY
                   ,v_add_depre_month
                   ,V_CUR_MONEY
                   ,V_FORE_MONEY
                   ,prm_operator
                   ,sysdate
                   ,V_DEPR_METHOD
                   ,V_NOTE
                 );

            --如果存在冲销累计折旧时
            if(  (g_para_05104=1 and  nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_ACC_SPECIAL(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --折旧序号
                      ,DEPRE_YEAR                    --折旧年度
                      ,DEPRE_MONTH                   --折旧期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期折旧
                      ,ADD_DEPRE_AMOUNT              --累计折旧
                      ,ADD_DEPRE_MONTH               --累计折旧月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用折旧方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)        --改成累计折旧 原 V_NOW_DEPRE_MONEY
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备累计折旧补填时失败！'||SQLERRM;
   end prc_FillAddDepreSpecialAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardSpecialAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardSpecialAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
      --定义变量
      v_exist_flag              integer;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '专用设备卡片更新完成!';
     v_exist_flag    := 0                      ;
     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_SPECIAL t
          set  t.depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_source_ret(i).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_SPECIAL t
          set  t.depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_depre_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_ret(j).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_SPECIAL t
          set  t.depre_money     = t.depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
              ,t.cur_money       = t.cur_money   - g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;

      /*****************************************************************
      * 仅参与折旧的卡片累计折旧被还原，需要重新执行，否则执行重复
      * 因此卡片必须为 g_tab_card_ret 或 g_tab_card_fill中存在
      *****************************************************************/
     --重新执行累计折旧变动
     for rec in (
                 select t1.ass_card_no
                       ,t1.source_id
                       ,sum(nvl(t1.CHANGE_depre,0)) as CHANGE_depre
                  from ASS_DEPRE_SOURCE_SPECIAL t1
                  left join ASS_DEPRE_SPECIAL t2
                    on t1.group_id = t2.group_id
                   and t1.hos_id = t2.hos_id
                   and t1.copy_code = t2.copy_code
                   and t1.CHANGE_no = t2.CHANGE_no
                 where t1.group_id    = prm_group_id
                   and t1.hos_id      = prm_hos_id
                   and t1.copy_code   = prm_copy_code
                   and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
                   and t2.state = 2     --0:新建 1:审核 2:确认
                   group by t1.ass_card_no,t1.source_id
                  ) loop
        
        for v_i in 1..g_tab_card_ret.count() loop
            if g_tab_card_ret(v_i).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if;   
        end loop;  
        
        for v_j in 1..g_tab_card_fill.count() loop
            if g_tab_card_fill(v_j).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if; 
        end loop;  
        
        <<NEXT_UPDATE>>
        if v_exist_flag = 1  then
           update ASS_RESOURCE_SPECIAL t
              set t.depre_money = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end  
                 ,t.cur_money   = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money - rec.CHANGE_depre end
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              and t.source_id   = rec.source_id
              ;

           update ASS_CARD_SPECIAL t
              set t.depre_money     = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end
                 ,t.cur_money       = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money   - rec.CHANGE_depre end 
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              ;
              
           v_exist_flag := 0 ;   
        end if;      
      end loop;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片更新失败！'||SQLERRM;

   END prc_UpdateCardSpecialAll;




   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageSpecialAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     v_price                ASS_CARD_SPECIAL.Price%type            ;
     v_depre_money          ASS_CARD_SPECIAL.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_SPECIAL.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_SPECIAL.Fore_Money%type       ;

     v_price_source         ASS_CARD_SPECIAL.Price%type            ;
     v_depre_money_source   ASS_CARD_SPECIAL.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_SPECIAL.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_SPECIAL.Fore_Money%type       ;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '专用设备卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     /*******************************在资产折旧时已做较验******************************************
     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_special t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_SPECIAL t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_special t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and nvl(t1.use_state,0)        <> 0
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_SPECIAL t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;
     ********************************************************************************************/
     /*
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     */

     --校验新增资产不允许跨两月提折旧
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.manage_depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_SPECIAL t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算折旧的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_SPECIAL t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_SPECIAL t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_manage_depre,0) = 1
                            and (   (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 )--新制度修改：不包含本月处置卡片
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )--新制度修改：包含本月入库卡片
                      )
            ;

          --由于折旧已计算，因此需要重新计算现值
          v_Cur_Money        :=  v_price - v_depre_money - v_Fore_Money;
          v_Cur_Money_source :=  v_price_source - v_depre_money_source - v_Fore_Money_source;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计折旧
    -- v_exist_flag := 0 ;

    /* select count(1)
       into v_exist_flag
       from ASS_CARD_SPECIAL t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.manage_depre_money,0) > 0
        and nvl(t1.is_manage_depre,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= v_before_year||v_before_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= v_before_year||v_before_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             )
        and not exists(
                        select 1
                          from ASS_DEPRE_MANAGE_SPECIAL t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )
        ;

        if v_exist_flag > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提折旧或期初累计折旧未维护!';
            return;
        end if;*/


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageSpecialAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageSpecialAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     n_note_count           integer                                ;
     
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '专用设备删除分摊表数据成功！';
     v_exist_flag := 0 ;
     n_note_count := 1 ;
     
     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '折旧年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_MANAGE_SPECIAL t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计折旧
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_MANAGE_SPECIAL t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop
            
            --如果本月存在含补提，累计折旧月份退2，否则退1
            if prm_acc_year || prm_acc_month = '201901' then 
               
               select count(1)
                 into n_note_count 
                 from ASS_DEPRE_MANAGE_SPECIAL t
                where t.group_id    =  prm_group_id
                  and t.hos_id      =  prm_hos_id
                  and t.copy_code   =  prm_copy_code
                  and t.depre_year  =  prm_acc_year
                  and t.depre_month =  prm_acc_month
                  and t.ass_card_no =  rec.ass_card_no
                  and nvl(t.now_depre_amount,0) > 0
                  and t.note like '%含补提%'
                --group by t.ass_card_no 
                  ;                 
               if n_note_count > 0  then 
                  n_note_count := 2 ;
               else 
                  n_note_count := 1 ; 
               end if;  
            else
               n_note_count := 1;  
            end if;  
        
            if rec.now_depre_amount <> 0 then
               update ASS_CARD_SPECIAL t
                  set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - rec.now_depre_amount
                     ,t.ADD_MANAGE_MONTH = nvl(t.ADD_MANAGE_MONTH,0)
                                           - (rec.max_depre_month - rec.min_depre_month + n_note_count)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;
        end loop;

        --还原资金来源表累计折旧
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_MANAGE_SPECIAL t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
                update ASS_RESOURCE_SPECIAL t
                   set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - recsource.now_depre_amount
                 where t.group_id = prm_group_id
                   and t.hos_id   = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.ass_card_no = recsource.ass_card_no
                   and t.source_id   = recsource.source_id
                   ;
            end if;
        end loop;

        --删除折旧表数据
        delete
          from ASS_DEPRE_MANAGE_SPECIAL t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备删除分摊表数据失败！'||SQLERRM;
   END prc_DeleteManageSpecialAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageSpecialAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                /*,nvl(b.prim_money,nvl(a.price,0)) as price
                  ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                  ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                  ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                  ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
                ,t.in_date
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                          ,a.in_date
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'02' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.manage_depre_money,0) as depre_money
                                     ,nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_manage_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.manage_depr_method,'01') as depr_method
                                     ,nvl(t1.manage_depre_amount,0) as Acc_Depre_Amount
                                     ,t1.in_date
                                from ass_card_special t1
                                left join ASS_RESOURCE_SPECIAL t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      )--新制度修改：包含本月入库卡片
                                  and nvl(t1.is_manage_depre,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )--新制度修改：不包含本月处置卡片
                           ) a
                      /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_MANAGE_SPECIAL t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/                     
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_SPECIAL.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_SPECIAL.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_SPECIAL.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_SPECIAL.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_SPECIAL.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_SPECIAL.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_SPECIAL.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_SPECIAL.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_SPECIAL.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_SPECIAL.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_SPECIAL.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_SPECIAL.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_SPECIAL.Add_Depre_Month%type;   --累计折旧月数
      v_in_date              ASS_CARD_SPECIAL.In_Date%type          ;      --入库日期

      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_SPECIAL.CHANGE_Price%type;  --原值调整金额

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '专用设备卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;



     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                          ,v_in_date               --入库日期
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 6 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  V_USE_STATE  := 6 ;
                  v_Push_State := 1 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_SPECIAL t1
              left join ASS_CHANGE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_SPECIAL t1
              left join ASS_DEPRE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/
          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧
              g_tab_card_source(v_i).in_date          := v_in_date             ;
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片装载失败！'||SQLERRM;

   END prc_LoadManageSpecialAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageSpecialAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
        select a.Naturs_Code
              ,a.ass_card_no
              ,a.source_id
              ,a.price
              ,a.depre_money
              ,a.cur_money
              ,a.fore_money
              ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (
               select '02' as Naturs_Code
                     , t1.ass_card_no
                     , t1.source_id
                     , t1.price
                     , nvl(t1.manage_depre_money,0) as depre_money
                     , nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0) as cur_money
                     , t1.fore_money
                     , t2.add_manage_month as add_depre_month
                from ASS_RESOURCE_SPECIAL t1
                left join ass_card_special t2
                  on t1.group_id = t2.group_id
                 and t1.hos_id = t2.hos_id
                 and t1.copy_code = t2.copy_code
                 and t1.ass_card_no = t2.ass_card_no
               where (nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0)) <= 0      --资金来源: 现值<=0
                 and (nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0)) >  0       --卡片    : 现值 > 0
                 and t1.group_id    =  prm_group_id
                 and t1.hos_id      =  prm_hos_id
                 and t1.copy_code   =  prm_copy_code
                 and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
                        or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
                        )--新制度修改：不包含本月入库卡片
                      and nvl(t2.is_manage_depre,0)          =  1
                      and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                            or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                            or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )--新制度修改：包含本月处置卡片
             ) a
           left join (select t3.ass_card_no
                            ,t3.source_id
                            ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                       from ASS_DEPRE_MANAGE_SPECIAL t3
                      where t3.group_id    = prm_group_id
                        and t3.hos_id      = prm_hos_id
                        and t3.copy_code   = prm_copy_code
                        and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                       else prm_acc_year
                                   end
                                 )
                        and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                       else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                   end
                                  )
                       group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                ,t3.ass_card_no,t3.source_id
                       ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;

      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_SPECIAL.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_SPECIAL.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_SPECIAL.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_SPECIAL.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_SPECIAL.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_SPECIAL.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_SPECIAL.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_SPECIAL.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_SPECIAL.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '专用设备补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_SPECIAL t1
              left join ASS_CHANGE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************
          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_SPECIAL t1
              left join ASS_DEPRE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '专用设备补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillManageSpecialAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageSpecialALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageSpecialALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS


   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '专用设备计算分摊成功!'                 ;

     --计算管理分摊与计算折旧方法共用
     prc_CalcDepreSpecialALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode =  def_OK  then
        --初始化变量
        prm_AppCode     := def_OK                                  ;
        prm_ErrTxt      := '专用设备计算分摊成功!'                 ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备分摊计提失败！'||SQLERRM;

   END prc_CalcManageSpecialALL;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageSpecialAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageSpecialAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_SPECIAL.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_SPECIAL.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_SPECIAL.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_SPECIAL.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_SPECIAL.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_SPECIAL.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_SPECIAL.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_SPECIAL.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_SPECIAL.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_SPECIAL.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_SPECIAL.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_SPECIAL.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_SPECIAL.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_SPECIAL.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_SPECIAL.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_SPECIAL.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_SPECIAL.Fore_Money%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '专用设备折旧计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;



     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;

       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_SPECIAL t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;

       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_SPECIAL t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
           else
              --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);

                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
              end if;
           end if;

           --如果存在冲减折旧时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;

           --插入折旧数据表
           insert
             into ASS_DEPRE_MANAGE_SPECIAL(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,g_tab_card_source_ret(i).NOTE
               );

         --如果存在冲销累计折旧时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_MANAGE_SPECIAL(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备折旧计提失败！'||SQLERRM;

   END prc_InsertManageSpecialAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageSpecialAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageSpecialAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计折旧，且为本月之前的入库的资产,需要本月产生累计折旧记录
     *
     * 当月入库，但入库单时已存累计折旧的资产，本月产生累计折旧记录。如：盘盈
     *
     * 用户按正式投入日期折旧的资产，且在入库时产生的累计折旧，本月产生累计折旧记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1:是 0：否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'02' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.manage_depre_money,0) as depre_money
                         ,nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                    from ass_card_special t1
                    left join ASS_RESOURCE_SPECIAL t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_manage_depre,0)  =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.manage_depre_money,0) >  0
                      and (   (     nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              )--新制度修改：已折完，不包含本月入库卡片 
                           or (    (      prm_para_05007 = '2'
                                      and (to_char(t1.run_date,'YYYYMM')    > prm_acc_year||prm_acc_month)
                                      and (to_char(t1.in_date ,'YYYYMM')    < prm_acc_year||prm_acc_month )
                                    )--新制度修改：不包含本月入库卡片
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )--新制度修改：不包含本月处置申报卡片
                                    or (    (to_char(t1.dispose_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )--新制度修改：不包含本月处置卡片
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                            or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              ) --新制度修改：本月处置申报及处理单独处理                              
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_SPECIAL.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_SPECIAL.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_SPECIAL.Depre_Money%type      ;      --累计折旧
      V_ORI_CUR_MONEY        ASS_CARD_SPECIAL.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_SPECIAL.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_SPECIAL.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_SPECIAL.Now_Depre_Amount%type;  --本期折旧
      V_ADD_DEPRE_MONEY      ASS_CARD_SPECIAL.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_SPECIAL.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_SPECIAL.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_SPECIAL.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_SPECIAL.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_SPECIAL.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_SPECIAL.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_SPECIAL.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_SPECIAL.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_SPECIAL.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_SPECIAL.Add_Depre_Month%type;   --累计折旧月数

      v_AREA_sum             ASS_SHARE_DEPT_R_SPECIAL.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_SPECIAL.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_SPECIAL.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_SPECIAL.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_SPECIAL.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_SPECIAL.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_SPECIAL.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_SPECIAL.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_SPECIAL.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_SPECIAL.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '专用设备累计折旧补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计折旧
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_SPECIAL t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_SPECIAL t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

             if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;

             --插入折旧数据表
             insert
               into ASS_DEPRE_MANAGE_SPECIAL(
                     GROUP_ID                      --集团ID
                    ,HOS_ID                        --医院ID
                    ,COPY_CODE                     --账套编码
                    ,DEPRE_NO                      --折旧序号
                    ,DEPRE_YEAR                    --折旧年度
                    ,DEPRE_MONTH                   --折旧期间
                    ,ASS_CARD_NO                   --资产卡片号
                    ,SOURCE_ID                     --资金来源
                    ,USE_DEPT_ID                   --使用科室ID
                    ,USE_DEPT_NO                   --使用科室NO
                    ,USE_PERCENT                   --分摊比例
                    ,PRIM_MONEY                    --原值
                    ,NOW_DEPRE_AMOUNT              --本期折旧
                    ,ADD_DEPRE_AMOUNT              --累计折旧
                    ,ADD_DEPRE_MONTH               --累计折旧月份
                    ,CUR_MONEY                     --资产净值
                    ,FORE_MONEY                    --预留残值
                    ,OPERATOR                      --操作员
                    ,DEAL_DATE                     --处理日期
                    ,EQUI_DEPRE_CODE               --使用折旧方法
                    ,NOTE                          --摘要
                    )
                 values(
                    prm_group_id
                   ,prm_hos_id
                   ,prm_copy_code
                   ,1
                   ,prm_acc_year
                   ,prm_acc_month
                   ,v_ASS_CARD_NO
                   ,v_soure_id
                   ,v_USE_DEPT_ID
                   ,v_USE_DEPT_NO
                   ,v_USE_PERCENT
                   ,V_PRICE
                   ,V_NOW_DEPRE_MONEY
                   ,V_ADD_DEPRE_MONEY
                   ,v_add_depre_month
                   ,V_CUR_MONEY
                   ,V_FORE_MONEY
                   ,prm_operator
                   ,sysdate
                   ,V_DEPR_METHOD
                   ,V_NOTE
                 );

            --如果存在冲销累计折旧时
            if(  (g_para_05104 = 1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_MANAGE_SPECIAL(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --折旧序号
                      ,DEPRE_YEAR                    --折旧年度
                      ,DEPRE_MONTH                   --折旧期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期折旧
                      ,ADD_DEPRE_AMOUNT              --累计折旧
                      ,ADD_DEPRE_MONTH               --累计折旧月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用折旧方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)        --改成累计折旧 原 V_NOW_DEPRE_MONEY
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备累计分摊补填时失败！'||SQLERRM;
   end prc_FillAddManageSpecialAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageSpecialAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageSpecialAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '专用设备卡片更新完成!';

     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_SPECIAL t
          set  t.manage_depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_SPECIAL t
          set  t.manage_depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_manage_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_SPECIAL t
          set  t.manage_depre_money     = t.manage_depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片更新失败！'||SQLERRM;

   END prc_UpdateManageSpecialAll;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcSpecialPortALL
   || 功能描述 ：专用设备折旧接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcSpecialPortALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '专用设备计提成功!';

     /*--1、加载全局参数
     prc_LoadPara( prm_group_id
                  ,prm_hos_id
                  ,prm_copy_code
                  ,prm_AppCode
                  ,prm_ErrTxt
                 );

     if prm_AppCode <> def_OK then
        return;
     end if;*/


     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(3)计算折旧前完整性检查
     prc_ChkCardSpecialAll( prm_group_id             --集团
                           ,prm_hos_id               --医院
                           ,prm_copy_code            --账套
                           ,prm_acc_year             --年度
                           ,prm_acc_month            --月份
                           ,prm_AppCode              --执行代码
                           ,prm_ErrTxt               --错误信息
                           );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(4)删除折旧表数据
     prc_DeleteDepreSpecialAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     --(5)装载卡片数据
     prc_LoadCardSpecialAll( prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度
                            ,prm_acc_month              --月份
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息
                           );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)装载补算卡片数据
     prc_LoadFillCalcSpecialAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(7)资产计提折旧
     prc_CalcDepreSpecialALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     
     --(7-2)根据上月折旧数据更新本月折旧
     prc_ModifyDepreSpecialAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                             );
     if prm_AppCode <>  def_OK  then
        return;
     end if;                        
                             
     --(8)插入折旧表数据
     prc_InsertDepreSpecialAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(9)对累计折旧进行补填
     prc_FillAddDepreSpecialAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)更新卡片及资金来表累计折旧数据
     prc_UpdateCardSpecialAll (  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(11)重新初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(12)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(13)计算折旧前完整性检查
     prc_ChkManageSpecialAll( prm_group_id             --集团
                             ,prm_hos_id               --医院
                             ,prm_copy_code            --账套
                             ,prm_acc_year             --年度
                             ,prm_acc_month            --月份
                             ,prm_AppCode              --执行代码
                             ,prm_ErrTxt               --错误信息
                             );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(14)删除折旧表数据
     prc_DeleteManageSpecialAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(15)装载卡片数据
     prc_LoadManageSpecialAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(16)装载卡片数据
     prc_LoadFillManageSpecialAll( prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(17)资产计提折旧
     prc_CalcManageSpecialALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(18)插入折旧表数据
     prc_InsertManageSpecialAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(19)对累计折旧进行补填
     prc_FillAddManageSpecialAll(  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_operator               --操作员名称
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(20)更新卡片及资金来表累计折旧数据
     prc_UpdateManageSpecialAll (  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK             ;
        prm_ErrTxt      := '专用设备计提成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备计提失败！'||SQLERRM;
   END prc_CalcSpecialPortALL;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardGeneralAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     v_price                ASS_CARD_General.Price%type            ;
     v_depre_money          ASS_CARD_General.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_General.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_General.Fore_Money%type       ;

     v_price_source         ASS_CARD_General.Price%type            ;
     v_depre_money_source   ASS_CARD_General.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_General.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_General.Fore_Money%type       ;
     v_depre_money_add      ASS_CARD_General.Depre_Money%type      ;
     v_change_depre         ASS_DEPRE_DETAIL_General.Change_Depre%type;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '一般设备卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_General t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_General t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_General t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
        and nvl(t1.is_depr,0)     =  1
        and ((nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
         or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         )--新制度修改：不包含本月处置卡片
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_General t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;

     --处置申报日期不能大于处置日期
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_general t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            ) --新制度修改：包含本月入库卡片
        and nvl(t1.is_depr,0)     =  1
        and nvl(t1.use_state,0)   = '7'
        and nvl(to_char(t1.apply_date,'YYYYMM'),'000000') > nvl(to_char(t1.dispose_date,'YYYYMM'),'000000')
        and nvl(t1.cur_money,0) > 0
         ;

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在处置申报日期大于处置日期的资产!';
        return;
     end if;
     
     /*********************************新制度修改:不需要较验****************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ***********************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_General t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算折旧的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_General t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_General t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_depr,0) = 1
                           and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                )--新制度修改：不包含本月处置卡片
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )--新制度修改：包含本月入库卡片
                      )
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计折旧
     /* 新制度修改:屏蔽无效变量 */
     --v_exist_flag := 0 ;

    /* select sum(t1.depre_money)
       into v_depre_money_add
       from ASS_CARD_General t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.depre_money,0) > 0
        and nvl(t1.is_depr,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= v_before_year||v_before_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= v_before_year||v_before_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
            )
        and not exists(
                        select 1
                          from ASS_DEPRE_ACC_General t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )
        \*and  not exists(select 1
                          from ASS_DEPRE_DETAIL_General t3
                          left join ASS_DEPRE_General t4
                             on t3.group_id = t4.group_id
                            and t3.hos_id = t4.hos_id
                            and t3.copy_code = t4.copy_code
                            and t3.CHANGE_no = t4.CHANGE_no
                          where t3.group_id    = t1.group_id
                            and t3.hos_id      = t1.hos_id
                            and t3.copy_code   = t1.copy_code
                            and t3.ass_card_no = t1.ass_card_no
                            and to_char(t4.AUDIT_DATE,'YYYYMM') >= prm_acc_year||prm_acc_month
                            and t4.state = 2     --0:新建 1:审核 2:确认
                           )*\
        ;

        select sum(t3.change_depre)
          into v_change_depre
         from ASS_DEPRE_DETAIL_General t3
         left join ASS_DEPRE_General t4
            on t3.group_id = t4.group_id
           and t3.hos_id = t4.hos_id
           and t3.copy_code = t4.copy_code
           and t3.CHANGE_no = t4.CHANGE_no
         where to_char(t4.AUDIT_DATE,'YYYYMM') >= prm_acc_year||prm_acc_month
           and t4.state = 2
           and not exists(
                        select 1
                          from ASS_DEPRE_ACC_General t2
                         where t4.group_id  = t2.group_id
                           and t4.hos_id    = t2.hos_id
                           and t4.copy_code = t2.copy_code
                           and t3.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )

        ;
        if nvl(v_depre_money_add,0) - nvl(v_change_depre,0) > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提折旧或期初累计折旧未维护!';
            return;
        end if;*/


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardGeneralAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreGeneralAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreGeneralAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     n_note_count           integer                                ;
     
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '一般设备删除成功！';
     v_exist_flag := 0 ;
     n_note_count := 0 ;
     
     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '折旧年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_ACC_General t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计折旧
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_ACC_General t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop
                    
            --如果本月存在含补提，累计折旧月份退2，否则退1
            if prm_acc_year || prm_acc_month = '201901' then 
               select count(1)
                 into n_note_count 
                 from ASS_DEPRE_ACC_General t
                where t.group_id    =  prm_group_id
                  and t.hos_id      =  prm_hos_id
                  and t.copy_code   =  prm_copy_code
                  and t.depre_year  =  prm_acc_year
                  and t.depre_month =  prm_acc_month
                  and t.ass_card_no =  rec.ass_card_no
                  and nvl(t.now_depre_amount,0) > 0
                  and t.note like '%含补提%'                
                  ;
               if n_note_count > 0  then 
                  n_note_count := 2 ;
               else 
                  n_note_count := 1 ; 
               end if;  
            else
               n_note_count := 1;  
            end if;     
        
            if rec.now_depre_amount <> 0 then
               update ASS_CARD_General t
                  set t.depre_money = t.depre_money - rec.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - rec.now_depre_amount) - nvl(t.fore_money,0)
                     ,t.add_depre_month = nvl(t.add_depre_month,0)
                                         - (rec.max_depre_month - rec.min_depre_month + n_note_count)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;

        end loop;

        --还原资金来源表累计折旧
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_ACC_General t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
               update ASS_RESOURCE_General t
                  set t.depre_money = t.depre_money - recsource.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - recsource.now_depre_amount) - nvl(t.fore_money,0)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = recsource.ass_card_no
                  and t.source_id   = recsource.source_id
                  ;
            end if;
        end loop;

        --删除折旧表数据
        delete
          from ASS_DEPRE_ACC_General t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备删除折旧表数据失败！'||SQLERRM;
   END prc_DeleteDepreGeneralAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardGeneralAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
                ,t.in_date           --入库日期
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                          ,a.in_date
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'03' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.depre_money,0) as depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_depre_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.depr_method,'01') as depr_method
                                     ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                                     ,t1.in_date
                                from ass_card_General t1
                                left join ASS_RESOURCE_General t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      )--新制度修改：包含本月入库卡片
                                  and nvl(t1.is_depr,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )--新制度修改：不包含本月处置卡片
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_ACC_General t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_General.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_General.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_General.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_General.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_General.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_General.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_General.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_General.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_General.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_General.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_General.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_General.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_General.Add_Depre_Month%type;   --累计折旧月数
      v_in_date              ASS_CARD_General.In_Date%type          ;

      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_General.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_General.CHANGE_Depre%type;   --累计折旧调整金额
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '一般设备卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;



/*     prc_ChkCardGeneralAll(prm_group_id             --集团
                          ,prm_hos_id               --医院
                          ,prm_copy_code            --账套
                          ,prm_acc_year             --年度
                          ,prm_acc_month            --月份
                          ,prm_AppCode              --执行代码
                          ,prm_ErrTxt               --错误信息
                          );

     if prm_AppCode = def_WARNING or prm_AppCode = def_ERR then
        return;
     end if;*/

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                          ,v_in_date               --入库日期
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                      V_USE_STATE  := 6 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
                  V_USE_STATE  := 6 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_General t1
              left join ASS_CHANGE_General t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_General t1
              left join ASS_DEPRE_General t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧
              g_tab_card_source(v_i).in_date          := v_in_date             ;      --入库日期
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片装载失败！'||SQLERRM;

   END prc_LoadCardGeneralAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcGeneralAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
         select a.Naturs_Code
               ,a.ass_card_no
               ,a.source_id
               ,a.price
               ,a.depre_money
               ,a.cur_money
               ,a.fore_money
               ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (select '03' as Naturs_Code
                   , t1.ass_card_no
                   , t1.source_id
                   , t1.price
                   , t1.depre_money
                   , t1.cur_money
                   , t1.fore_money
                   , t2.add_depre_month
              from ASS_RESOURCE_General t1
              left join ass_card_General t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.ass_card_no = t2.ass_card_no
             where t1.cur_money   <= 0      --资金来源: 现值<=0
               and t2.cur_money   > 0       --卡片    : 现值 > 0
               and t1.group_id    =  prm_group_id
               and t1.hos_id      =  prm_hos_id
               and t1.copy_code   =  prm_copy_code
               and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      )----新制度修改：包含本月入库卡片
                    and nvl(t2.is_depr,0)          =  1
                    and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                          or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                          or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                         )----新制度修改：不包含本月处置卡片
             ) a
             left join (select t3.ass_card_no
                              ,t3.source_id
                              ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                         from ASS_DEPRE_ACC_General t3
                        where t3.group_id    = prm_group_id
                          and t3.hos_id      = prm_hos_id
                          and t3.copy_code   = prm_copy_code
                          and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                         else prm_acc_year
                                     end
                                   )
                          and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                         else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                     end
                                    )
                         group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                  ,t3.ass_card_no,t3.source_id
                         ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;

      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_General.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_General.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_General.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_General.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_General.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_General.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_General.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_General.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_General.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '一般设备补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_General t1
              left join ASS_CHANGE_General t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_General t1
              left join ASS_DEPRE_General t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '一般设备补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillCalcGeneralAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreGeneralALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreGeneralALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS

      --定义变量
      v_card_no              ASS_CARD_General.Ass_Card_No%type;
      v_card_price           ASS_CARD_General.Price%type;
      v_card_now_depre_money ASS_CARD_General.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_General.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_General.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_General.Cur_Money%type;
      v_card_fore_money      ASS_CARD_General.Fore_Money%type;
      v_card_use_state       ASS_CARD_General.Use_State%type;
      v_card_depr_method     ASS_CARD_General.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_General.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_General.Depre_Money%type;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '一般设备计算折旧成功!'                 ;



     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_no              := '';
         v_card_price           := 0 ;
         v_card_now_depre_money := 0 ;
         v_card_add_depre_money := 0 ;
         v_card_cur_money       := 0 ;
         v_card_fore_money      := 0 ;
         v_card_add_depre_month := 0 ;
         v_BACK_ADD_DEPRE_MONEY := 0 ;
         v_card_use_state       := 0 ;
         v_card_depr_method     := '01';
         v_ACC_DEPRE_AMOUNT     := '0';

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}折旧方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_DEPRE_MONTH >= g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;
                 
                 --2019年01月进行双月计提
                 if g_year_month = '201901' and to_char(g_tab_card_source(i).in_date,'YYYY-MM-DD') < '2019-01-01' then 
                    --计算本月折旧
                    if g_tab_card_source(i).ADD_DEPRE_MONTH + 2 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                    else
                       --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                       /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                       - g_tab_card_source(i).FORE_MONEY
                                                                       )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                     ,2);*/

                        g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                       )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                          - nvl(g_tab_card_source(i).ADD_DEPRE_MONTH,0)
                                                                         )
                                                                     ,2) * 2;
                        if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                           g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                        end if;
                    end if;
                    
                    --计算累计折旧月份
                    g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 2;
                    
                    if g_tab_card_source(i).ADD_DEPRE_MONTH > g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).ADD_DEPRE_MONTH := g_tab_card_source(i).ACC_DEPRE_AMOUNT*12;
                    else
                       g_tab_card_source(i).NOTE := '含补提';   
                    end if;  
                 else  
                    --计算本月折旧
                    if g_tab_card_source(i).ADD_DEPRE_MONTH + 1 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                    else
                       --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                       /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                       - g_tab_card_source(i).FORE_MONEY
                                                                       )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                     ,2);*/

                        g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                       )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                          - nvl(g_tab_card_source(i).ADD_DEPRE_MONTH,0)
                                                                         )
                                                                     ,2);
                        if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                           g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                        end if;
                    end if;

                    --计算累计折旧月份
                    g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 1;
                 end if;
                 
                 --计算累计折旧
                 g_tab_card_source(i).ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY
                                                         +g_tab_card_source(i).NOW_DEPRE_MONEY;

                 if   g_tab_card_source(i).ADD_DEPRE_MONEY
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计折旧维护不正确!';
                    return;
                 end if;

                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;

                 --新制度修改：增加处置申报是否冲减折旧参数
                 if  ((g_para_05104 = '1' and g_tab_card_source(i).USE_STATE = '6') 
                   or g_tab_card_source(i).USE_STATE = '7' ) then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);
                 end if;

             end if; --<<平均年限法>>


             --卡片结果数据压栈
             v_j := v_j + 1 ;
             g_tab_card_source_ret(v_j).Naturs_Code      := '03'                                ;
             g_tab_card_source_ret(v_j).ASS_CARD_NO      := g_tab_card_source(i).ass_card_no    ;
             g_tab_card_source_ret(v_j).SOURCE_ID        := g_tab_card_source(i).SOURCE_ID      ;
             g_tab_card_source_ret(v_j).PRICE            := g_tab_card_source(i).PRICE          ;
             g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := g_tab_card_source(i).NOW_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := g_tab_card_source(i).ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := g_tab_card_source(i).ADD_DEPRE_MONTH;
             g_tab_card_source_ret(v_j).CUR_MONEY        := g_tab_card_source(i).CUR_MONEY;
             g_tab_card_source_ret(v_j).FORE_MONEY       := g_tab_card_source(i).FORE_MONEY;
             g_tab_card_source_ret(v_j).USE_STATE        := g_tab_card_source(i).USE_STATE;
             g_tab_card_source_ret(v_j).DEPRE_METHOD     := g_tab_card_source(i).DEPRE_METHOD;
             g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).NOTE := g_tab_card_source(i).NOTE;
             g_tab_card_source_ret(v_j).in_date          := g_tab_card_source(i).in_date;

             --如果存在多条记录且到第二张卡片时，将上一张卡片压栈
             if (  g_tab_card_source.count() > 1 and i > 1 ) then
                 --通过 i> 1防止数据下标越界
                 if (g_tab_card_source(i).ASS_CARD_NO <>  g_tab_card_source(i-1).ASS_CARD_NO ) then
                     --卡片结果数据压栈
                     v_i := v_i + 1 ;
                     g_tab_card_ret(v_i).Naturs_Code      := '03'                     ;
                     g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                     g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                     g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                     g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                     g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                     g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                     g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                     g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                     g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                     g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                     g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;


                     v_card_no              := '';
                     v_card_price           := 0 ;
                     v_card_now_depre_money := 0 ;
                     v_card_add_depre_money := 0 ;
                     v_card_cur_money       := 0 ;
                     v_card_fore_money      := 0 ;
                     v_card_add_depre_month := 0 ;
                     v_BACK_ADD_DEPRE_MONEY := 0 ;
                     v_card_use_state       := 0 ;
                     v_card_depr_method     := '01';
                     v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --计算卡片压栈数据
             v_card_no          := g_tab_card_source(i).ass_card_no ;
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_DEPRE_MONEY;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_DEPRE_MONEY;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_DEPRE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             

             --如果仅存在一张卡片或循环到最后一张卡片时，将卡片压栈
             if ( g_tab_card_source.count() > 1 and i  >  1) then
                --当最后一条数据
                if ( i = g_tab_card_source.count() )  then

                   --卡片结果数据压栈
                   v_i := v_i + 1 ;
                   g_tab_card_ret(v_i).Naturs_Code      := '03'                     ;
                   g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                   g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                   g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                   g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                   g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                   g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                   g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                   g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                   g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                   g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                   g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;

                   v_card_no              := '';
                   v_card_price           := 0 ;
                   v_card_now_depre_money := 0 ;
                   v_card_add_depre_money := 0 ;
                   v_card_cur_money       := 0 ;
                   v_card_fore_money      := 0 ;
                   v_card_add_depre_month := 0 ;
                   v_BACK_ADD_DEPRE_MONEY := 0 ;
                   v_card_use_state       := 0 ;
                   v_card_depr_method     := '01';
                   v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --如果仅为一张卡片时，卡片数据压栈
             if (  g_tab_card_source.count() = 1 ) then
                 --卡片结果数据压栈
                 v_i := v_i + 1 ;
                 g_tab_card_ret(v_i).Naturs_Code      := '03'                     ;
                 g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                 g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                 g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                 g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                 g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                 g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                 g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                 g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                 g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                 g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                 g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;                                         

                 v_card_no              := '';
                 v_card_price           := 0 ;
                 v_card_now_depre_money := 0 ;
                 v_card_add_depre_money := 0 ;
                 v_card_cur_money       := 0 ;
                 v_card_fore_money      := 0 ;
                 v_card_add_depre_month := 0 ;
                 v_BACK_ADD_DEPRE_MONEY := 0 ;
                 v_card_use_state       := 0 ;
                 v_card_depr_method     := '01';
                 v_ACC_DEPRE_AMOUNT     := '0';
             end if;

         end loop;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备折旧计提失败！'||SQLERRM;

   END prc_CalcDepreGeneralALL;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreGeneralAll
   || 功能描述 ：根据卡片计算栈数据出栈插入折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreGeneralAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_General.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_General.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_General.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_General.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_General.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_General.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_General.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_General.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_General.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_General.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_General.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_General.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_General.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_General.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_General.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_General.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_General.Fore_Money%type;
      V_CHANGE_depre               ASS_DEPRE_SOURCE_General.Change_Depre%type;
      V_CHANGE_depre_note          ASS_DEPRE_SOURCE_General.Change_Depre%type;
      V_CHANGE_depre_TOT           ASS_DEPRE_SOURCE_General.Change_Depre%type;
      V_NOTE                       ASS_DEPRE_ACC_General.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '一般设备折旧计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;
     V_CHANGE_depre             :=0            ;
     V_CHANGE_depre_note        :=0            ;
     V_CHANGE_depre_TOT         :=0            ;
     V_NOTE                     :=''           ;


     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;
       V_CHANGE_depre             :=0            ;
       V_CHANGE_depre_note        :=0            ;
       V_CHANGE_depre_TOT         :=0            ;
       V_NOTE                     :=''           ;
       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_General t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;


       BEGIN
           --提取本月累计折旧变动数据
           select sum(nvl(t1.CHANGE_depre,0)) as CHANGE_depre
             into v_CHANGE_depre
            from ASS_DEPRE_SOURCE_General t1
            left join ASS_DEPRE_General t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ass_card_no
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
             ;
       EXCEPTION
          WHEN NO_DATA_FOUND THEN
               v_CHANGE_depre:=0;
          WHEN OTHERS THEN
             prm_AppCode := def_ERR;
             prm_ErrTxt := '一般设备折旧计提失败！'||SQLERRM;
       END;

       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_General t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
              V_CHANGE_depre_note := V_CHANGE_depre;
           else
              --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
                 v_CHANGE_depre_note := V_CHANGE_depre - V_CHANGE_depre_TOT;
              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
                 V_CHANGE_depre_note := round(V_CHANGE_depre * v_USE_PERCENT,2);
                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                 V_CHANGE_depre_TOT    := V_CHANGE_depre_TOT    + V_CHANGE_depre_note;
              end if;
           end if;

           --如果存在冲减折旧时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;


           if V_CHANGE_depre_note <> 0 then
              V_NOTE := '含补增['||to_char(V_CHANGE_depre_note)||']';
           else
              V_NOTE := '';
           end if;

           --插入折旧数据表
           insert
             into ASS_DEPRE_ACC_General(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,V_NOTE||g_tab_card_source_ret(i).NOTE
               );

         --如果存在冲销累计折旧时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_ACC_General(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备折旧计提失败！'||SQLERRM;

   END prc_InsertDepreGeneralAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreGeneralAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计折旧，且为本月之前的入库的资产,需要本月产生累计折旧记录
     *
     * 当月入库，但入库单时已存累计折旧的资产，本月产生累计折旧记录。如：盘盈
     *
     * 用户按正式投入日期折旧的资产，且在入库时产生的累计折旧，本月产生累计折旧记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1：是 0:否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'03' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.depre_money,0) as depre_money
                         ,nvl(t2.cur_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                    from ass_card_General t1
                    left join ASS_RESOURCE_General t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_depr,0)          =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.depre_money,0)      >  0
                      and (   (     nvl(t2.cur_money,0)   <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              )--新制度修改：已折完，不包含本月入库卡片
                           or (    (     prm_para_05007 = '2'
                                     and (to_char(t1.run_date,'YYYYMM')    > prm_acc_year||prm_acc_month)
                                     and (to_char(t1.in_date ,'YYYYMM')    < prm_acc_year||prm_acc_month )
                                    )--新制度修改：不包含本月入库卡片
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )--新制度修改：不包含本月处置申报卡片
                                    or (    (to_char(t1.dispose_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )--新制度修改：不包含本月处置卡片
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                            or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              ) --新制度修改：本月处置申报、处置卡片单独处理      
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_General.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_General.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_General.Depre_Money%type      ;      --累计折旧
      V_ORI_CUR_MONEY        ASS_CARD_General.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_General.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_General.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_General.Now_Depre_Amount%type;  --本期折旧
      V_ADD_DEPRE_MONEY      ASS_CARD_General.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_General.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_General.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_General.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_General.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_General.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_General.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_General.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_General.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_General.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_General.Add_Depre_Month%type;   --累计折旧月数

      v_AREA_sum             ASS_SHARE_DEPT_R_General.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_General.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_General.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_General.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_General.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_General.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_General.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_General.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_General.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_General.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '一般设备累计折旧补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计折旧
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_General t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_General t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

              if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;
             --插入折旧数据表
             insert
               into ASS_DEPRE_ACC_General(
                     GROUP_ID                      --集团ID
                    ,HOS_ID                        --医院ID
                    ,COPY_CODE                     --账套编码
                    ,DEPRE_NO                      --折旧序号
                    ,DEPRE_YEAR                    --折旧年度
                    ,DEPRE_MONTH                   --折旧期间
                    ,ASS_CARD_NO                   --资产卡片号
                    ,SOURCE_ID                     --资金来源
                    ,USE_DEPT_ID                   --使用科室ID
                    ,USE_DEPT_NO                   --使用科室NO
                    ,USE_PERCENT                   --分摊比例
                    ,PRIM_MONEY                    --原值
                    ,NOW_DEPRE_AMOUNT              --本期折旧
                    ,ADD_DEPRE_AMOUNT              --累计折旧
                    ,ADD_DEPRE_MONTH               --累计折旧月份
                    ,CUR_MONEY                     --资产净值
                    ,FORE_MONEY                    --预留残值
                    ,OPERATOR                      --操作员
                    ,DEAL_DATE                     --处理日期
                    ,EQUI_DEPRE_CODE               --使用折旧方法
                    ,NOTE                          --摘要
                    )
                 values(
                    prm_group_id
                   ,prm_hos_id
                   ,prm_copy_code
                   ,1
                   ,prm_acc_year
                   ,prm_acc_month
                   ,v_ASS_CARD_NO
                   ,v_soure_id
                   ,v_USE_DEPT_ID
                   ,v_USE_DEPT_NO
                   ,v_USE_PERCENT
                   ,V_PRICE
                   ,V_NOW_DEPRE_MONEY
                   ,V_ADD_DEPRE_MONEY
                   ,v_add_depre_month
                   ,V_CUR_MONEY
                   ,V_FORE_MONEY
                   ,prm_operator
                   ,sysdate
                   ,V_DEPR_METHOD
                   ,V_NOTE
                 );

            --如果存在冲销累计折旧时
            if(  (g_para_05104=1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_ACC_General(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --折旧序号
                      ,DEPRE_YEAR                    --折旧年度
                      ,DEPRE_MONTH                   --折旧期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期折旧
                      ,ADD_DEPRE_AMOUNT              --累计折旧
                      ,ADD_DEPRE_MONTH               --累计折旧月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用折旧方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)        --改成累计折旧 原 V_NOW_DEPRE_MONEY
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备累计折旧补填时失败！'||SQLERRM;
   end prc_FillAddDepreGeneralAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardGeneralAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardGeneralAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
      --定义变量
      v_exist_flag            integer;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '一般设备卡片更新完成!';
     v_exist_flag    := 0                      ;

     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_General t
          set  t.depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_source_ret(i).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_General t
          set  t.depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_depre_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_ret(j).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_General t
          set  t.depre_money     = t.depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
              ,t.cur_money       = t.cur_money   - g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;
     
     /*****************************************************************
      * 仅参与折旧的卡片累计折旧被还原，需要重新执行，否则执行重复
      * 因此卡片必须为 g_tab_card_ret 或 g_tab_card_fill 中存在
      *****************************************************************/
      
     --更改累计折旧变动数据
     for rec in (
                 select t1.ass_card_no
                       ,t1.source_id
                       ,sum(nvl(t1.CHANGE_depre,0)) as CHANGE_depre
                  from ASS_DEPRE_SOURCE_General t1
                  left join ASS_DEPRE_General t2
                    on t1.group_id = t2.group_id
                   and t1.hos_id = t2.hos_id
                   and t1.copy_code = t2.copy_code
                   and t1.CHANGE_no = t2.CHANGE_no
                 where t1.group_id    = prm_group_id
                   and t1.hos_id      = prm_hos_id
                   and t1.copy_code   = prm_copy_code
                   and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
                   and t2.state = 2     --0:新建 1:审核 2:确认
                   group by t1.ass_card_no,t1.source_id
                  ) loop
        
        for v_i in 1..g_tab_card_ret.count() loop
            if g_tab_card_ret(v_i).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if;   
        end loop;  
        
        for v_j in 1..g_tab_card_fill.count() loop
            if g_tab_card_fill(v_j).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if; 
        end loop; 
        
        <<NEXT_UPDATE>>
        if v_exist_flag = 1  then
           update ASS_RESOURCE_General t
              set t.depre_money = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end  
                 ,t.cur_money   = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money - rec.CHANGE_depre end
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              and t.source_id   = rec.source_id
              ;

           update ASS_CARD_General t
              set t.depre_money     = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end
                 ,t.cur_money       = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money   - rec.CHANGE_depre end 
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              ;
           v_exist_flag := 0 ;   
        end if; 
      end loop;
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片更新失败！'||SQLERRM;

   END prc_UpdateCardGeneralAll;




   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageGeneralAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     v_price                ASS_CARD_General.Price%type            ;
     v_depre_money          ASS_CARD_General.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_General.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_General.Fore_Money%type       ;

     v_price_source         ASS_CARD_General.Price%type            ;
     v_depre_money_source   ASS_CARD_General.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_General.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_General.Fore_Money%type       ;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '一般设备卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     /*******************************在资产折旧时已做较验******************************************
     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_General t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_General t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_General t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and nvl(t1.use_state,0)        <> 0
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_General t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;
     ********************************************************************************************/

     /*******************************新制度修改：无效处理****************************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ********************************************************************************************/
     --校验新增资产不允许跨两月提折旧
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.manage_depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_General t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算折旧的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_General t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_General t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_manage_depre,0) = 1
                            and (   (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 )--新制度修改：不包含本月处置卡片
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )--新制度修改：包含本月入库卡片
                      )
            ;

          --由于折旧已计算，因此需要重新计算现值
          v_Cur_Money        :=  v_price - v_depre_money - v_Fore_Money;
          v_Cur_Money_source :=  v_price_source - v_depre_money_source - v_Fore_Money_source;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计折旧
     /* 新制度修改：屏蔽无效变量 */
     --v_exist_flag := 0 ;

   /*  select count(1)
       into v_exist_flag
       from ASS_CARD_General t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.manage_depre_money,0) > 0
        and nvl(t1.is_manage_depre,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= v_before_year||v_before_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= v_before_year||v_before_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             )
        and not exists(
                        select 1
                          from ASS_DEPRE_MANAGE_General t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )
        ;

        if v_exist_flag > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提折旧或期初累计折旧未维护!';
            return;
        end if;*/


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageGeneralAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageGeneralAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     n_note_count           integer                                ;
     
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '一般设备删除分摊表数据成功！';
     v_exist_flag := 0 ;
     n_note_count := 0 ;
     
     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '折旧年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_MANAGE_General t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计折旧
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_MANAGE_General t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop
                    
            --如果本月存在含补提，累计折旧月份退2，否则退1
            if prm_acc_year || prm_acc_month = '201901' then 
               select count(1)
                 into n_note_count 
                 from ASS_DEPRE_MANAGE_General t
                where t.group_id    =  prm_group_id
                  and t.hos_id      =  prm_hos_id
                  and t.copy_code   =  prm_copy_code
                  and t.depre_year  =  prm_acc_year
                  and t.depre_month =  prm_acc_month
                  and t.ass_card_no =  rec.ass_card_no
                  and nvl(t.now_depre_amount,0) > 0
                  and t.note like '%含补提%'                
                  ;
               if n_note_count > 0  then 
                  n_note_count := 2 ;
               else 
                  n_note_count := 1 ; 
               end if;  
            else
               n_note_count := 1;  
            end if; 
                    
            if rec.now_depre_amount <> 0 then
               update ASS_CARD_General t
                  set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - rec.now_depre_amount
                     ,t.ADD_MANAGE_MONTH = nvl(t.ADD_MANAGE_MONTH,0)
                                          - (rec.max_depre_month - rec.min_depre_month + 1)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;
        end loop;

        --还原资金来源表累计折旧
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_MANAGE_General t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
                update ASS_RESOURCE_General t
                   set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - recsource.now_depre_amount
                 where t.group_id = prm_group_id
                   and t.hos_id   = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.ass_card_no = recsource.ass_card_no
                   and t.source_id   = recsource.source_id
                   ;
            end if;
        end loop;

        --删除折旧表数据
        delete
          from ASS_DEPRE_MANAGE_General t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备删除分摊表数据失败！'||SQLERRM;
   END prc_DeleteManageGeneralAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageGeneralAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
                ,t.in_date           --入库日期
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                          ,a.in_date
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'03' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.manage_depre_money,0) as depre_money
                                     ,nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_manage_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.manage_depr_method,'01') as depr_method
                                     ,nvl(t1.manage_depre_amount,0) as Acc_Depre_Amount
                                     ,t1.in_date
                                from ass_card_General t1
                                left join ASS_RESOURCE_General t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      )--新制度修改：包含本月入库卡片
                                  and nvl(t1.is_manage_depre,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )--新制度修改：不包含本月处置卡片
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_MANAGE_General t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_General.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_General.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_General.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_General.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_General.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_General.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_General.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_General.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_General.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_General.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_General.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_General.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_General.Add_Depre_Month%type;   --累计折旧月数
      v_in_date              ASS_CARD_General.in_date%type          ;      --入库日期

      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_General.CHANGE_Price%type;  --原值调整金额

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '一般设备卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;



     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                          ,v_in_date
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                      V_USE_STATE  := 6 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
                  V_USE_STATE  := 6 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_General t1
              left join ASS_CHANGE_General t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_General t1
              left join ASS_DEPRE_General t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/
          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧
              g_tab_card_source(v_i).in_date          := v_in_date             ;      --入库日期
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片装载失败！'||SQLERRM;

   END prc_LoadManageGeneralAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageGeneralAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
        select a.Naturs_Code
              ,a.ass_card_no
              ,a.source_id
              ,a.price
              ,a.depre_money
              ,a.cur_money
              ,a.fore_money
              ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (
               select '03' as Naturs_Code
                     , t1.ass_card_no
                     , t1.source_id
                     , t1.price
                     , nvl(t1.manage_depre_money,0) as depre_money
                     , nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0) as cur_money
                     , t1.fore_money
                     , t2.add_manage_month as add_depre_month
                from ASS_RESOURCE_General t1
                left join ass_card_General t2
                  on t1.group_id = t2.group_id
                 and t1.hos_id = t2.hos_id
                 and t1.copy_code = t2.copy_code
                 and t1.ass_card_no = t2.ass_card_no
               where (nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0)) <= 0      --资金来源: 现值<=0
                 and (nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0)) >  0       --卡片    : 现值 > 0
                 and t1.group_id    =  prm_group_id
                 and t1.hos_id      =  prm_hos_id
                 and t1.copy_code   =  prm_copy_code
                 and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                        or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                        )--新制度修改：包含本月入库卡片
                      and nvl(t2.is_manage_depre,0)          =  1
                      and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                            or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                            or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                           )--新制度修改：不包含本月处置卡片
             ) a
           left join (select t3.ass_card_no
                            ,t3.source_id
                            ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                       from ASS_DEPRE_MANAGE_General t3
                      where t3.group_id    = prm_group_id
                        and t3.hos_id      = prm_hos_id
                        and t3.copy_code   = prm_copy_code
                        and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                       else prm_acc_year
                                   end
                                 )
                        and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                       else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                   end
                                  )
                       group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                ,t3.ass_card_no,t3.source_id
                       ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;

      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_General.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_General.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_General.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_General.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_General.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_General.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_General.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_General.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_General.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '一般设备补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_General t1
              left join ASS_CHANGE_General t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************
          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_General t1
              left join ASS_DEPRE_General t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '一般设备补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillManageGeneralAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageGeneralALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageGeneralALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS


   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '一般设备计算分摊成功!'                 ;

     --计算管理分摊与计算折旧方法共用
     prc_CalcDepreGeneralALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode =  def_OK  then
        --初始化变量
        prm_AppCode     := def_OK                                  ;
        prm_ErrTxt      := '一般设备计算分摊成功!'                 ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备分摊计提失败！'||SQLERRM;

   END prc_CalcManageGeneralALL;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreGeneralAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreGeneralAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     v_prim_money           ASS_DEPRE_ACC_General.Prim_Money%type  ;
     v_now_depre_amount     ASS_DEPRE_ACC_General.Now_Depre_Amount%type;
     v_now_depre_bridge     ASS_DEPRE_ACC_General.Now_Depre_Amount%type;
     n_count                integer                                ;
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '一般设备折旧修正检验成功！';
     v_exist_flag := 0  ;
     v_prim_money := 0  ;
     v_now_depre_amount := 0 ;
     v_now_depre_bridge := 0 ;
         
     for i in 1..g_tab_card_source_ret.count() loop
       
       --如果本次折旧与累计折旧相等，说明首次折旧，不需要与上月校验
       if g_tab_card_source_ret(i).ADD_DEPRE_MONEY = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
          continue;
       end if;  
       
       --如果已折完的卡片，需要将剩余净值全部提完，不需要与上月校验小数位
       if g_tab_card_source_ret(i).cur_money = 0 then 
          continue;
       end if;
       
       --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
       begin
          select count(1)
            into v_exist_flag
            from ASS_CHANGE_SOURCE_General t1
            left join ASS_CHANGE_General t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.CHANGE_date,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
             WHEN OTHERS THEN
               v_exist_flag := 0;
        end;
        
        --本月发生原值变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if;  
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select count(1)
            into v_exist_flag
            from ASS_DEPRE_SOURCE_General t1
            left join ASS_DEPRE_General t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
           WHEN OTHERS THEN
             v_exist_flag := 0;
        end;   
          
        --本月发生累计折旧变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if; 
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select sum(nvl(t3.prim_money,0)) as prim_money
                ,sum(nvl(t3.NOW_depre_amount,0)) as NOW_depre_amount
            into v_prim_money
                ,v_NOW_depre_amount    
           from ASS_DEPRE_ACC_General t3
          where t3.group_id    = prm_group_id
            and t3.hos_id      = prm_hos_id
            and t3.copy_code   = prm_copy_code
            and t3.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
            and t3.source_id   = g_tab_card_source_ret(i).SOURCE_ID
            and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                           else prm_acc_year
                       end
                     )
            and t3.depre_month = (case when prm_acc_month = '01' then '12'
                           else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                       end
                      )
            ;
          EXCEPTION
           WHEN OTHERS THEN
             v_prim_money := 0       ;
             v_NOW_depre_amount := 0 ;             
        end; 
         
        --如果上月原值与本月原值不一致时，不需要进行修正校验
        if nvl(v_prim_money,0) <> g_tab_card_source_ret(i).PRICE then 
           continue;
        end if;
        
        --如果上月折旧与本月折旧完全一致，不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
           continue;
        end if;
        
        --如果上月折旧为0，不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) = 0  then
           continue; 
        end if;  
        
        --如果上月折旧与本月折旧差的绝对值小于1且上月折旧数大于0时，那么取上月折旧
        if abs(nvl(v_NOW_depre_amount,0) - g_tab_card_source_ret(i).NOW_DEPRE_MONEY) < 1 
           and abs(nvl(v_NOW_depre_amount,0)) > 0  then
           g_tab_card_source_ret(i).Add_depre_money := g_tab_card_source_ret(i).Add_depre_money 
                                                    -  g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                    +  nvl(v_NOW_depre_amount,0);
           g_tab_card_source_ret(i).cur_money :=   g_tab_card_source_ret(i).cur_money 
                                                 + g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                 -  nvl(v_NOW_depre_amount,0);
           
           v_now_depre_bridge :=  g_tab_card_source_ret(i).NOW_DEPRE_MONEY;
                                                                                        
           g_tab_card_source_ret(i).NOW_DEPRE_MONEY := nvl(v_NOW_depre_amount,0);
           
           for j in 1..g_tab_card_ret.count() loop
               if g_tab_card_ret(j).ASS_CARD_NO = g_tab_card_source_ret(i).ASS_CARD_NO then
                  g_tab_card_ret(j).Add_depre_money := g_tab_card_ret(j).Add_depre_money 
                                                    -  nvl(v_now_depre_bridge,0)
                                                    +  nvl(v_NOW_depre_amount,0);
                  g_tab_card_ret(j).cur_money :=   g_tab_card_ret(j).cur_money 
                                                   + nvl(v_now_depre_bridge,0)
                                                   -  nvl(v_NOW_depre_amount,0);
                                                                                                
                  g_tab_card_ret(j).NOW_DEPRE_MONEY := g_tab_card_ret(j).NOW_DEPRE_MONEY 
                                                       - nvl(v_now_depre_bridge,0)
                                                       + nvl(v_NOW_depre_amount,0);
                  exit;
               end if;           
           end loop;  
           v_now_depre_bridge := 0 ;           
        end if;     
     end loop;
     
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备折旧修正检验失败！'||SQLERRM;
   END prc_ModifyDepreGeneralAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageGeneralAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageGeneralAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_General.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_General.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_General.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_General.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_General.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_General.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_General.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_General.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_General.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_General.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_General.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_General.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_General.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_General.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_General.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_General.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_General.Fore_Money%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '一般设备折旧计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;



     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;

       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_General t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;

       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_General t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
           else
              --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);

                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
              end if;
           end if;

           --如果存在冲减折旧时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;

           --插入折旧数据表
           insert
             into ASS_DEPRE_MANAGE_General(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,g_tab_card_source_ret(i).NOTE
               );

         --如果存在冲销累计折旧时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_MANAGE_General(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备折旧计提失败！'||SQLERRM;

   END prc_InsertManageGeneralAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageGeneralAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageGeneralAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计折旧，且为本月之前的入库的资产,需要本月产生累计折旧记录
     *
     * 当月入库，但入库单时已存累计折旧的资产，本月产生累计折旧记录。如：盘盈
     *
     * 用户按正式投入日期折旧的资产，且在入库时产生的累计折旧，本月产生累计折旧记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1：是 0:否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'03' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.manage_depre_money,0) as depre_money
                         ,nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                    from ass_card_General t1
                    left join ASS_RESOURCE_General t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_manage_depre,0)  =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.manage_depre_money,0) >  0
                      and (   (     nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              )--新制度修改：不包含本月入库卡片
                           or (    (     prm_para_05007 = '2'
                                     and (to_char(t1.run_date,'YYYYMM')    > prm_acc_year||prm_acc_month)
                                     and (to_char(t1.in_date ,'YYYYMM')    < prm_acc_year||prm_acc_month )
                                    ) --新制度修改：不包含本月入库卡片
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )--新制度修改：不包含本月处理申报卡片
                                    or (    (to_char(t1.dispose_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )--新制度修改：不包含本月处理卡片
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                            or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              ) --新制度修改：本月处置申报、处置卡片单独处理    
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_General.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_General.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_General.Depre_Money%type      ;      --累计折旧
      V_ORI_CUR_MONEY        ASS_CARD_General.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_General.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_General.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_General.Now_Depre_Amount%type;  --本期折旧
      V_ADD_DEPRE_MONEY      ASS_CARD_General.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_General.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_General.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_General.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_General.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_General.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_General.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_General.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_General.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_General.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_General.Add_Depre_Month%type;   --累计折旧月数

      v_AREA_sum             ASS_SHARE_DEPT_R_General.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_General.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_General.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_General.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_General.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_General.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_General.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_General.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_General.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_General.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '一般设备累计折旧补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计折旧
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_General t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_General t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

             if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;

             --插入折旧数据表
             insert
               into ASS_DEPRE_MANAGE_General(
                     GROUP_ID                      --集团ID
                    ,HOS_ID                        --医院ID
                    ,COPY_CODE                     --账套编码
                    ,DEPRE_NO                      --折旧序号
                    ,DEPRE_YEAR                    --折旧年度
                    ,DEPRE_MONTH                   --折旧期间
                    ,ASS_CARD_NO                   --资产卡片号
                    ,SOURCE_ID                     --资金来源
                    ,USE_DEPT_ID                   --使用科室ID
                    ,USE_DEPT_NO                   --使用科室NO
                    ,USE_PERCENT                   --分摊比例
                    ,PRIM_MONEY                    --原值
                    ,NOW_DEPRE_AMOUNT              --本期折旧
                    ,ADD_DEPRE_AMOUNT              --累计折旧
                    ,ADD_DEPRE_MONTH               --累计折旧月份
                    ,CUR_MONEY                     --资产净值
                    ,FORE_MONEY                    --预留残值
                    ,OPERATOR                      --操作员
                    ,DEAL_DATE                     --处理日期
                    ,EQUI_DEPRE_CODE               --使用折旧方法
                    ,NOTE                          --摘要
                    )
                 values(
                    prm_group_id
                   ,prm_hos_id
                   ,prm_copy_code
                   ,1
                   ,prm_acc_year
                   ,prm_acc_month
                   ,v_ASS_CARD_NO
                   ,v_soure_id
                   ,v_USE_DEPT_ID
                   ,v_USE_DEPT_NO
                   ,v_USE_PERCENT
                   ,V_PRICE
                   ,V_NOW_DEPRE_MONEY
                   ,V_ADD_DEPRE_MONEY
                   ,v_add_depre_month
                   ,V_CUR_MONEY
                   ,V_FORE_MONEY
                   ,prm_operator
                   ,sysdate
                   ,V_DEPR_METHOD
                   ,V_NOTE
                 );

            --如果存在冲销累计折旧时
            if(  (g_para_05104=1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_MANAGE_General(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --折旧序号
                      ,DEPRE_YEAR                    --折旧年度
                      ,DEPRE_MONTH                   --折旧期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期折旧
                      ,ADD_DEPRE_AMOUNT              --累计折旧
                      ,ADD_DEPRE_MONTH               --累计折旧月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用折旧方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)        --改成累计折旧 原 V_NOW_DEPRE_MONEY
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备累计分摊补填时失败！'||SQLERRM;
   end prc_FillAddManageGeneralAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageGeneralAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageGeneralAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '一般设备卡片更新完成!';

     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_General t
          set  t.manage_depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_General t
          set  t.manage_depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_manage_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_General t
          set  t.manage_depre_money     = t.manage_depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片更新失败！'||SQLERRM;

   END prc_UpdateManageGeneralAll;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcGeneralPortALL
   || 功能描述 ：一般设备折旧接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcGeneralPortALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '一般设备计提成功!';

     /*--1、加载全局参数
     prc_LoadPara( prm_group_id
                  ,prm_hos_id
                  ,prm_copy_code
                  ,prm_AppCode
                  ,prm_ErrTxt
                 );

     if prm_AppCode <> def_OK then
        return;
     end if;*/


     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(3)计算折旧前完整性检查
     prc_ChkCardGeneralAll( prm_group_id             --集团
                           ,prm_hos_id               --医院
                           ,prm_copy_code            --账套
                           ,prm_acc_year             --年度
                           ,prm_acc_month            --月份
                           ,prm_AppCode              --执行代码
                           ,prm_ErrTxt               --错误信息
                           );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(4)删除折旧表数据
     prc_DeleteDepreGeneralAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     --(5)装载卡片数据
     prc_LoadCardGeneralAll( prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度
                            ,prm_acc_month              --月份
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息
                           );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)装载卡片数据
     prc_LoadFillCalcGeneralAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(7)资产计提折旧
     prc_CalcDepreGeneralALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(7-2)根据上月折旧数据更新本月折旧
     prc_ModifyDepreGeneralAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                             );
     if prm_AppCode <>  def_OK  then
        return;
     end if;  

     --(8)插入折旧表数据
     prc_InsertDepreGeneralAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(9)对累计折旧进行补填
     prc_FillAddDepreGeneralAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)更新卡片及资金来表累计折旧数据
     prc_UpdateCardGeneralAll (  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(11)重新初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(12)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(13)计算折旧前完整性检查
     prc_ChkManageGeneralAll( prm_group_id             --集团
                             ,prm_hos_id               --医院
                             ,prm_copy_code            --账套
                             ,prm_acc_year             --年度
                             ,prm_acc_month            --月份
                             ,prm_AppCode              --执行代码
                             ,prm_ErrTxt               --错误信息
                             );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(14)删除折旧表数据
     prc_DeleteManageGeneralAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(15)装载卡片数据
     prc_LoadManageGeneralAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(16)装载卡片数据
     prc_LoadFillManageGeneralAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(17)资产计提折旧
     prc_CalcManageGeneralALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(18)插入折旧表数据
     prc_InsertManageGeneralAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(19)对累计折旧进行补填
     prc_FillAddManageGeneralAll(  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_operator               --操作员名称
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(20)更新卡片及资金来表累计折旧数据
     prc_UpdateManageGeneralAll (  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK             ;
        prm_ErrTxt      := '一般设备计提成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备计提失败！'||SQLERRM;
   END prc_CalcGeneralPortALL;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardHouseAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardHouseAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     v_price                ASS_CARD_House.Price%type            ;
     v_depre_money          ASS_CARD_House.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_House.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_House.Fore_Money%type       ;

     v_price_source         ASS_CARD_House.Price%type            ;
     v_depre_money_source   ASS_CARD_House.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_House.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_House.Fore_Money%type       ;
     v_depre_money_add      ASS_CARD_House.Depre_Money%type      ;
     v_change_depre         ASS_DEPRE_DETAIL_House.Change_Depre%type;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '房屋及建筑物卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_House t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_House t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_House t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
        and nvl(t1.is_depr,0)     =  1
        and ((nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
         or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         )--新制度修改：不包含本月处置卡片
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_House t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;

     --处置申报日期不能大于处置日期
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_house t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
        and nvl(t1.is_depr,0)     =  1
        and nvl(t1.use_state,0)   = '7'
        and nvl(to_char(t1.apply_date,'YYYYMM'),'000000') > nvl(to_char(t1.dispose_date,'YYYYMM'),'000000')
        and nvl(t1.cur_money,0) > 0
         ;

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在处置申报日期大于处置日期的资产!';
        return;
     end if;
     
     /*********************************新制度修改:不需要较验****************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     *********************************新制度修改:不需要较验****************************/
     
     --校验新增资产不允许跨两月提折旧
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_House t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算折旧的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_House t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_House t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_depr,0) = 1
                           and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                )--新制度修改：不包含本月处置卡片
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )--新制度修改：包含本月入库卡片
                      )
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计折旧
     /* 新制度修改：屏蔽无效变量赋值 */
     --v_exist_flag := 0 ;
/*
     select sum(t1.depre_money)
       into v_depre_money_add
       from ASS_CARD_House t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.depre_money,0) > 0
        and nvl(t1.is_depr,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= v_before_year||v_before_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= v_before_year||v_before_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
            )
        and not exists(
                        select 1
                          from ASS_DEPRE_ACC_House t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )
       \* and  not exists(select 1
                          from ASS_DEPRE_DETAIL_House t3
                         left join ASS_DEPRE_House t4
                            on t3.group_id = t4.group_id
                           and t3.hos_id = t4.hos_id
                           and t3.copy_code = t4.copy_code
                           and t3.CHANGE_no = t4.CHANGE_no
                         where t3.group_id    = t1.group_id
                           and t3.hos_id      = t1.hos_id
                           and t3.copy_code   = t1.copy_code
                           and t3.ass_card_no = t1.ass_card_no
                           and to_char(t4.AUDIT_DATE,'YYYYMM') >= prm_acc_year||prm_acc_month
                           and t4.state = 2     --0:新建 1:审核 2:确认
                         )*\
        ;

         select sum(t3.change_depre)
          into v_change_depre
         from ASS_DEPRE_DETAIL_House t3
         left join ASS_DEPRE_House t4
            on t3.group_id = t4.group_id
           and t3.hos_id = t4.hos_id
           and t3.copy_code = t4.copy_code
           and t3.CHANGE_no = t4.CHANGE_no
         where to_char(t4.AUDIT_DATE,'YYYYMM') >= prm_acc_year||prm_acc_month
           and t4.state = 2
           and not exists(
                        select 1
                          from ASS_DEPRE_ACC_House t2
                         where t4.group_id  = t2.group_id
                           and t4.hos_id    = t2.hos_id
                           and t4.copy_code = t2.copy_code
                           and t3.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )

        ;


        if nvl(v_depre_money_add,0) - nvl(v_change_depre,0) > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提折旧或期初累计折旧未维护!';
            return;
        end if;*/


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardHouseAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreHouseAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreHouseAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     n_note_count           integer                                ;
     
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '房屋及建筑物删除成功！';
     v_exist_flag := 0 ;
     n_note_count := 0 ;
     
     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '折旧年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_ACC_House t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计折旧
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_ACC_House t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop
            
            --如果本月存在含补提，累计折旧月份退2，否则退1
            if prm_acc_year || prm_acc_month = '201901' then 
               select count(1)
                 into n_note_count 
                 from ASS_DEPRE_ACC_House t
                where t.group_id    =  prm_group_id
                  and t.hos_id      =  prm_hos_id
                  and t.copy_code   =  prm_copy_code
                  and t.depre_year  =  prm_acc_year
                  and t.depre_month =  prm_acc_month
                  and t.ass_card_no =  rec.ass_card_no
                  and nvl(t.now_depre_amount,0) > 0
                  and t.note like '%含补提%'                
                  ;
               if n_note_count > 0  then 
                  n_note_count := 2 ;
               else 
                  n_note_count := 1 ; 
               end if;  
            else
               n_note_count := 1;  
            end if; 
        
            if rec.now_depre_amount <> 0 then
               update ASS_CARD_House t
                  set t.depre_money = t.depre_money - rec.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - rec.now_depre_amount) - nvl(t.fore_money,0)
                     ,t.add_depre_month = nvl(t.add_depre_month,0)
                                          - (rec.max_depre_month - rec.min_depre_month + n_note_count)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;

        end loop;

        --还原资金来源表累计折旧
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_ACC_House t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
               update ASS_RESOURCE_House t
                  set t.depre_money = t.depre_money - recsource.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - recsource.now_depre_amount) - nvl(t.fore_money,0)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = recsource.ass_card_no
                  and t.source_id   = recsource.source_id
                  ;
            end if;
        end loop;

        --删除折旧表数据
        delete
          from ASS_DEPRE_ACC_House t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物删除折旧表数据失败！'||SQLERRM;
   END prc_DeleteDepreHouseAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardHouseAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardHouseAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
                ,t.in_date           --入账日期
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                          ,a.in_date
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'01' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.depre_money,0) as depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_depre_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.depr_method,'01') as depr_method
                                     ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                                     ,t1.in_date
                                from ass_card_House t1
                                left join ASS_RESOURCE_House t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      )--新制度修改：包含本月入库卡片
                                  and nvl(t1.is_depr,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )--新制度修改：不包含本月处置卡片
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_ACC_House t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_House.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_House.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_House.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_House.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_House.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_House.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_House.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_House.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_House.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_House.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_House.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_House.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_House.Add_Depre_Month%type;   --累计折旧月数
      v_in_date              ASS_CARD_House.In_Date%type          ;      --入账日期

      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_House.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_House.CHANGE_Depre%type;   --累计折旧调整金额
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '房屋及建筑物卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;



/*     prc_ChkCardHouseAll(prm_group_id             --集团
                          ,prm_hos_id               --医院
                          ,prm_copy_code            --账套
                          ,prm_acc_year             --年度
                          ,prm_acc_month            --月份
                          ,prm_AppCode              --执行代码
                          ,prm_ErrTxt               --错误信息
                          );

     if prm_AppCode = def_WARNING or prm_AppCode = def_ERR then
        return;
     end if;*/

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                          ,v_in_date               --入账日期
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                      V_USE_STATE  := 6 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
                  V_USE_STATE  := 6 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_House t1
              left join ASS_CHANGE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_House t1
              left join ASS_DEPRE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧
              g_tab_card_source(v_i).in_date          := v_in_date             ;      --入账日期
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片装载失败！'||SQLERRM;

   END prc_LoadCardHouseAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcHouseAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcHouseAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
         select a.Naturs_Code
               ,a.ass_card_no
               ,a.source_id
               ,a.price
               ,a.depre_money
               ,a.cur_money
               ,a.fore_money
               ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (select '01' as Naturs_Code
                   , t1.ass_card_no
                   , t1.source_id
                   , t1.price
                   , t1.depre_money
                   , t1.cur_money
                   , t1.fore_money
                   , t2.add_depre_month
              from ASS_RESOURCE_House t1
              left join ass_card_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.ass_card_no = t2.ass_card_no
             where t1.cur_money   <= 0      --资金来源: 现值<=0
               and t2.cur_money   > 0       --卡片    : 现值 > 0
               and t1.group_id    =  prm_group_id
               and t1.hos_id      =  prm_hos_id
               and t1.copy_code   =  prm_copy_code
               and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      )--新制度修改：包含本月入库卡片
                    and nvl(t2.is_depr,0)          =  1
                    and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                          or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                          or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                         )--新制度修改：不包含本月处置卡片
             ) a
             left join (select t3.ass_card_no
                              ,t3.source_id
                              ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                         from ASS_DEPRE_ACC_House t3
                        where t3.group_id    = prm_group_id
                          and t3.hos_id      = prm_hos_id
                          and t3.copy_code   = prm_copy_code
                          and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                         else prm_acc_year
                                     end
                                   )
                          and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                         else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                     end
                                    )
                         group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                  ,t3.ass_card_no,t3.source_id
                         ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;

      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_House.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_House.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_House.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_House.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_House.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_House.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_House.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_House.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_House.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '房屋及建筑物补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_House t1
              left join ASS_CHANGE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_House t1
              left join ASS_DEPRE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '房屋及建筑物补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillCalcHouseAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreHouseALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreHouseALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS

      --定义变量
      v_card_no              ASS_CARD_House.Ass_Card_No%type;
      v_card_price           ASS_CARD_House.Price%type;
      v_card_now_depre_money ASS_CARD_House.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_House.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_House.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_House.Cur_Money%type;
      v_card_fore_money      ASS_CARD_House.Fore_Money%type;
      v_card_use_state       ASS_CARD_House.Use_State%type;
      v_card_depr_method     ASS_CARD_House.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_House.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_House.Depre_Money%type;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '房屋及建筑物计算折旧成功!'                 ;



     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_no              := '';
         v_card_price           := 0 ;
         v_card_now_depre_money := 0 ;
         v_card_add_depre_money := 0 ;
         v_card_cur_money       := 0 ;
         v_card_fore_money      := 0 ;
         v_card_add_depre_month := 0 ;
         v_BACK_ADD_DEPRE_MONEY := 0 ;
         v_card_use_state       := 0 ;
         v_card_depr_method     := '01';
         v_ACC_DEPRE_AMOUNT     := '0';

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}折旧方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_DEPRE_MONTH >= g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;
                 --2019年01月进行双月计提
                 if g_year_month = '201901' and to_char(g_tab_card_source(i).in_date,'YYYY-MM-DD') < '2019-01-01' then 
                    --计算本月折旧
                    if g_tab_card_source(i).ADD_DEPRE_MONTH + 2 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                    else
                       --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                       /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                       - g_tab_card_source(i).FORE_MONEY
                                                                       )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                     ,2);*/

                        g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                       )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                          - nvl(g_tab_card_source(i).ADD_DEPRE_MONTH,0)
                                                                         )
                                                                     ,2) * 2;
                        if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                           g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                        end if;
                    end if;
                    
                    --计算累计折旧月份
                    g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 2;
                    
                    if g_tab_card_source(i).ADD_DEPRE_MONTH > g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).ADD_DEPRE_MONTH := g_tab_card_source(i).ACC_DEPRE_AMOUNT*12;
                    else
                       g_tab_card_source(i).NOTE := '含补提';   
                    end if;  
                 else 
                    --计算本月折旧
                    if g_tab_card_source(i).ADD_DEPRE_MONTH + 1 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                    else
                       --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                       /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                       - g_tab_card_source(i).FORE_MONEY
                                                                       )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                     ,2);*/

                       g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                       )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                          - nvl(g_tab_card_source(i).ADD_DEPRE_MONTH,0)
                                                                         )
                                                                     ,2);
                       if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                          g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                       end if;
                    end if;

                    --计算累计折旧月份
                    g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 1;
                    
                 end if;
                 
                 --计算累计折旧
                 g_tab_card_source(i).ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY
                                                         +g_tab_card_source(i).NOW_DEPRE_MONEY;

                 if   g_tab_card_source(i).ADD_DEPRE_MONEY
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计折旧维护不正确!';
                    return;
                 end if;

                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;

                 --新制度修改：增加处置申报是否冲减折旧参数
                 if  ((g_para_05104 = '1' and g_tab_card_source(i).USE_STATE = '6') 
                   or g_tab_card_source(i).USE_STATE = '7' ) then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);
                 end if;

             end if; --<<平均年限法>>


             --卡片结果数据压栈
             v_j := v_j + 1 ;
             g_tab_card_source_ret(v_j).Naturs_Code      := '01'                                ;
             g_tab_card_source_ret(v_j).ASS_CARD_NO      := g_tab_card_source(i).ass_card_no    ;
             g_tab_card_source_ret(v_j).SOURCE_ID        := g_tab_card_source(i).SOURCE_ID      ;
             g_tab_card_source_ret(v_j).PRICE            := g_tab_card_source(i).PRICE          ;
             g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := g_tab_card_source(i).NOW_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := g_tab_card_source(i).ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := g_tab_card_source(i).ADD_DEPRE_MONTH;
             g_tab_card_source_ret(v_j).CUR_MONEY        := g_tab_card_source(i).CUR_MONEY;
             g_tab_card_source_ret(v_j).FORE_MONEY       := g_tab_card_source(i).FORE_MONEY;
             g_tab_card_source_ret(v_j).USE_STATE        := g_tab_card_source(i).USE_STATE;
             g_tab_card_source_ret(v_j).DEPRE_METHOD     := g_tab_card_source(i).DEPRE_METHOD;
             g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).NOTE := g_tab_card_source(i).NOTE;
             g_tab_card_source_ret(v_j).in_date := g_tab_card_source(i).in_date;

             --如果存在多条记录且到第二张卡片时，将上一张卡片压栈
             if (  g_tab_card_source.count() > 1 and i > 1 ) then
                 --通过 i> 1防止数据下标越界
                 if (g_tab_card_source(i).ASS_CARD_NO <>  g_tab_card_source(i-1).ASS_CARD_NO ) then
                     --卡片结果数据压栈
                     v_i := v_i + 1 ;
                     g_tab_card_ret(v_i).Naturs_Code      := '01'                     ;
                     g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                     g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                     g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                     g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                     g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                     g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                     g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                     g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                     g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                     g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                     g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;

                     v_card_no              := '';
                     v_card_price           := 0 ;
                     v_card_now_depre_money := 0 ;
                     v_card_add_depre_money := 0 ;
                     v_card_cur_money       := 0 ;
                     v_card_fore_money      := 0 ;
                     v_card_add_depre_month := 0 ;
                     v_BACK_ADD_DEPRE_MONEY := 0 ;
                     v_card_use_state       := 0 ;
                     v_card_depr_method     := '01';
                     v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --计算卡片压栈数据
             v_card_no          := g_tab_card_source(i).ass_card_no ;
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_DEPRE_MONEY;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_DEPRE_MONEY;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_DEPRE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;

             --如果仅存在一张卡片或循环到最后一张卡片时，将卡片压栈
             if ( g_tab_card_source.count() > 1 and i  >  1) then
                --当最后一条数据
                if ( i = g_tab_card_source.count())  then

                   --卡片结果数据压栈
                   v_i := v_i + 1 ;
                   g_tab_card_ret(v_i).Naturs_Code      := '01'                     ;
                   g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                   g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                   g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                   g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                   g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                   g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                   g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                   g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                   g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                   g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                   g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;


                   v_card_no              := '';
                   v_card_price           := 0 ;
                   v_card_now_depre_money := 0 ;
                   v_card_add_depre_money := 0 ;
                   v_card_cur_money       := 0 ;
                   v_card_fore_money      := 0 ;
                   v_card_add_depre_month := 0 ;
                   v_BACK_ADD_DEPRE_MONEY := 0 ;
                   v_card_use_state       := 0 ;
                   v_card_depr_method     := '01';
                   v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --如果仅为一张卡片时，卡片数据压栈
             if (  g_tab_card_source.count() = 1 ) then
                 --卡片结果数据压栈
                 v_i := v_i + 1 ;
                 g_tab_card_ret(v_i).Naturs_Code      := '01'                     ;
                 g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                 g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                 g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                 g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                 g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                 g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                 g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                 g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                 g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                 g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                 g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;

                 v_card_no              := '';
                 v_card_price           := 0 ;
                 v_card_now_depre_money := 0 ;
                 v_card_add_depre_money := 0 ;
                 v_card_cur_money       := 0 ;
                 v_card_fore_money      := 0 ;
                 v_card_add_depre_month := 0 ;
                 v_BACK_ADD_DEPRE_MONEY := 0 ;
                 v_card_use_state       := 0 ;
                 v_card_depr_method     := '01';
                 v_ACC_DEPRE_AMOUNT     := '0';
             end if;

         end loop;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物折旧计提失败！'||SQLERRM;

   END prc_CalcDepreHouseALL;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreHouseAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreHouseAll(   prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     v_prim_money           ASS_DEPRE_ACC_House.Prim_Money%type  ;
     v_now_depre_amount     ASS_DEPRE_ACC_House.Now_Depre_Amount%type;
     v_now_depre_bridge     ASS_DEPRE_ACC_House.Now_Depre_Amount%type;
     n_count                integer                                ;
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '房屋及建筑物折旧修正检验成功！';
     v_exist_flag := 0  ;
     v_prim_money := 0  ;
     v_now_depre_amount := 0 ;
     v_now_depre_bridge := 0 ;
         
     for i in 1..g_tab_card_source_ret.count() loop
       
       --如果本次折旧与累计折旧相等，说明首次折旧，不需要与上月校验
       if g_tab_card_source_ret(i).ADD_DEPRE_MONEY = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
          continue;
       end if;  
       
       --如果已折完的卡片，需要将剩余净值全部提完，不需要与上月校验小数位
       if g_tab_card_source_ret(i).cur_money = 0 then 
          continue;
       end if;
       
       --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
       begin
          select count(1)
            into v_exist_flag
            from ASS_CHANGE_SOURCE_House t1
            left join ASS_CHANGE_House t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.CHANGE_date,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
             WHEN OTHERS THEN
               v_exist_flag := 0;
        end;
        
        --本月发生原值变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if;  
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select count(1)
            into v_exist_flag
            from ASS_DEPRE_SOURCE_House t1
            left join ASS_DEPRE_House t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
           WHEN OTHERS THEN
             v_exist_flag := 0;
        end;   
          
        --本月发生累计折旧变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if; 
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select sum(nvl(t3.prim_money,0)) as prim_money
                ,sum(nvl(t3.NOW_depre_amount,0)) as NOW_depre_amount
            into v_prim_money
                ,v_NOW_depre_amount    
           from ASS_DEPRE_ACC_House t3
          where t3.group_id    = prm_group_id
            and t3.hos_id      = prm_hos_id
            and t3.copy_code   = prm_copy_code
            and t3.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
            and t3.source_id   = g_tab_card_source_ret(i).SOURCE_ID
            and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                           else prm_acc_year
                       end
                     )
            and t3.depre_month = (case when prm_acc_month = '01' then '12'
                           else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                       end
                      )
            ;
          EXCEPTION
           WHEN OTHERS THEN
             v_prim_money := 0       ;
             v_NOW_depre_amount := 0 ;             
        end; 
         
        --如果上月原值与本月原值不一致时，不需要进行修正校验
        if nvl(v_prim_money,0) <> g_tab_card_source_ret(i).PRICE then 
           continue;
        end if;
        
        --如果上月折旧与本月折旧完全一致，不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
           continue;
        end if;
        
        --如果上月折旧为0，不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) = 0 then
           continue;
        end if;
        
        --如果上月折旧与本月折旧差的绝对值小于1且上月折旧数大于0时，那么取上月折旧
        if abs(nvl(v_NOW_depre_amount,0) - g_tab_card_source_ret(i).NOW_DEPRE_MONEY) < 1 
           and abs(nvl(v_NOW_depre_amount,0)) > 0  then
           g_tab_card_source_ret(i).Add_depre_money := g_tab_card_source_ret(i).Add_depre_money 
                                                    -  g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                    +  nvl(v_NOW_depre_amount,0);
           g_tab_card_source_ret(i).cur_money :=   g_tab_card_source_ret(i).cur_money 
                                                 + g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                 -  nvl(v_NOW_depre_amount,0);
           
           v_now_depre_bridge :=   g_tab_card_source_ret(i).NOW_DEPRE_MONEY;    
                                                                                   
           g_tab_card_source_ret(i).NOW_DEPRE_MONEY := nvl(v_NOW_depre_amount,0);
           
           for j in 1..g_tab_card_ret.count() loop
               if g_tab_card_ret(j).ASS_CARD_NO = g_tab_card_source_ret(i).ASS_CARD_NO then
                  g_tab_card_ret(j).Add_depre_money := g_tab_card_ret(j).Add_depre_money 
                                                    -  nvl(v_now_depre_bridge,0)
                                                    +  nvl(v_NOW_depre_amount,0);
                  g_tab_card_ret(j).cur_money :=   g_tab_card_ret(j).cur_money 
                                                   + nvl(v_now_depre_bridge,0)
                                                   -  nvl(v_NOW_depre_amount,0);
                                                                                                
                  g_tab_card_ret(j).NOW_DEPRE_MONEY := g_tab_card_ret(j).NOW_DEPRE_MONEY 
                                                       - nvl(v_now_depre_bridge,0)
                                                       + nvl(v_NOW_depre_amount,0);
                  exit;
               end if;           
           end loop; 
           v_now_depre_bridge := 0 ;            
        end if;     
     end loop;
     
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物折旧修正检验失败！'||SQLERRM;
   END prc_ModifyDepreHouseAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreHouseAll
   || 功能描述 ：根据卡片计算栈数据出栈插入折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreHouseAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_House.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_House.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_House.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_House.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_House.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_House.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_House.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_House.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_House.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_House.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_House.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_House.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_House.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_House.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_House.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_House.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_House.Fore_Money%type;
      V_CHANGE_depre               ASS_DEPRE_SOURCE_House.Change_Depre%type;
      V_CHANGE_depre_note          ASS_DEPRE_SOURCE_House.Change_Depre%type;
      V_CHANGE_depre_TOT           ASS_DEPRE_SOURCE_House.Change_Depre%type;
      V_NOTE                       ASS_DEPRE_ACC_House.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '房屋及建筑物折旧计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;
     V_CHANGE_depre             :=0            ;
     V_CHANGE_depre_note        :=0            ;
     V_CHANGE_depre_TOT         :=0            ;
     V_NOTE                     :=''           ;


     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;
       V_CHANGE_depre             :=0            ;
       V_CHANGE_depre_note        :=0            ;
       V_CHANGE_depre_TOT         :=0            ;
       V_NOTE                     :=''           ;
       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_House t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;

       BEGIN
           --提取本月累计折旧变动数据
           select sum(nvl(t1.CHANGE_depre,0)) as CHANGE_depre
             into v_CHANGE_depre
            from ASS_DEPRE_SOURCE_House t1
            left join ASS_DEPRE_House t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ass_card_no
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
             ;
       EXCEPTION
          WHEN NO_DATA_FOUND THEN
               v_CHANGE_depre:=0;
          WHEN OTHERS THEN
             prm_AppCode := def_ERR;
             prm_ErrTxt := '房屋及建筑物折旧计提失败！'||SQLERRM;
       END;
       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_House t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
              V_CHANGE_depre_note := V_CHANGE_depre;
           else
              --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
                 V_CHANGE_depre_note := round(V_CHANGE_depre * v_USE_PERCENT,2);

              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
                 V_CHANGE_depre_note := round(V_CHANGE_depre * v_USE_PERCENT,2);
                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                 V_CHANGE_depre_TOT    := V_CHANGE_depre_TOT    + V_CHANGE_depre_note;
              end if;
           end if;

           --如果存在冲减折旧时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;
           if V_CHANGE_depre_note <> 0 then
              V_NOTE := '含补增['||to_char(V_CHANGE_depre_note)||']';
           else
              V_NOTE := '';
           end if;
           --插入折旧数据表
           insert
             into ASS_DEPRE_ACC_House(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,V_NOTE||g_tab_card_source_ret(i).NOTE
               );

         --如果存在冲销累计折旧时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_ACC_House(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物折旧计提失败！'||SQLERRM;

   END prc_InsertDepreHouseAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreHouseAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreHouseAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计折旧，且为本月之前的入库的资产,需要本月产生累计折旧记录
     *
     * 当月入库，但入库单时已存累计折旧的资产，本月产生累计折旧记录。如：盘盈
     *
     * 用户按正式投入日期折旧的资产，且在入库时产生的累计折旧，本月产生累计折旧记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1:是，0：否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'01' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.depre_money,0) as depre_money
                         ,nvl(t2.cur_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                    from ass_card_House t1
                    left join ASS_RESOURCE_House t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_depr,0)          =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.depre_money,0)      >  0
                      and (   (     nvl(t2.cur_money,0)   <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              )--新制度修改：不包含本月入库卡片
                           or (    (     prm_para_05007 = '2'
                                     and (to_char(t1.run_date,'YYYYMM')    > prm_acc_year||prm_acc_month)
                                     and (to_char(t1.in_date ,'YYYYMM')    < prm_acc_year||prm_acc_month )
                                    )--新制度修改：不包含本月入库卡片
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )--新制度修改：不包含本月处置申报卡片
                                    or (    (to_char(t1.dispose_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )--新制度修改：不包含本月处置卡片
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                            or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              ) --新制度修改：本月处置申报、处置卡片单独处理      
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_House.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_House.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_House.Depre_Money%type      ;      --累计折旧
      V_ORI_CUR_MONEY        ASS_CARD_House.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_House.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_House.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_House.Now_Depre_Amount%type;  --本期折旧
      V_ADD_DEPRE_MONEY      ASS_CARD_House.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_House.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_House.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_House.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_House.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_House.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_House.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_House.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_House.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_House.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_House.Add_Depre_Month%type;   --累计折旧月数

      v_AREA_sum             ASS_SHARE_DEPT_R_House.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_House.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_House.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_House.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_House.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_House.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_House.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_House.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_House.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_House.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '房屋及建筑物累计折旧补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计折旧
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_House t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_House t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

              if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;
             --插入折旧数据表
             insert
               into ASS_DEPRE_ACC_House(
                     GROUP_ID                      --集团ID
                    ,HOS_ID                        --医院ID
                    ,COPY_CODE                     --账套编码
                    ,DEPRE_NO                      --折旧序号
                    ,DEPRE_YEAR                    --折旧年度
                    ,DEPRE_MONTH                   --折旧期间
                    ,ASS_CARD_NO                   --资产卡片号
                    ,SOURCE_ID                     --资金来源
                    ,USE_DEPT_ID                   --使用科室ID
                    ,USE_DEPT_NO                   --使用科室NO
                    ,USE_PERCENT                   --分摊比例
                    ,PRIM_MONEY                    --原值
                    ,NOW_DEPRE_AMOUNT              --本期折旧
                    ,ADD_DEPRE_AMOUNT              --累计折旧
                    ,ADD_DEPRE_MONTH               --累计折旧月份
                    ,CUR_MONEY                     --资产净值
                    ,FORE_MONEY                    --预留残值
                    ,OPERATOR                      --操作员
                    ,DEAL_DATE                     --处理日期
                    ,EQUI_DEPRE_CODE               --使用折旧方法
                    ,NOTE                          --摘要
                    )
                 values(
                    prm_group_id
                   ,prm_hos_id
                   ,prm_copy_code
                   ,1
                   ,prm_acc_year
                   ,prm_acc_month
                   ,v_ASS_CARD_NO
                   ,v_soure_id
                   ,v_USE_DEPT_ID
                   ,v_USE_DEPT_NO
                   ,v_USE_PERCENT
                   ,V_PRICE
                   ,V_NOW_DEPRE_MONEY
                   ,V_ADD_DEPRE_MONEY
                   ,v_add_depre_month
                   ,V_CUR_MONEY
                   ,V_FORE_MONEY
                   ,prm_operator
                   ,sysdate
                   ,V_DEPR_METHOD
                   ,V_NOTE
                 );

            --如果存在冲销累计折旧时
            if(  (g_para_05104=1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_ACC_House(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --折旧序号
                      ,DEPRE_YEAR                    --折旧年度
                      ,DEPRE_MONTH                   --折旧期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期折旧
                      ,ADD_DEPRE_AMOUNT              --累计折旧
                      ,ADD_DEPRE_MONTH               --累计折旧月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用折旧方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)        --改成累计折旧 原 V_NOW_DEPRE_MONEY
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物累计折旧补填时失败！'||SQLERRM;
   end prc_FillAddDepreHouseAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardHouseAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardHouseAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     v_exist_flag             integer;     
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '房屋及建筑物卡片更新完成!';
     v_exist_flag    := 0 ;
     
     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_House t
          set  t.depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_source_ret(i).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_House t
          set  t.depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_depre_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_ret(j).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_House t
          set  t.depre_money     = t.depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
              ,t.cur_money       = t.cur_money   - g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;
     
     /*****************************************************************
      * 仅参与折旧的卡片累计折旧被还原，需要重新执行，否则执行重复
      * 因此卡片必须为 g_tab_card_ret 或 g_tab_card_fill中存在
      *****************************************************************/      
     --更改累计折旧变动数据
     for rec in (
                 select t1.ass_card_no
                       ,t1.source_id
                       ,sum(nvl(t1.CHANGE_depre,0)) as CHANGE_depre
                  from ASS_DEPRE_SOURCE_House t1
                  left join ASS_DEPRE_House t2
                    on t1.group_id = t2.group_id
                   and t1.hos_id = t2.hos_id
                   and t1.copy_code = t2.copy_code
                   and t1.CHANGE_no = t2.CHANGE_no
                 where t1.group_id    = prm_group_id
                   and t1.hos_id      = prm_hos_id
                   and t1.copy_code   = prm_copy_code
                   and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
                   and t2.state = 2     --0:新建 1:审核 2:确认
                   group by t1.ass_card_no,t1.source_id
                  ) loop

        for v_i in 1..g_tab_card_ret.count() loop
            if g_tab_card_ret(v_i).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if;   
        end loop;  
        
        for v_j in 1..g_tab_card_fill.count() loop
            if g_tab_card_fill(v_j).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if; 
        end loop; 
        
        <<NEXT_UPDATE>>
        if v_exist_flag = 1  then
           update ASS_RESOURCE_House t
              set t.depre_money = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end  
                 ,t.cur_money   = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money - rec.CHANGE_depre end
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              and t.source_id   = rec.source_id
              ;

           update ASS_CARD_House t
              set t.depre_money     = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end
                 ,t.cur_money       = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money   - rec.CHANGE_depre end 
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              ;
           v_exist_flag := 0 ;   
        end if; 
      end loop;
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片更新失败！'||SQLERRM;

   END prc_UpdateCardHouseAll;




   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageHouseAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageHouseAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     v_price                ASS_CARD_House.Price%type            ;
     v_depre_money          ASS_CARD_House.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_House.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_House.Fore_Money%type       ;

     v_price_source         ASS_CARD_House.Price%type            ;
     v_depre_money_source   ASS_CARD_House.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_House.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_House.Fore_Money%type       ;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '房屋及建筑物卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     /*******************************在资产折旧时已做较验******************************************
     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_House t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_House t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_House t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and nvl(t1.use_state,0)        <> 0
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_House t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;
     ********************************************************************************************/
     
     /*************************新制度修改：不需要较验********************************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     *******************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.manage_depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_House t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               ) --新制度修改：不包含本月处置卡片
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            ) --新制度修改：包含本月入库卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算折旧的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_House t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_House t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_manage_depre,0) = 1
                            and (   (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 ) --新制度修改：不包含本月处置卡片
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            ) --新制度修改：包含本月入库卡片
                      )
            ;

          --由于折旧已计算，因此需要重新计算现值
          v_Cur_Money        :=  v_price - v_depre_money - v_Fore_Money;
          v_Cur_Money_source :=  v_price_source - v_depre_money_source - v_Fore_Money_source;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计折旧
     /* 新制度修改：屏蔽无效变量赋值 */
     --v_exist_flag := 0 ;

     /*select count(1)
       into v_exist_flag
       from ASS_CARD_House t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.manage_depre_money,0) > 0
        and nvl(t1.is_manage_depre,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= v_before_year||v_before_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= v_before_year||v_before_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             )
        and not exists(
                        select 1
                          from ASS_DEPRE_MANAGE_House t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )
        ;

        if v_exist_flag > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提折旧或期初累计折旧未维护!';
            return;
        end if;*/


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageHouseAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageHouseAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageHouseAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     n_note_count           integer                                ;
     
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '房屋及建筑物删除分摊表数据成功！';
     v_exist_flag := 0 ;
     n_note_count := 1 ;
     
     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '折旧年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_MANAGE_House t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计折旧
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_MANAGE_House t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop
                    
            --如果本月存在含补提，累计折旧月份退2，否则退1
            if prm_acc_year || prm_acc_month = '201901' then 
               select count(1)
                 into n_note_count 
                 from ASS_DEPRE_MANAGE_House t
                where t.group_id    =  prm_group_id
                  and t.hos_id      =  prm_hos_id
                  and t.copy_code   =  prm_copy_code
                  and t.depre_year  =  prm_acc_year
                  and t.depre_month =  prm_acc_month
                  and t.ass_card_no =  rec.ass_card_no
                  and nvl(t.now_depre_amount,0) > 0
                  and t.note like '%含补提%'                
                  ;
               if n_note_count > 0  then 
                  n_note_count := 2 ;
               else 
                  n_note_count := 1 ; 
               end if;  
            else
               n_note_count := 1;  
            end if; 
        
            if rec.now_depre_amount <> 0 then
               update ASS_CARD_House t
                  set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - rec.now_depre_amount
                     ,t.ADD_MANAGE_MONTH = nvl(t.ADD_MANAGE_MONTH,0)
                                           - (rec.max_depre_month - rec.min_depre_month + n_note_count)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;
        end loop;

        --还原资金来源表累计折旧
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_MANAGE_House t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
                update ASS_RESOURCE_House t
                   set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - recsource.now_depre_amount
                 where t.group_id = prm_group_id
                   and t.hos_id   = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.ass_card_no = recsource.ass_card_no
                   and t.source_id   = recsource.source_id
                   ;
            end if;
        end loop;

        --删除折旧表数据
        delete
          from ASS_DEPRE_MANAGE_House t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物删除分摊表数据失败！'||SQLERRM;
   END prc_DeleteManageHouseAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageHouseAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageHouseAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
                ,t.in_date           --入账日期
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                          ,a.in_date
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'01' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.manage_depre_money,0) as depre_money
                                     ,nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_manage_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.manage_depr_method,'01') as depr_method
                                     ,nvl(t1.manage_depre_amount,0) as Acc_Depre_Amount
                                     ,t1.in_date
                                from ass_card_House t1
                                left join ASS_RESOURCE_House t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      ) --新制度修改：包含本月入库卡片
                                  and nvl(t1.is_manage_depre,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_MANAGE_House t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_House.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_House.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_House.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_House.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_House.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_House.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_House.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_House.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_House.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_House.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_House.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_House.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_House.Add_Depre_Month%type;   --累计折旧月数
      v_in_date              ASS_CARD_House.In_Date%type          ;      --入账日期

      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_House.CHANGE_Price%type;  --原值调整金额

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '房屋及建筑物卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;



     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                          ,v_in_date
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                      V_USE_STATE  := 6 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
                  V_USE_STATE  := 6 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_House t1
              left join ASS_CHANGE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_House t1
              left join ASS_DEPRE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/
          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧
              g_tab_card_source(v_i).in_date          := v_in_date             ;      --入账日期
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片装载失败！'||SQLERRM;

   END prc_LoadManageHouseAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageHouseAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageHouseAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
        select a.Naturs_Code
              ,a.ass_card_no
              ,a.source_id
              ,a.price
              ,a.depre_money
              ,a.cur_money
              ,a.fore_money
              ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (
               select '01' as Naturs_Code
                     , t1.ass_card_no
                     , t1.source_id
                     , t1.price
                     , nvl(t1.manage_depre_money,0) as depre_money
                     , nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0) as cur_money
                     , t1.fore_money
                     , t2.add_manage_month as add_depre_month
                from ASS_RESOURCE_House t1
                left join ass_card_House t2
                  on t1.group_id = t2.group_id
                 and t1.hos_id = t2.hos_id
                 and t1.copy_code = t2.copy_code
                 and t1.ass_card_no = t2.ass_card_no
               where (nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0)) <= 0      --资金来源: 现值<=0
                 and (nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0)) >  0       --卡片    : 现值 > 0
                 and t1.group_id    =  prm_group_id
                 and t1.hos_id      =  prm_hos_id
                 and t1.copy_code   =  prm_copy_code
                 and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                        or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                        ) --新制度修改：包含本月入库卡片
                      and nvl(t2.is_manage_depre,0)          =  1
                      and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                            or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                            or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                           ) --新制度修改：不包含本月处置卡片
             ) a
           left join (select t3.ass_card_no
                            ,t3.source_id
                            ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                       from ASS_DEPRE_MANAGE_House t3
                      where t3.group_id    = prm_group_id
                        and t3.hos_id      = prm_hos_id
                        and t3.copy_code   = prm_copy_code
                        and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                       else prm_acc_year
                                   end
                                 )
                        and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                       else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                   end
                                  )
                       group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                ,t3.ass_card_no,t3.source_id
                       ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;

      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_House.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_House.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_House.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_House.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_House.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_House.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_House.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_House.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_House.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '房屋及建筑物补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_House t1
              left join ASS_CHANGE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************
          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_House t1
              left join ASS_DEPRE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '房屋及建筑物补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillManageHouseAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageHouseALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageHouseALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS


   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '房屋及建筑物计算分摊成功!'                 ;

     --计算管理分摊与计算折旧方法共用
     prc_CalcDepreHouseALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode =  def_OK  then
        --初始化变量
        prm_AppCode     := def_OK                                  ;
        prm_ErrTxt      := '房屋及建筑物计算分摊成功!'                 ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物分摊计提失败！'||SQLERRM;

   END prc_CalcManageHouseALL;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageHouseAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageHouseAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_House.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_House.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_House.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_House.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_House.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_House.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_House.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_House.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_House.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_House.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_House.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_House.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_House.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_House.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_House.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_House.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_House.Fore_Money%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '房屋及建筑物折旧计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;



     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;

       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_House t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;

       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_House t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
           else
              --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);

                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
              end if;
           end if;

           --如果存在冲减折旧时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;

           --插入折旧数据表
           insert
             into ASS_DEPRE_MANAGE_House(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,g_tab_card_source_ret(i).NOTE
               );

         --如果存在冲销累计折旧时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_MANAGE_House(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物折旧计提失败！'||SQLERRM;

   END prc_InsertManageHouseAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageHouseAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageHouseAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计折旧，且为本月之前的入库的资产,需要本月产生累计折旧记录
     *
     * 当月入库，但入库单时已存累计折旧的资产，本月产生累计折旧记录。如：盘盈
     *
     * 用户按正式投入日期折旧的资产，且在入库时产生的累计折旧，本月产生累计折旧记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1:是，0：否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'01' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.manage_depre_money,0) as depre_money
                         ,nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                    from ass_card_House t1
                    left join ASS_RESOURCE_House t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_manage_depre,0)  =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.manage_depre_money,0) >  0
                      and (   (     nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              ) --新制度修改：不包含本月入库卡片
                           or (    (      prm_para_05007 = '2'
                                      and (to_char(t1.run_date,'YYYYMM')    > prm_acc_year||prm_acc_month)
                                      and (to_char(t1.in_date ,'YYYYMM')    < prm_acc_year||prm_acc_month )
                                    )--新制度修改：不包含本月入库卡片
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )--新制度修改：不包含本月处置申报卡片
                                    or (    (to_char(t1.dispose_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )--新制度修改：不包含本月处置卡片
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                           or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              ) --新制度修改：本月处置申报、处置卡片单独处理    
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_House.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_House.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_House.Depre_Money%type      ;      --累计折旧
      V_ORI_CUR_MONEY        ASS_CARD_House.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_House.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_House.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_House.Now_Depre_Amount%type;  --本期折旧
      V_ADD_DEPRE_MONEY      ASS_CARD_House.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_House.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_House.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_House.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_House.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_House.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_House.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_House.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_House.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_House.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_House.Add_Depre_Month%type;   --累计折旧月数

      v_AREA_sum             ASS_SHARE_DEPT_R_House.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_House.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_House.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_House.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_House.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_House.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_House.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_House.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_House.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_House.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '房屋及建筑物累计折旧补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计折旧
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_House t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_House t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

             if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;

             --插入折旧数据表
             insert
               into ASS_DEPRE_MANAGE_House(
                     GROUP_ID                      --集团ID
                    ,HOS_ID                        --医院ID
                    ,COPY_CODE                     --账套编码
                    ,DEPRE_NO                      --折旧序号
                    ,DEPRE_YEAR                    --折旧年度
                    ,DEPRE_MONTH                   --折旧期间
                    ,ASS_CARD_NO                   --资产卡片号
                    ,SOURCE_ID                     --资金来源
                    ,USE_DEPT_ID                   --使用科室ID
                    ,USE_DEPT_NO                   --使用科室NO
                    ,USE_PERCENT                   --分摊比例
                    ,PRIM_MONEY                    --原值
                    ,NOW_DEPRE_AMOUNT              --本期折旧
                    ,ADD_DEPRE_AMOUNT              --累计折旧
                    ,ADD_DEPRE_MONTH               --累计折旧月份
                    ,CUR_MONEY                     --资产净值
                    ,FORE_MONEY                    --预留残值
                    ,OPERATOR                      --操作员
                    ,DEAL_DATE                     --处理日期
                    ,EQUI_DEPRE_CODE               --使用折旧方法
                    ,NOTE                          --摘要
                    )
                 values(
                    prm_group_id
                   ,prm_hos_id
                   ,prm_copy_code
                   ,1
                   ,prm_acc_year
                   ,prm_acc_month
                   ,v_ASS_CARD_NO
                   ,v_soure_id
                   ,v_USE_DEPT_ID
                   ,v_USE_DEPT_NO
                   ,v_USE_PERCENT
                   ,V_PRICE
                   ,V_NOW_DEPRE_MONEY
                   ,V_ADD_DEPRE_MONEY
                   ,v_add_depre_month
                   ,V_CUR_MONEY
                   ,V_FORE_MONEY
                   ,prm_operator
                   ,sysdate
                   ,V_DEPR_METHOD
                   ,V_NOTE
                 );

            --如果存在冲销累计折旧时
            if(  (g_para_05104=1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_MANAGE_House(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --折旧序号
                      ,DEPRE_YEAR                    --折旧年度
                      ,DEPRE_MONTH                   --折旧期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期折旧
                      ,ADD_DEPRE_AMOUNT              --累计折旧
                      ,ADD_DEPRE_MONTH               --累计折旧月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用折旧方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)        --改成累计折旧 原 V_NOW_DEPRE_MONEY
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物累计分摊补填时失败！'||SQLERRM;
   end prc_FillAddManageHouseAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageHouseAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageHouseAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '房屋及建筑物卡片更新完成!';

     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_House t
          set  t.manage_depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_House t
          set  t.manage_depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_manage_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_House t
          set  t.manage_depre_money     = t.manage_depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片更新失败！'||SQLERRM;

   END prc_UpdateManageHouseAll;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcHousePortALL
   || 功能描述 ：房屋及建筑物折旧接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcHousePortALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '房屋及建筑物计提成功!';

     /*--1、加载全局参数
     prc_LoadPara( prm_group_id
                  ,prm_hos_id
                  ,prm_copy_code
                  ,prm_AppCode
                  ,prm_ErrTxt
                 );

     if prm_AppCode <> def_OK then
        return;
     end if;*/


     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(3)计算折旧前完整性检查
     prc_ChkCardHouseAll( prm_group_id             --集团
                           ,prm_hos_id               --医院
                           ,prm_copy_code            --账套
                           ,prm_acc_year             --年度
                           ,prm_acc_month            --月份
                           ,prm_AppCode              --执行代码
                           ,prm_ErrTxt               --错误信息
                           );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(4)删除折旧表数据
     prc_DeleteDepreHouseAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     --(5)装载卡片数据
     prc_LoadCardHouseAll( prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度
                            ,prm_acc_month              --月份
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息
                           );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)装载补算卡片数据
     prc_LoadFillCalcHouseAll( prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度
                            ,prm_acc_month              --月份
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息
                           );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(7)资产计提折旧
     prc_CalcDepreHouseALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(7-2)根据上月折旧数据更新本月折旧
     prc_ModifyDepreHouseAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                             );
     if prm_AppCode <>  def_OK  then
        return;
     end if;  

     --(8)插入折旧表数据
     prc_InsertDepreHouseAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(9)对累计折旧进行补填
     prc_FillAddDepreHouseAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)更新卡片及资金来表累计折旧数据
     prc_UpdateCardHouseAll (  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(11)重新初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(12)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(13)计算折旧前完整性检查
     prc_ChkManageHouseAll( prm_group_id             --集团
                             ,prm_hos_id               --医院
                             ,prm_copy_code            --账套
                             ,prm_acc_year             --年度
                             ,prm_acc_month            --月份
                             ,prm_AppCode              --执行代码
                             ,prm_ErrTxt               --错误信息
                             );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(14)删除折旧表数据
     prc_DeleteManageHouseAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(15)装载卡片数据
     prc_LoadManageHouseAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(16)装载补算卡片数据
     prc_LoadFillManageHouseAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(17)资产计提折旧
     prc_CalcManageHouseALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(18)插入折旧表数据
     prc_InsertManageHouseAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(19)对累计折旧进行补填
     prc_FillAddManageHouseAll(  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_operator               --操作员名称
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(20)更新卡片及资金来表累计折旧数据
     prc_UpdateManageHouseAll (  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK             ;
        prm_ErrTxt      := '房屋及建筑物计提成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物计提失败！'||SQLERRM;
   END prc_CalcHousePortALL;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardOtherAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardOtherAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     v_price                ASS_CARD_Other.Price%type            ;
     v_depre_money          ASS_CARD_Other.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Other.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Other.Fore_Money%type       ;

     v_price_source         ASS_CARD_Other.Price%type            ;
     v_depre_money_source   ASS_CARD_Other.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Other.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Other.Fore_Money%type       ;
     v_depre_money_add      ASS_CARD_Other.Depre_Money%type      ;
     v_change_depre         ASS_DEPRE_DETAIL_Other.Change_Depre%type;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '其他固定资产卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_Other t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_Other t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_Other t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
        and nvl(t1.is_depr,0)     =  1
        and ((nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
         or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         )--新制度修改：不包含本月处置卡片
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_Other t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;

     --处置申报日期不能大于处置日期
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_other t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
        and nvl(t1.is_depr,0)     =  1
        and nvl(t1.use_state,0)   = '7'
        and nvl(to_char(t1.apply_date,'YYYYMM'),'000000') > nvl(to_char(t1.dispose_date,'YYYYMM'),'000000')
        and nvl(t1.cur_money,0) > 0
         ;

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在处置申报日期大于处置日期的资产!';
        return;
     end if;
     
     /***************************新制度修改：不需要校验************************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     *************************************************************************************/
     
     --校验新增资产不允许跨两月提折旧
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_Other t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算折旧的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Other t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_Other t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_depr,0) = 1
                           and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                )--新制度修改：不包含本月处置卡片
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )--新制度修改：包含本月入库卡片
                      )
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计折旧
     /*新制度修改：屏蔽无效变量赋值*/
     --v_exist_flag := 0 ;

   /*  select sum(t1.depre_money)
       into v_depre_money_add
       from ASS_CARD_Other t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.depre_money,0) > 0
        and nvl(t1.is_depr,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= v_before_year||v_before_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= v_before_year||v_before_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
            )
        and not exists(
                        select 1
                          from ASS_DEPRE_ACC_Other t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )
          \*and  not exists(select 1
                           from ASS_DEPRE_DETAIL_Other t3
                           left join ASS_DEPRE_Other t4
                              on t3.group_id = t4.group_id
                             and t3.hos_id = t4.hos_id
                             and t3.copy_code = t4.copy_code
                             and t3.CHANGE_no = t4.CHANGE_no
                           where t3.group_id    = t1.group_id
                             and t3.hos_id      = t1.hos_id
                             and t3.copy_code   = t1.copy_code
                             and t3.ass_card_no = t1.ass_card_no
                             and to_char(t4.AUDIT_DATE,'YYYYMM') >= prm_acc_year||prm_acc_month
                             and t4.state = 2     --0:新建 1:审核 2:确认
                           )*\
        ;
        select sum(t3.change_depre)
          into v_change_depre
         from ASS_DEPRE_DETAIL_Other t3
         left join ASS_DEPRE_Other t4
            on t3.group_id = t4.group_id
           and t3.hos_id = t4.hos_id
           and t3.copy_code = t4.copy_code
           and t3.CHANGE_no = t4.CHANGE_no
         where to_char(t4.AUDIT_DATE,'YYYYMM') >= prm_acc_year||prm_acc_month
           and t4.state = 2
           and not exists(
                        select 1
                          from ASS_DEPRE_ACC_Other t2
                         where t4.group_id  = t2.group_id
                           and t4.hos_id    = t2.hos_id
                           and t4.copy_code = t2.copy_code
                           and t3.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )

        ;


        if nvl(v_depre_money_add,0) - nvl(v_change_depre,0) > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提折旧或期初累计折旧未维护!';
            return;
        end if;*/


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardOtherAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreOtherAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreOtherAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     n_note_count           integer                                ;
     
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '其他固定资产删除成功！';
     v_exist_flag := 0 ;
     n_note_count := 0 ;
     
     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '折旧年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_ACC_Other t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计折旧
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_ACC_Other t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop
                    
            --如果本月存在含补提，累计折旧月份退2，否则退1
            if prm_acc_year || prm_acc_month = '201901' then 
               select count(1)
                 into n_note_count 
                 from ASS_DEPRE_ACC_Other t
                where t.group_id    =  prm_group_id
                  and t.hos_id      =  prm_hos_id
                  and t.copy_code   =  prm_copy_code
                  and t.depre_year  =  prm_acc_year
                  and t.depre_month =  prm_acc_month
                  and t.ass_card_no =  rec.ass_card_no
                  and nvl(t.now_depre_amount,0) > 0
                  and t.note like '%含补提%'                
                  ;
               if n_note_count > 0  then 
                  n_note_count := 2 ;
               else 
                  n_note_count := 1 ; 
               end if;  
            else
               n_note_count := 1;  
            end if; 
        
            if rec.now_depre_amount <> 0 then
               update ASS_CARD_Other t
                  set t.depre_money = t.depre_money - rec.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - rec.now_depre_amount) - nvl(t.fore_money,0)
                     ,t.add_depre_month = nvl(t.add_depre_month,0)
                                          - (rec.max_depre_month - rec.min_depre_month + n_note_count)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;

        end loop;

        --还原资金来源表累计折旧
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_ACC_Other t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
               update ASS_RESOURCE_Other t
                  set t.depre_money = t.depre_money - recsource.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - recsource.now_depre_amount) - nvl(t.fore_money,0)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = recsource.ass_card_no
                  and t.source_id   = recsource.source_id
                  ;
            end if;
        end loop;

        --删除折旧表数据
        delete
          from ASS_DEPRE_ACC_Other t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产删除折旧表数据失败！'||SQLERRM;
   END prc_DeleteDepreOtherAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardOtherAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardOtherAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
                ,t.in_date
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                        /*  ,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                          ,a.in_date
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'04' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.depre_money,0) as depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_depre_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.depr_method,'01') as depr_method
                                     ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                                     ,t1.in_date
                                from ass_card_Other t1
                                left join ASS_RESOURCE_Other t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      ) --新制度修改：包含本月入库卡片
                                  and nvl(t1.is_depr,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       ) --新制度修改：不包含本月处置卡片
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_ACC_Other t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Other.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_Other.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_Other.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_Other.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Other.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Other.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Other.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Other.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_Other.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Other.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Other.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Other.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Other.Add_Depre_Month%type;   --累计折旧月数
      v_in_date              ASS_CARD_Other.In_Date%type          ;      --入库日期 

      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Other.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_Other.CHANGE_Depre%type;   --累计折旧调整金额
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '其他固定资产卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;



/*     prc_ChkCardOtherAll(prm_group_id             --集团
                          ,prm_hos_id               --医院
                          ,prm_copy_code            --账套
                          ,prm_acc_year             --年度
                          ,prm_acc_month            --月份
                          ,prm_AppCode              --执行代码
                          ,prm_ErrTxt               --错误信息
                          );

     if prm_AppCode = def_WARNING or prm_AppCode = def_ERR then
        return;
     end if;*/

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                          ,v_in_date               --入库日期
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                      V_USE_STATE  := 6 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
                  V_USE_STATE  := 6 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Other t1
              left join ASS_CHANGE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Other t1
              left join ASS_DEPRE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧
              g_tab_card_source(v_i).in_date          := v_in_date             ;      --入库日期
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片装载失败！'||SQLERRM;

   END prc_LoadCardOtherAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcOtherAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcOtherAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
         select a.Naturs_Code
               ,a.ass_card_no
               ,a.source_id
               ,a.price
               ,a.depre_money
               ,a.cur_money
               ,a.fore_money
               ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (select '04' as Naturs_Code
                   , t1.ass_card_no
                   , t1.source_id
                   , t1.price
                   , t1.depre_money
                   , t1.cur_money
                   , t1.fore_money
                   , t2.add_depre_month
              from ASS_RESOURCE_Other t1
              left join ass_card_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.ass_card_no = t2.ass_card_no
             where t1.cur_money   <= 0      --资金来源: 现值<=0
               and t2.cur_money   > 0       --卡片    : 现值 > 0
               and t1.group_id    =  prm_group_id
               and t1.hos_id      =  prm_hos_id
               and t1.copy_code   =  prm_copy_code
               and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      ) --新制度修改：包含本月入库卡片
                    and nvl(t2.is_depr,0)          =  1
                    and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                          or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                          or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                         ) --新制度修改：不包含本月处置卡片
             ) a
             left join (select t3.ass_card_no
                              ,t3.source_id
                              ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                         from ASS_DEPRE_ACC_Other t3
                        where t3.group_id    = prm_group_id
                          and t3.hos_id      = prm_hos_id
                          and t3.copy_code   = prm_copy_code
                          and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                         else prm_acc_year
                                     end
                                   )
                          and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                         else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                     end
                                    )
                         group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                  ,t3.ass_card_no,t3.source_id
                         ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;

      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Other.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_Other.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_Other.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_Other.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_Other.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_Other.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_Other.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Other.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_Other.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '其他固定资产补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Other t1
              left join ASS_CHANGE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Other t1
              left join ASS_DEPRE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '其他固定资产补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillCalcOtherAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreOtherALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreOtherALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS

      --定义变量
      v_card_no              ASS_CARD_Other.Ass_Card_No%type;
      v_card_price           ASS_CARD_Other.Price%type;
      v_card_now_depre_money ASS_CARD_Other.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_Other.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_Other.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_Other.Cur_Money%type;
      v_card_fore_money      ASS_CARD_Other.Fore_Money%type;
      v_card_use_state       ASS_CARD_Other.Use_State%type;
      v_card_depr_method     ASS_CARD_Other.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_Other.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_Other.Depre_Money%type;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '其他固定资产计算折旧成功!'                 ;



     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_no              := '';
         v_card_price           := 0 ;
         v_card_now_depre_money := 0 ;
         v_card_add_depre_money := 0 ;
         v_card_cur_money       := 0 ;
         v_card_fore_money      := 0 ;
         v_card_add_depre_month := 0 ;
         v_BACK_ADD_DEPRE_MONEY := 0 ;
         v_card_use_state       := 0 ;
         v_card_depr_method     := '01';
         v_ACC_DEPRE_AMOUNT     := '0';

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}折旧方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).DEPRE_METHOD = '01' then --平均年限法
                 
                 if g_tab_card_source(i).ADD_DEPRE_MONTH >= g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;
                 
                 --2019年01月进行双月计提
                 if g_year_month = '201901' and to_char(g_tab_card_source(i).in_date,'YYYY-MM-DD')<'2019-01-01' then 
                    --计算本月折旧
                    if g_tab_card_source(i).ADD_DEPRE_MONTH + 2 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                    else
                       --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                       /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                       - g_tab_card_source(i).FORE_MONEY
                                                                       )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                     ,2);*/

                        g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                       )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                          - nvl(g_tab_card_source(i).ADD_DEPRE_MONTH,0)
                                                                         )
                                                                     ,2) * 2;
                        if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                           g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                        end if;
                    end if;
                    
                    --计算累计折旧月份
                    g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 2;
                    
                    
                    if g_tab_card_source(i).ADD_DEPRE_MONTH > g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).ADD_DEPRE_MONTH := g_tab_card_source(i).ACC_DEPRE_AMOUNT*12;
                    else
                       g_tab_card_source(i).NOTE := '含补提';   
                    end if;  
                 else 
                    --计算本月折旧
                    if g_tab_card_source(i).ADD_DEPRE_MONTH + 1 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                       g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                    else
                        --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                        /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                         - g_tab_card_source(i).FORE_MONEY
                                                                         )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                       ,2);*/

                        g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                         )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                            - nvl(g_tab_card_source(i).ADD_DEPRE_MONTH,0)
                                                                           )
                                                                       ,2);
                        if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                           g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                        end if;
                     end if;

                     --计算累计折旧月份
                     g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 1;
                     
                 end if;
                 
                 --计算累计折旧
                 g_tab_card_source(i).ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY
                                                         +g_tab_card_source(i).NOW_DEPRE_MONEY;

                 if   g_tab_card_source(i).ADD_DEPRE_MONEY
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计折旧维护不正确!';
                    return;
                 end if;

                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;




                 --新制度修改：增加处置申报是否冲减折旧参数
                 if  ((g_para_05104 = '1' and g_tab_card_source(i).USE_STATE = '6') 
                   or g_tab_card_source(i).USE_STATE = '7' ) then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);
                 end if;

             end if; --<<平均年限法>>


             --卡片结果数据压栈
             v_j := v_j + 1 ;
             g_tab_card_source_ret(v_j).Naturs_Code      := '04'                                ;
             g_tab_card_source_ret(v_j).ASS_CARD_NO      := g_tab_card_source(i).ass_card_no    ;
             g_tab_card_source_ret(v_j).SOURCE_ID        := g_tab_card_source(i).SOURCE_ID      ;
             g_tab_card_source_ret(v_j).PRICE            := g_tab_card_source(i).PRICE          ;
             g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := g_tab_card_source(i).NOW_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := g_tab_card_source(i).ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := g_tab_card_source(i).ADD_DEPRE_MONTH;
             g_tab_card_source_ret(v_j).CUR_MONEY        := g_tab_card_source(i).CUR_MONEY;
             g_tab_card_source_ret(v_j).FORE_MONEY       := g_tab_card_source(i).FORE_MONEY;
             g_tab_card_source_ret(v_j).USE_STATE        := g_tab_card_source(i).USE_STATE;
             g_tab_card_source_ret(v_j).DEPRE_METHOD     := g_tab_card_source(i).DEPRE_METHOD;
             g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).NOTE             := g_tab_card_source(i).NOTE;
             g_tab_card_source_ret(v_j).in_date          := g_tab_card_source(i).in_date;

             --如果存在多条记录且到第二张卡片时，将上一张卡片压栈
             if (  g_tab_card_source.count() > 1 and i > 1 ) then
                 --通过 i> 1防止数据下标越界
                 if (g_tab_card_source(i).ASS_CARD_NO <>  g_tab_card_source(i-1).ASS_CARD_NO ) then
                     --卡片结果数据压栈
                     v_i := v_i + 1 ;
                     g_tab_card_ret(v_i).Naturs_Code      := '04'                     ;
                     g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                     g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                     g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                     g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                     g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                     g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                     g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                     g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                     g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                     g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                     g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;

                     v_card_no              := '';
                     v_card_price           := 0 ;
                     v_card_now_depre_money := 0 ;
                     v_card_add_depre_money := 0 ;
                     v_card_cur_money       := 0 ;
                     v_card_fore_money      := 0 ;
                     v_card_add_depre_month := 0 ;
                     v_BACK_ADD_DEPRE_MONEY := 0 ;
                     v_card_use_state       := 0 ;
                     v_card_depr_method     := '01';
                     v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --计算卡片压栈数据
             v_card_no          := g_tab_card_source(i).ass_card_no ;
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_DEPRE_MONEY;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_DEPRE_MONEY;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_DEPRE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;

             --如果仅存在一张卡片或循环到最后一张卡片时，将卡片压栈
             if ( g_tab_card_source.count() > 1 and i  >  1) then
                --当最后一条数据
                if ( i = g_tab_card_source.count() )  then

                   --卡片结果数据压栈
                   v_i := v_i + 1 ;
                   g_tab_card_ret(v_i).Naturs_Code      := '04'                     ;
                   g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                   g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                   g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                   g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                   g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                   g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                   g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                   g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                   g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                   g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                   g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;                   

                   v_card_no              := '';
                   v_card_price           := 0 ;
                   v_card_now_depre_money := 0 ;
                   v_card_add_depre_money := 0 ;
                   v_card_cur_money       := 0 ;
                   v_card_fore_money      := 0 ;
                   v_card_add_depre_month := 0 ;
                   v_BACK_ADD_DEPRE_MONEY := 0 ;
                   v_card_use_state       := 0 ;
                   v_card_depr_method     := '01';
                   v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --如果仅为一张卡片时，卡片数据压栈
             if (  g_tab_card_source.count() = 1 ) then
                 --卡片结果数据压栈
                 v_i := v_i + 1 ;
                 g_tab_card_ret(v_i).Naturs_Code      := '04'                     ;
                 g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                 g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                 g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                 g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                 g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                 g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                 g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                 g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                 g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;
                 g_tab_card_ret(v_i).NOTE             := g_tab_card_source(i).NOTE;
                 g_tab_card_ret(v_i).in_date          := g_tab_card_source(i).in_date;

                 v_card_no              := '';
                 v_card_price           := 0 ;
                 v_card_now_depre_money := 0 ;
                 v_card_add_depre_money := 0 ;
                 v_card_cur_money       := 0 ;
                 v_card_fore_money      := 0 ;
                 v_card_add_depre_month := 0 ;
                 v_BACK_ADD_DEPRE_MONEY := 0 ;
                 v_card_use_state       := 0 ;
                 v_card_depr_method     := '01';
                 v_ACC_DEPRE_AMOUNT     := '0';
             end if;

         end loop;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产折旧计提失败！'||SQLERRM;

   END prc_CalcDepreOtherALL;
   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreOtherAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreOtherAll(   prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     v_prim_money           ASS_DEPRE_ACC_Other.Prim_Money%type  ;
     v_now_depre_amount     ASS_DEPRE_ACC_Other.Now_Depre_Amount%type;
     v_now_depre_bridge     ASS_DEPRE_ACC_Other.Now_Depre_Amount%type;
     n_count                integer                                ;
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '其他固定资产折旧修正检验成功！';
     v_exist_flag := 0  ;
     v_prim_money := 0  ;
     v_now_depre_amount := 0 ;
     v_now_depre_bridge := 0 ; 
         
     for i in 1..g_tab_card_source_ret.count() loop
       
       --如果本次折旧与累计折旧相等，说明首次折旧，不需要与上月校验
       if g_tab_card_source_ret(i).ADD_DEPRE_MONEY = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
          continue;
       end if;  
       
       --如果已折完的卡片，需要将剩余净值全部提完，不需要与上月校验小数位
       if g_tab_card_source_ret(i).cur_money = 0 then 
          continue;
       end if;
       
       --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
       begin
          select count(1)
            into v_exist_flag
            from ASS_CHANGE_SOURCE_Other t1
            left join ASS_CHANGE_Other t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.CHANGE_date,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
             WHEN OTHERS THEN
               v_exist_flag := 0;
        end;
        
        --本月发生原值变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if;  
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select count(1)
            into v_exist_flag
            from ASS_DEPRE_SOURCE_Other t1
            left join ASS_DEPRE_Other t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
           WHEN OTHERS THEN
             v_exist_flag := 0;
        end;   
          
        --本月发生累计折旧变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if; 
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select sum(nvl(t3.prim_money,0)) as prim_money
                ,sum(nvl(t3.NOW_depre_amount,0)) as NOW_depre_amount
            into v_prim_money
                ,v_NOW_depre_amount    
           from ASS_DEPRE_ACC_Other t3
          where t3.group_id    = prm_group_id
            and t3.hos_id      = prm_hos_id
            and t3.copy_code   = prm_copy_code
            and t3.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
            and t3.source_id   = g_tab_card_source_ret(i).SOURCE_ID
            and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                           else prm_acc_year
                       end
                     )
            and t3.depre_month = (case when prm_acc_month = '01' then '12'
                           else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                       end
                      )
            ;
          EXCEPTION
           WHEN OTHERS THEN
             v_prim_money := 0       ;
             v_NOW_depre_amount := 0 ;             
        end; 
         
        --如果上月原值与本月原值不一致时，不需要进行修正校验
        if nvl(v_prim_money,0) <> g_tab_card_source_ret(i).PRICE then 
           continue;
        end if;
        
        --如果上月折旧与本月折旧完全一致，不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
           continue;
        end if;
        
        --如果上月折旧为0,不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) = 0 then
           continue;
        end if;  
        
        --如果上月折旧与本月折旧差的绝对值小于1且上月折旧数大于0时，那么取上月折旧
        if abs(nvl(v_NOW_depre_amount,0) - g_tab_card_source_ret(i).NOW_DEPRE_MONEY) < 1 
           and abs(nvl(v_NOW_depre_amount,0)) > 0  then
           g_tab_card_source_ret(i).Add_depre_money := g_tab_card_source_ret(i).Add_depre_money 
                                                    -  g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                    +  nvl(v_NOW_depre_amount,0);
           g_tab_card_source_ret(i).cur_money :=   g_tab_card_source_ret(i).cur_money 
                                                 + g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                 -  nvl(v_NOW_depre_amount,0);
           
           v_now_depre_bridge := g_tab_card_source_ret(i).NOW_DEPRE_MONEY;
                                                                                        
           g_tab_card_source_ret(i).NOW_DEPRE_MONEY := nvl(v_NOW_depre_amount,0);
           
           for j in 1..g_tab_card_ret.count() loop
               if g_tab_card_ret(j).ASS_CARD_NO = g_tab_card_source_ret(i).ASS_CARD_NO then
                  g_tab_card_ret(j).Add_depre_money := g_tab_card_ret(j).Add_depre_money 
                                                    -  nvl(v_now_depre_bridge,0)
                                                    +  nvl(v_NOW_depre_amount,0);
                  g_tab_card_ret(j).cur_money :=   g_tab_card_ret(j).cur_money 
                                                   + nvl(v_now_depre_bridge,0)
                                                   -  nvl(v_NOW_depre_amount,0);
                                                                                                
                  g_tab_card_ret(j).NOW_DEPRE_MONEY := g_tab_card_ret(j).NOW_DEPRE_MONEY 
                                                       - nvl(v_now_depre_bridge,0)
                                                       + nvl(v_NOW_depre_amount,0);
                  exit;
               end if;           
           end loop;  
           v_now_depre_bridge := 0 ;           
        end if;     
     end loop;
     
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产折旧修正检验失败！'||SQLERRM;
   END prc_ModifyDepreOtherAll;
   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreOtherAll
   || 功能描述 ：根据卡片计算栈数据出栈插入折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreOtherAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Other.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Other.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Other.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_Other.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Other.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_Other.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_Other.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Other.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Other.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_Other.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_Other.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_Other.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_Other.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_Other.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Other.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Other.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Other.Fore_Money%type;
      V_CHANGE_depre               ASS_DEPRE_SOURCE_Other.Change_Depre%type;
      V_CHANGE_depre_note          ASS_DEPRE_SOURCE_Other.Change_Depre%type;
      V_CHANGE_depre_TOT           ASS_DEPRE_SOURCE_Other.Change_Depre%type;
      V_NOTE                       ASS_DEPRE_ACC_Other.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '其他固定资产折旧计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;
     V_CHANGE_depre             :=0            ;
     V_CHANGE_depre_note        :=0            ;
     V_CHANGE_depre_TOT         :=0            ;
     V_NOTE                     :=''           ;


     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;
       V_CHANGE_depre             :=0            ;
       V_CHANGE_depre_note        :=0            ;
       V_CHANGE_depre_TOT         :=0            ;
       V_NOTE                     :=''           ;
       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_Other t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;


       BEGIN
           --提取本月累计折旧变动数据
           select sum(nvl(t1.CHANGE_depre,0)) as CHANGE_depre
             into v_CHANGE_depre
            from ASS_DEPRE_SOURCE_Other t1
            left join ASS_DEPRE_Other t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ass_card_no
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
             ;
       EXCEPTION
          WHEN NO_DATA_FOUND THEN
               v_CHANGE_depre:=0;
          WHEN OTHERS THEN
             prm_AppCode := def_ERR;
             prm_ErrTxt := '其他固定资产折旧计提失败！'||SQLERRM;
       END;

       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_Other t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
              V_CHANGE_depre_note := V_CHANGE_depre;
           else
              --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
                 V_CHANGE_depre_note := round(V_CHANGE_depre * v_USE_PERCENT,2);

              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
                V_CHANGE_depre_note := round(V_CHANGE_depre * v_USE_PERCENT,2);
                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                 V_CHANGE_depre_TOT    := V_CHANGE_depre_TOT    + V_CHANGE_depre_note;
              end if;
           end if;

           --如果存在冲减折旧时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;

           if V_CHANGE_depre_note <> 0 then
              V_NOTE := '含补增['||to_char(V_CHANGE_depre_note)||']';
           else
              V_NOTE := '';
           end if;

           --插入折旧数据表
           insert
             into ASS_DEPRE_ACC_Other(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,V_NOTE||g_tab_card_source_ret(i).NOTE
               );

         --如果存在冲销累计折旧时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_ACC_Other(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产折旧计提失败！'||SQLERRM;

   END prc_InsertDepreOtherAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreOtherAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreOtherAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计折旧，且为本月之前的入库的资产,需要本月产生累计折旧记录
     *
     * 当月入库，但入库单时已存累计折旧的资产，本月产生累计折旧记录。如：盘盈
     *
     * 用户按正式投入日期折旧的资产，且在入库时产生的累计折旧，本月产生累计折旧记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1:是，0：否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'04' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.depre_money,0) as depre_money
                         ,nvl(t2.cur_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                    from ass_card_Other t1
                    left join ASS_RESOURCE_Other t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_depr,0)          =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.depre_money,0)      >  0
                      and (   (     nvl(t2.cur_money,0)   <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              )--新制度修改：不包含本月入库卡片
                           or (    (     prm_para_05007 = '2'
                                     and (to_char(t1.run_date,'YYYYMM')    >= prm_acc_year||prm_acc_month)
                                     and (to_char(t1.in_date ,'YYYYMM')    <= prm_acc_year||prm_acc_month )
                                    )--新制度修改：不包含本月入库卡片
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )--新制度修改：不包含本月处置申报卡片
                                    or (    (to_char(t1.dispose_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )--新制度修改：不包含本月处置卡片
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                            or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              ) --新制度修改：本月处置申报、处置卡片单独处理      
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Other.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_Other.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_Other.Depre_Money%type      ;      --累计折旧
      V_ORI_CUR_MONEY        ASS_CARD_Other.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_Other.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_Other.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_Other.Now_Depre_Amount%type;  --本期折旧
      V_ADD_DEPRE_MONEY      ASS_CARD_Other.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_Other.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Other.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Other.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Other.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Other.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_Other.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Other.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Other.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Other.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Other.Add_Depre_Month%type;   --累计折旧月数

      v_AREA_sum             ASS_SHARE_DEPT_R_Other.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Other.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Other.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Other.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Other.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Other.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Other.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Other.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Other.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_Other.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '其他固定资产累计折旧补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计折旧
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_Other t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_Other t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

              if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;
             --插入折旧数据表
             insert
               into ASS_DEPRE_ACC_Other(
                     GROUP_ID                      --集团ID
                    ,HOS_ID                        --医院ID
                    ,COPY_CODE                     --账套编码
                    ,DEPRE_NO                      --折旧序号
                    ,DEPRE_YEAR                    --折旧年度
                    ,DEPRE_MONTH                   --折旧期间
                    ,ASS_CARD_NO                   --资产卡片号
                    ,SOURCE_ID                     --资金来源
                    ,USE_DEPT_ID                   --使用科室ID
                    ,USE_DEPT_NO                   --使用科室NO
                    ,USE_PERCENT                   --分摊比例
                    ,PRIM_MONEY                    --原值
                    ,NOW_DEPRE_AMOUNT              --本期折旧
                    ,ADD_DEPRE_AMOUNT              --累计折旧
                    ,ADD_DEPRE_MONTH               --累计折旧月份
                    ,CUR_MONEY                     --资产净值
                    ,FORE_MONEY                    --预留残值
                    ,OPERATOR                      --操作员
                    ,DEAL_DATE                     --处理日期
                    ,EQUI_DEPRE_CODE               --使用折旧方法
                    ,NOTE                          --摘要
                    )
                 values(
                    prm_group_id
                   ,prm_hos_id
                   ,prm_copy_code
                   ,1
                   ,prm_acc_year
                   ,prm_acc_month
                   ,v_ASS_CARD_NO
                   ,v_soure_id
                   ,v_USE_DEPT_ID
                   ,v_USE_DEPT_NO
                   ,v_USE_PERCENT
                   ,V_PRICE
                   ,V_NOW_DEPRE_MONEY
                   ,V_ADD_DEPRE_MONEY
                   ,v_add_depre_month
                   ,V_CUR_MONEY
                   ,V_FORE_MONEY
                   ,prm_operator
                   ,sysdate
                   ,V_DEPR_METHOD
                   ,V_NOTE
                 );

            --如果存在冲销累计折旧时
            if(  (g_para_05104=1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_ACC_Other(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --折旧序号
                      ,DEPRE_YEAR                    --折旧年度
                      ,DEPRE_MONTH                   --折旧期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期折旧
                      ,ADD_DEPRE_AMOUNT              --累计折旧
                      ,ADD_DEPRE_MONTH               --累计折旧月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用折旧方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)        --改成累计折旧 原 V_NOW_DEPRE_MONEY
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产累计折旧补填时失败！'||SQLERRM;
   end prc_FillAddDepreOtherAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardOtherAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardOtherAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     v_exist_flag            integer;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '其他固定资产卡片更新完成!';
     v_exist_flag    := 0                      ;
     
     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_Other t
          set  t.depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_source_ret(i).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_Other t
          set  t.depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_depre_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_ret(j).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_Other t
          set  t.depre_money     = t.depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
              ,t.cur_money       = t.cur_money   - g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;
     
     /*****************************************************************
      * 仅参与折旧的卡片累计折旧被还原，需要重新执行，否则执行重复
      * 因此卡片必须为 g_tab_card_ret 或 g_tab_card_fill中存在
      *****************************************************************/
     --更改累计折旧变动数据 
     for rec in (
                 select t1.ass_card_no
                       ,t1.source_id
                       ,sum(nvl(t1.CHANGE_depre,0)) as CHANGE_depre
                  from ASS_DEPRE_SOURCE_Other t1
                  left join ASS_DEPRE_Other t2
                    on t1.group_id = t2.group_id
                   and t1.hos_id = t2.hos_id
                   and t1.copy_code = t2.copy_code
                   and t1.CHANGE_no = t2.CHANGE_no
                 where t1.group_id    = prm_group_id
                   and t1.hos_id      = prm_hos_id
                   and t1.copy_code   = prm_copy_code
                   and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
                   and t2.state = 2     --0:新建 1:审核 2:确认
                   group by t1.ass_card_no,t1.source_id
                  ) loop
        
        for v_i in 1..g_tab_card_ret.count() loop
            if g_tab_card_ret(v_i).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if;   
        end loop;  
        
        for v_j in 1..g_tab_card_fill.count() loop
            if g_tab_card_fill(v_j).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if; 
        end loop; 
        
        <<NEXT_UPDATE>>
        if v_exist_flag = 1  then
           update ASS_RESOURCE_Other t
              set t.depre_money = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end  
                 ,t.cur_money   = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money - rec.CHANGE_depre end
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              and t.source_id   = rec.source_id
              ;

           update ASS_CARD_Other t
              set t.depre_money     = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end
                 ,t.cur_money       = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money   - rec.CHANGE_depre end 
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              ;
           v_exist_flag := 0 ;   
        end if; 
      end loop;
      
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片更新失败！'||SQLERRM;

   END prc_UpdateCardOtherAll;




   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageOtherAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageOtherAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     v_price                ASS_CARD_Other.Price%type            ;
     v_depre_money          ASS_CARD_Other.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Other.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Other.Fore_Money%type       ;

     v_price_source         ASS_CARD_Other.Price%type            ;
     v_depre_money_source   ASS_CARD_Other.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Other.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Other.Fore_Money%type       ;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '其他固定资产卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     /*******************************在资产折旧时已做较验******************************************
     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_Other t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_Other t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_Other t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and nvl(t1.use_state,0)        <> 0
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_Other t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;
     ********************************************************************************************/
     
     /******************************新制度修改：不需要校验***************************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ********************************************************************************************/
     
     --校验新增资产不允许跨两月提折旧
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.manage_depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_Other t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )--新制度修改：包含本月入库卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算折旧的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Other t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_Other t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_manage_depre,0) = 1
                            and (   (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 )--新制度修改：不包含本月处置卡片
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )--新制度修改：包含本月入库卡片
                      )
            ;

          --由于折旧已计算，因此需要重新计算现值
          v_Cur_Money        :=  v_price - v_depre_money - v_Fore_Money;
          v_Cur_Money_source :=  v_price_source - v_depre_money_source - v_Fore_Money_source;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计折旧
     /*新制度修改：屏蔽无效变量赋值*/
     --v_exist_flag := 0 ;
/*
     select count(1)
       into v_exist_flag
       from ASS_CARD_Other t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.manage_depre_money,0) > 0
        and nvl(t1.is_manage_depre,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= v_before_year||v_before_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= v_before_year||v_before_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             )
        and not exists(
                        select 1
                          from ASS_DEPRE_MANAGE_Other t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )
        ;

        if v_exist_flag > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提折旧或期初累计折旧未维护!';
            return;
        end if;*/


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageOtherAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageOtherAll
   || 功能描述 ：根据删除折旧表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageOtherAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     n_note_count           integer                                ;
     
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '其他固定资产删除分摊表数据成功！';
     v_exist_flag := 0 ;
     n_note_count := 0 ;
     
     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '折旧年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_MANAGE_Other t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计折旧
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_MANAGE_Other t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop
                    
            --如果本月存在含补提，累计折旧月份退2，否则退1
            if prm_acc_year || prm_acc_month = '201901' then 
               select count(1)
                 into n_note_count 
                 from ASS_DEPRE_MANAGE_Other t
                where t.group_id    =  prm_group_id
                  and t.hos_id      =  prm_hos_id
                  and t.copy_code   =  prm_copy_code
                  and t.depre_year  =  prm_acc_year
                  and t.depre_month =  prm_acc_month
                  and t.ass_card_no =  rec.ass_card_no
                  and nvl(t.now_depre_amount,0) > 0
                  and t.note like '%含补提%'                
                  ;
               if n_note_count > 0  then 
                  n_note_count := 2 ;
               else 
                  n_note_count := 1 ; 
               end if;  
            else
               n_note_count := 1;  
            end if;
        
            if rec.now_depre_amount <> 0 then
               update ASS_CARD_Other t
                  set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - rec.now_depre_amount
                     ,t.ADD_MANAGE_MONTH = nvl(t.ADD_MANAGE_MONTH,0)
                                           - (rec.max_depre_month - rec.min_depre_month + n_note_count)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;
        end loop;

        --还原资金来源表累计折旧
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_MANAGE_Other t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
                update ASS_RESOURCE_Other t
                   set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - recsource.now_depre_amount
                 where t.group_id = prm_group_id
                   and t.hos_id   = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.ass_card_no = recsource.ass_card_no
                   and t.source_id   = recsource.source_id
                   ;
            end if;
        end loop;

        --删除折旧表数据
        delete
          from ASS_DEPRE_MANAGE_Other t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产删除分摊表数据失败！'||SQLERRM;
   END prc_DeleteManageOtherAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageOtherAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageOtherAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
                ,t.in_date           --入库日期
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                          ,a.in_date
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'04' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.manage_depre_money,0) as depre_money
                                     ,nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_manage_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.manage_depr_method,'01') as depr_method
                                     ,nvl(t1.manage_depre_amount,0) as Acc_Depre_Amount
                                     ,t1.in_date
                                from ass_card_Other t1
                                left join ASS_RESOURCE_Other t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      )--新制度修改：包含本月入库卡片
                                  and nvl(t1.is_manage_depre,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )--新制度修改：不包含本月处置卡片
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_MANAGE_Other t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Other.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_Other.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_Other.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_Other.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Other.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Other.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Other.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Other.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_Other.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Other.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Other.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Other.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Other.Add_Depre_Month%type;   --累计折旧月数
      v_in_date              ASS_CARD_Other.In_Date%type          ;      --入库日期

      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Other.CHANGE_Price%type;  --原值调整金额

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '其他固定资产卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;



     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                          ,v_in_date               --入库日期
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                      V_USE_STATE  := 6 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
                  V_USE_STATE  := 6 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Other t1
              left join ASS_CHANGE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Other t1
              left join ASS_DEPRE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/
          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧
              g_tab_card_source(v_i).in_date          := v_in_date             ;      --入库日期
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片装载失败！'||SQLERRM;

   END prc_LoadManageOtherAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageOtherAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageOtherAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
        select a.Naturs_Code
              ,a.ass_card_no
              ,a.source_id
              ,a.price
              ,a.depre_money
              ,a.cur_money
              ,a.fore_money
              ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (
               select '04' as Naturs_Code
                     , t1.ass_card_no
                     , t1.source_id
                     , t1.price
                     , nvl(t1.manage_depre_money,0) as depre_money
                     , nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0) as cur_money
                     , t1.fore_money
                     , t2.add_manage_month as add_depre_month
                from ASS_RESOURCE_Other t1
                left join ass_card_Other t2
                  on t1.group_id = t2.group_id
                 and t1.hos_id = t2.hos_id
                 and t1.copy_code = t2.copy_code
                 and t1.ass_card_no = t2.ass_card_no
               where (nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0)) <= 0      --资金来源: 现值<=0
                 and (nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0)) >  0       --卡片    : 现值 > 0
                 and t1.group_id    =  prm_group_id
                 and t1.hos_id      =  prm_hos_id
                 and t1.copy_code   =  prm_copy_code
                 and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                        or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                        )--新制度修改：包含本月入库卡片
                      and nvl(t2.is_manage_depre,0)          =  1
                      and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                            or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                            or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                           )--新制度修改：不包含本月处置卡片
             ) a
           left join (select t3.ass_card_no
                            ,t3.source_id
                            ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                       from ASS_DEPRE_MANAGE_Other t3
                      where t3.group_id    = prm_group_id
                        and t3.hos_id      = prm_hos_id
                        and t3.copy_code   = prm_copy_code
                        and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                       else prm_acc_year
                                   end
                                 )
                        and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                       else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                   end
                                  )
                       group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                ,t3.ass_card_no,t3.source_id
                       ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;

      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Other.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_Other.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_Other.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_Other.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_Other.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_Other.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_Other.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Other.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_Other.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '其他固定资产补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Other t1
              left join ASS_CHANGE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************
          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Other t1
              left join ASS_DEPRE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '其他固定资产补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillManageOtherAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageOtherALL
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageOtherALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS


   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '其他固定资产计算分摊成功!'                 ;

     --计算管理分摊与计算折旧方法共用
     prc_CalcDepreOtherALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode =  def_OK  then
        --初始化变量
        prm_AppCode     := def_OK                                  ;
        prm_ErrTxt      := '其他固定资产计算分摊成功!'                 ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产分摊计提失败！'||SQLERRM;

   END prc_CalcManageOtherALL;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageOtherAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageOtherAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Other.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Other.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Other.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_Other.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Other.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_Other.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_Other.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Other.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Other.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_Other.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_Other.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_Other.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_Other.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_Other.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Other.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Other.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Other.Fore_Money%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '其他固定资产折旧计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;



     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;

       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_Other t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;

       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_Other t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
           else
              --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);

                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
              end if;
           end if;

           --如果存在冲减折旧时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;

           --插入折旧数据表
           insert
             into ASS_DEPRE_MANAGE_Other(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,g_tab_card_source_ret(i).NOTE
               );

         --如果存在冲销累计折旧时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_MANAGE_Other(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --折旧序号
                  ,DEPRE_YEAR                    --折旧年度
                  ,DEPRE_MONTH                   --折旧期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期折旧
                  ,ADD_DEPRE_AMOUNT              --累计折旧
                  ,ADD_DEPRE_MONTH               --累计折旧月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用折旧方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产折旧计提失败！'||SQLERRM;

   END prc_InsertManageOtherAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageOtherAll
   || 功能描述 ：本月不需要计提折旧的数据，但产生累计折旧数据，进入累计折旧表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageOtherAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计折旧，且为本月之前的入库的资产,需要本月产生累计折旧记录
     *
     * 当月入库，但入库单时已存累计折旧的资产，本月产生累计折旧记录。如：盘盈
     *
     * 用户按正式投入日期折旧的资产，且在入库时产生的累计折旧，本月产生累计折旧记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1:是 0:否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'04' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.manage_depre_money,0) as depre_money
                         ,nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                    from ass_card_Other t1
                    left join ASS_RESOURCE_Other t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_manage_depre,0)  =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.manage_depre_money,0) >  0
                      and (   (     nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              )--新制度修改：已提完，不包含本月入库卡片
                           or (    (      prm_para_05007 = '2'
                                     and (to_char(t1.run_date,'YYYYMM')    > prm_acc_year||prm_acc_month)
                                     and (to_char(t1.in_date ,'YYYYMM')    < prm_acc_year||prm_acc_month )
                                    )--新制度修改：不包含本月入库卡片
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )--新制度修改：不包含本月处置申报卡片
                                    or (    (to_char(t1.dispose_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )--新制度修改：不包含本月处置卡片
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                           or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              ) --新制度修改：本月处置申报、处置卡片单独处理      
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Other.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_Other.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_Other.Depre_Money%type      ;      --累计折旧
      V_ORI_CUR_MONEY        ASS_CARD_Other.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_Other.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_Other.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_Other.Now_Depre_Amount%type;  --本期折旧
      V_ADD_DEPRE_MONEY      ASS_CARD_Other.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_Other.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Other.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Other.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Other.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Other.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_Other.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Other.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Other.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Other.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Other.Add_Depre_Month%type;   --累计折旧月数

      v_AREA_sum             ASS_SHARE_DEPT_R_Other.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Other.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Other.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Other.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Other.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Other.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Other.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Other.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Other.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_Other.Note%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '其他固定资产累计折旧补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计折旧
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_Other t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_Other t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总折旧数 - 其他科室的折旧，确保与折旧金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

             if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;

             --插入折旧数据表
             insert
               into ASS_DEPRE_MANAGE_Other(
                     GROUP_ID                      --集团ID
                    ,HOS_ID                        --医院ID
                    ,COPY_CODE                     --账套编码
                    ,DEPRE_NO                      --折旧序号
                    ,DEPRE_YEAR                    --折旧年度
                    ,DEPRE_MONTH                   --折旧期间
                    ,ASS_CARD_NO                   --资产卡片号
                    ,SOURCE_ID                     --资金来源
                    ,USE_DEPT_ID                   --使用科室ID
                    ,USE_DEPT_NO                   --使用科室NO
                    ,USE_PERCENT                   --分摊比例
                    ,PRIM_MONEY                    --原值
                    ,NOW_DEPRE_AMOUNT              --本期折旧
                    ,ADD_DEPRE_AMOUNT              --累计折旧
                    ,ADD_DEPRE_MONTH               --累计折旧月份
                    ,CUR_MONEY                     --资产净值
                    ,FORE_MONEY                    --预留残值
                    ,OPERATOR                      --操作员
                    ,DEAL_DATE                     --处理日期
                    ,EQUI_DEPRE_CODE               --使用折旧方法
                    ,NOTE                          --摘要
                    )
                 values(
                    prm_group_id
                   ,prm_hos_id
                   ,prm_copy_code
                   ,1
                   ,prm_acc_year
                   ,prm_acc_month
                   ,v_ASS_CARD_NO
                   ,v_soure_id
                   ,v_USE_DEPT_ID
                   ,v_USE_DEPT_NO
                   ,v_USE_PERCENT
                   ,V_PRICE
                   ,V_NOW_DEPRE_MONEY
                   ,V_ADD_DEPRE_MONEY
                   ,v_add_depre_month
                   ,V_CUR_MONEY
                   ,V_FORE_MONEY
                   ,prm_operator
                   ,sysdate
                   ,V_DEPR_METHOD
                   ,V_NOTE
                 );

            --如果存在冲销累计折旧时
            if(  (g_para_05104=1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_MANAGE_Other(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --折旧序号
                      ,DEPRE_YEAR                    --折旧年度
                      ,DEPRE_MONTH                   --折旧期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期折旧
                      ,ADD_DEPRE_AMOUNT              --累计折旧
                      ,ADD_DEPRE_MONTH               --累计折旧月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用折旧方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)        --改成累计折旧 原 V_NOW_DEPRE_MONEY
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产累计分摊补填时失败！'||SQLERRM;
   end prc_FillAddManageOtherAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageOtherAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageOtherAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '其他固定资产卡片更新完成!';

     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_Other t
          set  t.manage_depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_Other t
          set  t.manage_depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_manage_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_Other t
          set  t.manage_depre_money     = t.manage_depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片更新失败！'||SQLERRM;

   END prc_UpdateManageOtherAll;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcOtherPortALL
   || 功能描述 ：其他固定资产折旧接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcOtherPortALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '其他固定资产计提成功!';

     /*--1、加载全局参数
     prc_LoadPara( prm_group_id
                  ,prm_hos_id
                  ,prm_copy_code
                  ,prm_AppCode
                  ,prm_ErrTxt
                 );

     if prm_AppCode <> def_OK then
        return;
     end if;*/


     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(3)计算折旧前完整性检查
     prc_ChkCardOtherAll( prm_group_id             --集团
                           ,prm_hos_id               --医院
                           ,prm_copy_code            --账套
                           ,prm_acc_year             --年度
                           ,prm_acc_month            --月份
                           ,prm_AppCode              --执行代码
                           ,prm_ErrTxt               --错误信息
                           );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(4)删除折旧表数据
     prc_DeleteDepreOtherAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     --(5)装载卡片数据
     prc_LoadCardOtherAll( prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度
                            ,prm_acc_month              --月份
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息
                           );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)装载补算卡片数据
     prc_LoadFillCalcOtherAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(7)资产计提折旧
     prc_CalcDepreOtherALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(7-2)根据上月折旧数据更新本月折旧
     prc_ModifyDepreOtherAll(  prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );
     if prm_AppCode <>  def_OK  then
        return;
     end if;  

     --(8)插入折旧表数据
     prc_InsertDepreOtherAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(9)对累计折旧进行补填
     prc_FillAddDepreOtherAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)更新卡片及资金来表累计折旧数据
     prc_UpdateCardOtherAll (  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(11)重新初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(12)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(13)计算折旧前完整性检查
     prc_ChkManageOtherAll( prm_group_id             --集团
                             ,prm_hos_id               --医院
                             ,prm_copy_code            --账套
                             ,prm_acc_year             --年度
                             ,prm_acc_month            --月份
                             ,prm_AppCode              --执行代码
                             ,prm_ErrTxt               --错误信息
                             );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(14)删除折旧表数据
     prc_DeleteManageOtherAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(15)装载卡片数据
     prc_LoadManageOtherAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(16)装载补算卡片数据
     prc_LoadFillManageOtherAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(17)资产计提折旧
     prc_CalcManageOtherALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(18)插入折旧表数据
     prc_InsertManageOtherAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(19)对累计折旧进行补填
     prc_FillAddManageOtherAll(  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_operator               --操作员名称
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(20)更新卡片及资金来表累计折旧数据
     prc_UpdateManageOtherAll (  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK             ;
        prm_ErrTxt      := '其他固定资产计提成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产计提失败！'||SQLERRM;
   END prc_CalcOtherPortALL;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardInassetsAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     /*********************无形资产入库当月计提摊销*************************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     **********************************************************************************/
     v_price                ASS_CARD_Inassets.Price%type            ;
     v_depre_money          ASS_CARD_Inassets.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Inassets.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Inassets.Fore_Money%type       ;

     v_price_source         ASS_CARD_Inassets.Price%type            ;
     v_depre_money_source   ASS_CARD_Inassets.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Inassets.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Inassets.Fore_Money%type       ;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '无形资产卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_Inassets t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_Inassets t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_Inassets t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)     =  1
        and ((nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
         or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         )
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_Inassets t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;

     --处置申报日期不能大于处置日期
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_inassets t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)     =  1
        and nvl(t1.use_state,0)   = '7'
        and nvl(to_char(t1.apply_date,'YYYYMM'),'000000') > nvl(to_char(t1.dispose_date,'YYYYMM'),'000000')
        and nvl(t1.cur_money,0) > 0
         ;

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在处置申报日期大于处置日期的资产!';
        return;
     end if;

     /*****************************无形资产入库当月计提摊销*******************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     *************************************************************************************/
     --校验新增资产不允许跨两月提摊销
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_Inassets t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算摊销的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Inassets t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_Inassets t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_depr,0) = 1
                           and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                )
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )
                      )
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计摊销
     v_exist_flag := 0 ;
/**
     select count(1)
       into v_exist_flag
       from ASS_CARD_Inassets t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.depre_money,0) > 0
        and nvl(t1.is_depr,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
            )
        and not exists(
                        select 1
                          from ASS_DEPRE_ACC_Inassets t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end

                                                )
                       )
        ;

        if v_exist_flag > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提摊销或期初累计摊销未维护!';
            return;
        end if;
*/

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardInassetsAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreInassetsAll
   || 功能描述 ：根据删除摊销表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreInassetsAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '无形资产删除摊销表数据成功！';
     v_exist_flag := 0 ;

     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '摊销年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_ACC_Inassets t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计摊销
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_ACC_Inassets t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop

            if rec.now_depre_amount <> 0 then
               update ASS_CARD_Inassets t
                  set t.depre_money = t.depre_money - rec.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - rec.now_depre_amount) - nvl(t.fore_money,0)
                     ,t.add_depre_month = nvl(t.add_depre_month,0)
                                          - (rec.max_depre_month - rec.min_depre_month + 1)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;

        end loop;

        --还原资金来源表累计摊销
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_ACC_Inassets t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
               update ASS_RESOURCE_Inassets t
                  set t.depre_money = t.depre_money - recsource.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - recsource.now_depre_amount) - nvl(t.fore_money,0)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = recsource.ass_card_no
                  and t.source_id   = recsource.source_id
                  ;
            end if;
        end loop;

        --删除摊销表数据
        delete
          from ASS_DEPRE_ACC_Inassets t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产删除摊销表数据失败！'||SQLERRM;
   END prc_DeleteDepreInassetsAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardInassetsAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计摊销
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计摊销月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --摊销方法
                ,t.Acc_Depre_Amount  --摊销年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'05' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.depre_money,0) as depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_depre_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.depr_method,'01') as depr_method
                                     ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                                from ass_card_Inassets t1
                                left join ASS_RESOURCE_Inassets t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_depr,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_ACC_Inassets t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Inassets.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_Inassets.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_Inassets.Depre_Money%type      ;      --累计摊销
      V_CUR_MONEY            ASS_CARD_Inassets.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Inassets.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Inassets.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Inassets.Depr_Method%type      ;      --摊销方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Inassets.Acc_Depre_Amount%type ;      --摊销年限
      V_dispose_type         ASS_CARD_Inassets.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Inassets.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Inassets.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Inassets.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Inassets.Add_Depre_Month%type;   --累计摊销月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Inassets.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_Inassets.CHANGE_Depre%type;   --累计摊销调整金额
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '无形资产卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;


     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计摊销
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计摊销月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --摊销方法
                                          ,V_ACC_DEPRE_AMOUNT      --摊销年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/
          --当资产卡片为已处置状态且存在处置申报，先还原待处置状态。无形资产当月不计提摊销
          if V_USE_STATE = 7 and nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') <> '000000' then
             V_USE_STATE := 6 ;
          end if;

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前摊销年月 ,需要恢复为正常状态，并且压栈计提摊销
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前摊销年月 ,不计算本月摊销，但生成本月冲减摊销
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前摊销年月 ,需要计算本月不计提摊销
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进
            if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000' then
               --如果处置年月 > 当前摊销年月 ,需要恢复为正常状态，并且压栈计提摊销
               if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                  V_USE_STATE  := 1 ;
                  v_Push_State := 1 ;
               end if;

               --如果处置年月 = 当前摊销年月 ,不计算本月摊销，但生成本月冲减摊销
               if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               end if;

               --如果处置年月 < 当前摊销年月 ,需要计算本月不计提摊销
               if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                  v_Push_State := 0 ;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
                v_Push_State := 0 ;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原摊销月份原值、累计摊销、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Inassets t1
              left join ASS_CHANGE_Inassets t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计摊销变动记录，还原摊销月份原值、累计摊销、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Inassets t1
              left join ASS_DEPRE_Inassets t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计摊销
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月摊销
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计摊销
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计摊销月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --摊销方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --摊销年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计摊销
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产卡片装载失败！'||SQLERRM;

   END prc_LoadCardInassetsAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcInassetsAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
         select a.Naturs_Code
               ,a.ass_card_no
               ,a.source_id
               ,a.price
               ,a.depre_money
               ,a.cur_money
               ,a.fore_money
               ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (select '05' as Naturs_Code
                   , t1.ass_card_no
                   , t1.source_id
                   , t1.price
                   , t1.depre_money
                   , t1.cur_money
                   , t1.fore_money
                   , t2.add_depre_month
              from ASS_RESOURCE_Inassets t1
              left join ass_card_Inassets t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.ass_card_no = t2.ass_card_no
             where t1.cur_money   <= 0      --资金来源: 现值<=0
               and t2.cur_money   > 0       --卡片    : 现值 > 0
               and t1.group_id    =  prm_group_id
               and t1.hos_id      =  prm_hos_id
               and t1.copy_code   =  prm_copy_code
               and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      )
                    and nvl(t2.is_depr,0)          =  1
                    and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                          or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                          or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                         )
             ) a
             left join (select t3.ass_card_no
                              ,t3.source_id
                              ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                         from ASS_DEPRE_ACC_Inassets t3
                        where t3.group_id    = prm_group_id
                          and t3.hos_id      = prm_hos_id
                          and t3.copy_code   = prm_copy_code
                          and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                         else prm_acc_year
                                     end
                                   )
                          and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                         else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                     end
                                    )
                         group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                  ,t3.ass_card_no,t3.source_id
                         ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;
      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Inassets.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_Inassets.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_Inassets.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_Inassets.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_Inassets.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_Inassets.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_Inassets.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Inassets.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_Inassets.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '无形资产补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Inassets t1
              left join ASS_CHANGE_Inassets t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Inassets t1
              left join ASS_DEPRE_Inassets t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '无形资产补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillCalcInassetsAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreInassetsALL
   || 功能描述 ：根据计算数据栈进行出栈计算摊销
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreInassetsALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS

      --定义变量
      v_card_no              ASS_CARD_Inassets.Ass_Card_No%type;
      v_card_price           ASS_CARD_Inassets.Price%type;
      v_card_now_depre_money ASS_CARD_Inassets.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_Inassets.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_Inassets.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_Inassets.Cur_Money%type;
      v_card_fore_money      ASS_CARD_Inassets.Fore_Money%type;
      v_card_use_state       ASS_CARD_Inassets.Use_State%type;
      v_card_depr_method     ASS_CARD_Inassets.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_Inassets.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_Inassets.Depre_Money%type;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '无形资产计算摊销成功!'                 ;



     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中有数据，则表明需要计算摊销，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_no              := '';
         v_card_price           := 0 ;
         v_card_now_depre_money := 0 ;
         v_card_add_depre_money := 0 ;
         v_card_cur_money       := 0 ;
         v_card_fore_money      := 0 ;
         v_card_add_depre_month := 0 ;
         v_BACK_ADD_DEPRE_MONEY := 0 ;
         v_card_use_state       := 0 ;
         v_card_depr_method     := '01';
         v_ACC_DEPRE_AMOUNT     := '0';

         --计算摊销
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}摊销方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_DEPRE_MONTH >= g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计摊销月数或摊销年限维护不正确!';
                    return;
                 end if;

                 --计算本月摊销
                 if g_tab_card_source(i).ADD_DEPRE_MONTH + 1 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                     g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                 else
                     --计算本次摊销 计算公式:本期摊销 = 现值/(摊销年限*12 - 累计摊销月数）
                    /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                     - g_tab_card_source(i).FORE_MONEY
                                                                     )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                   ,2);*/

                     g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                     )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                        - nvl(g_tab_card_source(i).ADD_DEPRE_MONTH,0)
                                                                       )
                                                                   ,2);
                     if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                        g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                     end if;
                 end if;

                 --计算累计摊销月份
                 g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 1;

                 --计算累计摊销
                 g_tab_card_source(i).ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY
                                                         +g_tab_card_source(i).NOW_DEPRE_MONEY;

                 if   g_tab_card_source(i).ADD_DEPRE_MONEY
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计摊销维护不正确!';
                    return;
                 end if;

                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;




                 --新制度修改：增加处置申报是否冲减累计摊销参数
                 if  ((g_para_05104 = '1' and g_tab_card_source(i).USE_STATE = '6') 
                   or g_tab_card_source(i).USE_STATE = '7' ) then
                     --计算冲减累计摊销
                     g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);
                 end if;

             end if; --<<平均年限法>>


             --卡片结果数据压栈
             v_j := v_j + 1 ;
             g_tab_card_source_ret(v_j).Naturs_Code      := '05'                                ;
             g_tab_card_source_ret(v_j).ASS_CARD_NO      := g_tab_card_source(i).ass_card_no    ;
             g_tab_card_source_ret(v_j).SOURCE_ID        := g_tab_card_source(i).SOURCE_ID      ;
             g_tab_card_source_ret(v_j).PRICE            := g_tab_card_source(i).PRICE          ;
             g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := g_tab_card_source(i).NOW_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := g_tab_card_source(i).ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := g_tab_card_source(i).ADD_DEPRE_MONTH;
             g_tab_card_source_ret(v_j).CUR_MONEY        := g_tab_card_source(i).CUR_MONEY;
             g_tab_card_source_ret(v_j).FORE_MONEY       := g_tab_card_source(i).FORE_MONEY;
             g_tab_card_source_ret(v_j).USE_STATE        := g_tab_card_source(i).USE_STATE;
             g_tab_card_source_ret(v_j).DEPRE_METHOD     := g_tab_card_source(i).DEPRE_METHOD;
             g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;

             --如果存在多条记录且到第二张卡片时，将上一张卡片压栈
             if (  g_tab_card_source.count() > 1 and i > 1 ) then
                 --通过 i> 1防止数据下标越界
                 if (g_tab_card_source(i).ASS_CARD_NO <>  g_tab_card_source(i-1).ASS_CARD_NO ) then
                     --卡片结果数据压栈
                     v_i := v_i + 1 ;
                     g_tab_card_ret(v_i).Naturs_Code      := '05'                     ;
                     g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                     g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                     g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                     g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                     g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                     g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                     g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                     g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                     g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;


                     v_card_no              := '';
                     v_card_price           := 0 ;
                     v_card_now_depre_money := 0 ;
                     v_card_add_depre_money := 0 ;
                     v_card_cur_money       := 0 ;
                     v_card_fore_money      := 0 ;
                     v_card_add_depre_month := 0 ;
                     v_BACK_ADD_DEPRE_MONEY := 0 ;
                     v_card_use_state       := 0 ;
                     v_card_depr_method     := '01';
                     v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --计算卡片压栈数据
             v_card_no          := g_tab_card_source(i).ass_card_no ;
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_DEPRE_MONEY;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_DEPRE_MONEY;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_DEPRE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;

             --如果仅存在一张卡片或循环到最后一张卡片时，将卡片压栈
             if ( g_tab_card_source.count() > 1 and i  >  1) then
                --当最后一条数据
                if (    i = g_tab_card_source.count())  then

                   --卡片结果数据压栈
                   v_i := v_i + 1 ;
                   g_tab_card_ret(v_i).Naturs_Code      := '05'                     ;
                   g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                   g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                   g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                   g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                   g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                   g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                   g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                   g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                   g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;


                   v_card_no              := '';
                   v_card_price           := 0 ;
                   v_card_now_depre_money := 0 ;
                   v_card_add_depre_money := 0 ;
                   v_card_cur_money       := 0 ;
                   v_card_fore_money      := 0 ;
                   v_card_add_depre_month := 0 ;
                   v_BACK_ADD_DEPRE_MONEY := 0 ;
                   v_card_use_state       := 0 ;
                   v_card_depr_method     := '01';
                   v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --如果仅为一张卡片时，卡片数据压栈
             if (  g_tab_card_source.count() = 1 ) then
                 --卡片结果数据压栈
                 v_i := v_i + 1 ;
                 g_tab_card_ret(v_i).Naturs_Code      := '05'                     ;
                 g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                 g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                 g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                 g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                 g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                 g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                 g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                 g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                 g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;


                 v_card_no              := '';
                 v_card_price           := 0 ;
                 v_card_now_depre_money := 0 ;
                 v_card_add_depre_money := 0 ;
                 v_card_cur_money       := 0 ;
                 v_card_fore_money      := 0 ;
                 v_card_add_depre_month := 0 ;
                 v_BACK_ADD_DEPRE_MONEY := 0 ;
                 v_card_use_state       := 0 ;
                 v_card_depr_method     := '01';
                 v_ACC_DEPRE_AMOUNT     := '0';
             end if;

         end loop;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产摊销计提失败！'||SQLERRM;

   END prc_CalcDepreInassetsALL;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreInassetsAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     v_prim_money           ASS_DEPRE_ACC_Inassets.Prim_Money%type  ;
     v_now_depre_amount     ASS_DEPRE_ACC_Inassets.Now_Depre_Amount%type;
     v_now_depre_bridge     ASS_DEPRE_ACC_Inassets.Now_Depre_Amount%type;
     n_count                integer                                ;
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '无形资产摊销修正检验成功！';
     v_exist_flag := 0  ;
     v_prim_money := 0  ;
     v_now_depre_amount := 0 ;
     v_now_depre_bridge := 0 ;
         
     for i in 1..g_tab_card_source_ret.count() loop
       
       --如果本次折旧与累计折旧相等，说明首次折旧，不需要与上月校验
       if g_tab_card_source_ret(i).ADD_DEPRE_MONEY = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
          continue;
       end if;  
       
       --如果已折完的卡片，需要将剩余净值全部提完，不需要与上月校验小数位
       if g_tab_card_source_ret(i).cur_money = 0 then 
          continue;
       end if;
       
       --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
       begin
          select count(1)
            into v_exist_flag
            from ASS_CHANGE_SOURCE_Inassets t1
            left join ASS_CHANGE_Inassets t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.CHANGE_date,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
             WHEN OTHERS THEN
               v_exist_flag := 0;
        end;
        
        --本月发生原值变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if;  
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select count(1)
            into v_exist_flag
            from ASS_DEPRE_SOURCE_Inassets t1
            left join ASS_DEPRE_Inassets t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
           WHEN OTHERS THEN
             v_exist_flag := 0;
        end;   
          
        --本月发生累计折旧变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if; 
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select sum(nvl(t3.prim_money,0)) as prim_money
                ,sum(nvl(t3.NOW_depre_amount,0)) as NOW_depre_amount
            into v_prim_money
                ,v_NOW_depre_amount    
           from ASS_DEPRE_ACC_Inassets t3
          where t3.group_id    = prm_group_id
            and t3.hos_id      = prm_hos_id
            and t3.copy_code   = prm_copy_code
            and t3.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
            and t3.source_id   = g_tab_card_source_ret(i).SOURCE_ID
            and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                           else prm_acc_year
                       end
                     )
            and t3.depre_month = (case when prm_acc_month = '01' then '12'
                           else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                       end
                      )
            ;
          EXCEPTION
           WHEN OTHERS THEN
             v_prim_money := 0       ;
             v_NOW_depre_amount := 0 ;             
        end; 
         
        --如果上月原值与本月原值不一致时，不需要进行修正校验
        if nvl(v_prim_money,0) <> g_tab_card_source_ret(i).PRICE then 
           continue;
        end if;
        
        --如果上月折旧与本月折旧完全一致，不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
           continue;
        end if;
        
        --如果上月折旧为0，不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) =  0  then
           continue;
        end if;
          
        --如果上月折旧与本月折旧差的绝对值小于1且上月折旧数大于0时，那么取上月折旧
        if abs(nvl(v_NOW_depre_amount,0) - g_tab_card_source_ret(i).NOW_DEPRE_MONEY) < 1 
           and abs(nvl(v_NOW_depre_amount,0)) > 0  then
           g_tab_card_source_ret(i).Add_depre_money := g_tab_card_source_ret(i).Add_depre_money 
                                                    -  g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                    +  nvl(v_NOW_depre_amount,0);
           g_tab_card_source_ret(i).cur_money :=   g_tab_card_source_ret(i).cur_money 
                                                 + g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                 -  nvl(v_NOW_depre_amount,0);
                                                                                        
           v_now_depre_bridge := g_tab_card_source_ret(i).NOW_DEPRE_MONEY;
           
           g_tab_card_source_ret(i).NOW_DEPRE_MONEY := nvl(v_NOW_depre_amount,0);
           
           for j in 1..g_tab_card_ret.count() loop
               if g_tab_card_ret(j).ASS_CARD_NO = g_tab_card_source_ret(i).ASS_CARD_NO then
                  g_tab_card_ret(j).Add_depre_money := g_tab_card_ret(j).Add_depre_money 
                                                    -  nvl(v_now_depre_bridge,0)
                                                    +  nvl(v_NOW_depre_amount,0);
                  g_tab_card_ret(j).cur_money :=   g_tab_card_ret(j).cur_money 
                                                   + nvl(v_now_depre_bridge,0)
                                                   -  nvl(v_NOW_depre_amount,0);
                                                                                                
                  g_tab_card_ret(j).NOW_DEPRE_MONEY := g_tab_card_ret(j).NOW_DEPRE_MONEY 
                                                       - nvl(v_now_depre_bridge,0)
                                                       + nvl(v_NOW_depre_amount,0);
                  exit;
               end if;           
           end loop; 
           v_now_depre_bridge := 0 ;            
        end if;     
     end loop;
     
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产摊销修正检验失败！'||SQLERRM;
   END prc_ModifyDepreInassetsAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreInassetsAll
   || 功能描述 ：根据卡片计算栈数据出栈插入摊销表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreInassetsAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Inassets.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Inassets.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Inassets.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_Inassets.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Inassets.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_Inassets.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_Inassets.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Inassets.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Inassets.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_Inassets.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_Inassets.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_Inassets.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_Inassets.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_Inassets.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Inassets.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Inassets.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Inassets.Fore_Money%type;
      V_NOTE                       ASS_DEPRE_ACC_Inassets.Note%type;
      v_in_date                    ASS_CARD_Inassets.In_Date%type;
      v_run_date                   ASS_CARD_Inassets.Run_Date%type;
      V_CHANGE_depre               ASS_DEPRE_SOURCE_Inassets.Change_Depre%type;
      V_CHANGE_depre_note          ASS_DEPRE_SOURCE_Inassets.Change_Depre%type;
      V_CHANGE_depre_TOT           ASS_DEPRE_SOURCE_Inassets.Change_Depre%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '无形资产摊销计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;
     V_CHANGE_depre             :=0            ;
     V_CHANGE_depre_note        :=0            ;
     V_CHANGE_depre_TOT         :=0            ;
     V_NOTE                     :=''           ;


     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;
       V_NOTE                     := ''          ;
       v_CHANGE_DEPRE             :=0            ;
       V_CHANGE_depre_note        :=0            ;
       V_CHANGE_depre_TOT         :=0            ;
       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_Inassets t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;

       --当入库时存在累计摊销或本月存在累计摊销变动记录时,摘要：明确标识，含补增

          select t.in_date,t.run_date
            into v_in_date,v_run_date
            from ASS_CARD_INASSETS t
           where t.group_id  = prm_group_id
             and t.hos_id    = prm_hos_id
             and t.copy_code = prm_copy_code
             and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
          ;

          if (   (g_para_05007 = '1' and (to_char(v_in_date,'YYYYMM')      = prm_acc_year||prm_acc_month ))
              or (g_para_05007 = '2' and (   (to_char(v_run_date,'YYYYMM') = prm_acc_year||prm_acc_month )
                                          and(to_char(v_in_date,'YYYYMM') <= prm_acc_year||prm_acc_month )
                                          )
                  )
             ) then
              if g_tab_card_source_ret(i).ADD_DEPRE_MONEY <> g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
               V_NOTE := '含补增';
               v_CHANGE_DEPRE:=g_tab_card_source_ret(i).ADD_DEPRE_MONEY - g_tab_card_source_ret(i).NOW_DEPRE_MONEY;
               end if;
          end if;

          --检查本月是否存在累计摊销记录存在
          if V_NOTE <> '含补增' then
             select sum(t1.change_depre)
               into v_CHANGE_DEPRE
              from ASS_DEPRE_SOURCE_INASSETS t1
              left join ASS_DEPRE_INASSETS t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
              where t1.group_id = prm_group_id
                and t1.hos_id   = prm_hos_id
                and t1.copy_code = prm_copy_code
                and t1.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                and t1.source_id = g_tab_card_source_ret(i).SOURCE_ID
                and to_char(t2.AUDIT_DATE,'YYYYMM')  = prm_acc_year||prm_acc_month
                and t2.state = 2
                ;

          end if;


       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_Inassets t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
              V_CHANGE_depre_note := V_CHANGE_depre;
           else
              --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
                 V_CHANGE_depre_note := V_CHANGE_depre - V_CHANGE_depre_TOT;
              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
                 V_CHANGE_depre_note := round(V_CHANGE_depre * v_USE_PERCENT,2);
                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                 V_CHANGE_depre_TOT    := V_CHANGE_depre_TOT    + V_CHANGE_depre_note;
              end if;
           end if;

           --如果存在冲减摊销时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;

          if V_CHANGE_depre_note <> 0 then
              V_NOTE := '含补增['||to_char(V_CHANGE_depre_note)||']';

           end if;

           --插入摊销数据表
           insert
             into ASS_DEPRE_ACC_Inassets(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --摊销序号
                  ,DEPRE_YEAR                    --摊销年度
                  ,DEPRE_MONTH                   --摊销期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期摊销
                  ,ADD_DEPRE_AMOUNT              --累计摊销
                  ,ADD_DEPRE_MONTH               --累计摊销月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用摊销方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,V_NOTE
               );

         --如果存在冲销累计摊销时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_ACC_Inassets(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --摊销序号
                  ,DEPRE_YEAR                    --摊销年度
                  ,DEPRE_MONTH                   --摊销期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期摊销
                  ,ADD_DEPRE_AMOUNT              --累计摊销
                  ,ADD_DEPRE_MONTH               --累计摊销月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用摊销方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产摊销计提失败！'||SQLERRM;

   END prc_InsertDepreInassetsAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreInassetsAll
   || 功能描述 ：本月不需要计提摊销的数据，但产生累计摊销数据，进入累计摊销表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计摊销，且为本月之前的入库的资产,需要本月产生累计摊销记录
     *
     * 当月入库，但入库单时已存累计摊销的资产，本月产生累计摊销记录。如：盘盈
     *
     * 用户按正式投入日期摊销的资产，且在入库时产生的累计摊销，本月产生累计摊销记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1:是 0:否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计摊销
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计摊销月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --摊销方法
                ,t.Acc_Depre_Amount  --摊销年限
                ,t.in_date           --入库日期
                ,t.run_date          --正式投入使用日期
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'05' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.depre_money,0) as depre_money
                         ,nvl(t2.cur_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                         ,t1.in_date
                         ,t1.run_date
                    from ass_card_Inassets t1
                    left join ASS_RESOURCE_Inassets t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_depr,0)          =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.depre_money,0)      >  0
                      and (   (     nvl(t2.cur_money,0)   <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              )--已提完
                           or (    (     prm_para_05007 = '2'
                                     and (to_char(t1.run_date,'YYYYMM')    >  prm_acc_year||prm_acc_month)
                                     and (to_char(t1.in_date ,'YYYYMM')    <  prm_acc_year||prm_acc_month)
                                    )
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )
                                    or (    (to_char(t1.dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                           or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )--新制度修改：增加申报是否冲减参数判断
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              )
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Inassets.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_Inassets.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_Inassets.Depre_Money%type      ;      --累计摊销
      V_ORI_CUR_MONEY        ASS_CARD_Inassets.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_Inassets.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_Inassets.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_Inassets.Now_Depre_Amount%type;  --本期摊销
      V_ADD_DEPRE_MONEY      ASS_CARD_Inassets.Depre_Money%type      ;      --累计摊销
      V_CUR_MONEY            ASS_CARD_Inassets.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Inassets.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Inassets.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Inassets.Depr_Method%type      ;      --摊销方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Inassets.Acc_Depre_Amount%type ;      --摊销年限
      V_dispose_type         ASS_CARD_Inassets.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Inassets.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Inassets.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Inassets.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Inassets.Add_Depre_Month%type;   --累计摊销月数

      v_AREA_sum             ASS_SHARE_DEPT_R_Inassets.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Inassets.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Inassets.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Inassets.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Inassets.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Inassets.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Inassets.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Inassets.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Inassets.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_Inassets.Note%type;
      v_in_date                    ASS_CARD_Inassets.In_Date%type;
      v_run_date                   ASS_CARD_Inassets.Run_Date%type;
      v_Only_Back            integer;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '无形资产累计摊销补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计摊销
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计摊销月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --摊销方法
                                          ,V_ACC_DEPRE_AMOUNT      --摊销年限
                                          ,v_in_date
                                          ,v_run_date
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         v_Only_Back                :=0            ;


         --在摊销年月之前入库，且在本月已处置，发生补填业务时，仅补填冲补摊销
         if (   (g_para_05007 = '1' and (to_char(v_in_date,'YYYYMM')  < prm_acc_year||prm_acc_month ))
             or (g_para_05007 = '2' and (   (to_char(v_run_date,'YYYYMM') < prm_acc_year||prm_acc_month )
                                         or (to_char(v_in_date,'YYYYMM')  < prm_acc_year||prm_acc_month )
                                        )
                 )
            )
             and ((nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
                 or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
                 )
           then
             v_Only_Back := 1 ;
         end if;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_Inassets t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_Inassets t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

              if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;

             --插入摊销数据表
             if  v_Only_Back = 0 then
                 insert
                   into ASS_DEPRE_ACC_Inassets(
                         GROUP_ID                      --集团ID
                        ,HOS_ID                        --医院ID
                        ,COPY_CODE                     --账套编码
                        ,DEPRE_NO                      --摊销序号
                        ,DEPRE_YEAR                    --摊销年度
                        ,DEPRE_MONTH                   --摊销期间
                        ,ASS_CARD_NO                   --资产卡片号
                        ,SOURCE_ID                     --资金来源
                        ,USE_DEPT_ID                   --使用科室ID
                        ,USE_DEPT_NO                   --使用科室NO
                        ,USE_PERCENT                   --分摊比例
                        ,PRIM_MONEY                    --原值
                        ,NOW_DEPRE_AMOUNT              --本期摊销
                        ,ADD_DEPRE_AMOUNT              --累计摊销
                        ,ADD_DEPRE_MONTH               --累计摊销月份
                        ,CUR_MONEY                     --资产净值
                        ,FORE_MONEY                    --预留残值
                        ,OPERATOR                      --操作员
                        ,DEAL_DATE                     --处理日期
                        ,EQUI_DEPRE_CODE               --使用摊销方法
                        ,NOTE                          --摘要
                        )
                     values(
                        prm_group_id
                       ,prm_hos_id
                       ,prm_copy_code
                       ,1
                       ,prm_acc_year
                       ,prm_acc_month
                       ,v_ASS_CARD_NO
                       ,v_soure_id
                       ,v_USE_DEPT_ID
                       ,v_USE_DEPT_NO
                       ,v_USE_PERCENT
                       ,V_PRICE
                       ,V_NOW_DEPRE_MONEY
                       ,V_ADD_DEPRE_MONEY
                       ,v_add_depre_month
                       ,V_CUR_MONEY
                       ,V_FORE_MONEY
                       ,prm_operator
                       ,sysdate
                       ,V_DEPR_METHOD
                       ,V_NOTE
                     );
            end if;

            --如果存在冲销累计摊销时
            if(  (g_para_05104=1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_ACC_Inassets(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --摊销序号
                      ,DEPRE_YEAR                    --摊销年度
                      ,DEPRE_MONTH                   --摊销期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期摊销
                      ,ADD_DEPRE_AMOUNT              --累计摊销
                      ,ADD_DEPRE_MONTH               --累计摊销月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用摊销方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产累计摊销补填时失败！'||SQLERRM;
   end prc_FillAddDepreInassetsAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardInassetsAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardInassetsAll (   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
  IS
     --定义变量
     v_exist_flag           integer;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '无形资产卡片更新完成!';
     v_exist_flag    := 0                      ;
     
     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_Inassets t
          set  t.depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_source_ret(i).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_Inassets t
          set  t.depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_depre_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_ret(j).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_Inassets t
          set  t.depre_money     = t.depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
              ,t.cur_money       = t.cur_money   - g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;
     
     /*****************************************************************
      * 仅参与折旧的卡片累计折旧被还原，需要重新执行，否则执行重复
      * 因此卡片必须为 g_tab_card_ret 或 g_tab_card_fill中存在
      *****************************************************************/
     --更改累计折旧变动数据      
     for rec in (
                 select t1.ass_card_no
                       ,t1.source_id
                       ,sum(nvl(t1.CHANGE_depre,0)) as CHANGE_depre
                  from ASS_DEPRE_SOURCE_Inassets t1
                  left join ASS_DEPRE_Inassets t2
                    on t1.group_id = t2.group_id
                   and t1.hos_id = t2.hos_id
                   and t1.copy_code = t2.copy_code
                   and t1.CHANGE_no = t2.CHANGE_no
                 where t1.group_id    = prm_group_id
                   and t1.hos_id      = prm_hos_id
                   and t1.copy_code   = prm_copy_code
                   and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
                   and t2.state = 2     --0:新建 1:审核 2:确认
                   group by t1.ass_card_no,t1.source_id
                  ) loop

        for v_i in 1..g_tab_card_ret.count() loop
            if g_tab_card_ret(v_i).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if;   
        end loop;  
        
        for v_j in 1..g_tab_card_fill.count() loop
            if g_tab_card_fill(v_j).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if; 
        end loop; 
        
        <<NEXT_UPDATE>>
        if v_exist_flag = 1  then
           update ASS_RESOURCE_Inassets t
              set t.depre_money = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end  
                 ,t.cur_money   = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money - rec.CHANGE_depre end
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              and t.source_id   = rec.source_id
              ;

           update ASS_CARD_Inassets t
              set t.depre_money     = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end
                 ,t.cur_money       = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money   - rec.CHANGE_depre end 
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              ;
           v_exist_flag := 0 ;   
        end if; 
      end loop;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产卡片更新失败！'||SQLERRM;

   END prc_UpdateCardInassetsAll;




   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageInassetsAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     /*****************************无形资产入库当月计提摊销*******************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     *************************************************************************************/

     v_price                ASS_CARD_Inassets.Price%type            ;
     v_depre_money          ASS_CARD_Inassets.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Inassets.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Inassets.Fore_Money%type       ;

     v_price_source         ASS_CARD_Inassets.Price%type            ;
     v_depre_money_source   ASS_CARD_Inassets.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Inassets.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Inassets.Fore_Money%type       ;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '无形资产卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     /*******************************在资产摊销时已做较验******************************************
     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_Inassets t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_Inassets t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_Inassets t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and nvl(t1.use_state,0)        <> 0
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_Inassets t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;
     ********************************************************************************************/

     /*****************************无形资产入库当月计提摊销*******************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     **************************************************************************************/

     --校验新增资产不允许跨两月提摊销
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.manage_depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_Inassets t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算分摊的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Inassets t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_Inassets t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_manage_depre,0) = 1
                            and (   (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 )
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )
                      )
            ;

          --由于折旧已计算，因此需要重新计算现值
          v_Cur_Money        :=  v_price - v_depre_money - v_Fore_Money;
          v_Cur_Money_source :=  v_price_source - v_depre_money_source - v_Fore_Money_source;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计摊销
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ASS_CARD_Inassets t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.manage_depre_money,0) > 0
        and nvl(t1.is_manage_depre,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             )
        and not exists(
                        select 1
                          from ASS_DEPRE_MANAGE_Inassets t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )
        ;

        if v_exist_flag > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提分摊或期初累计分摊未维护!';
            return;
        end if;


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageInassetsAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageInassetsAll
   || 功能描述 ：根据删除摊销表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '无形资产删除分摊表数据成功！';
     v_exist_flag := 0 ;

     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '分摊年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_MANAGE_Inassets t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计摊销
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_MANAGE_Inassets t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop

            if rec.now_depre_amount <> 0 then
               update ASS_CARD_Inassets t
                  set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - rec.now_depre_amount
                     ,t.ADD_MANAGE_MONTH = nvl(t.ADD_MANAGE_MONTH,0)
                                          - (rec.max_depre_month - rec.min_depre_month + 1)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;
        end loop;

        --还原资金来源表累计摊销
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_MANAGE_Inassets t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
                update ASS_RESOURCE_Inassets t
                   set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - recsource.now_depre_amount
                 where t.group_id = prm_group_id
                   and t.hos_id   = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.ass_card_no = recsource.ass_card_no
                   and t.source_id   = recsource.source_id
                   ;
            end if;
        end loop;

        --删除摊销表数据
        delete
          from ASS_DEPRE_MANAGE_Inassets t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产删除分摊表数据失败！'||SQLERRM;
   END prc_DeleteManageInassetsAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageInassetsAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计摊销
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计摊销月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --摊销方法
                ,t.Acc_Depre_Amount  --摊销年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'05' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.manage_depre_money,0) as depre_money
                                     ,nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_manage_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.manage_depr_method,'01') as depr_method
                                     ,nvl(t1.manage_depre_amount,0) as Acc_Depre_Amount
                                from ass_card_Inassets t1
                                left join ASS_RESOURCE_Inassets t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_manage_depre,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_MANAGE_Inassets t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Inassets.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_Inassets.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_Inassets.Depre_Money%type      ;      --累计摊销
      V_CUR_MONEY            ASS_CARD_Inassets.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Inassets.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Inassets.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Inassets.Depr_Method%type      ;      --摊销方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Inassets.Acc_Depre_Amount%type ;      --摊销年限
      V_dispose_type         ASS_CARD_Inassets.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Inassets.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Inassets.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Inassets.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Inassets.Add_Depre_Month%type;   --累计摊销月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Inassets.CHANGE_Price%type;  --原值调整金额

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '无形资产卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;



     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计摊销
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计摊销月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --摊销方法
                                          ,V_ACC_DEPRE_AMOUNT      --摊销年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --当资产卡片为已处置状态且存在处置申报，先还原待处置状态。无形资产当月不计提摊销
          if V_USE_STATE = 7 and nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') <> '000000' then
             V_USE_STATE := 6 ;
          end if;

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前摊销年月 ,需要恢复为正常状态，并且压栈计提摊销
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前摊销年月 ,需要计算本月摊销，并生成本月冲减摊销
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前摊销年月 ,需要计算本月不计提摊销
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进
            if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000' then
               --如果处置年月 > 当前摊销年月 ,需要恢复为正常状态，并且压栈计提摊销
               if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                  V_USE_STATE  := 1 ;
                  v_Push_State := 1 ;
               end if;

               --如果处置年月 = 当前摊销年月 ,需要计算本月摊销，并生成本月冲减摊销
               if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               end if;

               --如果处置年月 < 当前摊销年月 ,需要计算本月不计提摊销
               if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                  v_Push_State := 0 ;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
                v_Push_State := 0 ;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原摊销月份原值、累计摊销、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Inassets t1
              left join ASS_CHANGE_Inassets t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************

          --读取本月累计摊销变动记录，还原摊销月份原值、累计摊销、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Inassets t1
              left join ASS_DEPRE_Inassets t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计摊销
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/
          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月摊销
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计摊销
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计摊销月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --摊销方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --摊销年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计摊销
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产卡片装载失败！'||SQLERRM;

   END prc_LoadManageInassetsAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageInassetsAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
        select a.Naturs_Code
              ,a.ass_card_no
              ,a.source_id
              ,a.price
              ,a.depre_money
              ,a.cur_money
              ,a.fore_money
              ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (
               select '05' as Naturs_Code
                     , t1.ass_card_no
                     , t1.source_id
                     , t1.price
                     , nvl(t1.manage_depre_money,0) as depre_money
                     , nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0) as cur_money
                     , t1.fore_money
                     , t2.add_manage_month as add_depre_month
                from ASS_RESOURCE_Inassets t1
                left join ass_card_Inassets t2
                  on t1.group_id = t2.group_id
                 and t1.hos_id = t2.hos_id
                 and t1.copy_code = t2.copy_code
                 and t1.ass_card_no = t2.ass_card_no
               where (nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0)) <= 0      --资金来源: 现值<=0
                 and (nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0)) >  0       --卡片    : 现值 > 0
                 and t1.group_id    =  prm_group_id
                 and t1.hos_id      =  prm_hos_id
                 and t1.copy_code   =  prm_copy_code
                 and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                        or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                        )
                      and nvl(t2.is_manage_depre,0)          =  1
                      and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                            or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                            or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                           )
             ) a
           left join (select t3.ass_card_no
                            ,t3.source_id
                            ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                       from ASS_DEPRE_MANAGE_Inassets t3
                      where t3.group_id    = prm_group_id
                        and t3.hos_id      = prm_hos_id
                        and t3.copy_code   = prm_copy_code
                        and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                       else prm_acc_year
                                   end
                                 )
                        and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                       else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                   end
                                  )
                       group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                ,t3.ass_card_no,t3.source_id
                       ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;
      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Inassets.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_Inassets.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_Inassets.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_Inassets.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_Inassets.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_Inassets.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_Inassets.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Inassets.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_Inassets.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '无形资产补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Inassets t1
              left join ASS_CHANGE_Inassets t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************
          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Inassets t1
              left join ASS_DEPRE_Inassets t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '无形资产补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillManageInassetsAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageInassetsALL
   || 功能描述 ：根据计算数据栈进行出栈计算摊销
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageInassetsALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS


   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '无形资产计算分摊成功!'                 ;

     --计算管理分摊与计算摊销方法共用
     prc_CalcDepreInassetsALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode =  def_OK  then
        --初始化变量
        prm_AppCode     := def_OK                                  ;
        prm_ErrTxt      := '无形资产计算分摊成功!'                 ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产分摊计提失败！'||SQLERRM;

   END prc_CalcManageInassetsALL;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageInassetsAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageInassetsAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Inassets.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Inassets.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Inassets.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_Inassets.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Inassets.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_Inassets.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_Inassets.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Inassets.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Inassets.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_Inassets.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_Inassets.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_Inassets.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_Inassets.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_Inassets.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Inassets.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Inassets.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Inassets.Fore_Money%type;
      V_NOTE                       ASS_DEPRE_ACC_Inassets.Note%type;
      v_in_date                    ASS_CARD_Inassets.In_Date%type;
      v_run_date                   ASS_CARD_Inassets.Run_Date%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '无形资产分摊计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;



     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;
       V_NOTE                     := ''          ;

       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_Inassets t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;

       --当入库时存在累计分摊,摘要：明确标识，含补增。注：不存在本月存在累计分摊变动记录时
       if g_tab_card_source_ret(i).ADD_DEPRE_MONEY <> g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
          select t.in_date,t.run_date
            into v_in_date,v_run_date
            from ASS_CARD_INASSETS t
           where t.group_id  = prm_group_id
             and t.hos_id    = prm_hos_id
             and t.copy_code = prm_copy_code
             and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
          ;

          if (   (g_para_05007 = '1' and (to_char(v_in_date,'YYYYMM')      = prm_acc_year||prm_acc_month ))
              or (g_para_05007 = '2' and (   (to_char(v_run_date,'YYYYMM') = prm_acc_year||prm_acc_month )
                                          and(to_char(v_in_date,'YYYYMM') <= prm_acc_year||prm_acc_month )
                                          )
                  )
             ) then
               V_NOTE := '含补增';
          end if;
       end if;

       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_Inassets t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
           else
              --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);

                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
              end if;
           end if;

           --如果存在冲减摊销时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;

           if V_NOTE = '含补增' then
              V_NOTE := V_NOTE || to_char(V_ADD_DEPRE_MONEY - V_NOW_DEPRE_MONEY);
           end if;

           --插入摊销数据表
           insert
             into ASS_DEPRE_MANAGE_Inassets(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --摊销序号
                  ,DEPRE_YEAR                    --摊销年度
                  ,DEPRE_MONTH                   --摊销期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期摊销
                  ,ADD_DEPRE_AMOUNT              --累计摊销
                  ,ADD_DEPRE_MONTH               --累计摊销月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用摊销方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,V_NOTE
               );

         --如果存在冲销累计摊销时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_MANAGE_Inassets(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --摊销序号
                  ,DEPRE_YEAR                    --摊销年度
                  ,DEPRE_MONTH                   --摊销期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期摊销
                  ,ADD_DEPRE_AMOUNT              --累计摊销
                  ,ADD_DEPRE_MONTH               --累计摊销月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用摊销方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产分摊计提失败！'||SQLERRM;

   END prc_InsertManageInassetsAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageInassetsAll
   || 功能描述 ：本月不需要计提摊销的数据，但产生累计摊销数据，进入累计摊销表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageInassetsAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计摊销，且为本月之前的入库的资产,需要本月产生累计摊销记录
     *
     * 当月入库，但入库单时已存累计摊销的资产，本月产生累计摊销记录。如：盘盈
     *
     * 用户按正式投入日期摊销的资产，且在入库时产生的累计摊销，本月产生累计摊销记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1:是，0：否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计摊销
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计摊销月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --摊销方法
                ,t.Acc_Depre_Amount  --摊销年限
                ,t.in_date           --入库日期
                ,t.run_date          --正式投入使用日期
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'05' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.manage_depre_money,0) as depre_money
                         ,nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                         ,t1.in_date
                         ,t1.run_date
                    from ass_card_Inassets t1
                    left join ASS_RESOURCE_Inassets t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_manage_depre,0)  =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.manage_depre_money,0) >  0
                      and (   (     nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              )
                           or (    (    (      prm_para_05007 = '2'
                                          and (to_char(t1.run_date,'YYYYMM')    > prm_acc_year||prm_acc_month)
                                          and (to_char(t1.in_date ,'YYYYMM')    < prm_acc_year||prm_acc_month )
                                        )
                                    )
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )
                                    or (    (to_char(t1.dispose_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                           or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )--新制度修改：增加申报是否冲减参数判断
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              )
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Inassets.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_Inassets.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_Inassets.Depre_Money%type      ;      --累计摊销
      V_ORI_CUR_MONEY        ASS_CARD_Inassets.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_Inassets.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_Inassets.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_Inassets.Now_Depre_Amount%type;  --本期摊销
      V_ADD_DEPRE_MONEY      ASS_CARD_Inassets.Depre_Money%type      ;      --累计摊销
      V_CUR_MONEY            ASS_CARD_Inassets.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Inassets.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Inassets.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Inassets.Depr_Method%type      ;      --摊销方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Inassets.Acc_Depre_Amount%type ;      --摊销年限
      V_dispose_type         ASS_CARD_Inassets.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Inassets.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Inassets.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Inassets.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Inassets.Add_Depre_Month%type;   --累计摊销月数

      v_AREA_sum             ASS_SHARE_DEPT_R_Inassets.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Inassets.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Inassets.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Inassets.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Inassets.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Inassets.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Inassets.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Inassets.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Inassets.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_Inassets.Note%type;
      v_in_date                    ASS_CARD_Inassets.In_Date%type;
      v_run_date                   ASS_CARD_Inassets.Run_Date%type;
      v_Only_Back            integer;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '无形资产累计分摊补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计摊销
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计摊销月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --摊销方法
                                          ,V_ACC_DEPRE_AMOUNT      --摊销年限
                                          ,v_in_date
                                          ,v_run_date
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         v_Only_Back                :=0            ;


         --在摊销年月之前入库，且在本月已处置，发生补填业务时，仅补填冲补摊销
         if (   (g_para_05007 = '1' and (to_char(v_in_date,'YYYYMM')  < prm_acc_year||prm_acc_month ))
             or (g_para_05007 = '2' and (   (to_char(v_run_date,'YYYYMM') < prm_acc_year||prm_acc_month )
                                         or (to_char(v_in_date,'YYYYMM')  < prm_acc_year||prm_acc_month )
                                        )
                 )
            )
             and ((nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
                 or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
                 )
           then
             v_Only_Back := 1 ;
         end if;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_Inassets t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_Inassets t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

             if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;

             --插入摊销数据表
             if  v_Only_Back = 0 then
                 insert
                   into ASS_DEPRE_MANAGE_Inassets(
                         GROUP_ID                      --集团ID
                        ,HOS_ID                        --医院ID
                        ,COPY_CODE                     --账套编码
                        ,DEPRE_NO                      --摊销序号
                        ,DEPRE_YEAR                    --摊销年度
                        ,DEPRE_MONTH                   --摊销期间
                        ,ASS_CARD_NO                   --资产卡片号
                        ,SOURCE_ID                     --资金来源
                        ,USE_DEPT_ID                   --使用科室ID
                        ,USE_DEPT_NO                   --使用科室NO
                        ,USE_PERCENT                   --分摊比例
                        ,PRIM_MONEY                    --原值
                        ,NOW_DEPRE_AMOUNT              --本期摊销
                        ,ADD_DEPRE_AMOUNT              --累计摊销
                        ,ADD_DEPRE_MONTH               --累计摊销月份
                        ,CUR_MONEY                     --资产净值
                        ,FORE_MONEY                    --预留残值
                        ,OPERATOR                      --操作员
                        ,DEAL_DATE                     --处理日期
                        ,EQUI_DEPRE_CODE               --使用摊销方法
                        ,NOTE                          --摘要
                        )
                     values(
                        prm_group_id
                       ,prm_hos_id
                       ,prm_copy_code
                       ,1
                       ,prm_acc_year
                       ,prm_acc_month
                       ,v_ASS_CARD_NO
                       ,v_soure_id
                       ,v_USE_DEPT_ID
                       ,v_USE_DEPT_NO
                       ,v_USE_PERCENT
                       ,V_PRICE
                       ,V_NOW_DEPRE_MONEY
                       ,V_ADD_DEPRE_MONEY
                       ,v_add_depre_month
                       ,V_CUR_MONEY
                       ,V_FORE_MONEY
                       ,prm_operator
                       ,sysdate
                       ,V_DEPR_METHOD
                       ,V_NOTE
                     );
            end if;

            --如果存在冲销累计摊销时
            if(  (g_para_05104=1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_MANAGE_Inassets(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --摊销序号
                      ,DEPRE_YEAR                    --摊销年度
                      ,DEPRE_MONTH                   --摊销期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期摊销
                      ,ADD_DEPRE_AMOUNT              --累计摊销
                      ,ADD_DEPRE_MONTH               --累计摊销月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用摊销方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产累计分摊补填时失败！'||SQLERRM;
   end prc_FillAddManageInassetsAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageInassetsAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageInassetsAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '无形资产卡片更新完成!';

     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_Inassets t
          set  t.manage_depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_Inassets t
          set  t.manage_depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_manage_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_Inassets t
          set  t.manage_depre_money     = t.manage_depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产卡片更新失败！'||SQLERRM;

   END prc_UpdateManageInassetsAll;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcInassetsPortALL
   || 功能描述 ：无形资产摊销接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcInassetsPortALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '无形资产计提成功!';

     /*--1、加载全局参数
     prc_LoadPara( prm_group_id
                  ,prm_hos_id
                  ,prm_copy_code
                  ,prm_AppCode
                  ,prm_ErrTxt
                 );

     if prm_AppCode <> def_OK then
        return;
     end if;*/


     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(3)计算摊销前完整性检查
     prc_ChkCardInassetsAll( prm_group_id             --集团
                           ,prm_hos_id               --医院
                           ,prm_copy_code            --账套
                           ,prm_acc_year             --年度
                           ,prm_acc_month            --月份
                           ,prm_AppCode              --执行代码
                           ,prm_ErrTxt               --错误信息
                           );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(4)删除摊销表数据
     prc_DeleteDepreInassetsAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     --(5)装载卡片数据
     prc_LoadCardInassetsAll( prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度
                            ,prm_acc_month              --月份
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息
                           );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)装载补算卡片数据
     prc_LoadFillCalcInassetsAll(  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(7)资产计提摊销
     prc_CalcDepreInassetsALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     
     --(7-2)根据上月折旧数据更新本月折旧
     prc_ModifyDepreInassetsAll(   prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );
     if prm_AppCode <>  def_OK  then
        return;
     end if;  


     --(8)插入摊销表数据
     prc_InsertDepreInassetsAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(9)对累计摊销进行补填
     prc_FillAddDepreInassetsAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)更新卡片及资金来表累计摊销数据
     prc_UpdateCardInassetsAll (  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(11)重新初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(12)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(13)计算分摊前完整性检查
     prc_ChkManageInassetsAll( prm_group_id             --集团
                             ,prm_hos_id               --医院
                             ,prm_copy_code            --账套
                             ,prm_acc_year             --年度
                             ,prm_acc_month            --月份
                             ,prm_AppCode              --执行代码
                             ,prm_ErrTxt               --错误信息
                             );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(13)删除分摊表数据
     prc_DeleteManageInassetsAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(15)装载卡片数据
     prc_LoadManageInassetsAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(16)装载卡片数据
     prc_LoadFillManageInassetsAll(  prm_group_id               --集团
                                    ,prm_hos_id                 --医院
                                    ,prm_copy_code              --账套
                                    ,prm_acc_year               --年度
                                    ,prm_acc_month              --月份
                                    ,prm_AppCode                --执行代码
                                    ,prm_ErrTxt                 --错误信息
                                   );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(17)资产计提分摊
     prc_CalcManageInassetsALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(18)插入分摊表数据
     prc_InsertManageInassetsAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(19)对累计分摊进行补填
     prc_FillAddManageInassetsAll(  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_operator               --操作员名称
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(20)更新卡片及资金来表累计分摊数据
     prc_UpdateManageInassetsAll (  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK             ;
        prm_ErrTxt      := '无形资产计提成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '无形资产计提失败！'||SQLERRM;
   END prc_CalcInassetsPortALL;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardLandAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardLandAll(  prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     /*********************无形资产入库当月计提摊销*************************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     **********************************************************************************/
     v_price                ASS_CARD_Land.Price%type            ;
     v_depre_money          ASS_CARD_Land.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Land.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Land.Fore_Money%type       ;

     v_price_source         ASS_CARD_Land.Price%type            ;
     v_depre_money_source   ASS_CARD_Land.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Land.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Land.Fore_Money%type       ;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '土地卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_Land t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_Land t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_Land t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)     =  1
        and ((nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
         or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
         )
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_Land t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;

     --处置申报日期不能大于处置日期
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_land t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)     =  1
        and nvl(t1.use_state,0)   = '7'
        and nvl(to_char(t1.apply_date,'YYYYMM'),'000000') > nvl(to_char(t1.dispose_date,'YYYYMM'),'000000')
        and nvl(t1.cur_money,0) > 0
         ;

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在处置申报日期大于处置日期的资产!';
        return;
     end if;
     /*****************************土地入库当月计提摊销*******************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     *************************************************************************************/
     --校验新增资产不允许跨两月提摊销
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_Land t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算摊销的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Land t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_Land t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_depr,0) = 1
                           and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                )
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )
                      )
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计摊销
     v_exist_flag := 0 ;
/**
     select count(1)
       into v_exist_flag
       from ASS_CARD_Land t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.depre_money,0) > 0
        and nvl(t1.is_depr,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
            )
        and not exists(
                        select 1
                          from ASS_DEPRE_ACC_Land t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end

                                                )
                       )
        ;

        if v_exist_flag > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提摊销或期初累计摊销未维护!';
            return;
        end if;
*/

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardLandAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteDepreLandAll
   || 功能描述 ：根据删除摊销表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteDepreLandAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '土地删除摊销表数据成功！';
     v_exist_flag := 0 ;

     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '摊销年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_ACC_Land t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计摊销
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_ACC_Land t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop

            if rec.now_depre_amount <> 0 then
               update ASS_CARD_Land t
                  set t.depre_money = t.depre_money - rec.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - rec.now_depre_amount) - nvl(t.fore_money,0)
                     ,t.add_depre_month = nvl(t.add_depre_month,0)
                                          - (rec.max_depre_month - rec.min_depre_month + 1)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;

        end loop;

        --还原资金来源表累计摊销
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_ACC_Land t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
               update ASS_RESOURCE_Land t
                  set t.depre_money = t.depre_money - recsource.now_depre_amount
                     ,t.cur_money   = t.price - (t.depre_money - recsource.now_depre_amount) - nvl(t.fore_money,0)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = recsource.ass_card_no
                  and t.source_id   = recsource.source_id
                  ;
            end if;
        end loop;

        --删除摊销表数据
        delete
          from ASS_DEPRE_ACC_Land t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地删除摊销表数据失败！'||SQLERRM;
   END prc_DeleteDepreLandAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardLandAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardLandAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计摊销
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计摊销月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --摊销方法
                ,t.Acc_Depre_Amount  --摊销年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'06' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.depre_money,0) as depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_depre_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.depr_method,'01') as depr_method
                                     ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                                from ass_card_Land t1
                                left join ASS_RESOURCE_Land t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_depr,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_ACC_Land t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Land.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_Land.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_Land.Depre_Money%type      ;      --累计摊销
      V_CUR_MONEY            ASS_CARD_Land.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Land.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Land.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Land.Depr_Method%type      ;      --摊销方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Land.Acc_Depre_Amount%type ;      --摊销年限
      V_dispose_type         ASS_CARD_Land.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Land.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Land.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Land.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Land.Add_Depre_Month%type;   --累计摊销月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Land.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_Land.CHANGE_Depre%type;   --累计摊销调整金额
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '土地卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;


     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计摊销
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计摊销月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --摊销方法
                                          ,V_ACC_DEPRE_AMOUNT      --摊销年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --当资产卡片为已处置状态且存在处置申报，先还原待处置状态。无形资产当月不计提摊销
          if V_USE_STATE = 7 and nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') <> '000000' then
             V_USE_STATE := 6 ;
          end if;

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前摊销年月 ,需要恢复为正常状态，并且压栈计提摊销
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前摊销年月 ,不计算本月摊销，但生成本月冲减摊销
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前摊销年月 ,需要计算本月不计提摊销
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进
            if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000' then
               --如果处置年月 > 当前摊销年月 ,需要恢复为正常状态，并且压栈计提摊销
               if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                  V_USE_STATE  := 1 ;
                  v_Push_State := 1 ;
               end if;

               --如果处置年月 = 当前摊销年月 ,不计算本月摊销，但生成本月冲减摊销
               if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               end if;

               --如果处置年月 < 当前摊销年月 ,需要计算本月不计提摊销
               if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                  v_Push_State := 0 ;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
                v_Push_State := 0 ;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原摊销月份原值、累计摊销、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Land t1
              left join ASS_CHANGE_Land t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计摊销变动记录，还原摊销月份原值、累计摊销、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Land t1
              left join ASS_DEPRE_Land t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计摊销
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月摊销
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计摊销
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计摊销月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --摊销方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --摊销年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计摊销
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地卡片装载失败！'||SQLERRM;

   END prc_LoadCardLandAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillCalcLandAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillCalcLandAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
         select a.Naturs_Code
               ,a.ass_card_no
               ,a.source_id
               ,a.price
               ,a.depre_money
               ,a.cur_money
               ,a.fore_money
               ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (select '06' as Naturs_Code
                   , t1.ass_card_no
                   , t1.source_id
                   , t1.price
                   , t1.depre_money
                   , t1.cur_money
                   , t1.fore_money
                   , t2.add_depre_month
              from ASS_RESOURCE_Land t1
              left join ass_card_Land t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.ass_card_no = t2.ass_card_no
             where t1.cur_money   <= 0      --资金来源: 现值<=0
               and t2.cur_money   > 0       --卡片    : 现值 > 0
               and t1.group_id    =  prm_group_id
               and t1.hos_id      =  prm_hos_id
               and t1.copy_code   =  prm_copy_code
               and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                      )
                    and nvl(t2.is_depr,0)          =  1
                    and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                          or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                          or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                         )
             ) a
             left join (select t3.ass_card_no
                              ,t3.source_id
                              ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                         from ASS_DEPRE_ACC_Land t3
                        where t3.group_id    = prm_group_id
                          and t3.hos_id      = prm_hos_id
                          and t3.copy_code   = prm_copy_code
                          and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                         else prm_acc_year
                                     end
                                   )
                          and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                         else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                     end
                                    )
                         group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                  ,t3.ass_card_no,t3.source_id
                         ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;
      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Land.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_Land.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_Land.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_Land.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_Land.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_Land.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_Land.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Land.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_Land.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '土地补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Land t1
              left join ASS_CHANGE_Land t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Land t1
              left join ASS_DEPRE_Land t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '土地补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillCalcLandAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreLandALL
   || 功能描述 ：根据计算数据栈进行出栈计算摊销
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreLandALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS

      --定义变量
      v_card_no              ASS_CARD_Land.Ass_Card_No%type;
      v_card_price           ASS_CARD_Land.Price%type;
      v_card_now_depre_money ASS_CARD_Land.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_Land.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_Land.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_Land.Cur_Money%type;
      v_card_fore_money      ASS_CARD_Land.Fore_Money%type;
      v_card_use_state       ASS_CARD_Land.Use_State%type;
      v_card_depr_method     ASS_CARD_Land.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_Land.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_Land.Depre_Money%type;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '土地计算摊销成功!'                 ;



     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中有数据，则表明需要计算摊销，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_no              := '';
         v_card_price           := 0 ;
         v_card_now_depre_money := 0 ;
         v_card_add_depre_money := 0 ;
         v_card_cur_money       := 0 ;
         v_card_fore_money      := 0 ;
         v_card_add_depre_month := 0 ;
         v_BACK_ADD_DEPRE_MONEY := 0 ;
         v_card_use_state       := 0 ;
         v_card_depr_method     := '01';
         v_ACC_DEPRE_AMOUNT     := '0';

         --计算摊销
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}摊销方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_DEPRE_MONTH >= g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计摊销月数或摊销年限维护不正确!';
                    return;
                 end if;

                 --计算本月摊销
                 if g_tab_card_source(i).ADD_DEPRE_MONTH + 1 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                     g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                 else
                     --计算本次摊销 计算公式:本期摊销 = 现值/(摊销年限*12 - 累计摊销月数）
                    /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                     - g_tab_card_source(i).FORE_MONEY
                                                                     )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                   ,2);*/

                     g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                     )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                        - nvl(g_tab_card_source(i).ADD_DEPRE_MONTH,0)
                                                                       )
                                                                   ,2);
                     if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                        g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                     end if;
                 end if;

                 --计算累计摊销月份
                 g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 1;

                 --计算累计摊销
                 g_tab_card_source(i).ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY
                                                         +g_tab_card_source(i).NOW_DEPRE_MONEY;

                 if   g_tab_card_source(i).ADD_DEPRE_MONEY
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||g_tab_card_source(i).ASS_CARD_NO||'}累计摊销维护不正确!';
                    return;
                 end if;

                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;

                 --新制度修改：增加处置申报是否冲减累计摊销参数
                 if  ((g_para_05104 = '1' and g_tab_card_source(i).USE_STATE = '6') 
                   or g_tab_card_source(i).USE_STATE = '7' ) then
                     --计算冲减累计摊销
                     g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);
                 end if;

             end if; --<<平均年限法>>


             --卡片结果数据压栈
             v_j := v_j + 1 ;
             g_tab_card_source_ret(v_j).Naturs_Code      := '06'                                ;
             g_tab_card_source_ret(v_j).ASS_CARD_NO      := g_tab_card_source(i).ass_card_no    ;
             g_tab_card_source_ret(v_j).SOURCE_ID        := g_tab_card_source(i).SOURCE_ID      ;
             g_tab_card_source_ret(v_j).PRICE            := g_tab_card_source(i).PRICE          ;
             g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := g_tab_card_source(i).NOW_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := g_tab_card_source(i).ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := g_tab_card_source(i).ADD_DEPRE_MONTH;
             g_tab_card_source_ret(v_j).CUR_MONEY        := g_tab_card_source(i).CUR_MONEY;
             g_tab_card_source_ret(v_j).FORE_MONEY       := g_tab_card_source(i).FORE_MONEY;
             g_tab_card_source_ret(v_j).USE_STATE        := g_tab_card_source(i).USE_STATE;
             g_tab_card_source_ret(v_j).DEPRE_METHOD     := g_tab_card_source(i).DEPRE_METHOD;
             g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;

             --如果存在多条记录且到第二张卡片时，将上一张卡片压栈
             if (  g_tab_card_source.count() > 1 and i > 1 ) then
                 --通过 i> 1防止数据下标越界
                 if (g_tab_card_source(i).ASS_CARD_NO <>  g_tab_card_source(i-1).ASS_CARD_NO ) then
                     --卡片结果数据压栈
                     v_i := v_i + 1 ;
                     g_tab_card_ret(v_i).Naturs_Code      := '06'                     ;
                     g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                     g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                     g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                     g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                     g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                     g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                     g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                     g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                     g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                     g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;


                     v_card_no              := '';
                     v_card_price           := 0 ;
                     v_card_now_depre_money := 0 ;
                     v_card_add_depre_money := 0 ;
                     v_card_cur_money       := 0 ;
                     v_card_fore_money      := 0 ;
                     v_card_add_depre_month := 0 ;
                     v_BACK_ADD_DEPRE_MONEY := 0 ;
                     v_card_use_state       := 0 ;
                     v_card_depr_method     := '01';
                     v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --计算卡片压栈数据
             v_card_no          := g_tab_card_source(i).ass_card_no ;
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_DEPRE_MONEY;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_DEPRE_MONEY;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_DEPRE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;

             --如果仅存在一张卡片或循环到最后一张卡片时，将卡片压栈
             if ( g_tab_card_source.count() > 1 and i  >  1) then
                --当最后一条数据
                if ( i = g_tab_card_source.count())  then

                   --卡片结果数据压栈
                   v_i := v_i + 1 ;
                   g_tab_card_ret(v_i).Naturs_Code      := '06'                     ;
                   g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                   g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                   g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                   g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                   g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                   g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                   g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                   g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                   g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                   g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;


                   v_card_no              := '';
                   v_card_price           := 0 ;
                   v_card_now_depre_money := 0 ;
                   v_card_add_depre_money := 0 ;
                   v_card_cur_money       := 0 ;
                   v_card_fore_money      := 0 ;
                   v_card_add_depre_month := 0 ;
                   v_BACK_ADD_DEPRE_MONEY := 0 ;
                   v_card_use_state       := 0 ;
                   v_card_depr_method     := '01';
                   v_ACC_DEPRE_AMOUNT     := '0';
                end if;
             end if;

             --如果仅为一张卡片时，卡片数据压栈
             if (  g_tab_card_source.count() = 1 ) then
                 --卡片结果数据压栈
                 v_i := v_i + 1 ;
                 g_tab_card_ret(v_i).Naturs_Code      := '06'                     ;
                 g_tab_card_ret(v_i).ASS_CARD_NO      := v_card_no                ;
                 g_tab_card_ret(v_i).PRICE            := v_card_price             ;
                 g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
                 g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
                 g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
                 g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
                 g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
                 g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
                 g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
                 g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;


                 v_card_no              := '';
                 v_card_price           := 0 ;
                 v_card_now_depre_money := 0 ;
                 v_card_add_depre_money := 0 ;
                 v_card_cur_money       := 0 ;
                 v_card_fore_money      := 0 ;
                 v_card_add_depre_month := 0 ;
                 v_BACK_ADD_DEPRE_MONEY := 0 ;
                 v_card_use_state       := 0 ;
                 v_card_depr_method     := '01';
                 v_ACC_DEPRE_AMOUNT     := '0';
             end if;

         end loop;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地摊销计提失败！'||SQLERRM;

   END prc_CalcDepreLandALL;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ModifyDepreLandAll
   || 功能描述 ：根据上月折旧数据修正本月除不尽的问题
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ModifyDepreLandAll(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     v_prim_money           ASS_DEPRE_ACC_Land.Prim_Money%type  ;
     v_now_depre_amount     ASS_DEPRE_ACC_Land.Now_Depre_Amount%type;
     v_now_depre_bridge     ASS_DEPRE_ACC_Land.Now_Depre_Amount%type;
     n_count                integer                                ;
   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '土地摊销修正检验成功！';
     v_exist_flag := 0  ;
     v_prim_money := 0  ;
     v_now_depre_amount := 0 ;
         
     for i in 1..g_tab_card_source_ret.count() loop
       
       --如果本次折旧与累计折旧相等，说明首次折旧，不需要与上月校验
       if g_tab_card_source_ret(i).ADD_DEPRE_MONEY = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
          continue;
       end if;  
       
       --如果已折完的卡片，需要将剩余净值全部提完，不需要与上月校验小数位
       if g_tab_card_source_ret(i).cur_money = 0 then 
          continue;
       end if;
       
       --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
       begin
          select count(1)
            into v_exist_flag
            from ASS_CHANGE_SOURCE_Land t1
            left join ASS_CHANGE_Land t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.CHANGE_date,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
             WHEN OTHERS THEN
               v_exist_flag := 0;
        end;
        
        --本月发生原值变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if;  
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select count(1)
            into v_exist_flag
            from ASS_DEPRE_SOURCE_Land t1
            left join ASS_DEPRE_Land t2
              on t1.group_id = t2.group_id
             and t1.hos_id = t2.hos_id
             and t1.copy_code = t2.copy_code
             and t1.CHANGE_no = t2.CHANGE_no
           where t1.group_id    = prm_group_id
             and t1.hos_id      = prm_hos_id
             and t1.copy_code   = prm_copy_code
             and t1.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
             and t1.source_id   = g_tab_card_source_ret(i).SOURCE_ID
             and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
             and t2.state = 2     --0:新建 1:审核 2:确认
           ;
        EXCEPTION
           WHEN OTHERS THEN
             v_exist_flag := 0;
        end;   
          
        --本月发生累计折旧变动时，不需要与上月校验小数位
        if v_exist_flag > 0 then 
           v_exist_flag := 0 ;
           continue;
        end if; 
        
        --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
        begin
          select sum(nvl(t3.prim_money,0)) as prim_money
                ,sum(nvl(t3.NOW_depre_amount,0)) as NOW_depre_amount
            into v_prim_money
                ,v_NOW_depre_amount    
           from ASS_DEPRE_ACC_Land t3
          where t3.group_id    = prm_group_id
            and t3.hos_id      = prm_hos_id
            and t3.copy_code   = prm_copy_code
            and t3.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
            and t3.source_id   = g_tab_card_source_ret(i).SOURCE_ID
            and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                           else prm_acc_year
                       end
                     )
            and t3.depre_month = (case when prm_acc_month = '01' then '12'
                           else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                       end
                      )
            ;
          EXCEPTION
           WHEN OTHERS THEN
             v_prim_money := 0       ;
             v_NOW_depre_amount := 0 ;             
        end; 
         
        --如果上月原值与本月原值不一致时，不需要进行修正校验
        if nvl(v_prim_money,0) <> g_tab_card_source_ret(i).PRICE then 
           continue;
        end if;
        
        --如果上月折旧与本月折旧完全一致，不需要进行修正校验
        if nvl(v_NOW_depre_amount,0) = g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
           continue;
        end if;
        
        --如果上月折旧为0，不需要进行修正校验 
        if nvl(v_NOW_depre_amount,0) = 0  then
           continue;
        end if; 
          
        --如果上月折旧与本月折旧差的绝对值小于1且上月折旧数大于0时，那么取上月折旧
        if abs(nvl(v_NOW_depre_amount,0) - g_tab_card_source_ret(i).NOW_DEPRE_MONEY) < 1 
           and abs(nvl(v_NOW_depre_amount,0)) > 0  then
           g_tab_card_source_ret(i).Add_depre_money := g_tab_card_source_ret(i).Add_depre_money 
                                                    -  g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                    +  nvl(v_NOW_depre_amount,0);
           g_tab_card_source_ret(i).cur_money :=   g_tab_card_source_ret(i).cur_money 
                                                 + g_tab_card_source_ret(i).NOW_DEPRE_MONEY
                                                 -  nvl(v_NOW_depre_amount,0);
           
           v_now_depre_bridge := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
                                                                                        
           g_tab_card_source_ret(i).NOW_DEPRE_MONEY := nvl(v_NOW_depre_amount,0);
           
           for j in 1..g_tab_card_ret.count() loop
               if g_tab_card_ret(j).ASS_CARD_NO = g_tab_card_source_ret(i).ASS_CARD_NO then
                  g_tab_card_ret(j).Add_depre_money := g_tab_card_ret(j).Add_depre_money 
                                                    -  nvl(v_now_depre_bridge,0)
                                                    +  nvl(v_NOW_depre_amount,0);
                  g_tab_card_ret(j).cur_money :=   g_tab_card_ret(j).cur_money 
                                                   + nvl(v_now_depre_bridge,0)
                                                   -  nvl(v_NOW_depre_amount,0);
                                                                                                
                  g_tab_card_ret(j).NOW_DEPRE_MONEY := g_tab_card_ret(j).NOW_DEPRE_MONEY 
                                                       - nvl(v_now_depre_bridge,0)
                                                       + nvl(v_NOW_depre_amount,0);
                  exit;
               end if;           
           end loop; 
           v_now_depre_bridge := 0 ;            
        end if;     
     end loop;
     
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地摊销修正检验失败！'||SQLERRM;
   END prc_ModifyDepreLandAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertDepreLandAll
   || 功能描述 ：根据卡片计算栈数据出栈插入摊销表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertDepreLandAll(   prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Land.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Land.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Land.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_Land.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Land.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_Land.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_Land.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Land.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Land.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_Land.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_Land.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_Land.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_Land.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_Land.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Land.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Land.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Land.Fore_Money%type;
      V_NOTE                       ASS_DEPRE_ACC_Land.Note%type;
      v_in_date                    ASS_CARD_Land.In_Date%type;
      v_run_date                   ASS_CARD_Land.Run_Date%type;
      V_CHANGE_depre               ASS_DEPRE_SOURCE_Land.Change_Depre%type;
      V_CHANGE_depre_note          ASS_DEPRE_SOURCE_Land.Change_Depre%type;
      V_CHANGE_depre_TOT           ASS_DEPRE_SOURCE_Land.Change_Depre%type;

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '土地摊销计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;
     V_CHANGE_depre             :=0            ;
     V_CHANGE_depre_note        :=0            ;
     V_CHANGE_depre_TOT         :=0            ;
     V_NOTE                     :=''           ;


     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;
       v_CHANGE_DEPRE             :=0            ;
       V_CHANGE_depre_note        :=0            ;
       V_CHANGE_depre_TOT         :=0            ;
       V_NOTE                     :=''           ;
       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_Land t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;


      select t.in_date,t.run_date
        into v_in_date,v_run_date
        from ASS_CARD_Land t
       where t.group_id  = prm_group_id
         and t.hos_id    = prm_hos_id
         and t.copy_code = prm_copy_code
         and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
      ;

      if (   (g_para_05007 = '1' and (to_char(v_in_date,'YYYYMM')      = prm_acc_year||prm_acc_month ))
          or (g_para_05007 = '2' and (   (to_char(v_run_date,'YYYYMM') = prm_acc_year||prm_acc_month )
                                      and(to_char(v_in_date,'YYYYMM') <= prm_acc_year||prm_acc_month )
                                      )
              )
         ) then
         --当入库时存在累计摊销或本月存在累计摊销变动记录时,摘要：明确标识，含补增
         if g_tab_card_source_ret(i).ADD_DEPRE_MONEY <> g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
            V_NOTE := '含补增';
            v_CHANGE_DEPRE:=g_tab_card_source_ret(i).ADD_DEPRE_MONEY - g_tab_card_source_ret(i).NOW_DEPRE_MONEY;
         end if;

      end if;

      --检查本月是否存在累计摊销记录存在
      if V_NOTE <> '含补增' then
         select sum(t1.change_depre)
           into v_CHANGE_DEPRE
          from ASS_DEPRE_SOURCE_Land t1
          left join ASS_DEPRE_Land t2
            on t1.group_id = t2.group_id
           and t1.hos_id = t2.hos_id
           and t1.copy_code = t2.copy_code
           and t1.CHANGE_no = t2.CHANGE_no
          where t1.group_id = prm_group_id
            and t1.hos_id   = prm_hos_id
            and t1.copy_code = prm_copy_code
            and t1.ass_card_no = g_tab_card_source_ret(i).ass_card_no
            and t1.source_id = g_tab_card_source_ret(i).SOURCE_ID
            and to_char(t2.AUDIT_DATE,'YYYYMM')  = prm_acc_year||prm_acc_month
            and t2.state = 2
            ;



      end if;


       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_Land t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
              V_CHANGE_depre_note := V_CHANGE_depre;
           else
              --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
                 V_CHANGE_depre_note := V_CHANGE_depre - V_CHANGE_depre_TOT;
              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
                 V_CHANGE_depre_note := round(V_CHANGE_depre * v_USE_PERCENT,2);

                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                 V_CHANGE_depre_TOT    := V_CHANGE_depre_TOT    + V_CHANGE_depre_note;
              end if;
           end if;

           --如果存在冲减摊销时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;

           if V_CHANGE_depre_note <> 0 then
              V_NOTE := '含补增['||to_char(V_CHANGE_depre_note)||']';
           end if;
           --插入摊销数据表
           insert
             into ASS_DEPRE_ACC_Land(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --摊销序号
                  ,DEPRE_YEAR                    --摊销年度
                  ,DEPRE_MONTH                   --摊销期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期摊销
                  ,ADD_DEPRE_AMOUNT              --累计摊销
                  ,ADD_DEPRE_MONTH               --累计摊销月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用摊销方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,V_NOTE
               );

         --如果存在冲销累计摊销时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_ACC_Land(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --摊销序号
                  ,DEPRE_YEAR                    --摊销年度
                  ,DEPRE_MONTH                   --摊销期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期摊销
                  ,ADD_DEPRE_AMOUNT              --累计摊销
                  ,ADD_DEPRE_MONTH               --累计摊销月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用摊销方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,V_BACK_ADD_DEPRE_MONEY
                 ,V_BACK_ADD_DEPRE_MONEY
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,V_CUR_MONEY
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地摊销计提失败！'||SQLERRM;

   END prc_InsertDepreLandAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddDepreLandAll
   || 功能描述 ：本月不需要计提摊销的数据，但产生累计摊销数据，进入累计摊销表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddDepreLandAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计摊销，且为本月之前的入库的资产,需要本月产生累计摊销记录
     *
     * 当月入库，但入库单时已存累计摊销的资产，本月产生累计摊销记录。如：盘盈
     *
     * 用户按正式投入日期摊销的资产，且在入库时产生的累计摊销，本月产生累计摊销记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1:是 0:否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计摊销
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计摊销月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --摊销方法
                ,t.Acc_Depre_Amount  --摊销年限
                ,t.in_date           --入库日期
                ,t.run_date          --正式投入使用日期
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'06' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.depre_money,0) as depre_money
                         ,nvl(t2.cur_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                         ,t1.in_date
                         ,t1.run_date
                    from ass_card_Land t1
                    left join ASS_RESOURCE_Land t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_depr,0)          =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.depre_money,0)      >  0
                      and (   (     nvl(t2.cur_money,0)   <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              )--已提完
                           or (    (     prm_para_05007 = '2'
                                     and (to_char(t1.run_date,'YYYYMM')    >  prm_acc_year||prm_acc_month)
                                     and (to_char(t1.in_date ,'YYYYMM')    <  prm_acc_year||prm_acc_month)
                                    )
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )
                                    or (    (to_char(t1.dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                           or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 ) and ( prm_para_05104 = 1 )
                                 )--新制度修改：增加申报是否冲减参数判断
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              )
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Land.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_Land.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_Land.Depre_Money%type      ;      --累计摊销
      V_ORI_CUR_MONEY        ASS_CARD_Land.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_Land.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_Land.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_Land.Now_Depre_Amount%type;  --本期摊销
      V_ADD_DEPRE_MONEY      ASS_CARD_Land.Depre_Money%type      ;      --累计摊销
      V_CUR_MONEY            ASS_CARD_Land.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Land.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Land.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Land.Depr_Method%type      ;      --摊销方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Land.Acc_Depre_Amount%type ;      --摊销年限
      V_dispose_type         ASS_CARD_Land.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Land.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Land.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Land.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Land.Add_Depre_Month%type;   --累计摊销月数

      v_AREA_sum             ASS_SHARE_DEPT_R_Land.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Land.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Land.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Land.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Land.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Land.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Land.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Land.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Land.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_Land.Note%type;
      v_in_date                    ASS_CARD_Land.In_Date%type;
      v_run_date                   ASS_CARD_Land.Run_Date%type;
      v_Only_Back            integer;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '土地累计摊销补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计摊销
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计摊销月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --摊销方法
                                          ,V_ACC_DEPRE_AMOUNT      --摊销年限
                                          ,v_in_date
                                          ,v_run_date
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         v_Only_Back                :=0            ;


         --在摊销年月之前入库，且在本月已处置，发生补填业务时，仅补填冲补摊销
         if (   (g_para_05007 = '1' and (to_char(v_in_date,'YYYYMM')  < prm_acc_year||prm_acc_month ))
             or (g_para_05007 = '2' and (   (to_char(v_run_date,'YYYYMM') < prm_acc_year||prm_acc_month )
                                         or (to_char(v_in_date,'YYYYMM')  < prm_acc_year||prm_acc_month )
                                        )
                 )
            )
             and ((nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
                 or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
                 )
           then
             v_Only_Back := 1 ;
         end if;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_Land t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_Land t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

              if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;

             --插入摊销数据表
             if  v_Only_Back = 0 then
                 insert
                   into ASS_DEPRE_ACC_Land(
                         GROUP_ID                      --集团ID
                        ,HOS_ID                        --医院ID
                        ,COPY_CODE                     --账套编码
                        ,DEPRE_NO                      --摊销序号
                        ,DEPRE_YEAR                    --摊销年度
                        ,DEPRE_MONTH                   --摊销期间
                        ,ASS_CARD_NO                   --资产卡片号
                        ,SOURCE_ID                     --资金来源
                        ,USE_DEPT_ID                   --使用科室ID
                        ,USE_DEPT_NO                   --使用科室NO
                        ,USE_PERCENT                   --分摊比例
                        ,PRIM_MONEY                    --原值
                        ,NOW_DEPRE_AMOUNT              --本期摊销
                        ,ADD_DEPRE_AMOUNT              --累计摊销
                        ,ADD_DEPRE_MONTH               --累计摊销月份
                        ,CUR_MONEY                     --资产净值
                        ,FORE_MONEY                    --预留残值
                        ,OPERATOR                      --操作员
                        ,DEAL_DATE                     --处理日期
                        ,EQUI_DEPRE_CODE               --使用摊销方法
                        ,NOTE                          --摘要
                        )
                     values(
                        prm_group_id
                       ,prm_hos_id
                       ,prm_copy_code
                       ,1
                       ,prm_acc_year
                       ,prm_acc_month
                       ,v_ASS_CARD_NO
                       ,v_soure_id
                       ,v_USE_DEPT_ID
                       ,v_USE_DEPT_NO
                       ,v_USE_PERCENT
                       ,V_PRICE
                       ,V_NOW_DEPRE_MONEY
                       ,V_ADD_DEPRE_MONEY
                       ,v_add_depre_month
                       ,V_CUR_MONEY
                       ,V_FORE_MONEY
                       ,prm_operator
                       ,sysdate
                       ,V_DEPR_METHOD
                       ,V_NOTE
                     );
            end if;

            --如果存在冲销累计摊销时
            if(  (g_para_05104=1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_ACC_Land(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --摊销序号
                      ,DEPRE_YEAR                    --摊销年度
                      ,DEPRE_MONTH                   --摊销期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期摊销
                      ,ADD_DEPRE_AMOUNT              --累计摊销
                      ,ADD_DEPRE_MONTH               --累计摊销月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用摊销方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地累计摊销补填时失败！'||SQLERRM;
   end prc_FillAddDepreLandAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateCardLandAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateCardLandAll (   prm_group_id          IN   NUMBER            --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
  IS
     --定义变量
     v_exist_flag                 integer;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '土地卡片更新完成!';
     v_exist_flag    := 0                      ;
     
     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_Land t
          set  t.depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_source_ret(i).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_Land t
          set  t.depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_depre_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
              ,t.cur_money   = nvl(t.price,0) - g_tab_card_ret(j).ADD_DEPRE_MONEY - nvl(t.fore_money,0)
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_Land t
          set  t.depre_money     = t.depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
              ,t.cur_money       = t.cur_money   - g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;
     
     /*****************************************************************
      * 仅参与折旧的卡片累计折旧被还原，需要重新执行，否则执行重复
      * 因此卡片必须为 g_tab_card_ret 或 g_tab_card_fill中存在
      *****************************************************************/
     --更改累计折旧变动数据     
     for rec in (
                 select t1.ass_card_no
                       ,t1.source_id
                       ,sum(nvl(t1.CHANGE_depre,0)) as CHANGE_depre
                  from ASS_DEPRE_SOURCE_Land t1
                  left join ASS_DEPRE_Land t2
                    on t1.group_id = t2.group_id
                   and t1.hos_id = t2.hos_id
                   and t1.copy_code = t2.copy_code
                   and t1.CHANGE_no = t2.CHANGE_no
                 where t1.group_id    = prm_group_id
                   and t1.hos_id      = prm_hos_id
                   and t1.copy_code   = prm_copy_code
                   and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
                   and t2.state = 2     --0:新建 1:审核 2:确认
                   group by t1.ass_card_no,t1.source_id
                  ) loop        
        for v_i in 1..g_tab_card_ret.count() loop
            if g_tab_card_ret(v_i).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if;   
        end loop;  
        
        for v_j in 1..g_tab_card_fill.count() loop
            if g_tab_card_fill(v_j).ass_card_no = rec.ass_card_no then
               v_exist_flag := 1 ;
               goto NEXT_UPDATE;
            end if; 
        end loop; 
        
        <<NEXT_UPDATE>>
        if v_exist_flag = 1  then
           update ASS_RESOURCE_Land t
              set t.depre_money = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end  
                 ,t.cur_money   = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money - rec.CHANGE_depre end
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              and t.source_id   = rec.source_id
              ;

           update ASS_CARD_Land t
              set t.depre_money     = case when t.depre_money + rec.CHANGE_depre > t.price then t.price else t.depre_money + rec.CHANGE_depre end
                 ,t.cur_money       = case when t.cur_money   - rec.CHANGE_depre < 0 then 0 else t.cur_money   - rec.CHANGE_depre end 
            where t.group_id  = prm_group_id
              and t.hos_id    = prm_hos_id
              and t.copy_code = prm_copy_code
              and t.ass_card_no = rec.ass_card_no
              ;
           v_exist_flag := 0 ;   
        end if; 
      end loop;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地卡片更新失败！'||SQLERRM;

   END prc_UpdateCardLandAll;




   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageLandAll
   || 功能描述 ：对所有卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageLandAll(  prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     /*****************************土地入库当月计提摊销*******************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     *************************************************************************************/

     v_price                ASS_CARD_Land.Price%type            ;
     v_depre_money          ASS_CARD_Land.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Land.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Land.Fore_Money%type       ;

     v_price_source         ASS_CARD_Land.Price%type            ;
     v_depre_money_source   ASS_CARD_Land.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Land.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Land.Fore_Money%type       ;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '土地卡片完整性检查通过!';

     v_exist_flag         := 0                            ;

     /*******************************在资产摊销时已做较验******************************************
     --资金来源完整性检查
     select count(1)
       into v_exist_flag
       from ass_card_Land t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and not exists( select 1
                          from ASS_RESOURCE_Land t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '资金来源维护不完整!';
        return;
     end if;

     --使用科室完整性检查
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ass_card_Land t1
      where t1.group_id      =  prm_group_id
        and t1.hos_id         =  prm_hos_id
        and t1.copy_code      =  prm_copy_code
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and nvl(t1.is_depr,0)          =  1
        and nvl(t1.use_state,0)        <> 0
        and not exists( select 1
                          from ASS_SHARE_DEPT_R_Land t2
                         where t1.group_id = t2.group_id
                           and t1.hos_id = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.ass_year = prm_acc_year
                           and t2.ass_month = prm_acc_month
                      );

     if v_exist_flag > 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '存在使用科室未维护或上月未结账!';
        return;
     end if;
     ********************************************************************************************/

     /*****************************土地入库当月计提摊销*******************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     **************************************************************************************/

     --校验新增资产不允许跨两月提摊销
     begin
       select sum(nvl(t.price,0))
             ,sum(nvl(t.manage_depre_money,0))
             ,sum(nvl(t.cur_money,0))
             ,sum(nvl(t.fore_money,0))
         into v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
         from ASS_CARD_Land t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )
          and (   (g_para_05007   =  '1'  and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
               or (g_para_05007   =  '2'  and to_char(t.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
            )
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '不存在要计算分摊的卡片!';
           return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '提取卡片过程失败!'||SQLERRM;
         return;
     end;

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Land t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and exists( select 1
                          from ASS_CARD_Land t2
                         where t.group_id = t2.group_id
                           and t.hos_id   = t2.hos_id
                           and t.copy_code = t2.copy_code
                           and t.ass_card_no = t2.ass_card_no
                           and nvl(t2.is_manage_depre,0) = 1
                            and (   (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                                 or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                 )
                           and (  (g_para_05007   =  '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                               or (g_para_05007   =  '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                            )
                      )
            ;

          --由于折旧已计算，因此需要重新计算现值
          v_Cur_Money        :=  v_price - v_depre_money - v_Fore_Money;
          v_Cur_Money_source :=  v_price_source - v_depre_money_source - v_Fore_Money_source;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!';
              return;
          end if;
     end if;

     --检查是否存在累计摊销
     v_exist_flag := 0 ;

     select count(1)
       into v_exist_flag
       from ASS_CARD_Land t1
      where t1.group_id = prm_group_id
        and t1.hos_id = prm_hos_id
        and t1.copy_code = prm_copy_code
        and nvl(t1.manage_depre_money,0) > 0
        and nvl(t1.is_manage_depre,0) = 1
        and (   (g_para_05007   =  '1'  and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
             or (g_para_05007   =  '2'  and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
            )
        and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
             or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             )
        and not exists(
                        select 1
                          from ASS_DEPRE_MANAGE_Land t2
                         where t1.group_id  = t2.group_id
                           and t1.hos_id    = t2.hos_id
                           and t1.copy_code = t2.copy_code
                           and t1.ass_card_no = t2.ass_card_no
                           and t2.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                     else prm_acc_year
                                                 end
                                                )
                           and t2.depre_month = (case when prm_acc_month = '01' then '12'
                                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                                end
                                                )
                       )
        ;

        if v_exist_flag > 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '上月未计提分摊或期初累计分摊未维护!';
            return;
        end if;


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageLandAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DeleteManageLandAll
   || 功能描述 ：根据删除摊销表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DeleteManageLandAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

   BEGIN
     prm_AppCode := def_OK;
     prm_ErrTxt := '土地删除分摊表数据成功！';
     v_exist_flag := 0 ;

     if (  prm_group_id is null
        or prm_hos_id is null
        or prm_copy_code is null
        or prm_acc_year is null
        or prm_acc_month is null
        )
       then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '分摊年月未选择或[集团]/[单位]/[账套]未传递参数!';
        return;
     end if;

     select count(1)
       into v_exist_flag
       from ASS_DEPRE_MANAGE_Land t
      where t.group_id   =  prm_group_id
        and t.hos_id     =  prm_hos_id
        and t.copy_code  =  prm_copy_code
        and t.depre_year >=  prm_acc_year
        and t.depre_month >= prm_acc_month
        ;
     if v_exist_flag > 0 then
        --还原卡片累计摊销
        for rec in (select t.ass_card_no
                          ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                          ,max(nvl(t.add_depre_month,0)) as max_depre_month
                          ,min(nvl(t.add_depre_month,0)) as min_depre_month
                      from ASS_DEPRE_MANAGE_Land t
                      where t.group_id    =  prm_group_id
                        and t.hos_id      =  prm_hos_id
                        and t.copy_code   =  prm_copy_code
                        and t.depre_year  >= prm_acc_year
                        and t.depre_month >= prm_acc_month
                        and nvl(t.now_depre_amount,0) > 0
                       group by t.ass_card_no
                    ) loop

            if rec.now_depre_amount <> 0 then
               update ASS_CARD_Land t
                  set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - rec.now_depre_amount
                     ,t.ADD_MANAGE_MONTH = nvl(t.ADD_MANAGE_MONTH,0)
                                          - (rec.max_depre_month - rec.min_depre_month + 1)
                where t.group_id = prm_group_id
                  and t.hos_id   = prm_hos_id
                  and t.copy_code = prm_copy_code
                  and t.ass_card_no = rec.ass_card_no
                  ;
            end if;
        end loop;

        --还原资金来源表累计摊销
        for recsource in (select t.ass_card_no
                                ,t.source_id
                                ,sum(nvl(t.now_depre_amount,0)) as now_depre_amount
                            from ASS_DEPRE_MANAGE_Land t
                            where t.group_id   =  prm_group_id
                              and t.hos_id     =  prm_hos_id
                              and t.copy_code  =  prm_copy_code
                              and t.depre_year  >= prm_acc_year
                              and t.depre_month >= prm_acc_month
                              and nvl(t.now_depre_amount,0) > 0
                             group by t.ass_card_no,t.source_id
                          ) loop

            if recsource.now_depre_amount <> 0 then
                update ASS_RESOURCE_Land t
                   set t.MANAGE_DEPRE_MONEY = nvl(t.MANAGE_DEPRE_MONEY,0) - recsource.now_depre_amount
                 where t.group_id = prm_group_id
                   and t.hos_id   = prm_hos_id
                   and t.copy_code = prm_copy_code
                   and t.ass_card_no = recsource.ass_card_no
                   and t.source_id   = recsource.source_id
                   ;
            end if;
        end loop;

        --删除摊销表数据
        delete
          from ASS_DEPRE_MANAGE_Land t
         where t.group_id   =  prm_group_id
          and t.hos_id     =  prm_hos_id
          and t.copy_code  =  prm_copy_code
          and t.depre_year >=  prm_acc_year
          and t.depre_month >= prm_acc_month
          ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地删除分摊表数据失败！'||SQLERRM;
   END prc_DeleteManageLandAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageLandAll
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageLandAll(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计摊销
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计摊销月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --摊销方法
                ,t.Acc_Depre_Amount  --摊销年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.ADD_DEPRE_AMOUNT,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          ,a.Acc_Depre_Amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'06' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.manage_depre_money,0) as depre_money
                                     ,nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_manage_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.manage_depr_method,'01') as depr_method
                                     ,nvl(t1.manage_depre_amount,0) as Acc_Depre_Amount
                                from ass_card_Land t1
                                left join ASS_RESOURCE_Land t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 = '1'  and to_char(t1.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 = '2'  and to_char(t1.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_manage_depre,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                                       )
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_MANAGE_Land t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id*/
               ) t
            where nvl(t.cur_money,0) > 0
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Land.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_Land.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_Land.Depre_Money%type      ;      --累计摊销
      V_CUR_MONEY            ASS_CARD_Land.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Land.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Land.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Land.Depr_Method%type      ;      --摊销方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Land.Acc_Depre_Amount%type ;      --摊销年限
      V_dispose_type         ASS_CARD_Land.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Land.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Land.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Land.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Land.Add_Depre_Month%type;   --累计摊销月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Land.CHANGE_Price%type;  --原值调整金额

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '土地卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;



     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计摊销
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计摊销月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --摊销方法
                                          ,V_ACC_DEPRE_AMOUNT      --摊销年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:调剂     32：调拨      33:捐赠
          41:退账
          51:改造
          ********************************************/

          --当资产卡片为已处置状态且存在处置申报，先还原待处置状态。无形资产当月不计提摊销
          if V_USE_STATE = 7 and nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') <> '000000' then
             V_USE_STATE := 6 ;
          end if;

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前摊销年月 ,需要恢复为正常状态，并且压栈计提摊销
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前摊销年月 ,需要计算本月摊销，并生成本月冲减摊销
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前摊销年月 ,需要计算本月不计提摊销
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进
            if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000' then
               --如果处置年月 > 当前摊销年月 ,需要恢复为正常状态，并且压栈计提摊销
               if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                  V_USE_STATE  := 1 ;
                  v_Push_State := 1 ;
               end if;

               --如果处置年月 = 当前摊销年月 ,需要计算本月摊销，并生成本月冲减摊销
               if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               end if;

               --如果处置年月 < 当前摊销年月 ,需要计算本月不计提摊销
               if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                  v_Push_State := 0 ;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
                v_Push_State := 0 ;
            end if;
          end if;--<<已处置>>

          --读取本月原值变动记录，还原摊销月份原值、累计摊销、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Land t1
              left join ASS_CHANGE_Land t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************

          --读取本月累计摊销变动记录，还原摊销月份原值、累计摊销、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Land t1
              left join ASS_DEPRE_Land t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计摊销
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/
          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月摊销
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计摊销
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计摊销月份
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --摊销方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --摊销年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计摊销
              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地卡片装载失败！'||SQLERRM;

   END prc_LoadManageLandAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadFillManageLandAll
   || 功能描述 ：装载补算卡片[多资金来源，其中部分资金来源计提完成]
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrTxt         错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadFillManageLandAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
    IS
      --定义游标
      CURSOR cur_ass_card_fill  ( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                 )
       IS
        select a.Naturs_Code
              ,a.ass_card_no
              ,a.source_id
              ,a.price
              ,a.depre_money
              ,a.cur_money
              ,a.fore_money
              ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month
           from
             (
               select '06' as Naturs_Code
                     , t1.ass_card_no
                     , t1.source_id
                     , t1.price
                     , nvl(t1.manage_depre_money,0) as depre_money
                     , nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0) as cur_money
                     , t1.fore_money
                     , t2.add_manage_month as add_depre_month
                from ASS_RESOURCE_Land t1
                left join ass_card_Land t2
                  on t1.group_id = t2.group_id
                 and t1.hos_id = t2.hos_id
                 and t1.copy_code = t2.copy_code
                 and t1.ass_card_no = t2.ass_card_no
               where (nvl(t1.price,0)- nvl(t1.manage_depre_money,0)-nvl(t1.fore_money,0)) <= 0      --资金来源: 现值<=0
                 and (nvl(t2.price,0)- nvl(t2.manage_depre_money,0)-nvl(t2.fore_money,0)) >  0       --卡片    : 现值 > 0
                 and t1.group_id    =  prm_group_id
                 and t1.hos_id      =  prm_hos_id
                 and t1.copy_code   =  prm_copy_code
                 and ( (    prm_para_05007 = '1'  and to_char(t2.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month)
                        or (prm_para_05007 = '2'  and to_char(t2.run_date,'YYYYMM') <= prm_acc_year||prm_acc_month)
                        )
                      and nvl(t2.is_manage_depre,0)          =  1
                      and (    (nvl(t2.use_state,0) <> 0  and  nvl(t2.use_state,0) <> 6 and nvl(t2.use_state,0) <> 7)
                            or (nvl(t2.use_state,0) = 6 and to_char(t2.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                            or (nvl(t2.use_state,0) = 7 and to_char(t2.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
                           )
             ) a
           left join (select t3.ass_card_no
                            ,t3.source_id
                            ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                       from ASS_DEPRE_MANAGE_Land t3
                      where t3.group_id    = prm_group_id
                        and t3.hos_id      = prm_hos_id
                        and t3.copy_code   = prm_copy_code
                        and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                       else prm_acc_year
                                   end
                                 )
                        and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                       else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                   end
                                  )
                       group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                ,t3.ass_card_no,t3.source_id
                       ) b
              on a.ass_card_no = b.ass_card_no
             and a.source_id = b.source_id
          order by a.ass_card_no,a.source_id
         ;
      --定义变量
      v_i                    integer                                 ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type             ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Land.Ass_Card_No%type       ;      --卡片号
      v_soure_id             ASS_RESOURCE_Land.Source_Id%type     ;      --资金来源
      V_PRICE                ASS_RESOURCE_Land.Price%type         ;      --原值
      V_DEPRE_MONEY          ASS_RESOURCE_Land.Depre_Money%type   ;      --累计折旧
      V_CUR_MONEY            ASS_RESOURCE_Land.Cur_Money%type     ;      --现值
      V_FORE_MONEY           ASS_RESOURCE_Land.Fore_Money%type    ;      --预留残值
      v_add_depre_month      ASS_DEPRE_ACC_Land.Add_Depre_Month%type;   --累计折旧月数
      v_Push_State           integer                                 ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Land.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_Land.CHANGE_Depre%type;   --累计折旧调整金额
    BEGIN
      --初始化变量
      prm_AppCode     := def_OK                                  ;
      prm_ErrTxt      := '土地补算卡片装载完成!'             ;

      v_i             := 1                                       ;
      v_Push_State    := 0                                       ;
      V_PRICE         := 0                                       ;      --原值
      V_DEPRE_MONEY   := 0                                       ;      --累计折旧
      V_CUR_MONEY     := 0                                       ;      --现值
      V_FORE_MONEY    := 0                                       ;      --预留残值

      open cur_ass_card_fill(   prm_group_id
                              , prm_hos_id
                              , prm_copy_code
                              , prm_acc_year
                              , prm_acc_month
                              , g_para_05007
                            );
      LOOP
          FETCH cur_ass_card_fill  INTO  v_Naturs_Code           --资产性质
                                        ,v_ASS_CARD_NO           --卡片号
                                        ,v_soure_id              --资金来源
                                        ,V_PRICE                 --原值
                                        ,V_DEPRE_MONEY           --累计折旧
                                        ,V_CUR_MONEY             --现值
                                        ,V_FORE_MONEY            --残值
                                        ,v_add_depre_month       --累计折旧月数
           ;

          IF cur_ass_card_fill%NOTFOUND THEN
             if cur_ass_card_fill%isopen then
                CLOSE cur_ass_card_fill;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          --读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Land t1
              left join ASS_CHANGE_Land t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          /************************ 分摊不提供累计分摊变动 ******************************
          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Land t1
              left join ASS_DEPRE_Land t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/

          --已折完的资金来源进行压栈，用于回填卡片累计折旧
          if V_CUR_MONEY <= 0 then
             v_Push_State := 1 ;
          else
             v_Push_State := 0 ;
          end if;

          if v_Push_State = 1 then
              g_tab_card_fill(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_fill(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_fill(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_fill(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_fill(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_fill(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_fill(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_fill(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_fill(v_i).ADD_DEPRE_MONTH  := v_add_depre_month     ;      --累计折旧月数
              v_i := v_i + 1 ;
        end if;

      END LOOP;


      IF cur_ass_card_fill%isopen then
         CLOSE cur_ass_card_fill;
      END IF;


    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode   := def_ERR;
         prm_ErrTxt := '土地补算卡片装载失败！'||SQLERRM;

   END prc_LoadFillManageLandAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageLandALL
   || 功能描述 ：根据计算数据栈进行出栈计算摊销
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageLandALL( prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS


   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '土地计算分摊成功!'                 ;

     --计算管理分摊与计算摊销方法共用
     prc_CalcDepreLandALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode =  def_OK  then
        --初始化变量
        prm_AppCode     := def_OK                                  ;
        prm_ErrTxt      := '土地计算分摊成功!'                 ;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地分摊计提失败！'||SQLERRM;

   END prc_CalcManageLandALL;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_InsertManageLandAll
   || 功能描述 ：根据卡片计算栈数据出栈插入分摊表数据
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_InsertManageLandAll(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Land.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Land.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Land.Use_Percent%type;
      v_AREA_sum                   ASS_SHARE_DEPT_R_Land.Area%type;
      v_dept_count                 integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Land.Use_Percent%type;
      i_pos                        integer;
      V_NOW_DEPRE_MONEY            ASS_DEPRE_ACC_Land.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY            ASS_DEPRE_ACC_Land.Add_Depre_Amount%type;

      V_NOW_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Land.Now_Depre_Amount%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Land.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY       ASS_DEPRE_ACC_Land.Add_Depre_Amount%type;
      V_BACK_ADD_DEPRE_MONEY_TOT   ASS_DEPRE_ACC_Land.Add_Depre_Amount%type;

      V_PRICE                      ASS_DEPRE_ACC_Land.Prim_Money%type;
      V_CUR_MONEY                  ASS_DEPRE_ACC_Land.Cur_Money%type;
      V_FORE_MONEY                 ASS_DEPRE_ACC_Land.Fore_Money%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Land.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Land.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Land.Fore_Money%type;
      V_NOTE                       ASS_DEPRE_ACC_Land.Note%type;
      v_in_date                    ASS_CARD_Land.In_Date%type;
      v_run_date                   ASS_CARD_Land.Run_Date%type;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '土地分摊计提完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_NOW_DEPRE_MONEY_TOT := 0                ;
     V_ADD_DEPRE_MONEY_TOT := 0                ;
     V_BACK_ADD_DEPRE_MONEY := 0               ;
     V_BACK_ADD_DEPRE_MONEY_TOT :=0            ;
     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_FORE_MONEY_TOT           :=0            ;



     for i in 1..g_tab_card_source_ret.count() loop

       --内层循环使用的变量初始化
       v_dept_count      := 0 ;
       i_pos             := 0 ;
       v_USE_PERCENT_tot := 0 ;
       V_NOW_DEPRE_MONEY := 0 ;
       V_ADD_DEPRE_MONEY := 0 ;
       V_NOW_DEPRE_MONEY_TOT      := 0;
       V_ADD_DEPRE_MONEY_TOT      := 0;
       V_BACK_ADD_DEPRE_MONEY     := 0;
       V_BACK_ADD_DEPRE_MONEY_TOT := 0;
       V_PRICE                    :=0            ;
       V_CUR_MONEY                :=0            ;
       V_FORE_MONEY               :=0            ;
       V_PRICE_TOT                :=0            ;
       V_CUR_MONEY_TOT            :=0            ;
       V_FORE_MONEY_TOT           :=0            ;
       V_NOTE                     := ''          ;

       --提取总面积
       select sum(nvl(t.AREA,0)),count(1)
         into v_AREA_sum,v_dept_count
         from ASS_SHARE_DEPT_R_Land t
        where t.group_id  = prm_group_id
          and t.hos_id    = prm_hos_id
          and t.copy_code = prm_copy_code
          and t.ass_year  = prm_acc_year
          and t.ass_month = prm_acc_month
          and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no  ;

       if v_dept_count = 0 then
          prm_AppCode := def_WARNING;
          prm_ErrTxt := '使用科室未维护!';
          return;
       end if;

       --当入库时存在累计分摊,摘要：明确标识，含补增。注：不存在本月存在累计分摊变动记录时
       if g_tab_card_source_ret(i).ADD_DEPRE_MONEY <> g_tab_card_source_ret(i).NOW_DEPRE_MONEY then
          select t.in_date,t.run_date
            into v_in_date,v_run_date
            from ASS_CARD_Land t
           where t.group_id  = prm_group_id
             and t.hos_id    = prm_hos_id
             and t.copy_code = prm_copy_code
             and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
          ;

          if (   (g_para_05007 = '1' and (to_char(v_in_date,'YYYYMM')      = prm_acc_year||prm_acc_month ))
              or (g_para_05007 = '2' and (   (to_char(v_run_date,'YYYYMM') = prm_acc_year||prm_acc_month )
                                          and(to_char(v_in_date,'YYYYMM') <= prm_acc_year||prm_acc_month )
                                          )
                  )
             ) then
               V_NOTE := '含补增';
          end if;
       end if;

       --按科室比例计算
       for rec in (select t.DEPT_ID
                         ,t.DEPT_NO
                         ,t.AREA
                     from ASS_SHARE_DEPT_R_Land t
                    where t.group_id  = prm_group_id
                      and t.hos_id    = prm_hos_id
                      and t.copy_code = prm_copy_code
                      and t.ass_year  = prm_acc_year
                      and t.ass_month = prm_acc_month
                      and t.ass_card_no = g_tab_card_source_ret(i).ass_card_no
                  ) loop

           i_pos := i_pos + 1;

           v_USE_DEPT_ID := rec.dept_id;
           v_USE_DEPT_NO := rec.dept_no;


           --如果仅一个使用科室使用，则直接分摊比例为100%
           if v_dept_count = 1 then
              v_USE_PERCENT := 1;
           else
             --如果不是最后一条时，当未设置分摊参数时，采用均摊
             if i_pos != v_dept_count then
               if v_AREA_sum = 0  then
                  v_USE_PERCENT := round(1/v_dept_count,6);
               else
                  v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
               end if;
             end if;

             --当循环最后一条时，用1-累计比例，确保分摊比例100%
             if i_pos = v_dept_count and v_dept_count > 1 then
                v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
             else
                v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
             end if;
           end if;

           --如果仅一个使用科室使用
           if v_dept_count = 1 then
              V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
              V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY ;
              V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY ;
              V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
              V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);
           else
              --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
              if i_pos = v_dept_count and v_dept_count > 1 then
                 V_PRICE           := g_tab_card_source_ret(i).PRICE           - V_PRICE_TOT          ;
                 V_NOW_DEPRE_MONEY := g_tab_card_source_ret(i).NOW_DEPRE_MONEY - V_NOW_DEPRE_MONEY_TOT;
                 V_ADD_DEPRE_MONEY := g_tab_card_source_ret(i).ADD_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT;
                 V_CUR_MONEY       := g_tab_card_source_ret(i).CUR_MONEY       - V_CUR_MONEY_TOT      ;
                 V_FORE_MONEY      := g_tab_card_source_ret(i).FORE_MONEY      - V_FORE_MONEY_TOT     ;
              else
                 V_PRICE           := round(g_tab_card_source_ret(i).PRICE* v_USE_PERCENT,2);
                 V_NOW_DEPRE_MONEY := round(g_tab_card_source_ret(i).NOW_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_ADD_DEPRE_MONEY := round(g_tab_card_source_ret(i).ADD_DEPRE_MONEY * v_USE_PERCENT,2);
                 V_CUR_MONEY       := round(g_tab_card_source_ret(i).CUR_MONEY * v_USE_PERCENT,2);
                 V_FORE_MONEY      := round(g_tab_card_source_ret(i).FORE_MONEY * v_USE_PERCENT,2);

                 V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                 V_NOW_DEPRE_MONEY_TOT := V_NOW_DEPRE_MONEY_TOT + V_NOW_DEPRE_MONEY ;
                 V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                 V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                 V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
              end if;
           end if;

           --如果存在冲减摊销时
           if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
              --如果仅一个使用科室使用
              if v_dept_count = 1 then
                 V_BACK_ADD_DEPRE_MONEY     := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0);
              else
                 --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
                 if i_pos = v_dept_count and v_dept_count > 1 then
                    V_BACK_ADD_DEPRE_MONEY := nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)
                                              - V_BACK_ADD_DEPRE_MONEY_TOT;
                 else
                    V_BACK_ADD_DEPRE_MONEY := round(  g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY
                                                    * v_USE_PERCENT
                                                    ,2);
                    V_BACK_ADD_DEPRE_MONEY_TOT := V_BACK_ADD_DEPRE_MONEY_TOT + V_BACK_ADD_DEPRE_MONEY;
                 end if;
              end if;
           end if;

           if V_NOTE = '含补增' then
              V_NOTE := V_NOTE || to_char(V_ADD_DEPRE_MONEY - V_NOW_DEPRE_MONEY);
           end if;

           --插入摊销数据表
           insert
             into ASS_DEPRE_MANAGE_Land(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --摊销序号
                  ,DEPRE_YEAR                    --摊销年度
                  ,DEPRE_MONTH                   --摊销期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期摊销
                  ,ADD_DEPRE_AMOUNT              --累计摊销
                  ,ADD_DEPRE_MONTH               --累计摊销月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用摊销方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,1
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_NOW_DEPRE_MONEY,2)
                 ,ROUND(V_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,V_NOTE
               );

         --如果存在冲销累计摊销时
         if nvl(g_tab_card_source_ret(i).BACK_ADD_DEPRE_MONEY,0)<> 0  then
            insert
             into ASS_DEPRE_MANAGE_Land(
                   GROUP_ID                      --集团ID
                  ,HOS_ID                        --医院ID
                  ,COPY_CODE                     --账套编码
                  ,DEPRE_NO                      --摊销序号
                  ,DEPRE_YEAR                    --摊销年度
                  ,DEPRE_MONTH                   --摊销期间
                  ,ASS_CARD_NO                   --资产卡片号
                  ,SOURCE_ID                     --资金来源
                  ,USE_DEPT_ID                   --使用科室ID
                  ,USE_DEPT_NO                   --使用科室NO
                  ,USE_PERCENT                   --分摊比例
                  ,PRIM_MONEY                    --原值
                  ,NOW_DEPRE_AMOUNT              --本期摊销
                  ,ADD_DEPRE_AMOUNT              --累计摊销
                  ,ADD_DEPRE_MONTH               --累计摊销月份
                  ,CUR_MONEY                     --资产净值
                  ,FORE_MONEY                    --预留残值
                  ,OPERATOR                      --操作员
                  ,DEAL_DATE                     --处理日期
                  ,EQUI_DEPRE_CODE               --使用摊销方法
                  ,NOTE                          --摘要
                  )
               values(
                  prm_group_id
                 ,prm_hos_id
                 ,prm_copy_code
                 ,2
                 ,prm_acc_year
                 ,prm_acc_month
                 ,g_tab_card_source_ret(i).ass_card_no
                 ,g_tab_card_source_ret(i).SOURCE_ID
                 ,v_USE_DEPT_ID
                 ,v_USE_DEPT_NO
                 ,v_USE_PERCENT
                 ,V_PRICE
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,ROUND(V_BACK_ADD_DEPRE_MONEY,2)
                 ,g_tab_card_source_ret(i).ADD_DEPRE_MONTH
                 ,ROUND(V_CUR_MONEY,2)
                 ,V_FORE_MONEY
                 ,prm_operator
                 ,sysdate
                 ,g_tab_card_source_ret(i).DEPRE_METHOD
                 ,'冲减'
               );
         end if;
       end loop; --<<使用科室列表>>>
     end loop;--<<g_tab_card_source_ret 结果数据栈>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地分摊计提失败！'||SQLERRM;

   END prc_InsertManageLandAll;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_FillAddManageLandAll
   || 功能描述 ：本月不需要计提摊销的数据，但产生累计摊销数据，进入累计摊销表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_FillAddManageLandAll( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_operator          IN   VARCHAR2       --操作员
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS
     --定义变量
     /**************************************************************************
     *
     * 已计提完成累计摊销，且为本月之前的入库的资产,需要本月产生累计摊销记录
     *
     * 当月入库，但入库单时已存累计摊销的资产，本月产生累计摊销记录。如：盘盈
     *
     * 用户按正式投入日期摊销的资产，且在入库时产生的累计摊销，本月产生累计摊销记录
     *
     ***************************************************************************/
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   ,prm_para_05104        IN   VARCHAR2       --1:是 0:否
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计摊销
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,t.add_depre_month   --累计摊销月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --摊销方法
                ,t.Acc_Depre_Amount  --摊销年限
                ,t.in_date           --入库日期
                ,t.run_date          --正式投入使用日期
            from (select  t1.group_id
                         ,t1.hos_id
                         ,t1.copy_code
                         ,'06' as Naturs_Code
                         ,t1.ass_card_no
                         ,t2.source_id
                         ,nvl(t2.price,0) as price
                         ,nvl(t2.manage_depre_money,0) as depre_money
                         ,nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) as cur_money
                         ,nvl(t2.fore_money,0) as fore_money
                         ,nvl(t1.add_depre_month,0) as add_depre_month
                         ,t1.Use_State
                         ,t1.dispose_type
                         ,t1.apply_date
                         ,t1.dispose_date
                         ,nvl(t1.depr_method,'01') as depr_method
                         ,nvl(t1.Acc_Depre_Amount,0) as Acc_Depre_Amount
                         ,t1.in_date
                         ,t1.run_date
                    from ass_card_Land t1
                    left join ASS_RESOURCE_Land t2
                      on t1.group_id = t2.group_id
                     and t1.hos_id = t2.hos_id
                     and t1.copy_code = t2.copy_code
                     and t1.ass_card_no = t2.ass_card_no
                     and t2.source_id = t2.source_id
                    where t1.group_id      =  prm_group_id
                      and t1.hos_id         =  prm_hos_id
                      and t1.copy_code      =  prm_copy_code
                      and nvl(t1.is_manage_depre,0)  =  1
                      and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                           or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                           )
                      and nvl(t2.manage_depre_money,0) >  0
                      and (   (     nvl(t2.price,0) - nvl(t2.manage_depre_money,0)- nvl(t2.fore_money,0) <=  0
                               and  to_char(t1.in_date ,'YYYYMM')   <  prm_acc_year||prm_acc_month
                              )
                           or (    (    (      prm_para_05007 = '2'
                                          and (to_char(t1.run_date,'YYYYMM')    > prm_acc_year||prm_acc_month)
                                          and (to_char(t1.in_date ,'YYYYMM')    < prm_acc_year||prm_acc_month )
                                        )
                                    )
                               and (   (    (to_char(t1.apply_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 6 )
                                       )
                                    or (    (to_char(t1.dispose_date,'YYYYMM')  >  prm_acc_year||prm_acc_month )
                                        and (nvl(t1.use_state,0) = 7 )
                                       )
                                    or  (nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7 )
                                    )
                               )
                           or (((to_char(t1.apply_date,'YYYYMM')  =  prm_acc_year||prm_acc_month )
                                  and (nvl(t1.use_state,0) = 6 )and ( prm_para_05104 = 1 )
                                 )--新制度修改：增加申报是否冲减参数判断                                
                               or ((to_char(t1.dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month )
                                     and (nvl(t1.use_state,0) = 7 )
                                  )
                              )
                           )
               ) t
            order by t.ass_card_no,source_id
          ;

      --定义变量
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Land.Ass_Card_No%type      ;      --卡片号
      V_ORI_PRICE            ASS_CARD_Land.Price%type            ;      --原值
      V_ORI_DEPRE_MONEY      ASS_CARD_Land.Depre_Money%type      ;      --累计摊销
      V_ORI_CUR_MONEY        ASS_CARD_Land.Cur_Money%type        ;      --现值
      V_ORI_FORE_MONEY       ASS_CARD_Land.Fore_Money%type       ;      --预留残值
      V_PRICE                ASS_CARD_Land.Price%type            ;      --原值
      V_NOW_DEPRE_MONEY      ASS_DEPRE_ACC_Land.Now_Depre_Amount%type;  --本期摊销
      V_ADD_DEPRE_MONEY      ASS_CARD_Land.Depre_Money%type      ;      --累计摊销
      V_CUR_MONEY            ASS_CARD_Land.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Land.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Land.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Land.Depr_Method%type      ;      --摊销方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Land.Acc_Depre_Amount%type ;      --摊销年限
      V_dispose_type         ASS_CARD_Land.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Land.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Land.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Land.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Land.Add_Depre_Month%type;   --累计摊销月数

      v_AREA_sum             ASS_SHARE_DEPT_R_Land.Area%type;
      v_dept_count           integer;
      i_pos                  integer;
      v_USE_PERCENT_tot            ASS_DEPRE_ACC_Land.Use_Percent%type;
      V_ADD_DEPRE_MONEY_TOT        ASS_DEPRE_ACC_Land.Add_Depre_Amount%type;
      V_PRICE_TOT                  ASS_DEPRE_ACC_Land.Prim_Money%type;
      V_CUR_MONEY_TOT              ASS_DEPRE_ACC_Land.Cur_Money%type;
      V_FORE_MONEY_TOT             ASS_DEPRE_ACC_Land.Fore_Money%type;
      v_USE_DEPT_ID                ASS_DEPRE_ACC_Land.Use_Dept_Id%type;
      v_USE_DEPT_NO                ASS_DEPRE_ACC_Land.Use_Dept_No%type;
      v_USE_PERCENT                ASS_DEPRE_ACC_Land.Use_Percent%type;
      V_NOTE                       ASS_DEPRE_ACC_Land.Note%type;
      v_in_date                    ASS_CARD_Land.In_Date%type;
      v_run_date                   ASS_CARD_Land.Run_Date%type;
      v_Only_Back            integer;
   begin

     --初始化变量
     prm_AppCode     := def_OK                     ;
     prm_ErrTxt      := '土地累计分摊补填完成!';
     v_AREA_sum      := 0                      ;
     v_dept_count    := 0                      ;
     v_USE_PERCENT   := 0                      ;
     v_USE_PERCENT_tot := 0                    ; --累计分摊比例
     i_pos             := 0                    ;

     V_PRICE                    :=0            ;
     V_CUR_MONEY                :=0            ;
     V_NOW_DEPRE_MONEY := 0                    ;
     V_ADD_DEPRE_MONEY := 0                    ;
     V_FORE_MONEY               :=0            ;
     V_PRICE_TOT                :=0            ;
     V_CUR_MONEY_TOT            :=0            ;
     V_ADD_DEPRE_MONEY_TOT      := 0           ;
     V_FORE_MONEY_TOT           :=0            ;

     V_ORI_PRICE                :=0            ;
     V_ORI_CUR_MONEY            :=0            ;
     V_ORI_FORE_MONEY           :=0            ;
     V_ORI_DEPRE_MONEY          :=0            ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , g_para_05007
                               , g_para_05104
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_ORI_PRICE             --原值
                                          ,V_ORI_DEPRE_MONEY       --累计摊销
                                          ,V_ORI_CUR_MONEY         --现值
                                          ,V_ORI_FORE_MONEY        --预留残值
                                          ,v_add_depre_month       --累计摊销月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --摊销方法
                                          ,V_ACC_DEPRE_AMOUNT      --摊销年限
                                          ,v_in_date
                                          ,v_run_date
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;


         --内层循环使用的变量初始化
         v_dept_count      := 0 ;
         i_pos             := 0 ;
         v_USE_PERCENT_tot := 0 ;

         V_PRICE                    :=0            ;
         V_NOW_DEPRE_MONEY          :=0            ;
         V_ADD_DEPRE_MONEY          :=0            ;
         V_CUR_MONEY                :=0            ;
         V_FORE_MONEY               :=0            ;
         V_PRICE_TOT                :=0            ;
         V_CUR_MONEY_TOT            :=0            ;
         V_ADD_DEPRE_MONEY_TOT      :=0            ;
         V_FORE_MONEY_TOT           :=0            ;

         v_Only_Back                :=0            ;


         --在摊销年月之前入库，且在本月已处置，发生补填业务时，仅补填冲补摊销
         if (   (g_para_05007 = '1' and (to_char(v_in_date,'YYYYMM')  < prm_acc_year||prm_acc_month ))
             or (g_para_05007 = '2' and (   (to_char(v_run_date,'YYYYMM') < prm_acc_year||prm_acc_month )
                                         or (to_char(v_in_date,'YYYYMM')  < prm_acc_year||prm_acc_month )
                                        )
                 )
            )
             and ((nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
                 or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
                 )
           then
             v_Only_Back := 1 ;
         end if;

         --提取总面积
         select sum(nvl(t.AREA,0)),count(1)
           into v_AREA_sum,v_dept_count
           from ASS_SHARE_DEPT_R_Land t
          where t.group_id  = prm_group_id
            and t.hos_id    = prm_hos_id
            and t.copy_code = prm_copy_code
            and t.ass_year  = prm_acc_year
            and t.ass_month = prm_acc_month
            and t.ass_card_no = v_ASS_CARD_NO
            ;

         if v_dept_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '使用科室未维护!';
            return;
         end if;

         --按科室比例计算
         for rec in (select t.DEPT_ID
                           ,t.DEPT_NO
                           ,t.AREA
                       from ASS_SHARE_DEPT_R_Land t
                      where t.group_id  = prm_group_id
                        and t.hos_id    = prm_hos_id
                        and t.copy_code = prm_copy_code
                        and t.ass_year  = prm_acc_year
                        and t.ass_month = prm_acc_month
                        and t.ass_card_no = v_ASS_CARD_NO
                    ) loop

             i_pos := i_pos + 1;

             v_USE_DEPT_ID := rec.dept_id;
             v_USE_DEPT_NO := rec.dept_no;


             --如果仅一个使用科室使用，则直接分摊比例为100%
             if v_dept_count = 1 then
                v_USE_PERCENT := 1;
             else
               --如果不是最后一条时，当未设置分摊参数时，采用均摊
               if i_pos != v_dept_count then
                 if v_AREA_sum = 0  then
                    v_USE_PERCENT := round(1/v_dept_count,6);
                 else
                    v_USE_PERCENT := round(rec.area/v_AREA_sum,6);
                 end if;
               end if;

               --当循环最后一条时，用1-累计比例，确保分摊比例100%
               if i_pos = v_dept_count and v_dept_count > 1 then
                  v_USE_PERCENT     := 1 - v_USE_PERCENT_tot;
               else
                  v_USE_PERCENT_tot := v_USE_PERCENT_tot + v_USE_PERCENT;
               end if;
             end if;

             --如果仅一个使用科室使用
             if v_dept_count = 1 then
                V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                V_NOW_DEPRE_MONEY := 0 ;
                V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2) ;
                V_CUR_MONEY       := round(V_ORI_CUR_MONEY * v_USE_PERCENT,2);
                V_FORE_MONEY      := round(V_ORI_FORE_MONEY * v_USE_PERCENT,2);
             else
                --当循环最后一条时，用总摊销数 - 其他科室的摊销，确保与摊销金额相等
                if i_pos = v_dept_count and v_dept_count > 1 then
                   V_PRICE           := V_ORI_PRICE          - V_PRICE_TOT           ;
                   V_NOW_DEPRE_MONEY := 0                                            ;
                   V_ADD_DEPRE_MONEY := V_ORI_DEPRE_MONEY - V_ADD_DEPRE_MONEY_TOT    ;
                   V_CUR_MONEY       := V_ORI_CUR_MONEY       - V_CUR_MONEY_TOT      ;
                   V_FORE_MONEY      := V_ORI_FORE_MONEY      - V_FORE_MONEY_TOT     ;
                else
                   V_PRICE           := round(V_ORI_PRICE* v_USE_PERCENT,2);
                   V_NOW_DEPRE_MONEY := 0                                  ;
                   V_ADD_DEPRE_MONEY := round(V_ORI_DEPRE_MONEY * v_USE_PERCENT,2);
                   V_CUR_MONEY       := round(V_ORI_CUR_MONEY   * v_USE_PERCENT,2);
                   V_FORE_MONEY      := round(V_ORI_FORE_MONEY  * v_USE_PERCENT,2);

                   V_PRICE_TOT           := V_PRICE_TOT           + V_PRICE           ;
                   V_ADD_DEPRE_MONEY_TOT := V_ADD_DEPRE_MONEY_TOT + V_ADD_DEPRE_MONEY ;
                   V_CUR_MONEY_TOT       := V_CUR_MONEY_TOT       + V_CUR_MONEY       ;
                   V_FORE_MONEY_TOT      := V_FORE_MONEY_TOT      + V_FORE_MONEY      ;
                end if;
             end if;

             if V_CUR_MONEY = 0  then
                V_NOTE := '已折完';

                --如果存在部分资金来源折完时，累计折旧月份取上月折旧表中累计折旧月数
                for k in 1..g_tab_card_fill.count() loop
                    if g_tab_card_fill(k).ASS_CARD_NO = v_ASS_CARD_NO then
                       v_add_depre_month :=  g_tab_card_fill(k).ADD_DEPRE_MONTH;
                       exit;
                    end if;
                end loop;

             else
                V_NOTE := '补增';
             end if;

             --插入摊销数据表
             if  v_Only_Back = 0 then
                 insert
                   into ASS_DEPRE_MANAGE_Land(
                         GROUP_ID                      --集团ID
                        ,HOS_ID                        --医院ID
                        ,COPY_CODE                     --账套编码
                        ,DEPRE_NO                      --摊销序号
                        ,DEPRE_YEAR                    --摊销年度
                        ,DEPRE_MONTH                   --摊销期间
                        ,ASS_CARD_NO                   --资产卡片号
                        ,SOURCE_ID                     --资金来源
                        ,USE_DEPT_ID                   --使用科室ID
                        ,USE_DEPT_NO                   --使用科室NO
                        ,USE_PERCENT                   --分摊比例
                        ,PRIM_MONEY                    --原值
                        ,NOW_DEPRE_AMOUNT              --本期摊销
                        ,ADD_DEPRE_AMOUNT              --累计摊销
                        ,ADD_DEPRE_MONTH               --累计摊销月份
                        ,CUR_MONEY                     --资产净值
                        ,FORE_MONEY                    --预留残值
                        ,OPERATOR                      --操作员
                        ,DEAL_DATE                     --处理日期
                        ,EQUI_DEPRE_CODE               --使用摊销方法
                        ,NOTE                          --摘要
                        )
                     values(
                        prm_group_id
                       ,prm_hos_id
                       ,prm_copy_code
                       ,1
                       ,prm_acc_year
                       ,prm_acc_month
                       ,v_ASS_CARD_NO
                       ,v_soure_id
                       ,v_USE_DEPT_ID
                       ,v_USE_DEPT_NO
                       ,v_USE_PERCENT
                       ,V_PRICE
                       ,V_NOW_DEPRE_MONEY
                       ,V_ADD_DEPRE_MONEY
                       ,v_add_depre_month
                       ,V_CUR_MONEY
                       ,V_FORE_MONEY
                       ,prm_operator
                       ,sysdate
                       ,V_DEPR_METHOD
                       ,V_NOTE
                     );
            end if;

            --如果存在冲销累计摊销时
            if(  (g_para_05104=1 and nvl(V_USE_STATE,0) =  6  and to_char(v_dis_apply_date,'YYYYMM')= prm_acc_year||prm_acc_month)
               or(nvl(V_USE_STATE,0) =  7  and to_char(v_dispose_date,'YYYYMM')= prm_acc_year||prm_acc_month)
              )then
                insert
                 into ASS_DEPRE_MANAGE_Land(
                       GROUP_ID                      --集团ID
                      ,HOS_ID                        --医院ID
                      ,COPY_CODE                     --账套编码
                      ,DEPRE_NO                      --摊销序号
                      ,DEPRE_YEAR                    --摊销年度
                      ,DEPRE_MONTH                   --摊销期间
                      ,ASS_CARD_NO                   --资产卡片号
                      ,SOURCE_ID                     --资金来源
                      ,USE_DEPT_ID                   --使用科室ID
                      ,USE_DEPT_NO                   --使用科室NO
                      ,USE_PERCENT                   --分摊比例
                      ,PRIM_MONEY                    --原值
                      ,NOW_DEPRE_AMOUNT              --本期摊销
                      ,ADD_DEPRE_AMOUNT              --累计摊销
                      ,ADD_DEPRE_MONTH               --累计摊销月份
                      ,CUR_MONEY                     --资产净值
                      ,FORE_MONEY                    --预留残值
                      ,OPERATOR                      --操作员
                      ,DEAL_DATE                     --处理日期
                      ,EQUI_DEPRE_CODE               --使用摊销方法
                      ,NOTE                          --摘要
                      )
                   values(
                      prm_group_id
                     ,prm_hos_id
                     ,prm_copy_code
                     ,2
                     ,prm_acc_year
                     ,prm_acc_month
                     ,v_ASS_CARD_NO
                     ,v_soure_id
                     ,v_USE_DEPT_ID
                     ,v_USE_DEPT_NO
                     ,v_USE_PERCENT
                     ,V_PRICE
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,V_ADD_DEPRE_MONEY * (-1)
                     ,v_add_depre_month
                     ,V_CUR_MONEY
                     ,V_FORE_MONEY
                     ,prm_operator
                     ,sysdate
                     ,V_DEPR_METHOD
                     ,'冲减'
                   );
           end if;
         end loop; --<<使用科室列表>>>

     END LOOP; --<< end cur_ass_card_source>>

     if cur_ass_card_source%isopen then
        CLOSE cur_ass_card_source;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地累计分摊补填时失败！'||SQLERRM;
   end prc_FillAddManageLandAll;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_UpdateManageLandAll
   || 功能描述 ：根据卡片栈数据更新卡片表及资金来源表
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_UpdateManageLandAll ( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
     IS


      --定义变量

   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '土地卡片更新完成!';

     --更新资金来源表
     for i in 1..g_tab_card_source_ret.count() loop
       update ASS_RESOURCE_Land t
          set  t.manage_depre_money = g_tab_card_source_ret(i).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_source_ret(i).ASS_CARD_NO
           and t.source_id   = g_tab_card_source_ret(i).SOURCE_ID
           ;
     end loop;

     --更新卡片表
     for j in 1..g_tab_card_ret.count() loop
       update ASS_CARD_Land t
          set  t.manage_depre_money     = g_tab_card_ret(j).ADD_DEPRE_MONEY
              ,t.add_manage_month = g_tab_card_ret(j).ADD_DEPRE_MONTH
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_ret(j).ASS_CARD_NO
           ;
     end loop;

     --更新补充累计折旧
     for k in 1..g_tab_card_fill.count() loop
       update ASS_CARD_Land t
          set  t.manage_depre_money     = t.manage_depre_money + g_tab_card_fill(k).ADD_DEPRE_MONEY
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = g_tab_card_fill(k).ASS_CARD_NO
           ;
     end loop;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地卡片更新失败！'||SQLERRM;

   END prc_UpdateManageLandAll;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcLandPortALL
   || 功能描述 ：土地摊销接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcLandPortALL( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_operator          IN   VARCHAR2       --操作员
                                 ,prm_AppCode           Out  Number         --执行代码
                                 ,prm_ErrTxt            Out  Varchar2       --错误信息
                                )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '土地计提成功!';

     /*--1、加载全局参数
     prc_LoadPara( prm_group_id
                  ,prm_hos_id
                  ,prm_copy_code
                  ,prm_AppCode
                  ,prm_ErrTxt
                 );

     if prm_AppCode <> def_OK then
        return;
     end if;*/


     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(3)计算摊销前完整性检查
     prc_ChkCardLandAll( prm_group_id             --集团
                           ,prm_hos_id               --医院
                           ,prm_copy_code            --账套
                           ,prm_acc_year             --年度
                           ,prm_acc_month            --月份
                           ,prm_AppCode              --执行代码
                           ,prm_ErrTxt               --错误信息
                           );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(4)删除摊销表数据
     prc_DeleteDepreLandAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     --(5)装载卡片数据
     prc_LoadCardLandAll( prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度
                            ,prm_acc_month              --月份
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息
                           );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)装载卡片数据
     prc_LoadFillCalcLandAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(7)资产计提摊销
     prc_CalcDepreLandALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                            );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(7-2)根据上月折旧数据更新本月折旧
     prc_ModifyDepreLandAll(   prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );
     if prm_AppCode <>  def_OK  then
        return;
     end if;  

     --(8)插入摊销表数据
     prc_InsertDepreLandAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(9)对累计摊销进行补填
     prc_FillAddDepreLandAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)更新卡片及资金来表累计摊销数据
     prc_UpdateCardLandAll (  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(11)重新初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(12)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(13)计算分摊前完整性检查
     prc_ChkManageLandAll( prm_group_id             --集团
                             ,prm_hos_id               --医院
                             ,prm_copy_code            --账套
                             ,prm_acc_year             --年度
                             ,prm_acc_month            --月份
                             ,prm_AppCode              --执行代码
                             ,prm_ErrTxt               --错误信息
                             );

     if prm_AppCode <> def_OK  then
        return;
     end if;

      --(14)删除分摊表数据
     prc_DeleteManageLandAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(15)装载卡片数据
     prc_LoadManageLandAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(16)装载卡片数据
     prc_LoadFillManageLandAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(17)资产计提分摊
     prc_CalcManageLandALL(  prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(18)插入分摊表数据
     prc_InsertManageLandAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_operator               --操作员名称
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(19)对累计分摊进行补填
     prc_FillAddManageLandAll(  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_operator               --操作员名称
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );
     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(20)更新卡片及资金来表累计摊销数据
     prc_UpdateManageLandAll (  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK             ;
        prm_ErrTxt      := '土地计提成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地计提失败！'||SQLERRM;
   END prc_CalcLandPortALL;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardSpecialSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardSpecialSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在
     v_CHANGE_depre_flag    integer                                ;      --查找是否存在变动折旧
     ***************************************************************************************/
     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_SPECIAL.Price%type            ;
     v_depre_money          ASS_CARD_SPECIAL.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_SPECIAL.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_SPECIAL.Fore_Money%type       ;
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     ***************************************************************************************/
     v_price_source         ASS_CARD_SPECIAL.Price%type            ;
     v_depre_money_source   ASS_CARD_SPECIAL.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_SPECIAL.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_SPECIAL.Fore_Money%type       ;
     v_is_depr              ASS_CARD_SPECIAL.Is_Depr%type          ;

   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '专用设备卡片完整性检查通过!';

     v_exist_flag         := 0                            ;
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_DEPRE_flag  := 0                            ;
     v_CHANGE_depre_flag  := 0                            ;
     ***************************************************************************************/

     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_is_depr            := 0                            ;

     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_SPECIAL t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
             --or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t.use_state,0) = 6)
             or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
             )--新制度修改：不包含本月处置卡片
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_SPECIAL t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;
     
     /****************************新制度修改：资产减少当月不计提折旧**********************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     *************************************************************************************/
     
     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_depr,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_is_depr
         from ASS_CARD_SPECIAL t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;

     if v_is_depr = 0 then
       return;
     end if;
     
     /****************************新制度修改：资产减少当月不计提折旧**********************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     *************************************************************************************/
     v_exist_flag:=0 ;
     
     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_SPECIAL t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     --如果卡片中存在折旧，寻找折旧数据来源
     v_exist_flag:=0 ;
     
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then --新制度修改：当月减少资产不计提折旧

        --检查上个月是否折旧
        select count(1)
          into v_exist_flag     --新制度修改
          from ASS_DEPRE_ACC_SPECIAL t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;
        /*************************新制度修改：当月减少资产不计提折旧******************************
        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            select count(1)
              into v_CHANGE_depre_flag
              from ASS_DEPRE_DETAIL_SPECIAL t1
              left join ASS_DEPRE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = prm_ass_card_no
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
            
            if v_CHANGE_depre_flag = 0 then
                prm_AppCode := def_WARNING;
                prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
                return;
            end if;
        end if;
        ******************************************************************************************/
        if v_exist_flag = 0 then
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
           return;
        end if;
     end if;

     --检查该卡片在本月之后是否累计折旧变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_DEPRE_DETAIL_SPECIAL t1
      left join ASS_DEPRE_SPECIAL t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过累计折旧变动!';
       return;
    end if;

     --检查该卡片在本月之后是否发生原值变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_CHANGE_DETAIL_SPECIAL t1
      left join ASS_CHANGE_SPECIAL t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.change_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过原值变动!';
       return;
    end if;

     --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_TRAN_STORE_DETAIL_SPECIAL t1
      left join ASS_TRAN_STORE_SPECIAL t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.tran_no = t2.tran_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（库库）!';
       return;
    end if;

     --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_TRAN_DEPT_DETAIL_SPECIAL t1
      left join ASS_TRAN_DEPT_SPECIAL t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.tran_no = t2.tran_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（科科）!';
       return;
    end if;

    --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_OUT_DETAIL_SPECIAL t1
      left join ASS_OUT_SPECIAL t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.out_no = t2.out_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（库科）!';
       return;
    end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardSpecialSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardSpecialSingle
   || 功能描述 ：加载要计算折旧卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardSpecialSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                         /* ,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.add_depre_amount,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          /*,nvl(b.add_depre_month,nvl(a.Acc_Depre_Amount,0)) as Acc_Depre_Amount*/
                          ,nvl(a.Acc_Depre_Amount,0) as Acc_Depre_Amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'02' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.depre_money,0) as depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_depre_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.depr_method,'01') as depr_method
                                     ,t1.Acc_Depre_Amount
                                from ass_card_special t1
                                left join ASS_RESOURCE_SPECIAL t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 ='1' and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 ='2' and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_depr,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       )
                                  and t1.ass_card_no             = prm_ass_card_no                  --修改
                                  and t2.ass_card_no             = prm_ass_card_no                  --修改
                                  and t1.add_depre_month         < t1.acc_depre_amount *12
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_ACC_SPECIAL t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                  and t3.ass_card_no = prm_ass_card_no
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                           ,t3.ass_card_no,t3.source_id
                                )b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id
                       and b.ass_card_no = prm_ass_card_no                   --修改*/
               ) t
            where nvl(t.cur_money,0) >= 0
            order by t.ass_card_no ,t.source_id
          ;

      /*********************************特别说明*************************************
       *
       * 经分析折旧计算比较严谨，计算出的折旧大于现值时给现值，超过年限全部计提
       *
       * 基于以上前提，因此此处将nvl(t.cur_money,0) > 0 改为 nvl(t.cur_money,0) >= 0
       *
       * 主要用于解决，当存在部分资金来源已折完，原值计算不正确的现象。
       *
       * 存在问题：累计折旧月份不准确，但减少业务表中不需要提供累计折旧月份
       *
      *******************************************************************************/
      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_SPECIAL.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_SPECIAL.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_SPECIAL.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_SPECIAL.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_SPECIAL.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_SPECIAL.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_SPECIAL.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_SPECIAL.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_SPECIAL.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_SPECIAL.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_SPECIAL.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_SPECIAL.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_SPECIAL.Add_Depre_Month%type;   --累计折旧月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_SPECIAL.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_SPECIAL.CHANGE_Depre%type;   --累计折旧调整金额
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '专用设备卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;


     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , prm_ass_card_no
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:无偿调拨 32：有偿调拨  33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          /*--读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_SPECIAL t1
              left join ASS_CHANGE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_SPECIAL t1
              left join ASS_DEPRE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;*/

          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧

              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片装载失败！'||SQLERRM;

   END prc_LoadCardSpecialSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcCardSpecialSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreSpecialSingle(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS

      --定义变量
      v_card_price           ASS_CARD_SPECIAL.Price%type;
      v_card_now_depre_money ASS_CARD_SPECIAL.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_SPECIAL.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_SPECIAL.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_SPECIAL.Cur_Money%type;
      v_card_fore_money      ASS_CARD_SPECIAL.Fore_Money%type;
      v_card_use_state       ASS_CARD_SPECIAL.Use_State%type;
      v_card_depr_method     ASS_CARD_SPECIAL.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_SPECIAL.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_SPECIAL.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈


   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '专用设备卡片计算折旧成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.depre_money, 0),
               nvl(t.add_depre_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.depr_method,'01'),
               nvl(t.acc_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_SPECIAL t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         v_i := v_i + 1 ;
         g_tab_card_ret(v_i).Naturs_Code      := '02'                     ;
         g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_ret(v_i).PRICE            := v_card_price             ;
         g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
         g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
         g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
         g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0 ;--处置申报时已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0 ;--处置申报时不冲减
         else
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_card_add_depre_money * (-1);
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_SPECIAL t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_SPECIAL t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --卡片结果数据压栈
         v_j := v_j + 1 ;
         g_tab_card_source_ret(v_j).Naturs_Code      := '02'                     ;
         g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
         g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
         g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := rec.depre_money          ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
         g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
         g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
         g_tab_card_source_ret(v_j).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;


         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0; --处置申报时已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then  
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0; --处置申报时不冲减
         else
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := rec.depre_money * (-1);
         end if;

        end loop;

     end if;


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_price           :=0;
         v_card_now_depre_money :=0;
         v_card_add_depre_money :=0;
         v_card_add_depre_month :=0;
         v_card_cur_money       :=0;
         v_card_fore_money      :=0;
         v_BACK_ADD_DEPRE_MONEY :=0;

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}折旧方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_DEPRE_MONTH >= g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;

                 --计算本月折旧
                 if g_tab_card_source(i).ADD_DEPRE_MONTH + 1 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                     g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                 else
                     --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                    /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                     - g_tab_card_source(i).FORE_MONEY
                                                                     )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                   ,2);*/

                     g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                     )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                        - g_tab_card_source(i).ADD_DEPRE_MONTH
                                                                       )
                                                                   ,2);
                     if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                        g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                     end if;
                 end if;

                 --计算累计折旧月份
                 g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 1;

                 --计算累计折旧
                 g_tab_card_source(i).ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY
                                                         +g_tab_card_source(i).NOW_DEPRE_MONEY;

                 if   g_tab_card_source(i).ADD_DEPRE_MONEY
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧维护不正确!';
                    return;
                 end if;

                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;



                 /*********************由于调用均为减少业务**********************************
                 if  g_tab_card_source(i).USE_STATE in('6','7') then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);
                 end if;
                 ****************************************************************************/

                 --计算冲减累计折旧
                 g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);


             end if; --<<平均年限法>>

             --如果为已处置申报，如果存在本期折旧为0，原因：处置申报已提折旧，本次为处置业务
             if g_tab_card_source(i).USE_STATE = '6' then

                i_count := 0 ;

                select count(1)
                  into i_count
                  from ass_card_special t
                 where t.group_id    = prm_group_id
                   and t.hos_id      = prm_hos_id
                   and t.copy_code   = prm_copy_code
                   and t.ass_card_no = prm_ass_card_no
                   and nvl(to_char(t.apply_date  ,'YYYYMM'),'000000') = prm_acc_year || prm_acc_month
                 ;

                 if i_count > 0 then
                    g_tab_card_source(i).NOW_DEPRE_MONEY      := 0 ;
                    g_tab_card_source(i).BACK_ADD_DEPRE_MONEY := 0 ;
                 end if;
             end if;

             --卡片结果数据压栈
             v_j := v_j + 1 ;
             g_tab_card_source_ret(v_j).Naturs_Code      := '02'                                ;
             g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no                     ;
             g_tab_card_source_ret(v_j).SOURCE_ID        := g_tab_card_source(i).SOURCE_ID      ;
             g_tab_card_source_ret(v_j).PRICE            := g_tab_card_source(i).PRICE          ;
             g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := g_tab_card_source(i).NOW_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := g_tab_card_source(i).ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := g_tab_card_source(i).ADD_DEPRE_MONTH;
             g_tab_card_source_ret(v_j).CUR_MONEY        := g_tab_card_source(i).CUR_MONEY;
             g_tab_card_source_ret(v_j).FORE_MONEY       := g_tab_card_source(i).FORE_MONEY;
             g_tab_card_source_ret(v_j).USE_STATE        := g_tab_card_source(i).USE_STATE;
             g_tab_card_source_ret(v_j).DEPRE_METHOD     := g_tab_card_source(i).DEPRE_METHOD;
             g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;

             --计算卡片压栈数据
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_DEPRE_MONEY;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_DEPRE_MONEY;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_DEPRE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
         end loop;

         --卡片结果数据压栈
         v_i := v_i + 1 ;
         g_tab_card_ret(v_i).Naturs_Code      := '02'                     ;
         g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_ret(v_i).PRICE            := v_card_price             ;
         g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
         g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
         g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
         g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
         g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;

     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片折旧计提失败！'||SQLERRM;

   END prc_CalcDepreSpecialSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageSpecialSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageSpecialSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在
     
     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_SPECIAL.Price%type            ;
     v_depre_money          ASS_CARD_SPECIAL.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_SPECIAL.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_SPECIAL.Fore_Money%type       ;
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;

     v_price_source         ASS_CARD_SPECIAL.Price%type            ;
     v_depre_money_source   ASS_CARD_SPECIAL.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_SPECIAL.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_SPECIAL.Fore_Money%type       ;
     v_Is_Manage_Depre      ASS_CARD_SPECIAL.Is_Manage_Depre%type  ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '专用设备卡片完整性检查通过!';
     
     v_before_DEPRE_flag  := 0                            ;
     
     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Manage_Depre    := 0                            ;
     
     /*******************************在资产折旧时已做较验******************************************
     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_SPECIAL t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and nvl(t.use_state,0) <> 0
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_SPECIAL t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;
     *********************************************************************************************/

     /********************新制度修改：当月减少资产不计提折旧********************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ***************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.manage_depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_manage_depre,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Manage_Depre
         from ASS_CARD_SPECIAL t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;

     if v_Is_Manage_Depre = 0 then
        return;
     end if;
     /****************************新制度修改：资产减少当月不计提折旧***********************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     ***************************************************************************************/

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_SPECIAL t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     --如果卡片中存在折旧，寻找折旧数据来源
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then --新制度修改：当月减少资产不计提折旧

        --检查上个月是否折旧
        select count(1)
          into v_before_DEPRE_flag
          from ASS_DEPRE_MANAGE_SPECIAL t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提分摊或期初累计分摊未维护!';
            return;
        end if;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageSpecialSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageSpecialSingle
   || 功能描述 ：加载要计算分摊卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageSpecialSingle( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                         )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code              --资产性质
                ,t.ass_card_no              --卡片号
                ,t.source_id                --资金来源
                ,t.price                    --原值
                ,t.manage_depre_money       --累计分摊
                ,t.cur_money                --现值
                ,t.fore_money               --残值
                ,t.add_depre_month          --累计折旧月份
                ,t.Use_State                --使用状态
                ,t.dispose_type             --处置类型
                ,t.apply_date               --处置申报日期
                ,t.dispose_date             --处置日期
                ,t.manage_depr_method       --分摊方法
                ,t.manage_depre_amount      --分摊年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.add_depre_amount,nvl(a.manage_depre_money,0)) as manage_depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_manage_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.manage_depre_money,0) as manage_depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_manage_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.manage_depr_method
                          ,a.manage_depre_amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'02' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.manage_depre_money,0) as manage_depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_manage_month,0) as add_manage_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.manage_depr_method,'01') as manage_depr_method
                                     ,nvl(t1.manage_depre_amount,0) as manage_depre_amount
                                from ass_card_special t1
                                left join ASS_RESOURCE_SPECIAL t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 ='1' and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 ='2' and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_manage_depre,0)  =  1                              --是否分摊
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       )
                                  and t1.ass_card_no             = prm_ass_card_no                  --修改
                                  and t2.ass_card_no             = prm_ass_card_no                  --修改
                                  and t1.add_manage_month        < t1.manage_depre_amount *12
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_MANAGE_SPECIAL t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                  and t3.ass_card_no = prm_ass_card_no
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id
                       and b.ass_card_no = prm_ass_card_no */                  --修改
               ) t
            where (nvl(t.price,0) - nvl(t.manage_depre_money,0) - nvl(t.fore_money,0)) >= 0
            order by t.ass_card_no ,t.source_id
          ;

      /*********************************特别说明*************************************
       *
       * 经分析折旧计算比较严谨，计算出的折旧大于现值时给现值，超过年限全部计提
       *
       * 基于以上前提，因此此处将nvl(t.cur_money,0) > 0 改为 nvl(t.cur_money,0) >= 0
       *
       * 主要用于解决，当存在部分资金来源已折完，原值计算不正确的现象。
       *
       * 存在问题：累计折旧月份不准确，但减少业务表中不需要提供累计折旧月份
       *
      *******************************************************************************/

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_SPECIAL.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_SPECIAL.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_SPECIAL.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_SPECIAL.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_SPECIAL.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_SPECIAL.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_SPECIAL.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_SPECIAL.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_SPECIAL.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_SPECIAL.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_SPECIAL.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_SPECIAL.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_SPECIAL.Add_Depre_Month%type;   --累计折旧月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_SPECIAL.CHANGE_Price%type;  --原值调整金额
      --v_CHANGE_depre         ASS_DEPRE_DETAIL_SPECIAL.CHANGE_Depre%type;   --累计折旧调整金额

      is_Update              integer       ;
      i_pos                  integer       ;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '专用设备卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;
     is_Update       := 0                      ;
     i_pos           := 0                      ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , prm_ass_card_no
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:无偿调拨 32：有偿调拨  33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          /*--读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_SPECIAL t1
              left join ASS_CHANGE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;*/

          /************************ 分摊不提供累计分摊变动 ******************************
          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_SPECIAL t1
              left join ASS_DEPRE_SPECIAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/

          if v_Push_State = 1 then
              is_Update       := 0                      ;
              i_pos           := 0                      ;
              for i in 1..g_tab_card_source.count() loop
                 if (    g_tab_card_source(i).Naturs_Code = v_Naturs_Code
                    and g_tab_card_source(i).ASS_CARD_NO = v_ASS_CARD_NO
                    and g_tab_card_source(i).SOURCE_ID   = v_soure_id
                   ) then
                     is_Update       := 1                      ;
                     i_pos           := i                      ;
                     exit;
                 end if;
              end loop;--<<循环压栈>>

              if (    is_Update = 1 ) then

                     g_tab_card_source(i_pos).NOW_MANAGE_DEPRE := 0                  ;      --本次分摊
                     g_tab_card_source(i_pos).ADD_MANAGE_DEPRE := V_DEPRE_MONEY      ;      --累计分摊
                     g_tab_card_source(i_pos).ADD_MANAGE_MONTH := V_ADD_DEPRE_MONTH  ;      --累计分摊月份
                     g_tab_card_source(i_pos).MANAGE_DEPRE_METHOD := V_DEPR_METHOD   ;      --分摊方法
                     g_tab_card_source(i_pos).MANAGE_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT ;   --分摊年限
                     g_tab_card_source(i_pos).BACK_ADD_MANAGE_DEPRE := 0                ;   --冲累计分摊

                else --不折旧，但分摊，需压新计算栈
                     g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
                     g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
                     g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
                     g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
                     g_tab_card_source(v_i).NOW_MANAGE_DEPRE := 0                     ;      --本月分摊
                     g_tab_card_source(v_i).ADD_MANAGE_DEPRE := V_ADD_DEPRE_MONTH     ;      --累计分摊
                     g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
                     g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
                     g_tab_card_source(v_i).ADD_MANAGE_MONTH := V_ADD_DEPRE_MONTH     ;      --累计分摊月份
                     g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
                     g_tab_card_source(v_i).MANAGE_DEPRE_METHOD := V_DEPR_METHOD      ;      --分摊方法
                     g_tab_card_source(v_i).MANAGE_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT ;      --分摊年限
                     g_tab_card_source(v_i).BACK_ADD_MANAGE_DEPRE:=0                  ;      --冲累计分摊

                     v_i := v_i + 1 ;
                end if;
         end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片装载失败！'||SQLERRM;

   END prc_LoadManageSpecialSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageSpecialSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageSpecialSingle(  prm_group_id          IN   NUMBER         --集团
                                          ,prm_hos_id            IN   NUMBER         --医院
                                          ,prm_copy_code         IN   VARCHAR2       --账套
                                          ,prm_acc_year          IN   VARCHAR2       --年度
                                          ,prm_acc_month         IN   VARCHAR2       --月份
                                          ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                          ,prm_AppCode           Out  Number         --执行代码
                                          ,prm_ErrTxt            Out  Varchar2       --错误信息
                                        )
   IS

      --定义变量
      v_card_price           ASS_CARD_SPECIAL.Price%type;
      v_card_now_depre_money ASS_CARD_SPECIAL.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_SPECIAL.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_SPECIAL.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_SPECIAL.Cur_Money%type;
      v_card_fore_money      ASS_CARD_SPECIAL.Fore_Money%type;
      v_card_use_state       ASS_CARD_SPECIAL.Use_State%type;
      v_card_depr_method     ASS_CARD_SPECIAL.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_SPECIAL.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_SPECIAL.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈

      is_Update              integer       ;
      i_pos                  integer       ;
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '专用设备卡片计算分摊成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;
     is_Update       := 0                                       ;
     i_pos           := 0                                       ;

     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.manage_depre_money, 0),
               nvl(t.add_manage_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.manage_depr_method,'01'),
               nvl(t.manage_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_SPECIAL t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         is_Update       := 0   ;
         i_pos           := 0   ;
         for i in 1..g_tab_card_ret.count() loop
             if (    g_tab_card_ret(i).Naturs_Code = '02'
                and g_tab_card_ret(i).ASS_CARD_NO = prm_ass_card_no
               ) then

                is_Update  := 1  ;
                i_pos      := i  ;
                exit;
             end if;
         end loop;

         if ( is_Update = 1 ) then
             g_tab_card_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_DEPRE := v_card_add_depre_money      ;      --累计分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
             g_tab_card_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
             g_tab_card_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ; --处置申报时已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ; --处置申报不冲减
             else
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money * (-1);  --冲累计分摊
             end if;

         else --不折旧，但分摊，需压新计算栈
             v_i := v_i + 1 ;
             g_tab_card_ret(v_i).Naturs_Code      := '02'                     ;
             g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
             g_tab_card_ret(v_i).PRICE            := v_card_price             ;
             g_tab_card_ret(v_i).NOW_MANAGE_DEPRE := 0                        ;
             g_tab_card_ret(v_i).ADD_MANAGE_DEPRE := v_card_add_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
             g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
             g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
             g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;
             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then   
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
             else
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money * (-1);  --冲累计分摊
             end if;
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_SPECIAL t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.manage_depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_SPECIAL t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --资金来源结果数据压栈
          is_Update := 0   ;
          i_pos     := 0   ;
          for i in 1..g_tab_card_source_ret.count() loop
              if (    g_tab_card_source_ret(i).Naturs_Code = '02'
                  and g_tab_card_source_ret(i).ASS_CARD_NO = prm_ass_card_no
                  and g_tab_card_source_ret(i).source_id   = rec.source_id
                 ) then
               is_Update := 1  ;
               i_pos     := i  ;
               exit;
             end if;
          end loop;--<<循环压栈 g_tab_card_source_ret>>

          if ( is_Update = 1 ) then
               g_tab_card_source_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_DEPRE := rec.depre_money             ;      --累计分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限
                     --冲累计分摊
               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then   
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
               else
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := rec.depre_money * (-1) ;   --冲累计分摊
               end if;
           else
               v_j := v_j + 1 ;
               g_tab_card_source_ret(v_j).Naturs_Code      := '02'                     ;
               g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
               g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
               g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
               g_tab_card_source_ret(v_j).NOW_MANAGE_DEPRE := 0                        ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_DEPRE := rec.depre_money          ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
               g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
               g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
               g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;

               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
               else
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := rec.depre_money * (-1) ;   --冲累计分摊
               end if;
           end if;
        end loop;--<<循环资金来源游标>>
     end if;  --<<计算栈中无数据 g_tab_card_source>>


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_price           :=0;
         v_card_now_depre_money :=0;
         v_card_add_depre_money :=0;
         v_card_add_depre_month :=0;
         v_card_cur_money       :=0;
         v_card_fore_money      :=0;
         v_BACK_ADD_DEPRE_MONEY :=0;

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).MANAGE_DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}分摊方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).MANAGE_DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_MANAGE_MONTH >= g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;

                 --计算本月折旧
                 if g_tab_card_source(i).ADD_MANAGE_MONTH + 1 =  g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12 then
                     g_tab_card_source(i).NOW_MANAGE_DEPRE :=    g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY
                                                               ;
                 else
                     --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                    /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                     - g_tab_card_source(i).FORE_MONEY
                                                                     )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                   ,2);*/

                     g_tab_card_source(i).NOW_MANAGE_DEPRE := ROUND(((  g_tab_card_source(i).PRICE
                                                                      - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                                      - g_tab_card_source(i).FORE_MONEY
                                                                      )
                                                                     )/(  g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12
                                                                        - g_tab_card_source(i).ADD_MANAGE_MONTH
                                                                       )
                                                                   ,2);
                     if g_tab_card_source(i).NOW_MANAGE_DEPRE >( g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY
                                                               ) then
                        g_tab_card_source(i).NOW_MANAGE_DEPRE := g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY;
                     end if;
                 end if;

                 --计算累计折旧月份
                 g_tab_card_source(i).ADD_MANAGE_MONTH :=  g_tab_card_source(i).ADD_MANAGE_MONTH + 1;

                 --计算累计折旧
                 g_tab_card_source(i).ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                          +g_tab_card_source(i).NOW_MANAGE_DEPRE;

                 if   g_tab_card_source(i).ADD_MANAGE_DEPRE
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计分摊维护不正确!';
                    return;
                 end if;

                 /**************************现值只有计算折旧才会改变****************************
                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;
                 ******************************************************************************/



                 /***************************由于调用仅为减少业务*******************************
                 if  g_tab_card_source(i).USE_STATE in('6','7') then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE * (-1);
                 end if;
                 ********************************************************************************/

                 g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE * (-1);
             end if; --<<平均年限法>>

             --如果为已处置申报，如果存在本期折旧为0，原因：处置申报已提折旧，本次为处置业务
             if g_tab_card_source(i).USE_STATE = '6' then

                i_count := 0 ;

                select count(1)
                  into i_count
                  from ass_card_special t
                 where t.group_id    = prm_group_id
                   and t.hos_id      = prm_hos_id
                   and t.copy_code   = prm_copy_code
                   and t.ass_card_no = prm_ass_card_no
                   and nvl(to_char(t.apply_date  ,'YYYYMM'),'000000') = prm_acc_year || prm_acc_month
                 ;

                 if i_count > 0 then
                    g_tab_card_source(i).NOW_MANAGE_DEPRE      := 0;
                    g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE := 0 ;
                 end if;
             end if;

             --资金来源结果数据压栈
             is_Update := 0   ;
             i_pos     := 0   ;
             for m in 1..g_tab_card_source_ret.count() loop
                 if (    g_tab_card_source_ret(m).Naturs_Code = '02'
                    and g_tab_card_source_ret(m).ASS_CARD_NO = prm_ass_card_no
                    and g_tab_card_source_ret(m).SOURCE_ID   = g_tab_card_source(i).SOURCE_ID
                   ) then

                   is_Update := 1   ;
                   i_pos     := m   ;
                   exit;

                 end if;
             end loop;--<<资金来源循环压栈>>

             if (  is_Update = 1 ) then

               g_tab_card_source_ret(i_pos).NOW_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).NOW_MANAGE_DEPRE       ;--本次分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).ADD_MANAGE_DEPRE       ;--累计分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_MONTH :=
                                                 g_tab_card_source(i).ADD_MANAGE_MONTH       ;--累计分摊月份
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_METHOD :=
                                                 g_tab_card_source(i).MANAGE_DEPRE_METHOD    ;--分摊方法
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_AMOUNT :=
                                                 g_tab_card_source(i).MANAGE_DEPRE_AMOUNT    ;--分摊年限
               g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE  ;--冲累计分摊

             else
               v_j := v_j + 1 ;
               g_tab_card_source_ret(v_j).Naturs_Code           := '02'                                      ;
               g_tab_card_source_ret(v_j).ASS_CARD_NO           := prm_ass_card_no                           ;
               g_tab_card_source_ret(v_j).SOURCE_ID             := g_tab_card_source(i).SOURCE_ID            ;
               g_tab_card_source_ret(v_j).PRICE                 := g_tab_card_source(i).PRICE                ;
               g_tab_card_source_ret(v_j).NOW_MANAGE_DEPRE      := g_tab_card_source(i).NOW_MANAGE_DEPRE     ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_DEPRE      := g_tab_card_source(i).ADD_MANAGE_DEPRE     ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_MONTH      := g_tab_card_source(i).ADD_MANAGE_MONTH     ;
               g_tab_card_source_ret(v_j).CUR_MONEY             := g_tab_card_source(i).CUR_MONEY            ;
               g_tab_card_source_ret(v_j).FORE_MONEY            := g_tab_card_source(i).FORE_MONEY           ;
               g_tab_card_source_ret(v_j).USE_STATE             := g_tab_card_source(i).USE_STATE            ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_METHOD   := g_tab_card_source(i).MANAGE_DEPRE_METHOD  ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_AMOUNT   := g_tab_card_source(i).MANAGE_DEPRE_AMOUNT  ;
               g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE;
             end if;
             --计算卡片压栈数据
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_MANAGE_DEPRE;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_MANAGE_DEPRE;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_MANAGE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).MANAGE_DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).MANAGE_DEPRE_AMOUNT;
         end loop;

         --卡片结果数据压栈
         is_Update := 0   ;
         i_pos     := 0   ;
         for n in 1..g_tab_card_ret.count() loop
           if (     g_tab_card_ret(n).Naturs_Code = '02'
                and g_tab_card_ret(n).ASS_CARD_NO = prm_ass_card_no
               ) then
               is_Update := 1   ;
               i_pos     := n   ;
          end if;
        end loop;

        if (    is_Update = 1  ) then

             g_tab_card_ret(i_pos).NOW_MANAGE_DEPRE      := v_card_now_depre_money   ;
             g_tab_card_ret(i_pos).ADD_MANAGE_DEPRE      := v_card_add_depre_money   ;
             g_tab_card_ret(i_pos).ADD_MANAGE_MONTH      := v_card_add_depre_month   ;
             g_tab_card_ret(i_pos).MANAGE_DEPRE_METHOD   := v_card_depr_method       ;
             g_tab_card_ret(i_pos).MANAGE_DEPRE_AMOUNT   := v_ACC_DEPRE_AMOUNT       ;
             g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_BACK_ADD_DEPRE_MONEY   ;
           else
             v_i := v_i + 1 ;
             g_tab_card_ret(v_i).Naturs_Code           := '02'                     ;
             g_tab_card_ret(v_i).ASS_CARD_NO           := prm_ass_card_no          ;
             g_tab_card_ret(v_i).PRICE                 := v_card_price             ;
             g_tab_card_ret(v_i).NOW_MANAGE_DEPRE      := v_card_now_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_DEPRE      := v_card_add_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_MONTH      := v_card_add_depre_month   ;
             g_tab_card_ret(v_i).CUR_MONEY             := v_card_cur_money         ;
             g_tab_card_ret(v_i).FORE_MONEY            := v_card_fore_money        ;
             g_tab_card_ret(v_i).USE_STATE             := v_card_use_state         ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_METHOD   := v_card_depr_method       ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_AMOUNT   := v_ACC_DEPRE_AMOUNT       ;
             g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_BACK_ADD_DEPRE_MONEY   ;
          end if;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备卡片分摊计提失败！'||SQLERRM;

   END prc_CalcManageSpecialSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcSpecialPortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcSpecialPortSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '专用设备计提成功!';



     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;



     --(3)计算折旧前完整性检查
     prc_ChkCardSpecialSingle(  prm_group_id             --集团
                               ,prm_hos_id               --医院
                               ,prm_copy_code            --账套
                               ,prm_acc_year             --年度
                               ,prm_acc_month            --月份
                               ,prm_ass_card_no          --卡片号
                               ,prm_AppCode              --执行代码
                               ,prm_ErrTxt               --错误信息
                              );

     if prm_AppCode <> def_OK  then
        return;
     end if;

     --(4)装载卡片数据
     /*****************************************************************
     *
     * 新制度修改：资产当月减少时，不需要计提摊销
     *
     ******************************************************************/
     /*
     prc_LoadCardSpecialSingle(prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_ass_card_no            --卡片号
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     */
     --(5)资产计提折旧
     prc_CalcDepreSpecialSingle(  prm_group_id                --集团
                                 ,prm_hos_id                  --医院
                                 ,prm_copy_code               --账套
                                 ,prm_acc_year                --年度
                                 ,prm_acc_month               --月份
                                 ,prm_ass_card_no             --卡片号
                                 ,prm_AppCode                 --执行代码
                                 ,prm_ErrTxt                  --错误信息
                                );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(7)计算分摊前完整性检查
     prc_ChkManageSpecialSingle( prm_group_id             --集团
                                ,prm_hos_id               --医院
                                ,prm_copy_code            --账套
                                ,prm_acc_year             --年度
                                ,prm_acc_month            --月份
                                ,prm_ass_card_no          --卡片号
                                ,prm_AppCode              --执行代码
                                ,prm_ErrTxt               --错误信息
                                );

     if prm_AppCode <> def_OK  then
        return;
     end if;
     --(8)装载卡片入分摊计算栈
     /*****************************************************************
     *
     * 新制度修改：资产当月减少时，不需要计提摊销
     *
     ******************************************************************/
     /*
     prc_LoadManageSpecialSingle(prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_ass_card_no            --卡片号
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     */
     --(9)资产计提分摊计算
     prc_CalcManageSpecialSingle(   prm_group_id                --集团
                                   ,prm_hos_id                  --医院
                                   ,prm_copy_code               --账套
                                   ,prm_acc_year                --年度
                                   ,prm_acc_month               --月份
                                   ,prm_ass_card_no             --卡片号
                                   ,prm_AppCode                 --执行代码
                                   ,prm_ErrTxt                  --错误信息
                                 );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)组JSON串返回结果集
     prc_SpliceJsonSingle(  prm_JSON_STR                --返回JSON串
                           ,prm_AppCode                 --执行代码
                           ,prm_ErrTxt                  --错误信息
                          );

     if prm_AppCode <>  def_OK  then
        return;
     end if;


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '专用设备计提失败！'||SQLERRM;
   END prc_CalcSpecialPortSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardGeneralSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardGeneralSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在
     v_CHANGE_depre_flag    integer                                ;      --查找是否存在变动折旧
     ***************************************************************************************/
     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_GENERAL.Price%type            ;
     v_depre_money          ASS_CARD_GENERAL.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_GENERAL.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_GENERAL.Fore_Money%type       ;
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     ***************************************************************************************/
     v_price_source         ASS_CARD_GENERAL.Price%type            ;
     v_depre_money_source   ASS_CARD_GENERAL.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_GENERAL.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_GENERAL.Fore_Money%type       ;
     v_Is_Depr              ASS_CARD_GENERAL.Is_Depr%type          ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '一般设备卡片完整性检查通过!';

     v_exist_flag         := 0                            ;
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_DEPRE_flag  := 0                            ;
     v_CHANGE_depre_flag  := 0                            ;
     ***************************************************************************************/

     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Depr            := 0                            ;

     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_GENERAL t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
             --or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t.use_state,0) = 6 )
             or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
             )--新制度修改：不包含本月处置的卡片
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_GENERAL t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;
     
     /****************************新制度修改：资产减少当月不计提折旧**********************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ***************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_depr,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Depr
         from ASS_CARD_GENERAL t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;

     if v_Is_Depr = 0 then
       return;
     end if;
     
     /****************************新制度修改：资产减少当月不计提折旧**********************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     ***************************************************************************************/
      v_exist_flag:=0 ;
     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_GENERAL t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     --如果卡片中存在折旧，寻找折旧数据来源
     v_exist_flag:=0 ;
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then --新制度修改：当月减少资产不计提折旧

        --检查上个月是否折旧
        select count(1)
          into v_exist_flag
          from ASS_DEPRE_ACC_GENERAL t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;
        /*************************新制度修改：当月减少资产不计提折旧******************************   
        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            select count(1)
              into v_CHANGE_depre_flag
              from ASS_DEPRE_SOURCE_GENERAL t1
              left join ASS_DEPRE_GENERAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = prm_ass_card_no
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;

            if v_CHANGE_depre_flag = 0 then
                prm_AppCode := def_WARNING;
                prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
                return;
            end if;
        end if;
        ******************************************************************************************/
        if v_exist_flag = 0 then
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
           return;
        end if;
     end if;

     --检查该卡片在本月之后是否累计折旧变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_DEPRE_DETAIL_GENERAL t1
      left join ASS_DEPRE_GENERAL t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过累计折旧变动!';
       return;
    end if;

     --检查该卡片在本月之后是否发生原值变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_CHANGE_DETAIL_GENERAL t1
      left join ASS_CHANGE_GENERAL t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.change_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过原值变动!';
       return;
    end if;

     --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_TRAN_STORE_DETAIL_GENERAL t1
      left join ASS_TRAN_STORE_GENERAL t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.tran_no = t2.tran_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（库库）!';
       return;
    end if;

     --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_TRAN_DEPT_DETAIL_GENERAL t1
      left join ASS_TRAN_DEPT_GENERAL t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.tran_no = t2.tran_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（科科）!';
       return;
    end if;

    --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_OUT_DETAIL_GENERAL t1
      left join ASS_OUT_GENERAL t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.out_no = t2.out_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（库科）!';
       return;
    end if;
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardGeneralSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardGeneralSingle
   || 功能描述 ：加载要计算折旧卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardGeneralSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.add_depre_amount,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          /*,nvl(b.add_depre_month,nvl(a.Acc_Depre_Amount,0)) as Acc_Depre_Amount*/
                          ,nvl(a.Acc_Depre_Amount,0) as Acc_Depre_Amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'03' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.depre_money,0) as depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_depre_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.depr_method,'01') as depr_method
                                     ,t1.Acc_Depre_Amount
                                from ASS_CARD_GENERAL t1
                                left join ASS_RESOURCE_GENERAL t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 ='1' and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 ='2' and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_depr,0)          =  1
                                  and nvl(t1.use_state,0)        <> 0
                                  and t1.ass_card_no             = prm_ass_card_no                  --修改
                                  and t2.ass_card_no             = prm_ass_card_no                  --修改
                                  and t1.add_depre_month         < t1.acc_depre_amount *12
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_ACC_GENERAL t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                  and t3.ass_card_no = prm_ass_card_no
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id
                       and b.ass_card_no = prm_ass_card_no      */             --修改
               ) t
            where nvl(t.cur_money,0) >= 0
            order by t.ass_card_no ,t.source_id
          ;

      /*********************************特别说明*************************************
       *
       * 经分析折旧计算比较严谨，计算出的折旧大于现值时给现值，超过年限全部计提
       *
       * 基于以上前提，因此此处将nvl(t.cur_money,0) > 0 改为 nvl(t.cur_money,0) >= 0
       *
       * 主要用于解决，当存在部分资金来源已折完，原值计算不正确的现象。
       *
       * 存在问题：累计折旧月份不准确，但减少业务表中不需要提供累计折旧月份
       *
      *******************************************************************************/

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_GENERAL.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_GENERAL.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_GENERAL.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_GENERAL.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_GENERAL.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_GENERAL.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_GENERAL.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_GENERAL.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_GENERAL.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_GENERAL.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_GENERAL.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_GENERAL.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_GENERAL.Add_Depre_Month%type;   --累计折旧月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_GENERAL.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_GENERAL.CHANGE_Depre%type;   --累计折旧调整金额
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '一般设备卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;


     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , prm_ass_card_no
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:无偿调拨 32：有偿调拨  33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          /*--读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_GENERAL t1
              left join ASS_CHANGE_GENERAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_GENERAL t1
              left join ASS_DEPRE_GENERAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
*/
          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧

              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片装载失败！'||SQLERRM;

   END prc_LoadCardGeneralSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreGeneralSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreGeneralSingle(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS

      --定义变量
      v_card_price           ASS_CARD_GENERAL.Price%type;
      v_card_now_depre_money ASS_CARD_GENERAL.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_GENERAL.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_GENERAL.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_GENERAL.Cur_Money%type;
      v_card_fore_money      ASS_CARD_GENERAL.Fore_Money%type;
      v_card_use_state       ASS_CARD_GENERAL.Use_State%type;
      v_card_depr_method     ASS_CARD_GENERAL.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_GENERAL.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_GENERAL.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '一般设备卡片计算折旧成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.depre_money, 0),
               nvl(t.add_depre_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.depr_method,'01'),
               nvl(t.acc_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_GENERAL t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         v_i := v_i + 1 ;
         g_tab_card_ret(v_i).Naturs_Code      := '03'                     ;
         g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_ret(v_i).PRICE            := v_card_price             ;
         g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
         g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
         g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
         g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         --当卡片为待处置状态时，由于调用为处置状态，在待处置时已回冲，因此不需要回冲
         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0;--处置申报已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0;--处置申报不冲减
         else
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_card_add_depre_money *(-1);
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_GENERAL t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_GENERAL t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --卡片结果数据压栈
         v_j := v_j + 1 ;
         g_tab_card_source_ret(v_j).Naturs_Code      := '03'                     ;
         g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
         g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
         g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := rec.depre_money          ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
         g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
         g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
         g_tab_card_source_ret(v_j).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         --当卡片为待处置状态时，由于调用为处置状态，在待处置时已回冲，因此不需要回冲
         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0;--处置申报已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0;--处置申报不冲减
         else
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := rec.depre_money * (-1);
         end if;

        end loop;

     end if;


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_price           :=0;
         v_card_now_depre_money :=0;
         v_card_add_depre_money :=0;
         v_card_add_depre_month :=0;
         v_card_cur_money       :=0;
         v_card_fore_money      :=0;
         v_BACK_ADD_DEPRE_MONEY :=0;

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}折旧方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_DEPRE_MONTH >= g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;

                 --计算本月折旧
                 if g_tab_card_source(i).ADD_DEPRE_MONTH + 1 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                     g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                 else
                     --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                    /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                     - g_tab_card_source(i).FORE_MONEY
                                                                     )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                   ,2);*/

                     g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                     )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                        - g_tab_card_source(i).ADD_DEPRE_MONTH
                                                                       )
                                                                   ,2);
                     if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                        g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                     end if;
                 end if;

                 --计算累计折旧月份
                 g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 1;

                 --计算累计折旧
                 g_tab_card_source(i).ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY
                                                         +g_tab_card_source(i).NOW_DEPRE_MONEY;

                 if   g_tab_card_source(i).ADD_DEPRE_MONEY
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧维护不正确!';
                    return;
                 end if;

                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;



                 /*********************由于调用均为减少业务**********************************
                 if  g_tab_card_source(i).USE_STATE in('6','7') then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);
                 end if;
                 ****************************************************************************/

                 --计算冲减累计折旧
                 g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);

             end if; --<<平均年限法>>

             --如果为已处置申报，如果存在本期折旧为0，原因：处置申报已提折旧，本次为处置业务
             if g_tab_card_source(i).USE_STATE = '6' then

                i_count := 0 ;

                select count(1)
                  into i_count
                  from ass_card_general t
                 where t.group_id    = prm_group_id
                   and t.hos_id      = prm_hos_id
                   and t.copy_code   = prm_copy_code
                   and t.ass_card_no = prm_ass_card_no
                   and nvl(to_char(t.apply_date  ,'YYYYMM'),'000000') = prm_acc_year || prm_acc_month
                 ;

                 if i_count > 0 then
                    g_tab_card_source(i).NOW_DEPRE_MONEY := 0;
                    g_tab_card_source(i).BACK_ADD_DEPRE_MONEY := 0 ;
                 end if;
             end if;

             --卡片结果数据压栈
             v_j := v_j + 1 ;
             g_tab_card_source_ret(v_j).Naturs_Code      := '03'                                ;
             g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no                     ;
             g_tab_card_source_ret(v_j).SOURCE_ID        := g_tab_card_source(i).SOURCE_ID      ;
             g_tab_card_source_ret(v_j).PRICE            := g_tab_card_source(i).PRICE          ;
             g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := g_tab_card_source(i).NOW_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := g_tab_card_source(i).ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := g_tab_card_source(i).ADD_DEPRE_MONTH;
             g_tab_card_source_ret(v_j).CUR_MONEY        := g_tab_card_source(i).CUR_MONEY;
             g_tab_card_source_ret(v_j).FORE_MONEY       := g_tab_card_source(i).FORE_MONEY;
             g_tab_card_source_ret(v_j).USE_STATE        := g_tab_card_source(i).USE_STATE;
             g_tab_card_source_ret(v_j).DEPRE_METHOD     := g_tab_card_source(i).DEPRE_METHOD;
             g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;

             --计算卡片压栈数据
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_DEPRE_MONEY;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_DEPRE_MONEY;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_DEPRE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
         end loop;

         --卡片结果数据压栈
         v_i := v_i + 1 ;
         g_tab_card_ret(v_i).Naturs_Code      := '03'                     ;
         g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_ret(v_i).PRICE            := v_card_price             ;
         g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
         g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
         g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
         g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
         g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;

     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片折旧计提失败！'||SQLERRM;

   END prc_CalcDepreGeneralSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageGeneralSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageGeneralSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在

     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_GENERAL.Price%type            ;
     v_depre_money          ASS_CARD_GENERAL.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_GENERAL.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_GENERAL.Fore_Money%type       ;
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;

     v_price_source         ASS_CARD_GENERAL.Price%type            ;
     v_depre_money_source   ASS_CARD_GENERAL.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_GENERAL.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_GENERAL.Fore_Money%type       ;
     v_Is_Manage_Depre      ASS_CARD_GENERAL.Is_Manage_Depre%type  ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '一般设备卡片完整性检查通过!';

     v_before_DEPRE_flag  := 0                            ;
     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Manage_Depre    := 0                            ;

     /*******************************在资产折旧时已做较验******************************************
     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_GENERAL t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and nvl(t.use_state,0) <> 0
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_GENERAL t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;
     *********************************************************************************************/
     
     /********************新制度修改：当月减少资产不计提折旧********************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ***************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.manage_depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_manage_depre,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Manage_Depre
         from ASS_CARD_GENERAL t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;

     if v_Is_Manage_Depre = 0 then
        return;
     end if;
     
     /****************************新制度修改：资产减少当月不计提折旧***********************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     ***************************************************************************************/

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_GENERAL t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     --如果卡片中存在折旧，寻找折旧数据来源
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then --新制度修改：当月减少资产不计提折旧

        --检查上个月是否折旧
        select count(1)
          into v_before_DEPRE_flag
          from ASS_DEPRE_MANAGE_GENERAL t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提分摊或期初累计分摊未维护!';
            return;
        end if;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageGeneralSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageGeneralSingle
   || 功能描述 ：加载要计算分摊卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageGeneralSingle( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                         )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code              --资产性质
                ,t.ass_card_no              --卡片号
                ,t.source_id                --资金来源
                ,t.price                    --原值
                ,t.manage_depre_money       --累计分摊
                ,t.cur_money                --现值
                ,t.fore_money               --残值
                ,t.add_depre_month          --累计折旧月份
                ,t.Use_State                --使用状态
                ,t.dispose_type             --处置类型
                ,t.apply_date               --处置申报日期
                ,t.dispose_date             --处置日期
                ,t.manage_depr_method       --分摊方法
                ,t.manage_depre_amount      --分摊年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                         /* ,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.add_depre_amount,nvl(a.manage_depre_money,0)) as manage_depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_manage_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.manage_depre_money,0) as manage_depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_manage_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,nvl(a.manage_depr_method,'01') as manage_depr_method
                          ,nvl(a.manage_depre_amount,0) as manage_depre_amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'03' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.manage_depre_money,0) as manage_depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_manage_month,0) as add_manage_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.manage_depr_method,'01') as manage_depr_method
                                     ,t1.manage_depre_amount
                                from ASS_CARD_GENERAL t1
                                left join ASS_RESOURCE_GENERAL t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 ='1' and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 ='2' and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_manage_depre,0)  =  1                              --是否分摊
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       )
                                  and t1.ass_card_no             = prm_ass_card_no                  --修改
                                  and t2.ass_card_no             = prm_ass_card_no                  --修改
                                  and t1.add_depre_month         < t1.manage_depre_amount *12
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_MANAGE_GENERAL t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                  and t3.ass_card_no = prm_ass_card_no
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id
                       and b.ass_card_no = prm_ass_card_no         */          --修改
               ) t
            where (nvl(t.price,0) - nvl(t.manage_depre_money,0) - nvl(t.fore_money,0)) >= 0
            order by t.ass_card_no ,t.source_id
          ;

      /*********************************特别说明*************************************
       *
       * 经分析折旧计算比较严谨，计算出的折旧大于现值时给现值，超过年限全部计提
       *
       * 基于以上前提，因此此处将nvl(t.cur_money,0) > 0 改为 nvl(t.cur_money,0) >= 0
       *
       * 主要用于解决，当存在部分资金来源已折完，原值计算不正确的现象。
       *
       * 存在问题：累计折旧月份不准确，但减少业务表中不需要提供累计折旧月份
       *
      *******************************************************************************/

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_GENERAL.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_GENERAL.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_GENERAL.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_GENERAL.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_GENERAL.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_GENERAL.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_GENERAL.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_GENERAL.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_GENERAL.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_GENERAL.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_GENERAL.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_GENERAL.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_GENERAL.Add_Depre_Month%type;   --累计折旧月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_GENERAL.CHANGE_Price%type;  --原值调整金额
      --v_CHANGE_depre         ASS_DEPRE_DETAIL_GENERAL.CHANGE_Depre%type;   --累计折旧调整金额

      is_Update              integer       ;
      i_pos                  integer       ;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '一般设备卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;
     is_Update       := 0                      ;
     i_pos           := 0                      ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , prm_ass_card_no
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:无偿调拨 32：有偿调拨  33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          /*--读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_GENERAL t1
              left join ASS_CHANGE_GENERAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;*/

          /************************ 分摊不提供累计分摊变动 ******************************
          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_GENERAL t1
              left join ASS_DEPRE_GENERAL t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/

          if v_Push_State = 1 then
              is_Update       := 0                      ;
              i_pos           := 0                      ;
              for i in 1..g_tab_card_source.count() loop
                 if (    g_tab_card_source(i).Naturs_Code = v_Naturs_Code
                    and g_tab_card_source(i).ASS_CARD_NO = v_ASS_CARD_NO
                    and g_tab_card_source(i).SOURCE_ID   = v_soure_id
                   ) then
                     is_Update       := 1                      ;
                     i_pos           := i                      ;
                     exit;
                 end if;
              end loop;--<<循环压栈>>

              if (    is_Update = 1 ) then

                     g_tab_card_source(i_pos).NOW_MANAGE_DEPRE := 0                  ;      --本次分摊
                     g_tab_card_source(i_pos).ADD_MANAGE_DEPRE := V_DEPRE_MONEY      ;      --累计分摊
                     g_tab_card_source(i_pos).ADD_MANAGE_MONTH := V_ADD_DEPRE_MONTH  ;      --累计分摊月份
                     g_tab_card_source(i_pos).MANAGE_DEPRE_METHOD := V_DEPR_METHOD   ;      --分摊方法
                     g_tab_card_source(i_pos).MANAGE_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT ;   --分摊年限
                     g_tab_card_source(i_pos).BACK_ADD_MANAGE_DEPRE := 0                ;   --冲累计分摊

                else --不折旧，但分摊，需压新计算栈
                     g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
                     g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
                     g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
                     g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
                     g_tab_card_source(v_i).NOW_MANAGE_DEPRE := 0                     ;      --本月分摊
                     g_tab_card_source(v_i).ADD_MANAGE_DEPRE := V_ADD_DEPRE_MONTH     ;      --累计分摊
                     g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
                     g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
                     g_tab_card_source(v_i).ADD_MANAGE_MONTH := V_ADD_DEPRE_MONTH     ;      --累计分摊月份
                     g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
                     g_tab_card_source(v_i).MANAGE_DEPRE_METHOD := V_DEPR_METHOD      ;      --分摊方法
                     g_tab_card_source(v_i).MANAGE_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT ;      --分摊年限
                     g_tab_card_source(v_i).BACK_ADD_MANAGE_DEPRE:=0                  ;      --冲累计分摊

                     v_i := v_i + 1 ;
                end if;
         end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片装载失败！'||SQLERRM;

   END prc_LoadManageGeneralSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageGeneralSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageGeneralSingle(  prm_group_id          IN   NUMBER         --集团
                                          ,prm_hos_id            IN   NUMBER         --医院
                                          ,prm_copy_code         IN   VARCHAR2       --账套
                                          ,prm_acc_year          IN   VARCHAR2       --年度
                                          ,prm_acc_month         IN   VARCHAR2       --月份
                                          ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                          ,prm_AppCode           Out  Number         --执行代码
                                          ,prm_ErrTxt            Out  Varchar2       --错误信息
                                        )
   IS

      --定义变量
      v_card_price           ASS_CARD_GENERAL.Price%type;
      v_card_now_depre_money ASS_CARD_GENERAL.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_GENERAL.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_GENERAL.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_GENERAL.Cur_Money%type;
      v_card_fore_money      ASS_CARD_GENERAL.Fore_Money%type;
      v_card_use_state       ASS_CARD_GENERAL.Use_State%type;
      v_card_depr_method     ASS_CARD_GENERAL.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_GENERAL.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_GENERAL.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈

      is_Update              integer       ;
      i_pos                  integer       ;
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '一般设备卡片计算分摊成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;
     is_Update       := 0                                       ;
     i_pos           := 0                                       ;

     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.manage_depre_money, 0),
               nvl(t.add_manage_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.manage_depr_method,'01'),
               nvl(t.manage_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_GENERAL t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         is_Update       := 0   ;
         i_pos           := 0   ;
         for i in 1..g_tab_card_ret.count() loop
             if (    g_tab_card_ret(i).Naturs_Code = '03'
                and g_tab_card_ret(i).ASS_CARD_NO = prm_ass_card_no
               ) then

                is_Update  := 1  ;
                i_pos      := i  ;
                exit;
             end if;
         end loop;

         if ( is_Update = 1 ) then
             g_tab_card_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_DEPRE := v_card_add_depre_money      ;      --累计分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
             g_tab_card_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
             g_tab_card_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
             else
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money * (-1);--冲累计分摊
             end if;

         else --不折旧，但分摊，需压新计算栈
             v_i := v_i + 1 ;
             g_tab_card_ret(v_i).Naturs_Code      := '03'                     ;
             g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
             g_tab_card_ret(v_i).PRICE            := v_card_price             ;
             g_tab_card_ret(v_i).NOW_MANAGE_DEPRE := 0                        ;
             g_tab_card_ret(v_i).ADD_MANAGE_DEPRE := v_card_add_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
             g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
             g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
             g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
             else
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money * (-1);
             end if;
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_GENERAL t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.manage_depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_GENERAL t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --资金来源结果数据压栈
          is_Update := 0   ;
          i_pos     := 0   ;
          for i in 1..g_tab_card_source_ret.count() loop
              if (    g_tab_card_source_ret(i).Naturs_Code = '03'
                  and g_tab_card_source_ret(i).ASS_CARD_NO = prm_ass_card_no
                  and g_tab_card_source_ret(i).source_id   = rec.source_id
                 ) then
               is_Update := 1  ;
               i_pos     := i  ;
               exit;
             end if;
          end loop;--<<循环压栈 g_tab_card_source_ret>>

          if ( is_Update = 1 ) then
               g_tab_card_source_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_DEPRE := rec.depre_money             ;      --累计分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限
               --g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := rec.depre_money * (-1) ;      --冲累计分摊
               --冲累计分摊
               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
               else
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := rec.depre_money * (-1) ;   --冲累计分摊
               end if;
           else
               v_j := v_j + 1 ;
               g_tab_card_source_ret(v_j).Naturs_Code      := '03'                     ;
               g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
               g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
               g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
               g_tab_card_source_ret(v_j).NOW_MANAGE_DEPRE := 0                        ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_DEPRE := rec.depre_money          ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
               g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
               g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
               g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;
               --g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := rec.depre_money  *(-1);
               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
                  g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0 ; --处置申报不冲减  
               else
                  g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money * (-1);  --冲累计分摊
               end if;
           end if;
        end loop;--<<循环资金来源游标>>
     end if;  --<<计算栈中无数据 g_tab_card_source>>


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_price           :=0;
         v_card_now_depre_money :=0;
         v_card_add_depre_money :=0;
         v_card_add_depre_month :=0;
         v_card_cur_money       :=0;
         v_card_fore_money      :=0;
         v_BACK_ADD_DEPRE_MONEY :=0;

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).MANAGE_DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}分摊方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).MANAGE_DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_MANAGE_MONTH >= g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;

                 --计算本月折旧
                 if g_tab_card_source(i).ADD_MANAGE_MONTH + 1 =  g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12 then
                     g_tab_card_source(i).NOW_MANAGE_DEPRE :=    g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY
                                                               ;
                 else
                     --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                    /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                     - g_tab_card_source(i).FORE_MONEY
                                                                     )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                   ,2);*/

                     g_tab_card_source(i).NOW_MANAGE_DEPRE := ROUND(((  g_tab_card_source(i).PRICE
                                                                      - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                                      - g_tab_card_source(i).FORE_MONEY
                                                                      )
                                                                     )/(  g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12
                                                                        - g_tab_card_source(i).ADD_MANAGE_MONTH
                                                                       )
                                                                   ,2);
                     if g_tab_card_source(i).NOW_MANAGE_DEPRE >( g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY
                                                               ) then
                        g_tab_card_source(i).NOW_MANAGE_DEPRE := g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY;
                     end if;
                 end if;

                 --计算累计折旧月份
                 g_tab_card_source(i).ADD_MANAGE_MONTH :=  g_tab_card_source(i).ADD_MANAGE_MONTH + 1;

                 --计算累计折旧
                 g_tab_card_source(i).ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                          +g_tab_card_source(i).NOW_MANAGE_DEPRE;

                 if   g_tab_card_source(i).ADD_MANAGE_DEPRE
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计分摊维护不正确!';
                    return;
                 end if;

                 /**************************现值只有计算折旧才会改变****************************
                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;
                 ******************************************************************************/



                 /***************************由于调用仅为减少业务*******************************
                 if  g_tab_card_source(i).USE_STATE in('6','7') then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE * (-1);
                 end if;
                 ********************************************************************************/

                 g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE * (-1);
             end if; --<<平均年限法>>

             --如果为已处置申报，如果存在本期折旧为0，原因：处置申报已提折旧，本次为处置业务
             if g_tab_card_source(i).USE_STATE = '6' then

                i_count := 0 ;

                select count(1)
                  into i_count
                  from ass_card_general t
                 where t.group_id    = prm_group_id
                   and t.hos_id      = prm_hos_id
                   and t.copy_code   = prm_copy_code
                   and t.ass_card_no = prm_ass_card_no
                   and nvl(to_char(t.apply_date  ,'YYYYMM'),'000000') = prm_acc_year || prm_acc_month
                 ;

                 if i_count > 0 then
                    g_tab_card_source(i).NOW_MANAGE_DEPRE      := 0;
                    g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE := 0 ;
                 end if;
             end if;

             --资金来源结果数据压栈
             is_Update := 0   ;
             i_pos     := 0   ;
             for m in 1..g_tab_card_source_ret.count() loop
                 if (    g_tab_card_source_ret(m).Naturs_Code = '03'
                    and g_tab_card_source_ret(m).ASS_CARD_NO = prm_ass_card_no
                    and g_tab_card_source_ret(m).SOURCE_ID   = g_tab_card_source(i).SOURCE_ID
                   ) then

                   is_Update := 1   ;
                   i_pos     := m   ;
                   exit;

                 end if;
             end loop;--<<资金来源循环压栈>>

             if (  is_Update = 1 ) then

               g_tab_card_source_ret(i_pos).NOW_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).NOW_MANAGE_DEPRE       ;--本次分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).ADD_MANAGE_DEPRE       ;--累计分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_MONTH :=
                                                 g_tab_card_source(i).ADD_MANAGE_MONTH       ;--累计分摊月份
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_METHOD :=
                                                 g_tab_card_source(i).MANAGE_DEPRE_METHOD    ;--分摊方法
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_AMOUNT :=
                                                 g_tab_card_source(i).MANAGE_DEPRE_AMOUNT    ;--分摊年限
               g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE  ;--冲累计分摊

             else
               v_j := v_j + 1 ;
               g_tab_card_source_ret(v_j).Naturs_Code           := '03'                                      ;
               g_tab_card_source_ret(v_j).ASS_CARD_NO           := prm_ass_card_no                           ;
               g_tab_card_source_ret(v_j).SOURCE_ID             := g_tab_card_source(i).SOURCE_ID            ;
               g_tab_card_source_ret(v_j).PRICE                 := g_tab_card_source(i).PRICE                ;
               g_tab_card_source_ret(v_j).NOW_MANAGE_DEPRE      := g_tab_card_source(i).NOW_MANAGE_DEPRE     ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_DEPRE      := g_tab_card_source(i).ADD_MANAGE_DEPRE     ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_MONTH      := g_tab_card_source(i).ADD_MANAGE_MONTH     ;
               g_tab_card_source_ret(v_j).CUR_MONEY             := g_tab_card_source(i).CUR_MONEY            ;
               g_tab_card_source_ret(v_j).FORE_MONEY            := g_tab_card_source(i).FORE_MONEY           ;
               g_tab_card_source_ret(v_j).USE_STATE             := g_tab_card_source(i).USE_STATE            ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_METHOD   := g_tab_card_source(i).MANAGE_DEPRE_METHOD  ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_AMOUNT   := g_tab_card_source(i).MANAGE_DEPRE_AMOUNT  ;
               g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE;
             end if;
             --计算卡片压栈数据
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_MANAGE_DEPRE;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_MANAGE_DEPRE;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_MANAGE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).MANAGE_DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).MANAGE_DEPRE_AMOUNT;
         end loop;

         --卡片结果数据压栈
         is_Update := 0   ;
         i_pos     := 0   ;
         for n in 1..g_tab_card_ret.count() loop
           if (     g_tab_card_ret(n).Naturs_Code = '03'
                and g_tab_card_ret(n).ASS_CARD_NO = prm_ass_card_no
               ) then
               is_Update := 1   ;
               i_pos     := n   ;
          end if;
        end loop;

        if (    is_Update = 1  ) then

             g_tab_card_ret(i_pos).NOW_MANAGE_DEPRE      := v_card_now_depre_money   ;
             g_tab_card_ret(i_pos).ADD_MANAGE_DEPRE      := v_card_add_depre_money   ;
             g_tab_card_ret(i_pos).ADD_MANAGE_MONTH      := v_card_add_depre_month   ;
             g_tab_card_ret(i_pos).MANAGE_DEPRE_METHOD   := v_card_depr_method       ;
             g_tab_card_ret(i_pos).MANAGE_DEPRE_AMOUNT   := v_ACC_DEPRE_AMOUNT       ;
             g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_BACK_ADD_DEPRE_MONEY   ;
           else
             v_i := v_i + 1 ;
             g_tab_card_ret(v_i).Naturs_Code           := '03'                     ;
             g_tab_card_ret(v_i).ASS_CARD_NO           := prm_ass_card_no          ;
             g_tab_card_ret(v_i).PRICE                 := v_card_price             ;
             g_tab_card_ret(v_i).NOW_MANAGE_DEPRE      := v_card_now_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_DEPRE      := v_card_add_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_MONTH      := v_card_add_depre_month   ;
             g_tab_card_ret(v_i).CUR_MONEY             := v_card_cur_money         ;
             g_tab_card_ret(v_i).FORE_MONEY            := v_card_fore_money        ;
             g_tab_card_ret(v_i).USE_STATE             := v_card_use_state         ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_METHOD   := v_card_depr_method       ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_AMOUNT   := v_ACC_DEPRE_AMOUNT       ;
             g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_BACK_ADD_DEPRE_MONEY   ;
          end if;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备卡片分摊计提失败！'||SQLERRM;

   END prc_CalcManageGeneralSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcGeneralPortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcGeneralPortSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '一般设备计提成功!';



     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;



     --(3)计算折旧前完整性检查
     prc_ChkCardGeneralSingle(  prm_group_id             --集团
                               ,prm_hos_id               --医院
                               ,prm_copy_code            --账套
                               ,prm_acc_year             --年度
                               ,prm_acc_month            --月份
                               ,prm_ass_card_no          --卡片号
                               ,prm_AppCode              --执行代码
                               ,prm_ErrTxt               --错误信息
                              );

     if prm_AppCode <> def_OK  then
        return;
     end if;

     --(4)装载卡片数据
     /*****************************************************************
     *
     * 新制度修改：资产当月减少时，不需要计提摊销
     *
     ******************************************************************/
     /*
     prc_LoadCardGeneralSingle(prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_ass_card_no            --卡片号
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     */
     --(5)资产计提折旧
     prc_CalcDepreGeneralSingle(  prm_group_id                --集团
                                 ,prm_hos_id                  --医院
                                 ,prm_copy_code               --账套
                                 ,prm_acc_year                --年度
                                 ,prm_acc_month               --月份
                                 ,prm_ass_card_no             --卡片号
                                 ,prm_AppCode                 --执行代码
                                 ,prm_ErrTxt                  --错误信息
                                );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(7)计算分摊前完整性检查
     prc_ChkManageGeneralSingle( prm_group_id             --集团
                                ,prm_hos_id               --医院
                                ,prm_copy_code            --账套
                                ,prm_acc_year             --年度
                                ,prm_acc_month            --月份
                                ,prm_ass_card_no          --卡片号
                                ,prm_AppCode              --执行代码
                                ,prm_ErrTxt               --错误信息
                                );

     if prm_AppCode <> def_OK  then
        return;
     end if;
     --(8)装载卡片入分摊计算栈
     /*****************************************************************
     *
     * 新制度修改：资产当月减少时，不需要计提摊销
     *
     ******************************************************************/
     /*
     prc_LoadManageGeneralSingle(prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_ass_card_no            --卡片号
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     */
     --(9)资产计提分摊计算
     prc_CalcManageGeneralSingle(   prm_group_id                --集团
                                   ,prm_hos_id                  --医院
                                   ,prm_copy_code               --账套
                                   ,prm_acc_year                --年度
                                   ,prm_acc_month               --月份
                                   ,prm_ass_card_no             --卡片号
                                   ,prm_AppCode                 --执行代码
                                   ,prm_ErrTxt                  --错误信息
                                 );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)组JSON串返回结果集
     prc_SpliceJsonSingle(  prm_JSON_STR                --返回JSON串
                           ,prm_AppCode                 --执行代码
                           ,prm_ErrTxt                  --错误信息
                          );

     if prm_AppCode <>  def_OK  then
        return;
     end if;


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '一般设备计提失败！'||SQLERRM;
   END prc_CalcGeneralPortSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardHouseSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardHouseSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在
     v_CHANGE_depre_flag    integer                                ;      --查找是否存在变动折旧
     ***************************************************************************************/
     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_House.Price%type            ;
     v_depre_money          ASS_CARD_House.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_House.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_House.Fore_Money%type       ;
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     ***************************************************************************************/

     v_price_source         ASS_CARD_House.Price%type            ;
     v_depre_money_source   ASS_CARD_House.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_House.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_House.Fore_Money%type       ;
     v_Is_Depr              ASS_CARD_House.Is_Depr%type          ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '房屋及建筑物卡片完整性检查通过!';

     v_exist_flag         := 0                            ;
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_DEPRE_flag  := 0                            ;
     v_CHANGE_depre_flag  := 0                            ;
     ***************************************************************************************/

     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Depr            := 0                            ;

     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_House t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
             --or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t.use_state,0) = 6 )
             or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
             )--新制度修改：不包含本月处置的卡片
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_House t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;
     
     /********************新制度修改：当月减少资产不计提折旧********************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ***************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_depr,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Depr
         from ASS_CARD_House t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_depr,0) = 1
          and (  (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
              --or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
              or (nvl(t.use_state,0) = 6)
              or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
              )--新制度修改：不包含本月处置的卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;

     if v_Is_Depr = 0 then
       return;
     end if;
     
     /****************************新制度修改：资产减少当月不计提折旧**********************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     ***************************************************************************************/
     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_House t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     --如果卡片中存在折旧，寻找折旧数据来源
     v_exist_flag:=0 ;
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then --新制度修改：当月减少资产不计提折旧

        --检查上个月是否折旧
        select count(1)
          into v_exist_flag
          from ASS_DEPRE_ACC_House t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;
        
        /****************************新制度修改：资产减少当月不计提折旧**********************
        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            select count(1)
              into v_CHANGE_depre_flag
              from ASS_DEPRE_SOURCE_House t1
              left join ASS_DEPRE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = prm_ass_card_no
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;

            if v_CHANGE_depre_flag = 0 then
                prm_AppCode := def_WARNING;
                prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
                return;
            end if;
        end if;
        ***************************************************************************************/
        if v_exist_flag = 0 then
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
           return;
        end if;
     end if;

     --检查该卡片在本月之后是否累计折旧变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_DEPRE_DETAIL_House t1
      left join ASS_DEPRE_House t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过累计折旧变动!';
       return;
    end if;

     --检查该卡片在本月之后是否发生原值变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_CHANGE_DETAIL_House t1
      left join ASS_CHANGE_House t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.change_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过原值变动!';
       return;
    end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardHouseSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardHouseSingle
   || 功能描述 ：加载要计算折旧卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardHouseSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.add_depre_amount,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,a.depr_method
                          /*,nvl(b.add_depre_month,nvl(a.Acc_Depre_Amount,0)) as Acc_Depre_Amount*/
                          ,nvl(a.Acc_Depre_Amount,0) as Acc_Depre_Amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'01' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.depre_money,0) as depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_depre_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.depr_method,'01') as depr_method
                                     ,t1.Acc_Depre_Amount
                                from ASS_CARD_House t1
                                left join ASS_RESOURCE_House t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 ='1' and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 ='2' and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_depr,0)        =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       )
                                  and t1.ass_card_no             = prm_ass_card_no                  --修改
                                  and t2.ass_card_no             = prm_ass_card_no                  --修改
                                  and t1.add_depre_month         < t1.acc_depre_amount *12
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_ACC_House t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                  and t3.ass_card_no = prm_ass_card_no
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 )b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id
                       and b.ass_card_no = prm_ass_card_no  */                 --修改
               ) t
            where nvl(t.cur_money,0) >= 0
            order by t.ass_card_no ,t.source_id
          ;

      /*********************************特别说明*************************************
       *
       * 经分析折旧计算比较严谨，计算出的折旧大于现值时给现值，超过年限全部计提
       *
       * 基于以上前提，因此此处将nvl(t.cur_money,0) > 0 改为 nvl(t.cur_money,0) >= 0
       *
       * 主要用于解决，当存在部分资金来源已折完，原值计算不正确的现象。
       *
       * 存在问题：累计折旧月份不准确，但减少业务表中不需要提供累计折旧月份
       *
      *******************************************************************************/

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_House.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_House.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_House.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_House.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_House.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_House.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_House.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_House.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_House.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_House.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_House.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_House.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_House.Add_Depre_Month%type;   --累计折旧月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_House.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_House.CHANGE_Depre%type;   --累计折旧调整金额
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '房屋及建筑物卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;


     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , prm_ass_card_no
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:无偿调拨 32：有偿调拨  33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          /*--读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_House t1
              left join ASS_CHANGE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_House t1
              left join ASS_DEPRE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;*/

          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧

              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片装载失败！'||SQLERRM;

   END prc_LoadCardHouseSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreHouseSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreHouseSingle(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS

      --定义变量
      v_card_price           ASS_CARD_House.Price%type;
      v_card_now_depre_money ASS_CARD_House.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_House.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_House.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_House.Cur_Money%type;
      v_card_fore_money      ASS_CARD_House.Fore_Money%type;
      v_card_use_state       ASS_CARD_House.Use_State%type;
      v_card_depr_method     ASS_CARD_House.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_House.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_House.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '房屋及建筑物卡片计算折旧成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.depre_money, 0),
               nvl(t.add_depre_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.depr_method,'01'),
               nvl(t.acc_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_House t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         v_i := v_i + 1 ;
         g_tab_card_ret(v_i).Naturs_Code      := '01'                     ;
         g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_ret(v_i).PRICE            := v_card_price             ;
         g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
         g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
         g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
         g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0;--处置申报已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0;--处置申报不冲减
         else
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_card_add_depre_money *(-1);
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_House t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_House t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --卡片结果数据压栈
         v_j := v_j + 1 ;
         g_tab_card_source_ret(v_j).Naturs_Code      := '01'                     ;
         g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
         g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
         g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := rec.depre_money          ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
         g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
         g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
         g_tab_card_source_ret(v_j).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0;--处置申报已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0;--处置申报不冲减
         else
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := rec.depre_money *(-1);
         end if;

        end loop;

     end if;


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_price           :=0;
         v_card_now_depre_money :=0;
         v_card_add_depre_money :=0;
         v_card_add_depre_month :=0;
         v_card_cur_money       :=0;
         v_card_fore_money      :=0;
         v_BACK_ADD_DEPRE_MONEY :=0;

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}折旧方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_DEPRE_MONTH >= g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;

                 --计算本月折旧
                 if g_tab_card_source(i).ADD_DEPRE_MONTH + 1 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                     g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                 else
                     --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                    /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                     - g_tab_card_source(i).FORE_MONEY
                                                                     )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                   ,2);*/

                     g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                     )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                        - g_tab_card_source(i).ADD_DEPRE_MONTH
                                                                       )
                                                                   ,2);
                     if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                        g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                     end if;
                 end if;

                 --计算累计折旧月份
                 g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 1;

                 --计算累计折旧
                 g_tab_card_source(i).ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY
                                                         +g_tab_card_source(i).NOW_DEPRE_MONEY;

                 if   g_tab_card_source(i).ADD_DEPRE_MONEY
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧维护不正确!';
                    return;
                 end if;

                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;



                 /*********************由于调用均为减少业务**********************************
                 if  g_tab_card_source(i).USE_STATE in('6','7') then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);
                 end if;
                 ****************************************************************************/

                 --计算冲减累计折旧
                 g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);

             end if; --<<平均年限法>>

             --如果为处置申报，如果存在本期折旧为0，原因：处置申报已提折旧，本次为处置业务
             if g_tab_card_source(i).USE_STATE = '6' then

                i_count := 0 ;

                select count(1)
                  into i_count
                  from ass_card_house t
                 where t.group_id    = prm_group_id
                   and t.hos_id      = prm_hos_id
                   and t.copy_code   = prm_copy_code
                   and t.ass_card_no = prm_ass_card_no
                   and nvl(to_char(t.apply_date  ,'YYYYMM'),'000000') = prm_acc_year || prm_acc_month
                 ;

                 if i_count > 0 then
                    g_tab_card_source(i).NOW_DEPRE_MONEY := 0;
                    g_tab_card_source(i).BACK_ADD_DEPRE_MONEY := 0 ;
                 end if;
             end if;

             --卡片结果数据压栈
             v_j := v_j + 1 ;
             g_tab_card_source_ret(v_j).Naturs_Code      := '01'                                ;
             g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no                     ;
             g_tab_card_source_ret(v_j).SOURCE_ID        := g_tab_card_source(i).SOURCE_ID      ;
             g_tab_card_source_ret(v_j).PRICE            := g_tab_card_source(i).PRICE          ;
             g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := g_tab_card_source(i).NOW_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := g_tab_card_source(i).ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := g_tab_card_source(i).ADD_DEPRE_MONTH;
             g_tab_card_source_ret(v_j).CUR_MONEY        := g_tab_card_source(i).CUR_MONEY;
             g_tab_card_source_ret(v_j).FORE_MONEY       := g_tab_card_source(i).FORE_MONEY;
             g_tab_card_source_ret(v_j).USE_STATE        := g_tab_card_source(i).USE_STATE;
             g_tab_card_source_ret(v_j).DEPRE_METHOD     := g_tab_card_source(i).DEPRE_METHOD;
             g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;

             --计算卡片压栈数据
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_DEPRE_MONEY;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_DEPRE_MONEY;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_DEPRE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
         end loop;

         --卡片结果数据压栈
         v_i := v_i + 1 ;
         g_tab_card_ret(v_i).Naturs_Code      := '01'                     ;
         g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_ret(v_i).PRICE            := v_card_price             ;
         g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
         g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
         g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
         g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
         g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;

     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片折旧计提失败！'||SQLERRM;

   END prc_CalcDepreHouseSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageHouseSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageHouseSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在

     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_House.Price%type            ;
     v_depre_money          ASS_CARD_House.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_House.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_House.Fore_Money%type       ;
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;

     v_price_source         ASS_CARD_House.Price%type            ;
     v_depre_money_source   ASS_CARD_House.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_House.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_House.Fore_Money%type       ;
     v_Is_Manage_Depre      ASS_CARD_House.Is_Manage_Depre%type  ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '房屋及建筑物卡片完整性检查通过!';

     v_before_DEPRE_flag  := 0                            ;
     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Manage_Depre    := 0                            ;

     /*******************************在资产折旧时已做较验******************************************
     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_House t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and nvl(t.use_state,0) <> 0
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_House t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;
     *********************************************************************************************/
     
     /********************新制度修改：当月减少资产不计提折旧********************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ***************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.manage_depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_manage_depre,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Manage_Depre
         from ASS_CARD_House t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
              )--新制度修改：不包含本月处置卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;

     if v_Is_Manage_Depre = 0 then
       return;
     end if;
     /****************************新制度修改：资产减少当月不计提折旧***********************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     ***************************************************************************************/

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_House t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     --如果卡片中存在折旧，寻找折旧数据来源
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then --新制度修改：当月减少资产不计提折旧

        --检查上个月是否折旧
        select count(1)
          into v_before_DEPRE_flag
          from ASS_DEPRE_MANAGE_House t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提分摊或期初累计分摊未维护!';
            return;
        end if;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageHouseSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageHouseSingle
   || 功能描述 ：加载要计算分摊卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageHouseSingle( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                         )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code              --资产性质
                ,t.ass_card_no              --卡片号
                ,t.source_id                --资金来源
                ,t.price                    --原值
                ,t.manage_depre_money       --累计分摊
                ,t.cur_money                --现值
                ,t.fore_money               --残值
                ,t.add_depre_month          --累计折旧月份
                ,t.Use_State                --使用状态
                ,t.dispose_type             --处置类型
                ,t.apply_date               --处置申报日期
                ,t.dispose_date             --处置日期
                ,t.manage_depr_method       --分摊方法
                ,t.manage_depre_amount      --分摊年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.add_depre_amount,nvl(a.manage_depre_money,0)) as manage_depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_manage_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.manage_depre_money,0) as manage_depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_manage_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,nvl(a.manage_depr_method,'01') as manage_depr_method
                          ,nvl(a.manage_depre_amount,0) as manage_depre_amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'01' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.manage_depre_money,0) as manage_depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_manage_month,0) as add_manage_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.manage_depr_method,'01') as manage_depr_method
                                     ,t1.manage_depre_amount
                                from ASS_CARD_House t1
                                left join ASS_RESOURCE_House t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 ='1' and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 ='2' and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_manage_depre,0)  =  1                              --是否分摊
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       )
                                  and t1.ass_card_no             = prm_ass_card_no                  --修改
                                  and t2.ass_card_no             = prm_ass_card_no                  --修改
                                  and t1.add_depre_month         < t1.manage_depre_amount *12
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_MANAGE_House t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                  and t3.ass_card_no = prm_ass_card_no
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 )b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id
                       and b.ass_card_no = prm_ass_card_no    */               --修改
               ) t
            where (nvl(t.price,0) - nvl(t.manage_depre_money,0) - nvl(t.fore_money,0)) >= 0
            order by t.ass_card_no ,t.source_id
          ;

      /*********************************特别说明*************************************
       *
       * 经分析折旧计算比较严谨，计算出的折旧大于现值时给现值，超过年限全部计提
       *
       * 基于以上前提，因此此处将nvl(t.cur_money,0) > 0 改为 nvl(t.cur_money,0) >= 0
       *
       * 主要用于解决，当存在部分资金来源已折完，原值计算不正确的现象。
       *
       * 存在问题：累计折旧月份不准确，但减少业务表中不需要提供累计折旧月份
       *
      *******************************************************************************/

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_House.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_House.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_House.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_House.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_House.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_House.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_House.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_House.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_House.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_House.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_House.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_House.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_House.Add_Depre_Month%type;   --累计折旧月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_House.CHANGE_Price%type;  --原值调整金额
      --v_CHANGE_depre         ASS_DEPRE_DETAIL_House.CHANGE_Depre%type;   --累计折旧调整金额

      is_Update              integer       ;
      i_pos                  integer       ;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '房屋及建筑物卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;
     is_Update       := 0                      ;
     i_pos           := 0                      ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , prm_ass_card_no
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:无偿调拨 32：有偿调拨  33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          /*--读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_House t1
              left join ASS_CHANGE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;*/

          /************************ 分摊不提供累计分摊变动 ******************************
          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_House t1
              left join ASS_DEPRE_House t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/

          if v_Push_State = 1 then
              is_Update       := 0                      ;
              i_pos           := 0                      ;
              for i in 1..g_tab_card_source.count() loop
                 if (    g_tab_card_source(i).Naturs_Code = v_Naturs_Code
                    and g_tab_card_source(i).ASS_CARD_NO = v_ASS_CARD_NO
                    and g_tab_card_source(i).SOURCE_ID   = v_soure_id
                   ) then
                     is_Update       := 1                      ;
                     i_pos           := i                      ;
                     exit;
                 end if;
              end loop;--<<循环压栈>>

              if (    is_Update = 1 ) then

                     g_tab_card_source(i_pos).NOW_MANAGE_DEPRE := 0                  ;      --本次分摊
                     g_tab_card_source(i_pos).ADD_MANAGE_DEPRE := V_DEPRE_MONEY      ;      --累计分摊
                     g_tab_card_source(i_pos).ADD_MANAGE_MONTH := V_ADD_DEPRE_MONTH  ;      --累计分摊月份
                     g_tab_card_source(i_pos).MANAGE_DEPRE_METHOD := V_DEPR_METHOD   ;      --分摊方法
                     g_tab_card_source(i_pos).MANAGE_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT ;   --分摊年限
                     g_tab_card_source(i_pos).BACK_ADD_MANAGE_DEPRE := 0                ;   --冲累计分摊

                else --不折旧，但分摊，需压新计算栈
                     g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
                     g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
                     g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
                     g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
                     g_tab_card_source(v_i).NOW_MANAGE_DEPRE := 0                     ;      --本月分摊
                     g_tab_card_source(v_i).ADD_MANAGE_DEPRE := V_ADD_DEPRE_MONTH     ;      --累计分摊
                     g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
                     g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
                     g_tab_card_source(v_i).ADD_MANAGE_MONTH := V_ADD_DEPRE_MONTH     ;      --累计分摊月份
                     g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
                     g_tab_card_source(v_i).MANAGE_DEPRE_METHOD := V_DEPR_METHOD      ;      --分摊方法
                     g_tab_card_source(v_i).MANAGE_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT ;      --分摊年限
                     g_tab_card_source(v_i).BACK_ADD_MANAGE_DEPRE:=0                  ;      --冲累计分摊

                     v_i := v_i + 1 ;
                end if;
         end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片装载失败！'||SQLERRM;

   END prc_LoadManageHouseSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageHouseSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageHouseSingle(  prm_group_id          IN   NUMBER         --集团
                                        ,prm_hos_id            IN   NUMBER         --医院
                                        ,prm_copy_code         IN   VARCHAR2       --账套
                                        ,prm_acc_year          IN   VARCHAR2       --年度
                                        ,prm_acc_month         IN   VARCHAR2       --月份
                                        ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                        ,prm_AppCode           Out  Number         --执行代码
                                        ,prm_ErrTxt            Out  Varchar2       --错误信息
                                      )
   IS

      --定义变量
      v_card_price           ASS_CARD_House.Price%type;
      v_card_now_depre_money ASS_CARD_House.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_House.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_House.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_House.Cur_Money%type;
      v_card_fore_money      ASS_CARD_House.Fore_Money%type;
      v_card_use_state       ASS_CARD_House.Use_State%type;
      v_card_depr_method     ASS_CARD_House.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_House.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_House.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈

      is_Update              integer       ;
      i_pos                  integer       ;
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '房屋及建筑物卡片计算分摊成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;
     is_Update       := 0                                       ;
     i_pos           := 0                                       ;

     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.manage_depre_money, 0),
               nvl(t.add_manage_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.manage_depr_method,'01'),
               nvl(t.manage_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_House t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         is_Update       := 0   ;
         i_pos           := 0   ;
         for i in 1..g_tab_card_ret.count() loop
             if (    g_tab_card_ret(i).Naturs_Code = '01'
                and g_tab_card_ret(i).ASS_CARD_NO = prm_ass_card_no
               ) then

                is_Update  := 1  ;
                i_pos      := i  ;
                exit;
             end if;
         end loop;

         if ( is_Update = 1 ) then
             g_tab_card_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_DEPRE := v_card_add_depre_money      ;      --累计分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
             g_tab_card_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
             g_tab_card_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0;--处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0;--处置申报不冲减
             else
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money *(-1); --冲累计分摊
             end if;

         else --不折旧，但分摊，需压新计算栈
             v_i := v_i + 1 ;
             g_tab_card_ret(v_i).Naturs_Code      := '01'                     ;
             g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
             g_tab_card_ret(v_i).PRICE            := v_card_price             ;
             g_tab_card_ret(v_i).NOW_MANAGE_DEPRE := 0                        ;
             g_tab_card_ret(v_i).ADD_MANAGE_DEPRE := v_card_add_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
             g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
             g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
             g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0;--处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then   
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0;--处置申报不冲减
             else
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money *(-1);
             end if;
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_House t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.manage_depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_House t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --资金来源结果数据压栈
          is_Update := 0   ;
          i_pos     := 0   ;
          for i in 1..g_tab_card_source_ret.count() loop
              if (    g_tab_card_source_ret(i).Naturs_Code = '01'
                  and g_tab_card_source_ret(i).ASS_CARD_NO = prm_ass_card_no
                  and g_tab_card_source_ret(i).source_id   = rec.source_id
                 ) then
               is_Update := 1  ;
               i_pos     := i  ;
               exit;
             end if;
          end loop;--<<循环压栈 g_tab_card_source_ret>>

          if ( is_Update = 1 ) then
               g_tab_card_source_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_DEPRE := rec.depre_money             ;      --累计分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限

               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0  ;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then 
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0  ;--处置申报不冲减
               else
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := rec.depre_money *(-1)  ;      --冲累计分摊
               end if;
           else
               v_j := v_j + 1 ;
               g_tab_card_source_ret(v_j).Naturs_Code      := '01'                     ;
               g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
               g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
               g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
               g_tab_card_source_ret(v_j).NOW_MANAGE_DEPRE := 0                        ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_DEPRE := rec.depre_money          ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
               g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
               g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
               g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;

               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := 0;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := 0;--处置申报不冲减
               else
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := rec.depre_money *(-1);
               end if;

           end if;
        end loop;--<<循环资金来源游标>>
     end if;  --<<计算栈中无数据 g_tab_card_source>>


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_price           :=0;
         v_card_now_depre_money :=0;
         v_card_add_depre_money :=0;
         v_card_add_depre_month :=0;
         v_card_cur_money       :=0;
         v_card_fore_money      :=0;
         v_BACK_ADD_DEPRE_MONEY :=0;

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).MANAGE_DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}分摊方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).MANAGE_DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_MANAGE_MONTH >= g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;

                 --计算本月折旧
                 if g_tab_card_source(i).ADD_MANAGE_MONTH + 1 =  g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12 then
                     g_tab_card_source(i).NOW_MANAGE_DEPRE :=    g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY
                                                               ;
                 else
                     --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                    /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                     - g_tab_card_source(i).FORE_MONEY
                                                                     )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                   ,2);*/

                     g_tab_card_source(i).NOW_MANAGE_DEPRE := ROUND(((  g_tab_card_source(i).PRICE
                                                                      - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                                      - g_tab_card_source(i).FORE_MONEY
                                                                      )
                                                                     )/(  g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12
                                                                        - g_tab_card_source(i).ADD_MANAGE_MONTH
                                                                       )
                                                                   ,2);
                     if g_tab_card_source(i).NOW_MANAGE_DEPRE >( g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY
                                                               ) then
                        g_tab_card_source(i).NOW_MANAGE_DEPRE := g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY;
                     end if;
                 end if;

                 --计算累计折旧月份
                 g_tab_card_source(i).ADD_MANAGE_MONTH :=  g_tab_card_source(i).ADD_MANAGE_MONTH + 1;

                 --计算累计折旧
                 g_tab_card_source(i).ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                          +g_tab_card_source(i).NOW_MANAGE_DEPRE;

                 if   g_tab_card_source(i).ADD_MANAGE_DEPRE
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计分摊维护不正确!';
                    return;
                 end if;

                 /**************************现值只有计算折旧才会改变****************************
                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;
                 ******************************************************************************/



                 /***************************由于调用仅为减少业务*******************************
                 if  g_tab_card_source(i).USE_STATE in('6','7') then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE * (-1);
                 end if;
                 ********************************************************************************/

                 g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE * (-1);
             end if; --<<平均年限法>>

             --如果为处置申报，如果存在本期折旧为0，原因：处置申报已提折旧，本次为处置业务
             if g_tab_card_source(i).USE_STATE = '6' then

                i_count := 0 ;

                select count(1)
                  into i_count
                  from ass_card_house t
                 where t.group_id    = prm_group_id
                   and t.hos_id      = prm_hos_id
                   and t.copy_code   = prm_copy_code
                   and t.ass_card_no = prm_ass_card_no
                   and nvl(to_char(t.apply_date  ,'YYYYMM'),'000000') = prm_acc_year || prm_acc_month
                 ;

                 if i_count > 0 then
                    g_tab_card_source(i).NOW_MANAGE_DEPRE      := 0;
                    g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE := 0 ;
                 end if;
             end if;

             --资金来源结果数据压栈
             is_Update := 0   ;
             i_pos     := 0   ;
             for m in 1..g_tab_card_source_ret.count() loop
                 if (    g_tab_card_source_ret(m).Naturs_Code = '01'
                    and g_tab_card_source_ret(m).ASS_CARD_NO = prm_ass_card_no
                    and g_tab_card_source_ret(m).SOURCE_ID   = g_tab_card_source(i).SOURCE_ID
                   ) then

                   is_Update := 1   ;
                   i_pos     := m   ;
                   exit;

                 end if;
             end loop;--<<资金来源循环压栈>>

             if (  is_Update = 1 ) then

               g_tab_card_source_ret(i_pos).NOW_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).NOW_MANAGE_DEPRE       ;--本次分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).ADD_MANAGE_DEPRE       ;--累计分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_MONTH :=
                                                 g_tab_card_source(i).ADD_MANAGE_MONTH       ;--累计分摊月份
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_METHOD :=
                                                 g_tab_card_source(i).MANAGE_DEPRE_METHOD    ;--分摊方法
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_AMOUNT :=
                                                 g_tab_card_source(i).MANAGE_DEPRE_AMOUNT    ;--分摊年限
               g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE  ;--冲累计分摊

             else
               v_j := v_j + 1 ;
               g_tab_card_source_ret(v_j).Naturs_Code           := '01'                                      ;
               g_tab_card_source_ret(v_j).ASS_CARD_NO           := prm_ass_card_no                           ;
               g_tab_card_source_ret(v_j).SOURCE_ID             := g_tab_card_source(i).SOURCE_ID            ;
               g_tab_card_source_ret(v_j).PRICE                 := g_tab_card_source(i).PRICE                ;
               g_tab_card_source_ret(v_j).NOW_MANAGE_DEPRE      := g_tab_card_source(i).NOW_MANAGE_DEPRE     ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_DEPRE      := g_tab_card_source(i).ADD_MANAGE_DEPRE     ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_MONTH      := g_tab_card_source(i).ADD_MANAGE_MONTH     ;
               g_tab_card_source_ret(v_j).CUR_MONEY             := g_tab_card_source(i).CUR_MONEY            ;
               g_tab_card_source_ret(v_j).FORE_MONEY            := g_tab_card_source(i).FORE_MONEY           ;
               g_tab_card_source_ret(v_j).USE_STATE             := g_tab_card_source(i).USE_STATE            ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_METHOD   := g_tab_card_source(i).MANAGE_DEPRE_METHOD  ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_AMOUNT   := g_tab_card_source(i).MANAGE_DEPRE_AMOUNT  ;
               g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE;
             end if;
             --计算卡片压栈数据
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_MANAGE_DEPRE;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_MANAGE_DEPRE;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_MANAGE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).MANAGE_DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).MANAGE_DEPRE_AMOUNT;
         end loop;

         --卡片结果数据压栈
         is_Update := 0   ;
         i_pos     := 0   ;
         for n in 1..g_tab_card_ret.count() loop
           if (     g_tab_card_ret(n).Naturs_Code = '01'
                and g_tab_card_ret(n).ASS_CARD_NO = prm_ass_card_no
               ) then
               is_Update := 1   ;
               i_pos     := n   ;
          end if;
        end loop;

        if (    is_Update = 1  ) then

             g_tab_card_ret(i_pos).NOW_MANAGE_DEPRE      := v_card_now_depre_money   ;
             g_tab_card_ret(i_pos).ADD_MANAGE_DEPRE      := v_card_add_depre_money   ;
             g_tab_card_ret(i_pos).ADD_MANAGE_MONTH      := v_card_add_depre_month   ;
             g_tab_card_ret(i_pos).MANAGE_DEPRE_METHOD   := v_card_depr_method       ;
             g_tab_card_ret(i_pos).MANAGE_DEPRE_AMOUNT   := v_ACC_DEPRE_AMOUNT       ;
             g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_BACK_ADD_DEPRE_MONEY   ;
           else
             v_i := v_i + 1 ;
             g_tab_card_ret(v_i).Naturs_Code           := '01'                     ;
             g_tab_card_ret(v_i).ASS_CARD_NO           := prm_ass_card_no          ;
             g_tab_card_ret(v_i).PRICE                 := v_card_price             ;
             g_tab_card_ret(v_i).NOW_MANAGE_DEPRE      := v_card_now_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_DEPRE      := v_card_add_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_MONTH      := v_card_add_depre_month   ;
             g_tab_card_ret(v_i).CUR_MONEY             := v_card_cur_money         ;
             g_tab_card_ret(v_i).FORE_MONEY            := v_card_fore_money        ;
             g_tab_card_ret(v_i).USE_STATE             := v_card_use_state         ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_METHOD   := v_card_depr_method       ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_AMOUNT   := v_ACC_DEPRE_AMOUNT       ;
             g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_BACK_ADD_DEPRE_MONEY   ;
          end if;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物卡片分摊计提失败！'||SQLERRM;

   END prc_CalcManageHouseSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcHousePortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcHousePortSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '房屋及建筑物计提成功!';



     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;



     --(3)计算折旧前完整性检查
     prc_ChkCardHouseSingle(  prm_group_id             --集团
                             ,prm_hos_id               --医院
                             ,prm_copy_code            --账套
                             ,prm_acc_year             --年度
                             ,prm_acc_month            --月份
                             ,prm_ass_card_no          --卡片号
                             ,prm_AppCode              --执行代码
                             ,prm_ErrTxt               --错误信息
                            );

     if prm_AppCode <> def_OK  then
        return;
     end if;

     --(4)装载卡片数据
     /*****************************************************************
     *
     * 新制度修改：资产当月减少时，不需要计提摊销
     *
     ******************************************************************/
     /*
     prc_LoadCardHouseSingle(prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度
                            ,prm_acc_month              --月份
                            ,prm_ass_card_no            --卡片号
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息
                           );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     */
     --(5)资产计提折旧
     prc_CalcDepreHouseSingle(  prm_group_id                --集团
                               ,prm_hos_id                  --医院
                               ,prm_copy_code               --账套
                               ,prm_acc_year               --年度
                               ,prm_acc_month              --月份
                               ,prm_ass_card_no             --卡片号
                               ,prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                              );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(7)计算分摊前完整性检查
     prc_ChkManageHouseSingle( prm_group_id             --集团
                              ,prm_hos_id               --医院
                              ,prm_copy_code            --账套
                              ,prm_acc_year             --年度
                              ,prm_acc_month            --月份
                              ,prm_ass_card_no          --卡片号
                              ,prm_AppCode              --执行代码
                              ,prm_ErrTxt               --错误信息
                              );

     if prm_AppCode <> def_OK  then
        return;
     end if;
     --(8)装载卡片入分摊计算栈
     /*****************************************************************
     *
     * 新制度修改：资产当月减少时，不需要计提摊销
     *
     ******************************************************************/
     /*
     prc_LoadManageHouseSingle(prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_ass_card_no            --卡片号
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     */
     --(9)资产计提分摊计算
     prc_CalcManageHouseSingle(   prm_group_id                --集团
                                 ,prm_hos_id                  --医院
                                 ,prm_copy_code               --账套
                                 ,prm_acc_year               --年度
                                 ,prm_acc_month              --月份
                                 ,prm_ass_card_no             --卡片号
                                 ,prm_AppCode                 --执行代码
                                 ,prm_ErrTxt                  --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)组JSON串返回结果集
     prc_SpliceJsonSingle(  prm_JSON_STR                --返回JSON串
                           ,prm_AppCode                 --执行代码
                           ,prm_ErrTxt                  --错误信息
                          );

     if prm_AppCode <>  def_OK  then
        return;
     end if;


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '房屋及建筑物计提失败！'||SQLERRM;
   END prc_CalcHousePortSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardOtherSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardOtherSingle( prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在
     v_CHANGE_depre_flag    integer                                ;      --查找是否存在变动折旧
     ***************************************************************************************/
     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_Other.Price%type            ;
     v_depre_money          ASS_CARD_Other.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Other.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Other.Fore_Money%type       ;
     
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     ***************************************************************************************/

     v_price_source         ASS_CARD_Other.Price%type            ;
     v_depre_money_source   ASS_CARD_Other.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Other.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Other.Fore_Money%type       ;
     v_Is_Depr              ASS_CARD_Other.Is_Depr%type          ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '其他固定资产卡片完整性检查通过!';

     v_exist_flag         := 0                            ;
     /********************新制度修改：当月减少资产不计提折旧********************************
     v_before_DEPRE_flag  := 0                            ;
     v_CHANGE_depre_flag  := 0                            ;
     ***************************************************************************************/

     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Depr            := 0                            ;

     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_Other t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
             --or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
             or (nvl(t.use_state,0) = 6 )
             or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
             )--新制度修改：不包含本月处置的卡片
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_Other t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;
     
     /********************新制度修改：当月减少资产不计提折旧********************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ***************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_depr,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Depr
         from ASS_CARD_Other t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置的卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;

     if v_Is_Depr = 0 then
       return;
     end if;
     
     /********************新制度修改：当月减少资产不计提折旧********************************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     ***************************************************************************************/
     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Other t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     --如果卡片中存在折旧，寻找折旧数据来源
     v_exist_flag:=0 ;
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then --新制度修改：当月减少资产不计提折旧

        --检查上个月是否折旧
        select count(1)
          into v_exist_flag
          from ASS_DEPRE_ACC_Other t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;
        /********************新制度修改：当月减少资产不计提折旧********************************
        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            select count(1)
              into v_CHANGE_depre_flag
              from ASS_DEPRE_SOURCE_Other t1
              left join ASS_DEPRE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = prm_ass_card_no
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;

            if v_CHANGE_depre_flag = 0 then
                prm_AppCode := def_WARNING;
                prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
                return;
            end if;
        end if;
        ***************************************************************************************/
        if v_exist_flag = 0 then
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
           return;
        end if;
     end if;

     --检查该卡片在本月之后是否累计折旧变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_DEPRE_DETAIL_Other t1
      left join ASS_DEPRE_Other t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过累计折旧变动!';
       return;
    end if;

     --检查该卡片在本月之后是否发生原值变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_CHANGE_DETAIL_Other t1
      left join ASS_CHANGE_Other t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.change_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过原值变动!';
       return;
    end if;

     --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_TRAN_STORE_DETAIL_Other t1
      left join ASS_TRAN_STORE_Other t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.tran_no = t2.tran_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（库库）!';
       return;
    end if;

     --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_TRAN_DEPT_DETAIL_Other t1
      left join ASS_TRAN_DEPT_Other t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.tran_no = t2.tran_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（科科）!';
       return;
    end if;

    --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_OUT_DETAIL_Other t1
      left join ASS_OUT_Other t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.out_no = t2.out_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（库科）!';
       return;
    end if;
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardOtherSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadCardOtherSingle
   || 功能描述 ：加载要计算折旧卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadCardOtherSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code       --资产性质
                ,t.ass_card_no       --卡片号
                ,t.source_id         --资金来源
                ,t.price             --原值
                ,t.depre_money       --累计折旧
                ,t.cur_money         --现值
                ,t.fore_money        --残值
                ,nvl(t.add_depre_month,0) add_depre_month   --累计折旧月份
                ,t.Use_State         --使用状态
                ,t.dispose_type      --处置类型
                ,t.apply_date        --处置申报日期
                ,t.dispose_date      --处置日期
                ,t.depr_method       --折旧方法
                ,t.Acc_Depre_Amount  --折旧年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.add_depre_amount,nvl(a.depre_money,0)) as depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_depre_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.depre_money,0) as depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_depre_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,nvl(a.depr_method,'01') as depr_method
                          /*,nvl(b.add_depre_month,nvl(a.Acc_Depre_Amount,0)) as Acc_Depre_Amount*/
                          ,nvl(a.Acc_Depre_Amount,0) as Acc_Depre_Amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'04' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.depre_money,0) as depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_depre_month,0) as add_depre_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.depr_method,'01') as depr_method
                                     ,t1.Acc_Depre_Amount
                                from ASS_CARD_Other t1
                                left join ASS_RESOURCE_Other t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 ='1' and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 ='2' and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_depr,0)          =  1
                                  and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                       or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                       )
                                  and t1.ass_card_no             = prm_ass_card_no                  --修改
                                  and t2.ass_card_no             = prm_ass_card_no                  --修改
                                  and t1.add_depre_month         < t1.acc_depre_amount *12
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_ACC_Other t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                  and t3.ass_card_no = prm_ass_card_no
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id
                       and b.ass_card_no = prm_ass_card_no  */                 --修改
               ) t
            where nvl(t.cur_money,0) >= 0
            order by t.ass_card_no ,t.source_id
          ;

      /*********************************特别说明*************************************
       *
       * 经分析折旧计算比较严谨，计算出的折旧大于现值时给现值，超过年限全部计提
       *
       * 基于以上前提，因此此处将nvl(t.cur_money,0) > 0 改为 nvl(t.cur_money,0) >= 0
       *
       * 主要用于解决，当存在部分资金来源已折完，原值计算不正确的现象。
       *
       * 存在问题：累计折旧月份不准确，但减少业务表中不需要提供累计折旧月份
       *
      *******************************************************************************/

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Other.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_Other.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_Other.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_Other.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Other.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Other.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Other.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Other.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_Other.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Other.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Other.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Other.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Other.Add_Depre_Month%type;   --累计折旧月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Other.CHANGE_Price%type;  --原值调整金额
      v_CHANGE_depre         ASS_DEPRE_DETAIL_Other.CHANGE_Depre%type;   --累计折旧调整金额
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '其他固定资产卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;


     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , prm_ass_card_no
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:无偿调拨 32：有偿调拨  33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          /*--读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Other t1
              left join ASS_CHANGE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;

          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Other t1
              left join ASS_DEPRE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;*/

          if v_Push_State = 1 then
              g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
              g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
              g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
              g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
              g_tab_card_source(v_i).NOW_DEPRE_MONEY  := 0                     ;      --本月折旧
              g_tab_card_source(v_i).ADD_DEPRE_MONEY  := V_DEPRE_MONEY         ;      --累计折旧
              g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
              g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
              g_tab_card_source(v_i).ADD_DEPRE_MONTH  := V_ADD_DEPRE_MONTH     ;      --累计折旧月份
              g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
              g_tab_card_source(v_i).DEPRE_METHOD     := V_DEPR_METHOD         ;      --折旧方法
              g_tab_card_source(v_i).ACC_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT    ;      --折旧年限
              g_tab_card_source(v_i).BACK_ADD_DEPRE_MONEY:=0                   ;      --冲累计折旧

              v_i := v_i + 1 ;
        end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片装载失败！'||SQLERRM;

   END prc_LoadCardOtherSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreOtherSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreOtherSingle(  prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                      )
   IS

      --定义变量
      v_card_price           ASS_CARD_Other.Price%type;
      v_card_now_depre_money ASS_CARD_Other.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_Other.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_Other.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_Other.Cur_Money%type;
      v_card_fore_money      ASS_CARD_Other.Fore_Money%type;
      v_card_use_state       ASS_CARD_Other.Use_State%type;
      v_card_depr_method     ASS_CARD_Other.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_Other.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_Other.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '其他固定资产卡片计算折旧成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.depre_money, 0),
               nvl(t.add_depre_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.depr_method,'01'),
               nvl(t.acc_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_Other t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         v_i := v_i + 1 ;
         g_tab_card_ret(v_i).Naturs_Code      := '04'                     ;
         g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_ret(v_i).PRICE            := v_card_price             ;
         g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
         g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
         g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
         g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0;--处置申报已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then   
             g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0;--处置申报不冲减   
         else
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_card_add_depre_money *(-1);
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_Other t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_Other t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --卡片结果数据压栈
         v_j := v_j + 1 ;
         g_tab_card_source_ret(v_j).Naturs_Code      := '04'                     ;
         g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
         g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
         g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := rec.depre_money          ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
         g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
         g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
         g_tab_card_source_ret(v_j).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0;--处置申报已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0;--处置申报不冲减
         else
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := rec.depre_money *(-1);
         end if;

        end loop;

     end if;


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_price           :=0;
         v_card_now_depre_money :=0;
         v_card_add_depre_money :=0;
         v_card_add_depre_month :=0;
         v_card_cur_money       :=0;
         v_card_fore_money      :=0;
         v_BACK_ADD_DEPRE_MONEY :=0;

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}折旧方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_DEPRE_MONTH >= g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;

                 --计算本月折旧
                 if g_tab_card_source(i).ADD_DEPRE_MONTH + 1 =  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12 then
                     g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                 else
                     --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                    /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                     - g_tab_card_source(i).FORE_MONEY
                                                                     )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                   ,2);*/

                     g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).CUR_MONEY
                                                                     )/(  g_tab_card_source(i).ACC_DEPRE_AMOUNT*12
                                                                        - g_tab_card_source(i).ADD_DEPRE_MONTH
                                                                       )
                                                                   ,2);
                     if g_tab_card_source(i).NOW_DEPRE_MONEY > g_tab_card_source(i).CUR_MONEY then
                        g_tab_card_source(i).NOW_DEPRE_MONEY := g_tab_card_source(i).CUR_MONEY;
                     end if;
                 end if;

                 --计算累计折旧月份
                 g_tab_card_source(i).ADD_DEPRE_MONTH :=  g_tab_card_source(i).ADD_DEPRE_MONTH + 1;

                 --计算累计折旧
                 g_tab_card_source(i).ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY
                                                         +g_tab_card_source(i).NOW_DEPRE_MONEY;

                 if   g_tab_card_source(i).ADD_DEPRE_MONEY
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧维护不正确!';
                    return;
                 end if;

                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;



                 /*********************由于调用均为减少业务**********************************
                 if  g_tab_card_source(i).USE_STATE in('6','7') then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);
                 end if;
                 ****************************************************************************/

                 --计算冲减累计折旧
                 g_tab_card_source(i).BACK_ADD_DEPRE_MONEY :=  g_tab_card_source(i).ADD_DEPRE_MONEY * (-1);

             end if; --<<平均年限法>>

             --如果为处置申报，如果存在本期折旧为0，原因：处置申报已提折旧，本次为处置业务
             if g_tab_card_source(i).USE_STATE = '6' then

                i_count := 0 ;

                select count(1)
                  into i_count
                  from ass_card_other t
                 where t.group_id    = prm_group_id
                   and t.hos_id      = prm_hos_id
                   and t.copy_code   = prm_copy_code
                   and t.ass_card_no = prm_ass_card_no
                   and nvl(to_char(t.apply_date  ,'YYYYMM'),'000000') = prm_acc_year || prm_acc_month
                 ;

                 if i_count > 0 then
                    g_tab_card_source(i).NOW_DEPRE_MONEY := 0;
                    g_tab_card_source(i).BACK_ADD_DEPRE_MONEY := 0 ;
                 end if;
             end if;

             --卡片结果数据压栈
             v_j := v_j + 1 ;
             g_tab_card_source_ret(v_j).Naturs_Code      := '04'                                ;
             g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no                     ;
             g_tab_card_source_ret(v_j).SOURCE_ID        := g_tab_card_source(i).SOURCE_ID      ;
             g_tab_card_source_ret(v_j).PRICE            := g_tab_card_source(i).PRICE          ;
             g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := g_tab_card_source(i).NOW_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := g_tab_card_source(i).ADD_DEPRE_MONEY;
             g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := g_tab_card_source(i).ADD_DEPRE_MONTH;
             g_tab_card_source_ret(v_j).CUR_MONEY        := g_tab_card_source(i).CUR_MONEY;
             g_tab_card_source_ret(v_j).FORE_MONEY       := g_tab_card_source(i).FORE_MONEY;
             g_tab_card_source_ret(v_j).USE_STATE        := g_tab_card_source(i).USE_STATE;
             g_tab_card_source_ret(v_j).DEPRE_METHOD     := g_tab_card_source(i).DEPRE_METHOD;
             g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
             g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;

             --计算卡片压栈数据
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_DEPRE_MONEY;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_DEPRE_MONEY;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_DEPRE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_DEPRE_MONEY;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).ACC_DEPRE_AMOUNT;
         end loop;

         --卡片结果数据压栈
         v_i := v_i + 1 ;
         g_tab_card_ret(v_i).Naturs_Code      := '04'                     ;
         g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_ret(v_i).PRICE            := v_card_price             ;
         g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := v_card_now_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
         g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
         g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
         g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;
         g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY  ;

     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片折旧计提失败！'||SQLERRM;

   END prc_CalcDepreOtherSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageOtherSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageOtherSingle( prm_group_id          IN   NUMBER         --集团
                                      ,prm_hos_id            IN   NUMBER         --医院
                                      ,prm_copy_code         IN   VARCHAR2       --账套
                                      ,prm_acc_year          IN   VARCHAR2       --年度
                                      ,prm_acc_month         IN   VARCHAR2       --月份
                                      ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                      ,prm_AppCode           Out  Number         --执行代码
                                      ,prm_ErrTxt            Out  Varchar2       --错误信息
                                    )
   IS
     --变量定义
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在

     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_Other.Price%type            ;
     v_depre_money          ASS_CARD_Other.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Other.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Other.Fore_Money%type       ;
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;

     v_price_source         ASS_CARD_Other.Price%type            ;
     v_depre_money_source   ASS_CARD_Other.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Other.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Other.Fore_Money%type       ;
     v_Is_Manage_Depre      ASS_CARD_Other.Is_Manage_Depre%type  ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '其他固定资产卡片完整性检查通过!';

     v_before_DEPRE_flag  := 0                            ;
     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Manage_Depre    := 0                            ;

     /*******************************在资产折旧时已做较验******************************************
     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_Other t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and nvl(t.use_state,0) <> 0
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_Other t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;
     *********************************************************************************************/
     
     /********************新制度修改：当月减少资产不计提折旧********************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ****************************************************************************************/
     
     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.manage_depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_manage_depre,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Manage_Depre
         from ASS_CARD_Other t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )--新制度修改：不包含本月处置卡片
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;

     if v_Is_Manage_Depre = 0 then
       return;
     end if;
     
     /****************************新制度修改：资产减少当月不计提折旧***********************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     ****************************************************************************************/

     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Other t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     --如果卡片中存在折旧，寻找折旧数据来源
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then --新制度修改：当月减少资产不计提折旧

        --检查上个月是否折旧
        select count(1)
          into v_before_DEPRE_flag
          from ASS_DEPRE_MANAGE_Other t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提分摊或期初累计分摊未维护!';
            return;
        end if;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageOtherSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_LoadManageOtherSingle
   || 功能描述 ：加载要计算分摊卡片并压入计算栈
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_LoadManageOtherSingle( prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_acc_year          IN   VARCHAR2       --年度
                                         ,prm_acc_month         IN   VARCHAR2       --月份
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                         )
     IS
     --定义变量
     CURSOR cur_ass_card_source  (  prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                   ,prm_para_05007        IN   VARCHAR2       --1：入账后计提 2:使用后计提
                                   )
       IS
          select t.Naturs_Code              --资产性质
                ,t.ass_card_no              --卡片号
                ,t.source_id                --资金来源
                ,t.price                    --原值
                ,t.manage_depre_money       --累计分摊
                ,t.cur_money                --现值
                ,t.fore_money               --残值
                ,t.add_depre_month          --累计折旧月份
                ,t.Use_State                --使用状态
                ,t.dispose_type             --处置类型
                ,t.apply_date               --处置申报日期
                ,t.dispose_date             --处置日期
                ,t.manage_depr_method       --分摊方法
                ,t.manage_depre_amount      --分摊年限
            from (
                    select a.Naturs_Code
                          ,a.ass_card_no
                          ,a.source_id
                          /*,nvl(b.prim_money,nvl(a.price,0)) as price
                          ,nvl(b.add_depre_amount,nvl(a.manage_depre_money,0)) as manage_depre_money
                          ,nvl(b.cur_money,nvl(a.cur_money,0)) as cur_money
                          ,nvl(b.fore_money,nvl(a.fore_money,0)) as fore_money
                          ,nvl(b.add_depre_month,nvl(a.add_manage_month,0)) as add_depre_month*/
                          ,nvl(a.price,0) as price
                          ,nvl(a.manage_depre_money,0) as manage_depre_money
                          ,nvl(a.cur_money,0) as cur_money
                          ,nvl(a.fore_money,0) as fore_money
                          ,nvl(a.add_manage_month,0) as add_depre_month
                          ,a.Use_State
                          ,a.dispose_type
                          ,a.apply_date
                          ,a.dispose_date
                          ,nvl(a.manage_depr_method,'01') as manage_depr_method
                          ,nvl(a.manage_depre_amount,0) as manage_depre_amount
                       from (
                              select  t1.group_id
                                     ,t1.hos_id
                                     ,t1.copy_code
                                     ,'04' as Naturs_Code
                                     ,t1.ass_card_no
                                     ,t2.source_id
                                     ,nvl(t2.price,0) as price
                                     ,nvl(t2.manage_depre_money,0) as manage_depre_money
                                     ,nvl(t2.cur_money,0) as cur_money
                                     ,nvl(t2.fore_money,0) as fore_money
                                     ,nvl(t1.add_manage_month,0) as add_manage_month
                                     ,t1.Use_State
                                     ,t1.dispose_type
                                     ,t1.apply_date
                                     ,t1.dispose_date
                                     ,nvl(t1.manage_depr_method,'01') as manage_depr_method
                                     ,t1.manage_depre_amount
                                from ASS_CARD_Other t1
                                left join ASS_RESOURCE_Other t2
                                  on t1.group_id = t2.group_id
                                 and t1.hos_id = t2.hos_id
                                 and t1.copy_code = t2.copy_code
                                 and t1.ass_card_no = t2.ass_card_no
                                 and t2.source_id = t2.source_id
                                where t1.group_id      =  prm_group_id
                                  and t1.hos_id         =  prm_hos_id
                                  and t1.copy_code      =  prm_copy_code
                                  and (   (prm_para_05007 ='1' and to_char(t1.in_date ,'YYYYMM') < prm_acc_year||prm_acc_month)
                                       or (prm_para_05007 ='2' and to_char(t1.run_date,'YYYYMM') < prm_acc_year||prm_acc_month)
                                      )
                                  and nvl(t1.is_manage_depre,0)  =  1                              --是否分摊
                                   and (   (nvl(t1.use_state,0) <> 0  and  nvl(t1.use_state,0) <> 6 and nvl(t1.use_state,0) <> 7)
                                        or (nvl(t1.use_state,0) = 6 and to_char(t1.apply_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                        or (nvl(t1.use_state,0) = 7 and to_char(t1.dispose_date,'YYYYMM') >= prm_acc_year||prm_acc_month)
                                        )
                                  and t1.ass_card_no             = prm_ass_card_no                  --修改
                                  and t2.ass_card_no             = prm_ass_card_no                  --修改
                                  and t1.add_depre_month         < t1.manage_depre_amount *12
                           ) a
                     /*left join (select t3.group_id
                                      ,t3.hos_id
                                      ,t3.copy_code
                                      ,t3.DEPRE_YEAR
                                      ,t3.depre_month
                                      ,t3.ass_card_no
                                      ,t3.source_id
                                      ,sum(nvl(t3.prim_money,0)) as prim_money
                                      ,sum(nvl(t3.add_depre_amount,0)) as add_depre_amount
                                      ,sum(nvl(t3.cur_money,0)) as cur_money
                                      ,sum(nvl(t3.fore_money,0)) as fore_money
                                      ,min(nvl(t3.add_depre_month,0)) as add_depre_month
                                 from ASS_DEPRE_MANAGE_Other t3
                                where t3.group_id    = prm_group_id
                                  and t3.hos_id      = prm_hos_id
                                  and t3.copy_code   = prm_copy_code
                                  and t3.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                                 else prm_acc_year
                                             end
                                           )
                                  and t3.depre_month = (case when prm_acc_month = '01' then '12'
                                                 else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                             end
                                            )
                                 and t3.ass_card_no = prm_ass_card_no
                                 group by  t3.group_id,t3.hos_id,t3.copy_code,t3.depre_year,t3.depre_month
                                          ,t3.ass_card_no,t3.source_id
                                 ) b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.ass_card_no = b.ass_card_no
                       and a.source_id = b.source_id
                       and b.ass_card_no = prm_ass_card_no    */               --修改
               ) t
            where (nvl(t.price,0) - nvl(t.manage_depre_money,0) - nvl(t.fore_money,0)) >= 0
            order by t.ass_card_no ,t.source_id
          ;

      /*********************************特别说明*************************************
       *
       * 经分析折旧计算比较严谨，计算出的折旧大于现值时给现值，超过年限全部计提
       *
       * 基于以上前提，因此此处将nvl(t.cur_money,0) > 0 改为 nvl(t.cur_money,0) >= 0
       *
       * 主要用于解决，当存在部分资金来源已折完，原值计算不正确的现象。
       *
       * 存在问题：累计折旧月份不准确，但减少业务表中不需要提供累计折旧月份
       *
      *******************************************************************************/

      --定义变量
      v_i                    integer                                ;
      v_Naturs_Code          ass_naturs.Naturs_Code%type            ;      --资产性质
      v_ASS_CARD_NO          ASS_CARD_Other.Ass_Card_No%type      ;      --卡片号
      V_PRICE                ASS_CARD_Other.Price%type            ;      --原值
      V_DEPRE_MONEY          ASS_CARD_Other.Depre_Money%type      ;      --累计折旧
      V_CUR_MONEY            ASS_CARD_Other.Cur_Money%type        ;      --现值
      V_FORE_MONEY           ASS_CARD_Other.Fore_Money%type       ;      --预留残值
      V_USE_STATE            ASS_CARD_Other.Use_State%type        ;      --使用状态
      V_DEPR_METHOD          ASS_CARD_Other.Depr_Method%type      ;      --折旧方法
      V_ACC_DEPRE_AMOUNT     ASS_CARD_Other.Acc_Depre_Amount%type ;      --折旧年限
      V_dispose_type         ASS_CARD_Other.Dispose_Type%type     ;      --处置类型
      v_dispose_date         ASS_CARD_Other.Dispose_Date%type     ;      --处置日期
      v_dis_apply_date       ASS_CARD_Other.Apply_Date%type       ;      --处置申报日期
      v_soure_id             ASS_RESOURCE_Other.Source_Id%type    ;      --资金来源
      v_add_depre_month      ASS_DEPRE_ACC_Other.Add_Depre_Month%type;   --累计折旧月数


      v_Push_State           integer                                ;      --是否压栈

      v_CHANGE_PRICE         ASS_CHANGE_DETAIL_Other.CHANGE_Price%type;  --原值调整金额
      --v_CHANGE_depre         ASS_DEPRE_DETAIL_Other.CHANGE_Depre%type;   --累计折旧调整金额

      is_Update              integer       ;
      i_pos                  integer       ;
   begin

     --初始化变量
     prm_AppCode     := def_OK                 ;
     prm_ErrTxt      := '其他固定资产卡片装载完成!';

     v_i             := g_tab_card_source.count()+ 1  ;

     v_Push_State    := 0                      ;
     is_Update       := 0                      ;
     i_pos           := 0                      ;

     open cur_ass_card_source(   prm_group_id
                               , prm_hos_id
                               , prm_copy_code
                               , prm_acc_year
                               , prm_acc_month
                               , prm_ass_card_no
                               , g_para_05007
                              );
      LOOP
          FETCH cur_ass_card_source INTO   v_Naturs_Code           --资产性质
                                          ,v_ASS_CARD_NO           --卡片号
                                          ,v_soure_id              --资金来源
                                          ,V_PRICE                 --原值
                                          ,V_DEPRE_MONEY           --累计折旧
                                          ,V_CUR_MONEY             --现值
                                          ,V_FORE_MONEY            --预留残值
                                          ,v_add_depre_month       --累计折旧月份
                                          ,V_USE_STATE             --使用状态
                                          ,V_dispose_type          --处置类型
                                          ,v_dis_apply_date        --处置申报日期
                                          ,v_dispose_date          --处置日期
                                          ,V_DEPR_METHOD           --折旧方法
                                          ,V_ACC_DEPRE_AMOUNT      --折旧年限
                                 ;

          IF cur_ass_card_source%NOTFOUND THEN
             if cur_ass_card_source%isopen then
                CLOSE cur_ass_card_source;
             end if;
             EXIT;
          END IF;

          --初始化压栈
          v_Push_State := 1 ;

          /*******************************************
          处置类型说明：
          11:报废     12:报损(盘亏)
          21:出售     22:出让       23:转让   24:置换
          31:无偿调拨 32：有偿调拨  33:捐赠
          41:退账
          51:改造
          ********************************************/

          --如果资产为待处置 判断本月是否需要计算
          if V_USE_STATE = 6 then
             --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                V_USE_STATE  := 1 ;
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
             if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                v_Push_State := 1 ;
             end if;

             --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
             if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                v_Push_State := 0 ;
             end if;
          end if;

          --如果资产为已处置 判断本月是否需要计算
          if V_USE_STATE = 7 then
            --直接做的处置记录，没有申报进 或 申报日期与处置日期在同一个月 或申报日期 > 当前折旧年月
            if    nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') > prm_acc_year||prm_acc_month
              then
               if   nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = '000000'
                 or nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') = nvl(to_char(v_dispose_date  ,'YYYYMM'),'000000')
               then
                   --如果处置年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dispose_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dispose_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dispose_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               else
                   --如果处置申报年月 > 当前折旧年月 ,需要恢复为正常状态，并且压栈计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') >  prm_acc_year||prm_acc_month then
                      V_USE_STATE  := 1 ;
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 = 当前折旧年月 ,需要计算本月折旧，并生成本月冲减折旧
                   if to_char(v_dis_apply_date,'YYYYMM') =  prm_acc_year||prm_acc_month then
                      v_Push_State := 1 ;
                   end if;

                   --如果处置申报年月 < 当前折旧年月 ,需要计算本月不计提折旧
                   if to_char(v_dis_apply_date,'YYYYMM') < prm_acc_year||prm_acc_month then
                      v_Push_State := 0 ;
                   end if;
               end if;
            else   --存在申报单时，由于在申报时已处理，就不能重复处理了
               if nvl(to_char(v_dis_apply_date,'YYYYMM'),'000000') =  prm_acc_year||prm_acc_month then
                  v_Push_State := 1 ;
               else
                  v_Push_State := 0 ;
               end if;
            end if;
          end if;--<<已处置>>

          /*--读取本月原值变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_PRICE,0))
              into v_CHANGE_PRICE
              from ASS_CHANGE_SOURCE_Other t1
              left join ASS_CHANGE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.CHANGE_date,'YYYYMM') > prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_PRICE := 0;
          end;

          if v_CHANGE_PRICE <> 0 then
             V_PRICE       := V_PRICE - v_CHANGE_PRICE;                          --重新计算原值
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;*/

          /************************ 分摊不提供累计分摊变动 ******************************
          --读取本月累计折旧变动记录，还原折旧月份原值、累计折旧、现值、残值
          begin
            select sum(nvl(t1.CHANGE_depre,0))
              into v_CHANGE_depre
              from ASS_DEPRE_SOURCE_Other t1
              left join ASS_DEPRE_Other t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = v_ASS_CARD_NO
               and t1.source_id   = v_soure_id
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;
          EXCEPTION
             WHEN OTHERS THEN
               v_CHANGE_depre := 0;
          end;

          if v_CHANGE_depre <> 0 then
             V_DEPRE_MONEY := V_DEPRE_MONEY - v_CHANGE_depre        ;            --重新计算累计折旧
             V_CUR_MONEY   := V_PRICE - V_DEPRE_MONEY - V_FORE_MONEY;            --重新计算现值
          end if;
          **********************************************************************************/

          if v_Push_State = 1 then
              is_Update       := 0                      ;
              i_pos           := 0                      ;
              for i in 1..g_tab_card_source.count() loop
                 if (    g_tab_card_source(i).Naturs_Code = v_Naturs_Code
                    and g_tab_card_source(i).ASS_CARD_NO = v_ASS_CARD_NO
                    and g_tab_card_source(i).SOURCE_ID   = v_soure_id
                   ) then
                     is_Update       := 1                      ;
                     i_pos           := i                      ;
                     exit;
                 end if;
              end loop;--<<循环压栈>>

              if (    is_Update = 1 ) then

                     g_tab_card_source(i_pos).NOW_MANAGE_DEPRE := 0                  ;      --本次分摊
                     g_tab_card_source(i_pos).ADD_MANAGE_DEPRE := V_DEPRE_MONEY      ;      --累计分摊
                     g_tab_card_source(i_pos).ADD_MANAGE_MONTH := V_ADD_DEPRE_MONTH  ;      --累计分摊月份
                     g_tab_card_source(i_pos).MANAGE_DEPRE_METHOD := V_DEPR_METHOD   ;      --分摊方法
                     g_tab_card_source(i_pos).MANAGE_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT ;   --分摊年限
                     g_tab_card_source(i_pos).BACK_ADD_MANAGE_DEPRE := 0                ;   --冲累计分摊

                else --不折旧，但分摊，需压新计算栈
                     g_tab_card_source(v_i).Naturs_Code      := v_Naturs_Code         ;      --资产性质
                     g_tab_card_source(v_i).ASS_CARD_NO      := v_ASS_CARD_NO         ;      --卡片号
                     g_tab_card_source(v_i).SOURCE_ID        := v_soure_id            ;      --资金来源
                     g_tab_card_source(v_i).PRICE            := V_PRICE               ;      --原值
                     g_tab_card_source(v_i).NOW_MANAGE_DEPRE := 0                     ;      --本月分摊
                     g_tab_card_source(v_i).ADD_MANAGE_DEPRE := V_ADD_DEPRE_MONTH     ;      --累计分摊
                     g_tab_card_source(v_i).CUR_MONEY        := V_CUR_MONEY           ;      --现值
                     g_tab_card_source(v_i).FORE_MONEY       := V_FORE_MONEY          ;      --预留残值
                     g_tab_card_source(v_i).ADD_MANAGE_MONTH := V_ADD_DEPRE_MONTH     ;      --累计分摊月份
                     g_tab_card_source(v_i).USE_STATE        := V_USE_STATE           ;      --使用状态
                     g_tab_card_source(v_i).MANAGE_DEPRE_METHOD := V_DEPR_METHOD      ;      --分摊方法
                     g_tab_card_source(v_i).MANAGE_DEPRE_AMOUNT := V_ACC_DEPRE_AMOUNT ;      --分摊年限
                     g_tab_card_source(v_i).BACK_ADD_MANAGE_DEPRE:=0                  ;      --冲累计分摊

                     v_i := v_i + 1 ;
                end if;
         end if;

      END LOOP;

      if cur_ass_card_source%isopen then
         CLOSE cur_ass_card_source;
      end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片装载失败！'||SQLERRM;

   END prc_LoadManageOtherSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageOtherSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageOtherSingle(  prm_group_id          IN   NUMBER         --集团
                                        ,prm_hos_id            IN   NUMBER         --医院
                                        ,prm_copy_code         IN   VARCHAR2       --账套
                                        ,prm_acc_year          IN   VARCHAR2       --年度
                                        ,prm_acc_month         IN   VARCHAR2       --月份
                                        ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                        ,prm_AppCode           Out  Number         --执行代码
                                        ,prm_ErrTxt            Out  Varchar2       --错误信息
                                      )
   IS

      --定义变量
      v_card_price           ASS_CARD_Other.Price%type;
      v_card_now_depre_money ASS_CARD_Other.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_Other.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_Other.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_Other.Cur_Money%type;
      v_card_fore_money      ASS_CARD_Other.Fore_Money%type;
      v_card_use_state       ASS_CARD_Other.Use_State%type;
      v_card_depr_method     ASS_CARD_Other.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_Other.Acc_Depre_Amount%type;
      v_BACK_ADD_DEPRE_MONEY ASS_CARD_Other.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈

      is_Update              integer       ;
      i_pos                  integer       ;
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '其他固定资产卡片计算分摊成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;
     is_Update       := 0                                       ;
     i_pos           := 0                                       ;

     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.manage_depre_money, 0),
               nvl(t.add_manage_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.manage_depr_method,'01'),
               nvl(t.manage_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_Other t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         is_Update       := 0   ;
         i_pos           := 0   ;
         for i in 1..g_tab_card_ret.count() loop
             if (    g_tab_card_ret(i).Naturs_Code = '04'
                and g_tab_card_ret(i).ASS_CARD_NO = prm_ass_card_no
               ) then

                is_Update  := 1  ;
                i_pos      := i  ;
                exit;
             end if;
         end loop;

         if ( is_Update = 1 ) then
             g_tab_card_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_DEPRE := v_card_add_depre_money      ;      --累计分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
             g_tab_card_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
             g_tab_card_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0; --处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0;--处置申报不冲减   
             else
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money *(-1); --冲累计分摊
             end if;

         else --不折旧，但分摊，需压新计算栈
             v_i := v_i + 1 ;
             g_tab_card_ret(v_i).Naturs_Code      := '04'                     ;
             g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
             g_tab_card_ret(v_i).PRICE            := v_card_price             ;
             g_tab_card_ret(v_i).NOW_MANAGE_DEPRE := 0                        ;
             g_tab_card_ret(v_i).ADD_MANAGE_DEPRE := v_card_add_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
             g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
             g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
             g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0;--处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0;--处置申报不冲减  
             else
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money *(-1);
             end if;
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_Other t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.manage_depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_Other t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --资金来源结果数据压栈
          is_Update := 0   ;
          i_pos     := 0   ;
          for i in 1..g_tab_card_source_ret.count() loop
              if (    g_tab_card_source_ret(i).Naturs_Code = '04'
                  and g_tab_card_source_ret(i).ASS_CARD_NO = prm_ass_card_no
                  and g_tab_card_source_ret(i).source_id   = rec.source_id
                 ) then
               is_Update := 1  ;
               i_pos     := i  ;
               exit;
             end if;
          end loop;--<<循环压栈 g_tab_card_source_ret>>

          if ( is_Update = 1 ) then
               g_tab_card_source_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_DEPRE := rec.depre_money             ;      --累计分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限

               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0  ;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0  ;--处置申报不冲减
               else
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := rec.depre_money *(-1)  ;      --冲累计分摊
               end if;
           else
               v_j := v_j + 1 ;
               g_tab_card_source_ret(v_j).Naturs_Code      := '04'                     ;
               g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
               g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
               g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
               g_tab_card_source_ret(v_j).NOW_MANAGE_DEPRE := 0                        ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_DEPRE := rec.depre_money          ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
               g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
               g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
               g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;

               if  v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                   g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := 0;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                   g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := 0;--处置申报不冲减
               else
                   g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := rec.depre_money *(-1);
               end if;
           end if;
        end loop;--<<循环资金来源游标>>
     end if;  --<<计算栈中无数据 g_tab_card_source>>


     --如果计算栈中有数据，则表明需要计算折旧，返回计算后的数据
     if g_tab_card_source.count() > 0  then

         --初始化变量
         v_card_price           :=0;
         v_card_now_depre_money :=0;
         v_card_add_depre_money :=0;
         v_card_add_depre_month :=0;
         v_card_cur_money       :=0;
         v_card_fore_money      :=0;
         v_BACK_ADD_DEPRE_MONEY :=0;

         --计算折旧
         for i in 1..g_tab_card_source.count() loop

             if g_tab_card_source(i).MANAGE_DEPRE_METHOD <> '01' then
                 prm_AppCode := def_WARNING;
                 prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}分摊方法不是平均年限法!';
                 return;
             end if;

             if g_tab_card_source(i).MANAGE_DEPRE_METHOD = '01' then --平均年限法

                 if g_tab_card_source(i).ADD_MANAGE_MONTH >= g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12 then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计折旧月数或折旧年限维护不正确!';
                    return;
                 end if;

                 --计算本月折旧
                 if g_tab_card_source(i).ADD_MANAGE_MONTH + 1 =  g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12 then
                     g_tab_card_source(i).NOW_MANAGE_DEPRE :=    g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY
                                                               ;
                 else
                     --计算本次折旧 计算公式:本期折旧 = 现值/(折旧年限*12 - 累计折旧月数）
                    /* g_tab_card_source(i).NOW_DEPRE_MONEY :=  ROUND((  g_tab_card_source(i).PRICE
                                                                     - g_tab_card_source(i).FORE_MONEY
                                                                     )/(g_tab_card_source(i).ACC_DEPRE_AMOUNT*12)
                                                                   ,2);*/

                     g_tab_card_source(i).NOW_MANAGE_DEPRE := ROUND(((  g_tab_card_source(i).PRICE
                                                                      - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                                      - g_tab_card_source(i).FORE_MONEY
                                                                      )
                                                                     )/(  g_tab_card_source(i).MANAGE_DEPRE_AMOUNT*12
                                                                        - g_tab_card_source(i).ADD_MANAGE_MONTH
                                                                       )
                                                                   ,2);
                     if g_tab_card_source(i).NOW_MANAGE_DEPRE >( g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY
                                                               ) then
                        g_tab_card_source(i).NOW_MANAGE_DEPRE := g_tab_card_source(i).PRICE
                                                               - g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                               - g_tab_card_source(i).FORE_MONEY;
                     end if;
                 end if;

                 --计算累计折旧月份
                 g_tab_card_source(i).ADD_MANAGE_MONTH :=  g_tab_card_source(i).ADD_MANAGE_MONTH + 1;

                 --计算累计折旧
                 g_tab_card_source(i).ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE
                                                          +g_tab_card_source(i).NOW_MANAGE_DEPRE;

                 if   g_tab_card_source(i).ADD_MANAGE_DEPRE
                    > (g_tab_card_source(i).PRICE -  g_tab_card_source(i).FORE_MONEY ) then
                    prm_AppCode := def_WARNING;
                    prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}累计分摊维护不正确!';
                    return;
                 end if;

                 /**************************现值只有计算折旧才会改变****************************
                 --计算资产现值
                 g_tab_card_source(i).CUR_MONEY :=   g_tab_card_source(i).PRICE
                                                   - g_tab_card_source(i).ADD_DEPRE_MONEY
                                                   - g_tab_card_source(i).FORE_MONEY;
                 ******************************************************************************/



                 /***************************由于调用仅为减少业务*******************************
                 if  g_tab_card_source(i).USE_STATE in('6','7') then
                     --计算冲减累计折旧
                     g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE * (-1);
                 end if;
                 ********************************************************************************/

                 g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE :=  g_tab_card_source(i).ADD_MANAGE_DEPRE * (-1);
             end if; --<<平均年限法>>

             --如果为处置申报，如果存在本期折旧为0，原因：处置申报已提折旧，本次为处置业务
             if g_tab_card_source(i).USE_STATE = '6' then

                i_count := 0 ;

                select count(1)
                  into i_count
                  from ass_card_other t
                 where t.group_id    = prm_group_id
                   and t.hos_id      = prm_hos_id
                   and t.copy_code   = prm_copy_code
                   and t.ass_card_no = prm_ass_card_no
                   and nvl(to_char(t.apply_date  ,'YYYYMM'),'000000') = prm_acc_year || prm_acc_month
                 ;

                 if i_count > 0 then
                    g_tab_card_source(i).NOW_MANAGE_DEPRE      := 0;
                    g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE := 0 ;
                 end if;
             end if;

             --资金来源结果数据压栈
             is_Update := 0   ;
             i_pos     := 0   ;
             for m in 1..g_tab_card_source_ret.count() loop
                 if (    g_tab_card_source_ret(m).Naturs_Code = '04'
                    and g_tab_card_source_ret(m).ASS_CARD_NO = prm_ass_card_no
                    and g_tab_card_source_ret(m).SOURCE_ID   = g_tab_card_source(i).SOURCE_ID
                   ) then

                   is_Update := 1   ;
                   i_pos     := m   ;
                   exit;

                 end if;
             end loop;--<<资金来源循环压栈>>

             if (  is_Update = 1 ) then

               g_tab_card_source_ret(i_pos).NOW_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).NOW_MANAGE_DEPRE       ;--本次分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).ADD_MANAGE_DEPRE       ;--累计分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_MONTH :=
                                                 g_tab_card_source(i).ADD_MANAGE_MONTH       ;--累计分摊月份
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_METHOD :=
                                                 g_tab_card_source(i).MANAGE_DEPRE_METHOD    ;--分摊方法
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_AMOUNT :=
                                                 g_tab_card_source(i).MANAGE_DEPRE_AMOUNT    ;--分摊年限
               g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE :=
                                                 g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE  ;--冲累计分摊

             else
               v_j := v_j + 1 ;
               g_tab_card_source_ret(v_j).Naturs_Code           := '04'                                      ;
               g_tab_card_source_ret(v_j).ASS_CARD_NO           := prm_ass_card_no                           ;
               g_tab_card_source_ret(v_j).SOURCE_ID             := g_tab_card_source(i).SOURCE_ID            ;
               g_tab_card_source_ret(v_j).PRICE                 := g_tab_card_source(i).PRICE                ;
               g_tab_card_source_ret(v_j).NOW_MANAGE_DEPRE      := g_tab_card_source(i).NOW_MANAGE_DEPRE     ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_DEPRE      := g_tab_card_source(i).ADD_MANAGE_DEPRE     ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_MONTH      := g_tab_card_source(i).ADD_MANAGE_MONTH     ;
               g_tab_card_source_ret(v_j).CUR_MONEY             := g_tab_card_source(i).CUR_MONEY            ;
               g_tab_card_source_ret(v_j).FORE_MONEY            := g_tab_card_source(i).FORE_MONEY           ;
               g_tab_card_source_ret(v_j).USE_STATE             := g_tab_card_source(i).USE_STATE            ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_METHOD   := g_tab_card_source(i).MANAGE_DEPRE_METHOD  ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_AMOUNT   := g_tab_card_source(i).MANAGE_DEPRE_AMOUNT  ;
               g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE;
             end if;
             --计算卡片压栈数据
             v_card_price       := v_card_price       + g_tab_card_source(i).price;
             v_card_now_depre_money := v_card_now_depre_money + g_tab_card_source(i).NOW_MANAGE_DEPRE;
             v_card_add_depre_money := v_card_add_depre_money + g_tab_card_source(i).ADD_MANAGE_DEPRE;
             v_card_cur_money   := v_card_cur_money   + g_tab_card_source(i).CUR_MONEY;
             v_card_fore_money  := v_card_fore_money  + g_tab_card_source(i).FORE_MONEY;
             v_card_add_depre_month := g_tab_card_source(i).ADD_MANAGE_MONTH;
             v_BACK_ADD_DEPRE_MONEY := v_BACK_ADD_DEPRE_MONEY + g_tab_card_source(i).BACK_ADD_MANAGE_DEPRE;
             v_card_use_state   := g_tab_card_source(i).USE_STATE;
             v_card_depr_method := g_tab_card_source(i).MANAGE_DEPRE_METHOD;
             v_ACC_DEPRE_AMOUNT := g_tab_card_source(i).MANAGE_DEPRE_AMOUNT;
         end loop;

         --卡片结果数据压栈
         is_Update := 0   ;
         i_pos     := 0   ;
         for n in 1..g_tab_card_ret.count() loop
           if (     g_tab_card_ret(n).Naturs_Code = '04'
                and g_tab_card_ret(n).ASS_CARD_NO = prm_ass_card_no
               ) then
               is_Update := 1   ;
               i_pos     := n   ;
          end if;
        end loop;

        if (    is_Update = 1  ) then

             g_tab_card_ret(i_pos).NOW_MANAGE_DEPRE      := v_card_now_depre_money   ;
             g_tab_card_ret(i_pos).ADD_MANAGE_DEPRE      := v_card_add_depre_money   ;
             g_tab_card_ret(i_pos).ADD_MANAGE_MONTH      := v_card_add_depre_month   ;
             g_tab_card_ret(i_pos).MANAGE_DEPRE_METHOD   := v_card_depr_method       ;
             g_tab_card_ret(i_pos).MANAGE_DEPRE_AMOUNT   := v_ACC_DEPRE_AMOUNT       ;
             g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_BACK_ADD_DEPRE_MONEY   ;
           else
             v_i := v_i + 1 ;
             g_tab_card_ret(v_i).Naturs_Code           := '04'                     ;
             g_tab_card_ret(v_i).ASS_CARD_NO           := prm_ass_card_no          ;
             g_tab_card_ret(v_i).PRICE                 := v_card_price             ;
             g_tab_card_ret(v_i).NOW_MANAGE_DEPRE      := v_card_now_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_DEPRE      := v_card_add_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_MONTH      := v_card_add_depre_month   ;
             g_tab_card_ret(v_i).CUR_MONEY             := v_card_cur_money         ;
             g_tab_card_ret(v_i).FORE_MONEY            := v_card_fore_money        ;
             g_tab_card_ret(v_i).USE_STATE             := v_card_use_state         ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_METHOD   := v_card_depr_method       ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_AMOUNT   := v_ACC_DEPRE_AMOUNT       ;
             g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_BACK_ADD_DEPRE_MONEY   ;
          end if;
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产卡片分摊计提失败！'||SQLERRM;

   END prc_CalcManageOtherSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcOtherPortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcOtherPortSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '其他固定资产计提成功!';



     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;



     --(3)计算折旧前完整性检查
     prc_ChkCardOtherSingle(  prm_group_id             --集团
                             ,prm_hos_id               --医院
                             ,prm_copy_code            --账套
                             ,prm_acc_year             --年度
                             ,prm_acc_month            --月份
                             ,prm_ass_card_no          --卡片号
                             ,prm_AppCode              --执行代码
                             ,prm_ErrTxt               --错误信息
                            );

     if prm_AppCode <> def_OK  then
        return;
     end if;

     --(4)装载卡片数据
     /*****************************************************************
     *
     * 新制度修改：资产当月减少时，不需要计提摊销
     *
     ******************************************************************/
     /*
     prc_LoadCardOtherSingle(prm_group_id               --集团
                            ,prm_hos_id                 --医院
                            ,prm_copy_code              --账套
                            ,prm_acc_year               --年度
                            ,prm_acc_month              --月份
                            ,prm_ass_card_no            --卡片号
                            ,prm_AppCode                --执行代码
                            ,prm_ErrTxt                 --错误信息
                           );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     */
     --(5)资产计提折旧
     prc_CalcDepreOtherSingle(  prm_group_id                --集团
                               ,prm_hos_id                  --医院
                               ,prm_copy_code               --账套
                               ,prm_acc_year               --年度
                               ,prm_acc_month              --月份
                               ,prm_ass_card_no             --卡片号
                               ,prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                              );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(7)计算分摊前完整性检查
     prc_ChkManageOtherSingle( prm_group_id             --集团
                              ,prm_hos_id               --医院
                              ,prm_copy_code            --账套
                              ,prm_acc_year             --年度
                              ,prm_acc_month            --月份
                              ,prm_ass_card_no          --卡片号
                              ,prm_AppCode              --执行代码
                              ,prm_ErrTxt               --错误信息
                              );

     if prm_AppCode <> def_OK  then
        return;
     end if;
     --(8)装载卡片入分摊计算栈
     /*****************************************************************
     *
     * 新制度修改：资产当月减少时，不需要计提摊销
     *
     ******************************************************************/
     /*
     prc_LoadManageOtherSingle(prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_ass_card_no            --卡片号
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

     if prm_AppCode <>  def_OK  then
        return;
     end if;
     */
     --(9)资产计提分摊计算
     prc_CalcManageOtherSingle(   prm_group_id                --集团
                                 ,prm_hos_id                  --医院
                                 ,prm_copy_code               --账套
                                 ,prm_acc_year               --年度
                                 ,prm_acc_month              --月份
                                 ,prm_ass_card_no             --卡片号
                                 ,prm_AppCode                 --执行代码
                                 ,prm_ErrTxt                  --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)组JSON串返回结果集
     prc_SpliceJsonSingle(  prm_JSON_STR                --返回JSON串
                           ,prm_AppCode                 --执行代码
                           ,prm_ErrTxt                  --错误信息
                          );

     if prm_AppCode <>  def_OK  then
        return;
     end if;


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他固定资产计提失败！'||SQLERRM;
   END prc_CalcOtherPortSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardInassetsSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardInassetsSingle(  prm_group_id          IN   NUMBER         --集团
                                        ,prm_hos_id            IN   NUMBER         --医院
                                        ,prm_copy_code         IN   VARCHAR2       --账套
                                        ,prm_acc_year          IN   VARCHAR2       --年度
                                        ,prm_acc_month         IN   VARCHAR2       --月份
                                        ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                        ,prm_AppCode           Out  Number         --执行代码
                                        ,prm_ErrTxt            Out  Varchar2       --错误信息
                                      )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

     /****************************无形资产减少当月不计提摊销******************************
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在
     v_CHANGE_depre_flag    integer                                ;      --查找是否存在变动折旧
     ************************************************************************************/

     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_Inassets.Price%type            ;
     v_depre_money          ASS_CARD_Inassets.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Inassets.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Inassets.Fore_Money%type       ;

     /****************************无形资产减少当月不计提摊销******************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     ************************************************************************************/

     v_price_source         ASS_CARD_Inassets.Price%type            ;
     v_depre_money_source   ASS_CARD_Inassets.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Inassets.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Inassets.Fore_Money%type       ;
     v_Is_Depr              ASS_CARD_Inassets.Is_Depr%type          ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '其他无形资产卡片完整性检查通过!';

     v_exist_flag         := 0                            ;
     /****************************无形资产减少当月不计提摊销******************************
     v_before_DEPRE_flag  := 0                            ;
     v_CHANGE_depre_flag  := 0                            ;
     ************************************************************************************/
     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Depr            := 0                            ;

     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_Inassets t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
             --or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
             or (nvl(t.use_state,0) = 6 )
             or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
             )
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_Inassets t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;

    /****************************无形资产减少当月不计提摊销******************************
    --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_depr,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Depr
         from ASS_CARD_Inassets t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;

     /****************************无形资产减少当月不计提摊销******************************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     ************************************************************************************/
     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Inassets t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     if v_Is_Depr = 0 then
       return;
     end if;

     --校验上月是否计提摊销
     v_exist_flag := 0 ;
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then

         --检查上个月是否摊销
        select count(1)
          into v_exist_flag
          from ASS_DEPRE_ACC_Inassets t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        if v_exist_flag = 0 then
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提摊销或期初累计摊销未维护!';
           return;
        end if;
     end if;

     /****************************无形资产减少当月不计提摊销******************************
     --如果卡片中存在折旧，寻找折旧数据来源
     if ((v_depre_money > 0 )
         and (  (g_para_05007   =  '1' and v_str_in_date  < prm_acc_year||prm_acc_month )
              or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year||prm_acc_month )
            )
        ) then

        --检查上个月是否折旧
        select count(1)
          into v_before_DEPRE_flag
          from ASS_DEPRE_ACC_Inassets t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            select count(1)
              into v_CHANGE_depre_flag
              from ASS_DEPRE_SOURCE_Inassets t1
              left join ASS_DEPRE_Inassets t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = prm_ass_card_no
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;

            if v_CHANGE_depre_flag = 0 then
                prm_AppCode := def_WARNING;
                prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
                return;
            end if;
        end if;
     end if;
     ************************************************************************************/
     --检查该卡片在本月之后是否累计折旧变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_DEPRE_DETAIL_Inassets t1
      left join ASS_DEPRE_Inassets t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过累计折旧变动!';
       return;
    end if;

     --检查该卡片在本月之后是否发生原值变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_CHANGE_DETAIL_Inassets t1
      left join ASS_CHANGE_Inassets t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.change_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过原值变动!';
       return;
    end if;

     --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_TRAN_STORE_DETAIL_Inassets t1
      left join ASS_TRAN_STORE_Inassets t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.tran_no = t2.tran_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（库库）!';
       return;
    end if;

     --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_TRAN_DEPT_DETAIL_Inassets t1
      left join ASS_TRAN_DEPT_Inassets t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.tran_no = t2.tran_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（科科）!';
       return;
    end if;

    --检查该卡片在本月之后是否库库转移业务
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_OUT_DETAIL_Inassets t1
      left join ASS_OUT_Inassets t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.out_no = t2.out_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过资产转移（库科）!';
       return;
    end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他无形资产卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardInassetsSingle;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreInassetsSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreInassetsSingle(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS

      --定义变量
      v_card_price           ASS_CARD_Inassets.Price%type;
      --v_card_now_depre_money ASS_CARD_Inassets.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_Inassets.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_Inassets.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_Inassets.Cur_Money%type;
      v_card_fore_money      ASS_CARD_Inassets.Fore_Money%type;
      v_card_use_state       ASS_CARD_Inassets.Use_State%type;
      v_card_depr_method     ASS_CARD_Inassets.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_Inassets.Acc_Depre_Amount%type;
      --v_BACK_ADD_DEPRE_MONEY ASS_CARD_Inassets.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '其他无形资产卡片计算折旧成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.depre_money, 0),
               nvl(t.add_depre_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.depr_method,'01'),
               nvl(t.acc_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_Inassets t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         v_i := v_i + 1 ;
         g_tab_card_ret(v_i).Naturs_Code      := '05'                     ;
         g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_ret(v_i).PRICE            := v_card_price             ;
         g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
         g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
         g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
         g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0;--处置申报已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0;--处置申报不冲减   
         else
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_card_add_depre_money * (-1);
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_Inassets t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_Inassets t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --卡片结果数据压栈
         v_j := v_j + 1 ;
         g_tab_card_source_ret(v_j).Naturs_Code      := '05'                     ;
         g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
         g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
         g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := rec.depre_money          ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
         g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
         g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
         g_tab_card_source_ret(v_j).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0 ;--处置申报已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0 ;--处置申报不冲减
         else
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := rec.depre_money *(-1) ;
         end if;

        end loop;

     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他无形资产卡片摊销计提失败！'||SQLERRM;

   END prc_CalcDepreInassetsSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageInassetsSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageInassetsSingle(  prm_group_id          IN   NUMBER         --集团
                                          ,prm_hos_id            IN   NUMBER         --医院
                                          ,prm_copy_code         IN   VARCHAR2       --账套
                                          ,prm_acc_year          IN   VARCHAR2       --年度
                                          ,prm_acc_month         IN   VARCHAR2       --月份
                                          ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                          ,prm_AppCode           Out  Number         --执行代码
                                          ,prm_ErrTxt            Out  Varchar2       --错误信息
                                        )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     /****************************无形资产减少当月不计提摊销******************************
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在
     *************************************************************************************/
     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_Inassets.Price%type            ;
     v_depre_money          ASS_CARD_Inassets.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Inassets.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Inassets.Fore_Money%type       ;

     /****************************无形资产减少当月不计提摊销******************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     *************************************************************************************/

     v_price_source         ASS_CARD_Inassets.Price%type            ;
     v_depre_money_source   ASS_CARD_Inassets.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Inassets.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Inassets.Fore_Money%type       ;
     v_Is_Manage_Depre      ASS_CARD_Inassets.Is_Manage_Depre%type  ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '其他无形资产卡片完整性检查通过!';

     /****************************无形资产减少当月不计提摊销******************************
     v_before_DEPRE_flag  := 0                            ;
     *************************************************************************************/

     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Manage_Depre    := 0                            ;

     /*******************************在资产折旧时已做较验******************************************
     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_Inassets t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and nvl(t.use_state,0) <> 0
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_Inassets t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;
     *********************************************************************************************/

     /****************************无形资产减少当月不计提摊销******************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     *************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.manage_depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_manage_depre,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Manage_Depre
         from ASS_CARD_Inassets t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;
     /****************************无形资产减少当月不计提摊销******************************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     *************************************************************************************/
     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Inassets t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     if v_Is_Manage_Depre = 0 then
       return;
     end if;

     --校验上月是否计提摊销
     v_exist_flag := 0 ;
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then

         --检查上个月是否摊销
        select count(1)
          into v_exist_flag
          from ASS_DEPRE_MANAGE_Inassets t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        if v_exist_flag = 0 then
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提分摊或期初累计分摊未维护!';
           return;
        end if;
     end if;
     /****************************无形资产减少当月不计提摊销******************************
     --如果卡片中存在折旧，寻找折旧数据来源
     if ((v_depre_money > 0 )
         and (  (g_para_05007   =  '1' and v_str_in_date  < prm_acc_year||prm_acc_month )
              or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year||prm_acc_month )
            )
        ) then

        --检查上个月是否折旧
        select count(1)
          into v_before_DEPRE_flag
          from ASS_DEPRE_MANAGE_Inassets t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提分摊或期初累计分摊未维护!';
            return;
        end if;
     end if;
     *************************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他无形资产卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageInassetsSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageInassetsSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageInassetsSingle(  prm_group_id          IN   NUMBER         --集团
                                          ,prm_hos_id            IN   NUMBER         --医院
                                          ,prm_copy_code         IN   VARCHAR2       --账套
                                          ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                          ,prm_AppCode           Out  Number         --执行代码
                                          ,prm_ErrTxt            Out  Varchar2       --错误信息
                                        )
   IS

      --定义变量
      v_card_price           ASS_CARD_Inassets.Price%type;
      --v_card_now_depre_money ASS_CARD_Inassets.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_Inassets.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_Inassets.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_Inassets.Cur_Money%type;
      v_card_fore_money      ASS_CARD_Inassets.Fore_Money%type;
      v_card_use_state       ASS_CARD_Inassets.Use_State%type;
      v_card_depr_method     ASS_CARD_Inassets.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_Inassets.Acc_Depre_Amount%type;
      --v_BACK_ADD_DEPRE_MONEY ASS_CARD_Inassets.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈

      is_Update              integer       ;
      i_pos                  integer       ;
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '其他无形资产卡片计算分摊成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;
     is_Update       := 0                                       ;
     i_pos           := 0                                       ;

     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.manage_depre_money, 0),
               nvl(t.add_manage_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.manage_depr_method,'01'),
               nvl(t.manage_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_Inassets t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         is_Update       := 0   ;
         i_pos           := 0   ;
         for i in 1..g_tab_card_ret.count() loop
             if (    g_tab_card_ret(i).Naturs_Code = '05'
                and g_tab_card_ret(i).ASS_CARD_NO = prm_ass_card_no
               ) then

                is_Update  := 1  ;
                i_pos      := i  ;
                exit;
             end if;
         end loop;

         if ( is_Update = 1 ) then
             g_tab_card_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_DEPRE := v_card_add_depre_money      ;      --累计分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
             g_tab_card_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
             g_tab_card_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then   
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
             else
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money *(-1) ;      --冲累计分摊
             end if;

         else --不折旧，但分摊，需压新计算栈
             v_i := v_i + 1 ;
             g_tab_card_ret(v_i).Naturs_Code      := '05'                     ;
             g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
             g_tab_card_ret(v_i).PRICE            := v_card_price             ;
             g_tab_card_ret(v_i).NOW_MANAGE_DEPRE := 0                        ;
             g_tab_card_ret(v_i).ADD_MANAGE_DEPRE := v_card_add_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
             g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
             g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
             g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
             else
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money*(-1) ;
             end if;
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_Inassets t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.manage_depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_Inassets t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --资金来源结果数据压栈
          is_Update := 0   ;
          i_pos     := 0   ;
          for i in 1..g_tab_card_source_ret.count() loop
              if (    g_tab_card_source_ret(i).Naturs_Code = '05'
                  and g_tab_card_source_ret(i).ASS_CARD_NO = prm_ass_card_no
                  and g_tab_card_source_ret(i).source_id   = rec.source_id
                 ) then
               is_Update := 1  ;
               i_pos     := i  ;
               exit;
             end if;
          end loop;--<<循环压栈 g_tab_card_source_ret>>

          if ( is_Update = 1 ) then
               g_tab_card_source_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_DEPRE := rec.depre_money             ;      --累计分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限

               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
               else
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money *(-1); --冲累计分摊
               end if;
           else
               v_j := v_j + 1 ;
               g_tab_card_source_ret(v_j).Naturs_Code      := '05'                     ;
               g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
               g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
               g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
               g_tab_card_source_ret(v_j).NOW_MANAGE_DEPRE := 0                        ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_DEPRE := rec.depre_money          ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
               g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
               g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
               g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;

               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
               else
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := rec.depre_money *(-1) ;
               end if;
           end if;
        end loop;--<<循环资金来源游标>>
     end if;  --<<计算栈中无数据 g_tab_card_source>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他无形资产卡片分摊计提失败！'||SQLERRM;

   END prc_CalcManageInassetsSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcInassetsPortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcInassetsPortSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '其他无形资产计提成功!';



     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;



     --(3)计算摊销前完整性检查
     prc_ChkCardInassetsSingle(  prm_group_id             --集团
                             ,prm_hos_id               --医院
                             ,prm_copy_code            --账套
                             ,prm_acc_year             --年度
                             ,prm_acc_month            --月份
                             ,prm_ass_card_no          --卡片号
                             ,prm_AppCode              --执行代码
                             ,prm_ErrTxt               --错误信息
                            );

     if prm_AppCode <> def_OK  then
        return;
     end if;

     --(4)装载卡片数据
     /*****************************************************************
     *
     * 无形资产当月减少时，不需要计提摊销
     *
     ******************************************************************/

     --(5)资产计提折旧
     prc_CalcDepreInassetsSingle(  prm_group_id                --集团
                               ,prm_hos_id                  --医院
                               ,prm_copy_code               --账套
                               ,prm_ass_card_no             --卡片号
                               ,prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                              );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(7)计算分摊前完整性检查
     prc_ChkManageInassetsSingle( prm_group_id             --集团
                              ,prm_hos_id               --医院
                              ,prm_copy_code            --账套
                              ,prm_acc_year             --年度
                              ,prm_acc_month            --月份
                              ,prm_ass_card_no          --卡片号
                              ,prm_AppCode              --执行代码
                              ,prm_ErrTxt               --错误信息
                              );

     if prm_AppCode <> def_OK  then
        return;
     end if;

     --(8)装载卡片入分摊计算栈
     /*****************************************************************
     *
     * 无形资产当月减少时，不需要计提摊销
     *
     ******************************************************************/

     --(9)资产计提分摊计算
     prc_CalcManageInassetsSingle(   prm_group_id                --集团
                                 ,prm_hos_id                  --医院
                                 ,prm_copy_code               --账套
                                 ,prm_ass_card_no             --卡片号
                                 ,prm_AppCode                 --执行代码
                                 ,prm_ErrTxt                  --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)组JSON串返回结果集
     prc_SpliceJsonSingle(  prm_JSON_STR                --返回JSON串
                           ,prm_AppCode                 --执行代码
                           ,prm_ErrTxt                  --错误信息
                          );

     if prm_AppCode <>  def_OK  then
        return;
     end if;


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '其他无形资产计提失败！'||SQLERRM;
   END prc_CalcInassetsPortSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkCardLandSingle
   || 功能描述 ：对卡片进行完整性检查
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkCardLandSingle( prm_group_id          IN   NUMBER         --集团
                                    ,prm_hos_id            IN   NUMBER         --医院
                                    ,prm_copy_code         IN   VARCHAR2       --账套
                                    ,prm_acc_year          IN   VARCHAR2       --年度
                                    ,prm_acc_month         IN   VARCHAR2       --月份
                                    ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                    ,prm_AppCode           Out  Number         --执行代码
                                    ,prm_ErrTxt            Out  Varchar2       --错误信息
                                  )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在

     /****************************无形资产减少当月不计提摊销******************************
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在
     v_CHANGE_depre_flag    integer                                ;      --查找是否存在变动折旧
     ************************************************************************************/

     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_Land.Price%type            ;
     v_depre_money          ASS_CARD_Land.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Land.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Land.Fore_Money%type       ;
     v_Is_Depr              ASS_CARD_Land.Is_Depr%type          ;

     /****************************无形资产减少当月不计提摊销******************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     ************************************************************************************/

     v_price_source         ASS_CARD_Land.Price%type            ;
     v_depre_money_source   ASS_CARD_Land.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Land.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Land.Fore_Money%type       ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '土地卡片完整性检查通过!';

     v_exist_flag         := 0                            ;
     /****************************无形资产减少当月不计提摊销******************************
     v_before_DEPRE_flag  := 0                            ;
     v_CHANGE_depre_flag  := 0                            ;
     ************************************************************************************/
     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Depr            := 0                            ;

     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_Land t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and nvl(t.use_state,0) <> 0
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_Land t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;

    /****************************无形资产减少当月不计提摊销******************************
    --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     ************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_depr,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Depr
         from ASS_CARD_Land t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_depr,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               --or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 6 )
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;

     /****************************无形资产减少当月不计提摊销******************************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     ************************************************************************************/
     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Land t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     if v_Is_Depr = 0 then
       return;
     end if;

     --校验上月是否计提摊销
     v_exist_flag := 0 ;
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then

         --检查上个月是否摊销
        select count(1)
          into v_exist_flag
          from ASS_DEPRE_ACC_Land t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        if v_exist_flag = 0 then
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提摊销或期初累计摊销未维护!';
           return;
        end if;
     end if;

     /****************************无形资产减少当月不计提摊销******************************
     --如果卡片中存在折旧，寻找折旧数据来源
     if ((v_depre_money > 0 )
         and (  (g_para_05007   =  '1' and v_str_in_date  < prm_acc_year||prm_acc_month )
              or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year||prm_acc_month )
            )
        ) then

        --检查上个月是否折旧
        select count(1)
          into v_before_DEPRE_flag
          from ASS_DEPRE_ACC_Land t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            select count(1)
              into v_CHANGE_depre_flag
              from ASS_DEPRE_SOURCE_Land t1
              left join ASS_DEPRE_Land t2
                on t1.group_id = t2.group_id
               and t1.hos_id = t2.hos_id
               and t1.copy_code = t2.copy_code
               and t1.CHANGE_no = t2.CHANGE_no
             where t1.group_id    = prm_group_id
               and t1.hos_id      = prm_hos_id
               and t1.copy_code   = prm_copy_code
               and t1.ass_card_no = prm_ass_card_no
               and to_char(t2.AUDIT_DATE,'YYYYMM') = prm_acc_year||prm_acc_month
               and t2.state = 2     --0:新建 1:审核 2:确认
             ;

            if v_CHANGE_depre_flag = 0 then
                prm_AppCode := def_WARNING;
                prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
                return;
            end if;
        end if;
     end if;
     ************************************************************************************/

     --检查该卡片在本月之后是否累计折旧变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_DEPRE_DETAIL_Land t1
      left join ASS_DEPRE_Land t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.audit_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过累计折旧变动!';
       return;
    end if;

     --检查该卡片在本月之后是否发生原值变动
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
      from ASS_CHANGE_DETAIL_Land t1
      left join ASS_CHANGE_Land t2
       on t1.group_id = t2.group_id
      and t1.hos_id  = t2.hos_id
      and t1.copy_code = t2.copy_code
      and t1.change_no = t2.change_no
     where t1.group_id = prm_group_id
       and t1.hos_id   = prm_hos_id
       and t1.copy_code = prm_copy_code
       and t1.ass_card_no = prm_ass_card_no
       and to_char(t2.change_date,'YYYYMM') > prm_acc_year||prm_acc_month
      ;

    if v_exist_flag > 1 then
       prm_AppCode := def_WARNING;
       prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'后发生过原值变动!';
       return;
    end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地卡片完整性检查失败！'||SQLERRM;

   END prc_ChkCardLandSingle;


   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreLandSingle
   || 功能描述 ：根据计算数据栈进行出栈计算折旧
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreLandSingle(  prm_group_id          IN   NUMBER         --集团
                                         ,prm_hos_id            IN   NUMBER         --医院
                                         ,prm_copy_code         IN   VARCHAR2       --账套
                                         ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                         ,prm_AppCode           Out  Number         --执行代码
                                         ,prm_ErrTxt            Out  Varchar2       --错误信息
                                       )
   IS

      --定义变量
      v_card_price           ASS_CARD_Land.Price%type;
      --v_card_now_depre_money ASS_CARD_Land.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_Land.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_Land.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_Land.Cur_Money%type;
      v_card_fore_money      ASS_CARD_Land.Fore_Money%type;
      v_card_use_state       ASS_CARD_Land.Use_State%type;
      v_card_depr_method     ASS_CARD_Land.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_Land.Acc_Depre_Amount%type;
      --v_BACK_ADD_DEPRE_MONEY ASS_CARD_Land.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '土地卡片计算折旧成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;


     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.depre_money, 0),
               nvl(t.add_depre_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.depr_method,'01'),
               nvl(t.acc_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_Land t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         v_i := v_i + 1 ;
         g_tab_card_ret(v_i).Naturs_Code      := '06'                     ;
         g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_ret(v_i).PRICE            := v_card_price             ;
         g_tab_card_ret(v_i).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONEY  := v_card_add_depre_money   ;
         g_tab_card_ret(v_i).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
         g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
         g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
         g_tab_card_ret(v_i).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_ret(v_i).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0;--处置申报已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := 0;--处置申报不冲减   
         else
            g_tab_card_ret(v_i).BACK_ADD_DEPRE_MONEY := v_card_add_depre_money * (-1);
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_Land t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_Land t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --卡片结果数据压栈
         v_j := v_j + 1 ;
         g_tab_card_source_ret(v_j).Naturs_Code      := '06'                     ;
         g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
         g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
         g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
         g_tab_card_source_ret(v_j).NOW_DEPRE_MONEY  := 0                        ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONEY  := rec.depre_money          ;
         g_tab_card_source_ret(v_j).ADD_DEPRE_MONTH  := v_card_add_depre_month   ;
         g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
         g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
         g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
         g_tab_card_source_ret(v_j).DEPRE_METHOD     := v_card_depr_method       ;
         g_tab_card_source_ret(v_j).ACC_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;

         if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0 ;--处置申报已冲减，不能重复冲减
         elsif g_bus_type = 'A' and  g_para_05104 = 0 then
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := 0 ;--处置申报不冲减
         else
            g_tab_card_source_ret(v_j).BACK_ADD_DEPRE_MONEY := rec.depre_money *(-1) ;
         end if;

        end loop;

     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地卡片摊销计提失败！'||SQLERRM;

   END prc_CalcDepreLandSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_ChkManageLandSingle
   || 功能描述 ：对卡片进行完整性检查(计算分摊)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_ChkManageLandSingle(  prm_group_id          IN   NUMBER         --集团
                                          ,prm_hos_id            IN   NUMBER         --医院
                                          ,prm_copy_code         IN   VARCHAR2       --账套
                                          ,prm_acc_year          IN   VARCHAR2       --年度
                                          ,prm_acc_month         IN   VARCHAR2       --月份
                                          ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                          ,prm_AppCode           Out  Number         --执行代码
                                          ,prm_ErrTxt            Out  Varchar2       --错误信息
                                        )
   IS
     --变量定义
     v_exist_flag           integer                                ;      --查找是否存在
     /****************************无形资产减少当月不计提摊销******************************
     v_before_DEPRE_flag    integer                                ;      --查找上月折旧是否存在
     *************************************************************************************/
     v_str_in_date          varchar2(6)                            ;
     v_str_run_date         varchar2(6)                            ;
     v_price                ASS_CARD_Land.Price%type            ;
     v_depre_money          ASS_CARD_Land.Depre_Money%type      ;
     v_Cur_Money            ASS_CARD_Land.Cur_Money%type        ;
     v_Fore_Money           ASS_CARD_Land.Fore_Money%type       ;

     /****************************无形资产减少当月不计提摊销******************************
     v_before_year          varchar2(4)                            ;
     v_before_month         varchar2(2)                            ;
     *************************************************************************************/

     v_price_source         ASS_CARD_Land.Price%type            ;
     v_depre_money_source   ASS_CARD_Land.Depre_Money%type      ;
     v_Cur_Money_source     ASS_CARD_Land.Cur_Money%type        ;
     v_Fore_Money_source    ASS_CARD_Land.Fore_Money%type       ;
     v_Is_Manage_Depre      ASS_CARD_Land.Is_Manage_Depre%type  ;
   begin
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '土地来源资产卡片完整性检查通过!';

     /****************************无形资产减少当月不计提摊销******************************
     v_before_DEPRE_flag  := 0                            ;
     *************************************************************************************/

     v_str_in_date        := 0                            ;
     v_str_run_date       := 0                            ;
     v_Is_Manage_Depre    := 0                            ;

     /*******************************在资产折旧时已做较验******************************************
     --检查资产是否入账
     select count(1)
       into v_exist_flag
       from ASS_CARD_Land t
      where t.group_id = prm_group_id
        and t.hos_id = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        and to_char(t.in_date ,'YYYYMM') <= prm_acc_year||prm_acc_month
        and nvl(t.use_state,0) <> 0
        ;

      if v_exist_flag = 0 then
         prm_AppCode := def_WARNING;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}在'||prm_acc_year||prm_acc_month||'前尚未入账!';
         return;
      end if;

     --资金来源完整性检查
     v_exist_flag:=0 ;

     select count(1)
       into v_exist_flag
       from ASS_RESOURCE_Land t
      where t.group_id  = prm_group_id
        and t.hos_id    = prm_hos_id
        and t.copy_code = prm_copy_code
        and t.ass_card_no = prm_ass_card_no
        ;

     if v_exist_flag = 0 then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
        return;
     end if;
     *********************************************************************************************/

     /****************************无形资产减少当月不计提摊销******************************
     --换算上两月的年月值
     if prm_acc_month = '02' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '12';
     elsif prm_acc_month = '01' then
        v_before_year  := to_char(to_number(prm_acc_year) - 1);
        v_before_month := '11';
     else
        v_before_year  := prm_acc_year;
        v_before_month := substr('00' || to_char(to_number(prm_acc_month)-2) ,-2);
     end if;
     *************************************************************************************/

     --校验新增资产不允许跨两月提折旧
     begin
       select to_char(t.in_date ,'YYYYMM')
             ,to_char(t.run_date,'YYYYMM')
             ,nvl(t.price,0)
             ,nvl(t.manage_depre_money,0)
             ,nvl(t.cur_money,0)
             ,nvl(t.fore_money,0)
             ,nvl(t.is_manage_depre,0)
         into v_str_in_date
             ,v_str_run_date
             ,v_price
             ,v_depre_money
             ,v_Cur_Money
             ,v_Fore_Money
             ,v_Is_Manage_Depre
         from ASS_CARD_Land t
        where t.group_id       = prm_group_id
          and t.hos_id         = prm_hos_id
          and t.copy_code      = prm_copy_code
          and t.ass_card_no    = prm_ass_card_no
          and nvl(t.is_manage_depre,0) = 1
          and (   (nvl(t.use_state,0) <> 0  and  nvl(t.use_state,0) <> 6 and nvl(t.use_state,0) <> 7)
               or (nvl(t.use_state,0) = 6 and to_char(t.apply_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               or (nvl(t.use_state,0) = 7 and to_char(t.dispose_date,'YYYYMM') > prm_acc_year||prm_acc_month)
               )
          ;
     EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NULL;
      WHEN TOO_MANY_ROWS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}存在重复!'||SQLERRM;
         return;
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}提取失败!'||SQLERRM;
         return;
     end;
     /****************************无形资产减少当月不计提摊销******************************
     if ((v_depre_money = 0 )
        and (  (g_para_05007   =  '1' and v_str_in_date  <= v_before_year || v_before_month)
             or(g_para_05007   =  '2' and v_str_run_date <= v_before_year || v_before_month)
            )
        ) then
        prm_AppCode := def_WARNING;
        prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提折旧或期初累计折旧未维护!';
        return;
     end if;
     *************************************************************************************/
     if v_price > 0 then --说明存在数据
         --校验卡片表与资金来源表数据一致性
         select sum(nvl(t.price,0)) as price
               ,sum(nvl(t.manage_depre_money,0)) as depre_money
               ,sum(nvl(t.cur_money,0)) as cur_money
               ,sum(nvl(t.fore_money,0)) as fore_money
            into v_price_source
                ,v_depre_money_source
                ,v_Cur_Money_source
                ,v_Fore_Money_source
           from ASS_RESOURCE_Land t
          where t.group_id       = prm_group_id
            and t.hos_id         = prm_hos_id
            and t.copy_code      = prm_copy_code
            and t.ass_card_no    = prm_ass_card_no
            ;

          if (   v_price       <> v_price_source
              or v_depre_money <> v_depre_money_source
              or v_Cur_Money   <> v_Cur_Money_source
              or v_Fore_Money  <> v_Fore_Money_source
              )  then

              prm_AppCode := def_WARNING;
              prm_ErrTxt := '卡片表与资金来源表中数据不一致!'||'卡片号{'||prm_ass_card_no||'}';
              return;
          end if;
     end if;

     if v_Is_Manage_Depre = 0 then
       return;
     end if;

     --校验上月是否计提摊销
     v_exist_flag := 0 ;
     if ( (g_para_05007    =  '1' and v_str_in_date  < prm_acc_year || prm_acc_month)
         or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year || prm_acc_month)
         ) then

         --检查上个月是否摊销
        select count(1)
          into v_exist_flag
          from ASS_DEPRE_MANAGE_Land t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        if v_exist_flag = 0 then
           prm_AppCode := def_WARNING;
           prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提分摊或期初累计分摊未维护!';
           return;
        end if;
     end if;
     /****************************无形资产减少当月不计提摊销******************************
     --如果卡片中存在折旧，寻找折旧数据来源
     if ((v_depre_money > 0 )
         and (  (g_para_05007   =  '1' and v_str_in_date  < prm_acc_year||prm_acc_month )
              or(g_para_05007   =  '2' and v_str_run_date < prm_acc_year||prm_acc_month )
            )
        ) then

        --检查上个月是否折旧
        select count(1)
          into v_before_DEPRE_flag
          from ASS_DEPRE_MANAGE_Land t
         where t.group_id  = prm_group_id
           and t.hos_id    = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           and t.DEPRE_YEAR  = (case when prm_acc_month = '01' then to_char(to_number(prm_acc_year) - 1)
                                     else prm_acc_year
                                 end
                                )
           and t.depre_month = (case when prm_acc_month = '01' then '12'
                                     else substr('00' || to_char(to_number(prm_acc_month)-1) ,-2)
                                end
                                )
           ;

        --如果上月没有折旧，检查是否存在累计折旧变动记录
        if v_before_DEPRE_flag = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}上月未计提分摊或期初累计分摊未维护!';
            return;
        end if;
     end if;
     *************************************************************************************/
   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地来源资产卡片完整性检查失败！'||SQLERRM;

   END prc_ChkManageLandSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcManageLandSingle
   || 功能描述 ：根据计算数据栈进行出栈计算分摊
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcManageLandSingle(  prm_group_id          IN   NUMBER         --集团
                                          ,prm_hos_id            IN   NUMBER         --医院
                                          ,prm_copy_code         IN   VARCHAR2       --账套
                                          ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                          ,prm_AppCode           Out  Number         --执行代码
                                          ,prm_ErrTxt            Out  Varchar2       --错误信息
                                        )
   IS

      --定义变量
      v_card_price           ASS_CARD_Land.Price%type;
      --v_card_now_depre_money ASS_CARD_Land.Depre_Money%type;
      v_card_add_depre_money ASS_CARD_Land.Depre_Money%type;
      v_card_add_depre_month ASS_CARD_Land.Add_Depre_Month%type;
      v_card_cur_money       ASS_CARD_Land.Cur_Money%type;
      v_card_fore_money      ASS_CARD_Land.Fore_Money%type;
      v_card_use_state       ASS_CARD_Land.Use_State%type;
      v_card_depr_method     ASS_CARD_Land.Depr_Method%type;
      v_ACC_DEPRE_AMOUNT     ASS_CARD_Land.Acc_Depre_Amount%type;
      --v_BACK_ADD_DEPRE_MONEY ASS_CARD_Land.Depre_Money%type;

      i_count                integer       ;

      v_i                    integer       ;     --卡片压栈
      v_j                    integer       ;     --资金来源压栈

      is_Update              integer       ;
      i_pos                  integer       ;
   begin

     --初始化变量
     prm_AppCode     := def_OK                                  ;
     prm_ErrTxt      := '土地卡片计算分摊成功!'             ;

     i_count         := 0                                       ;

     v_i             := g_tab_card_ret.count()                  ;
     v_j             := g_tab_card_source_ret.count()           ;
     is_Update       := 0                                       ;
     i_pos           := 0                                       ;

     --如果计算栈中无数据，则表明不需要计算折旧，返回卡片数据
     if g_tab_card_source.count() = 0  then
        select nvl(t.price, 0),
               nvl(t.manage_depre_money, 0),
               nvl(t.add_manage_month, 0),
               nvl(t.cur_money, 0),
               nvl(t.fore_money, 0),
               nvl(t.use_state,0),
               nvl(t.manage_depr_method,'01'),
               nvl(t.manage_depre_amount,0)
          into v_card_price,
               v_card_add_depre_money,
               v_card_add_depre_month,
               v_card_cur_money,
               v_card_fore_money,
               v_card_use_state ,
               v_card_depr_method,
               v_ACC_DEPRE_AMOUNT
          from ASS_CARD_Land t
         where t.group_id = prm_group_id
           and t.hos_id = prm_hos_id
           and t.copy_code = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

         --卡片结果数据压栈
         is_Update       := 0   ;
         i_pos           := 0   ;
         for i in 1..g_tab_card_ret.count() loop
             if (    g_tab_card_ret(i).Naturs_Code = '06'
                and g_tab_card_ret(i).ASS_CARD_NO = prm_ass_card_no
               ) then

                is_Update  := 1  ;
                i_pos      := i  ;
                exit;
             end if;
         end loop;

         if ( is_Update = 1 ) then
             g_tab_card_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_DEPRE := v_card_add_depre_money      ;      --累计分摊
             g_tab_card_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
             g_tab_card_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
             g_tab_card_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0 ;--处置申报不冲减
             else
                g_tab_card_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money *(-1) ;      --冲累计分摊
             end if;

         else --不折旧，但分摊，需压新计算栈
             v_i := v_i + 1 ;
             g_tab_card_ret(v_i).Naturs_Code      := '06'                     ;
             g_tab_card_ret(v_i).ASS_CARD_NO      := prm_ass_card_no          ;
             g_tab_card_ret(v_i).PRICE            := v_card_price             ;
             g_tab_card_ret(v_i).NOW_MANAGE_DEPRE := 0                        ;
             g_tab_card_ret(v_i).ADD_MANAGE_DEPRE := v_card_add_depre_money   ;
             g_tab_card_ret(v_i).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
             g_tab_card_ret(v_i).CUR_MONEY        := v_card_cur_money         ;
             g_tab_card_ret(v_i).FORE_MONEY       := v_card_fore_money        ;
             g_tab_card_ret(v_i).USE_STATE        := v_card_use_state         ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
             g_tab_card_ret(v_i).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;

             if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0;--处置申报已冲减，不能重复冲减
             elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := 0;--处置申报不冲减
             else
                g_tab_card_ret(v_i).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money*(-1) ;
             end if;
         end if;


        --获取资金来源
        select count(1)
          into i_count
          from ASS_RESOURCE_Land t
         where t.group_id    = prm_group_id
           and t.hos_id      = prm_hos_id
           and t.copy_code   = prm_copy_code
           and t.ass_card_no = prm_ass_card_no
           ;

        if i_count = 0 then
            prm_AppCode := def_WARNING;
            prm_ErrTxt := '卡片号{'||prm_ass_card_no||'}资金来源未维护!';
            return;
        end if;

        for rec in( select t.source_id,
                           nvl(t.price, 0) as price ,
                           nvl(t.manage_depre_money, 0) as depre_money,
                           nvl(t.cur_money, 0) as cur_money,
                           nvl(t.fore_money, 0) as fore_money
                      from ASS_RESOURCE_Land t
                     where t.group_id = prm_group_id
                       and t.hos_id = prm_hos_id
                       and t.copy_code = prm_copy_code
                       and t.ass_card_no = prm_ass_card_no
                     order by t.source_id) loop


         --资金来源结果数据压栈
          is_Update := 0   ;
          i_pos     := 0   ;
          for i in 1..g_tab_card_source_ret.count() loop
              if (    g_tab_card_source_ret(i).Naturs_Code = '06'
                  and g_tab_card_source_ret(i).ASS_CARD_NO = prm_ass_card_no
                  and g_tab_card_source_ret(i).source_id   = rec.source_id
                 ) then
               is_Update := 1  ;
               i_pos     := i  ;
               exit;
             end if;
          end loop;--<<循环压栈 g_tab_card_source_ret>>

          if ( is_Update = 1 ) then
               g_tab_card_source_ret(i_pos).NOW_MANAGE_DEPRE := 0                           ;      --本次分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_DEPRE := rec.depre_money             ;      --累计分摊
               g_tab_card_source_ret(i_pos).ADD_MANAGE_MONTH := v_card_add_depre_month      ;      --累计分摊月份
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_METHOD := v_card_depr_method       ;      --分摊方法
               g_tab_card_source_ret(i_pos).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT       ;      --分摊年限

               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := 0;--处置申报不冲减  
               else
                  g_tab_card_source_ret(i_pos).BACK_ADD_MANAGE_DEPRE := v_card_add_depre_money *(-1); --冲累计分摊
               end if;
           else
               v_j := v_j + 1 ;
               g_tab_card_source_ret(v_j).Naturs_Code      := '06'                     ;
               g_tab_card_source_ret(v_j).ASS_CARD_NO      := prm_ass_card_no          ;
               g_tab_card_source_ret(v_j).SOURCE_ID        := rec.source_id            ;
               g_tab_card_source_ret(v_j).PRICE            := rec.price                ;
               g_tab_card_source_ret(v_j).NOW_MANAGE_DEPRE := 0                        ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_DEPRE := rec.depre_money          ;
               g_tab_card_source_ret(v_j).ADD_MANAGE_MONTH := v_card_add_depre_month   ;
               g_tab_card_source_ret(v_j).CUR_MONEY        := rec.cur_money            ;
               g_tab_card_source_ret(v_j).FORE_MONEY       := rec.fore_money           ;
               g_tab_card_source_ret(v_j).USE_STATE        := v_card_use_state         ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_METHOD := v_card_depr_method    ;
               g_tab_card_source_ret(v_j).MANAGE_DEPRE_AMOUNT := v_ACC_DEPRE_AMOUNT    ;

               if v_card_use_state = '6' and g_para_05104 = 1 then  --新制度修改：增加参数申请是否冲减
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := 0;--处置申报已冲减，不能重复冲减
               elsif g_bus_type = 'A' and  g_para_05104 = 0 then
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := 0;--处置申报不冲减  
               else
                  g_tab_card_source_ret(v_j).BACK_ADD_MANAGE_DEPRE := rec.depre_money *(-1) ;
               end if;
           end if;
        end loop;--<<循环资金来源游标>>
     end if;  --<<计算栈中无数据 g_tab_card_source>>

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地卡片分摊计提失败！'||SQLERRM;

   END prc_CalcManageLandSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcLandPortSingle
   || 功能描述 ：加载要计算的卡片
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcLandPortSingle( prm_group_id          IN   NUMBER         --集团
                                       ,prm_hos_id            IN   NUMBER         --医院
                                       ,prm_copy_code         IN   VARCHAR2       --账套
                                       ,prm_acc_year          IN   VARCHAR2       --年度
                                       ,prm_acc_month         IN   VARCHAR2       --月份
                                       ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                       ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                       ,prm_AppCode           Out  Number         --执行代码
                                       ,prm_ErrTxt            Out  Varchar2       --错误信息
                                     )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK             ;
     prm_ErrTxt      := '土地计提成功!';



     --(1)初始结果数据栈
     prc_InitResultStack( prm_AppCode
                         ,prm_ErrTxt
                        );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(2)初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;



     --(3)计算摊销前完整性检查
     prc_ChkCardLandSingle(  prm_group_id             --集团
                             ,prm_hos_id               --医院
                             ,prm_copy_code            --账套
                             ,prm_acc_year             --年度
                             ,prm_acc_month            --月份
                             ,prm_ass_card_no          --卡片号
                             ,prm_AppCode              --执行代码
                             ,prm_ErrTxt               --错误信息
                            );

     if prm_AppCode <> def_OK  then
        return;
     end if;

     --(4)装载卡片数据
     /*****************************************************************
     *
     * 无形资产当月减少时，不需要计提摊销
     *
     ******************************************************************/

     --(5)资产计提折旧
     prc_CalcDepreLandSingle(  prm_group_id                --集团
                               ,prm_hos_id                  --医院
                               ,prm_copy_code               --账套
                               ,prm_ass_card_no             --卡片号
                               ,prm_AppCode                 --执行代码
                               ,prm_ErrTxt                  --错误信息
                              );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(6)重新初始计算数据栈
     prc_InitCalcStack( prm_AppCode
                       ,prm_ErrTxt
                      );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --(7)计算分摊前完整性检查
     prc_ChkManageLandSingle( prm_group_id             --集团
                              ,prm_hos_id               --医院
                              ,prm_copy_code            --账套
                              ,prm_acc_year             --年度
                              ,prm_acc_month            --月份
                              ,prm_ass_card_no          --卡片号
                              ,prm_AppCode              --执行代码
                              ,prm_ErrTxt               --错误信息
                              );

     if prm_AppCode <> def_OK  then
        return;
     end if;

     --(8)装载卡片入分摊计算栈
     /*****************************************************************
     *
     * 无形资产当月减少时，不需要计提摊销
     *
     ******************************************************************/

     --(9)资产计提分摊计算
     prc_CalcManageLandSingle(   prm_group_id                --集团
                                 ,prm_hos_id                  --医院
                                 ,prm_copy_code               --账套
                                 ,prm_ass_card_no             --卡片号
                                 ,prm_AppCode                 --执行代码
                                 ,prm_ErrTxt                  --错误信息
                               );

     if prm_AppCode <>  def_OK  then
        return;
     end if;

     --(10)组JSON串返回结果集
     prc_SpliceJsonSingle(  prm_JSON_STR                --返回JSON串
                           ,prm_AppCode                 --执行代码
                           ,prm_ErrTxt                  --错误信息
                          );

     if prm_AppCode <>  def_OK  then
        return;
     end if;


   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '土地计提失败！'||SQLERRM;
   END prc_CalcLandPortSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_SpliceJsonSingle
   || 功能描述 ：组装JSON并返回结果
   || 参数描述 ：参数标识           名称        输入/输出  类型
   ||            -------------------------------------------------------------
    ||           prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   || 作    者 ：               完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：
   ||-------------------------------------------------------------------------*/
    Procedure prc_SpliceJsonSingle(  prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                    ,prm_AppCode           Out  Number
                                    ,prm_ErrTxt            Out  Varchar2
                                   )

    Is
      i_count                integer       ;
      line_no                integer       ;
      v_GroupName            VARCHAR2(40)  ;      --JSON组名
      v_KeyName              VARCHAR2(40)  ;      --键名
      v_KeyValue             VARCHAR2(40)  ;      --键值
      v_KeyType              VARCHAR2(10)  ;      --键值类型 NUMBER,VARCHAR2
      v_JsonFlag             integer       ;     --JSON标识 1:首个  2:中间 9:末尾
      v_GupFlag              integer       ;     --组标识   0:仅一个 1:首个  2:中间 9:末尾
      v_RowFlag              integer       ;     --行标识   0:仅一个 1:首个  2:中间 9:末尾
      v_KeyFlag              integer       ;     --键标识   0:仅一个 1:首个  2:中间 9:末尾
      v_JSON_STR             varchar2(4000);
    BEGIN
      prm_AppCode := def_OK                                         ;
      prm_ErrTxt := '计提完成！'                                    ;
      v_JSON_STR  := ''                                             ;
      i_count     := g_tab_card_source_ret.count()                  ;
      line_no     := 0                                              ;

      for i in 1..g_tab_card_ret.count() loop
         --创建JSON串 :CardNo
         v_GroupName     := 'Card'                                  ;
         v_KeyName       := 'CardNo'                                ;
         v_KeyValue      :=  g_tab_card_ret(i).ass_card_no          ;
         v_KeyType       := 'VARCHAR2'                              ;
         v_JsonFlag      :=  1                                      ;
         v_GupFlag       :=  1                                      ;
         v_RowFlag       :=  0                                      ;
         v_KeyFlag       :=  1                                      ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR              --字符串
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                      );

         --创建JSON串:Price
         v_KeyName       := 'Price'                                ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).PRICE,0),'fm9999999990.09');
         v_KeyType       := 'NUMBER'                               ;
         v_KeyFlag       :=  2                                     ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR              --字符串
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

         --创建JSON串:NowDepre
         v_KeyName       := 'NowDepre'                                         ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).NOW_DEPRE_MONEY,0),'fm9999999990.09')  ;
         v_KeyType       := 'VARCHAR2'                                           ;
         v_KeyFlag       :=  2                                                 ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR              --字符串
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                      );

         --创建JSON串:NowManageDepre
         v_KeyName       := 'NowManageDepre'                            ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).NOW_MANAGE_DEPRE,0),'fm9999999990.09');
         v_KeyType       := 'NUMBER'                                    ;
         v_KeyFlag       :=  2                                          ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR              --字符串
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                      );


         --创建JSON串:AddDepre
         v_KeyName       := 'AddDepre'                                 ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).ADD_DEPRE_MONEY,0),'fm9999999990.09');
         v_KeyType       := 'NUMBER'                                   ;
         v_KeyFlag       :=  2                                         ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

         --创建JSON串:AddManageDepre
         v_KeyName       := 'AddManageDepre'                            ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).ADD_MANAGE_DEPRE,0),'fm9999999990.09');
         v_KeyType       := 'NUMBER'                                    ;
         v_KeyFlag       :=  2                                          ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:AddAccMonth
         v_KeyName       := 'AddAccMonth'                              ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).ADD_DEPRE_MONTH,0)) ;
         v_KeyType       := 'NUMBER'                                   ;
         v_KeyFlag       :=  2                                         ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:AddManageMonth
         v_KeyName       := 'AddManageMonth'                           ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).ADD_MANAGE_MONTH,0));
         v_KeyType       := 'NUMBER'                                   ;
         v_KeyFlag       :=  2                                         ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

         --创建JSON串:Cur
         v_KeyName       := 'Cur'                                      ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).CUR_MONEY,0),'fm9999999990.09')       ;
         v_KeyType       := 'NUMBER'                                   ;
         v_KeyFlag       :=  2                                         ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                    );

         --创建JSON串:Fore
         v_KeyName       := 'Fore'                                            ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).FORE_MONEY,0),'fm9999999990.09')      ;
         v_KeyType       := 'NUMBER'                                          ;
         v_KeyFlag       :=  2                                                ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:State
         v_KeyName       := 'State'                                     ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).USE_STATE,0)) ;
         v_KeyType       := 'NUMBER'                                    ;
         v_KeyFlag       :=  2                                          ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

        --创建JSON串:DepreMethod
         v_KeyName       := 'DepreMethod'                                  ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).DEPRE_METHOD,'')) ;
         v_KeyType       := 'VARCHAR2'                                     ;
         v_KeyFlag       :=  2                                             ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:DepreYear
         v_KeyName       := 'DepreYear'                                 ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).ACC_DEPRE_AMOUNT,0)) ;
         v_KeyType       := 'NUMBER'                                    ;
         v_KeyFlag       :=  2                                          ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

         --创建JSON串:DepreManageMethod
         v_KeyName       := 'DepreManageMethod'                            ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).MANAGE_DEPRE_METHOD,'')) ;
         v_KeyType       := 'VARCHAR2'                                     ;
         v_KeyFlag       :=  2                                             ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

         --创建JSON串:DepreManageYear
         v_KeyName       := 'DepreManageYear'                              ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).MANAGE_DEPRE_AMOUNT,0)) ;
         v_KeyType       := 'NUMBER'                                       ;
         v_KeyFlag       :=  2                                             ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:BackAddDepre
         v_KeyName       := 'BackAddDepre'                                 ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).BACK_ADD_DEPRE_MONEY,0),'fm9999999990.09');
         v_KeyType       := 'NUMBER'                                       ;
         v_KeyFlag       :=  2                                             ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:BackAddManageDepre
         v_KeyName       := 'BackAddManageDepre'                            ;
         v_KeyValue      := to_char(nvl(g_tab_card_ret(i).BACK_ADD_MANAGE_DEPRE,0),'fm9999999990.09');
         v_KeyType       := 'NUMBER'                                        ;
         v_KeyFlag       :=  9                                              ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
      end loop; --<<g_tab_card_source_ret>>


      --资金来源生成JSON串
      for j in 1..g_tab_card_source_ret.count() loop

         line_no := 0    ;                 --记录行标识，为产生JSON串使用

         if i_count = 1 then               --仅一个资金来源，行标识为0
            line_no := 0 ;
         elsif j = i_count then            --当多个资金来源，读到最后一个资金来源，行标识为9
            line_no := 9 ;
         elsif j = 1 then                  --当多个资金来源,首个资金来源时，行标识为1
            line_no := 1 ;
         else                              --当多个资金来源，中间行标识为2
            line_no := 2 ;
         end if;

         --创建JSON串 :Source
         v_GroupName     := 'Source'                                        ;
         v_KeyName       := 'ID'                                            ;
         v_KeyValue      := to_char(g_tab_card_source_ret(j).source_id)     ;
         v_KeyType       := 'NUMBER'                                        ;
         v_JsonFlag      :=  9                                              ;
         v_GupFlag       :=  9                                              ;
         v_RowFlag       :=  line_no                                        ;
         v_KeyFlag       :=  1                                              ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR              --字符串
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType               --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

        --创建JSON串:Price
         v_KeyName       := 'Price'                                       ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).PRICE,0) )      ;
         v_KeyType       := 'NUMBER'                                      ;
         v_KeyFlag       :=  2                                            ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR              --字符串
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

         --创建JSON串:NowDepre
         v_KeyName       := 'NowDepre'                                        ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).NOW_DEPRE_MONEY,0),'fm9999999990.09' );
         v_KeyType       := 'VARCHAR2'                                          ;
         v_KeyFlag       :=  2                                                ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR              --字符串
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                      );

         --创建JSON串:NowManageDepre
         v_KeyName       := 'NowManageDepre'                                   ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).NOW_MANAGE_DEPRE,0),'fm9999999990.09' );
         v_KeyType       := 'NUMBER'                                           ;
         v_KeyFlag       :=  2                                                 ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR              --字符串
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                      );


         --创建JSON串:AddDepre
         v_KeyName       := 'AddDepre'                                         ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).ADD_DEPRE_MONEY,0) ,'fm9999999990.09') ;
         v_KeyType       := 'NUMBER'                                           ;
         v_KeyFlag       :=  2                                                 ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

         --创建JSON串:AddManageDepre
         v_KeyName       := 'AddManageDepre'                                   ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).ADD_MANAGE_DEPRE,0),'fm9999999990.09' );
         v_KeyType       := 'NUMBER'                                           ;
         v_KeyFlag       :=  2                                                 ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:AddAccMonth
         v_KeyName       := 'AddAccMonth'                                     ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).ADD_DEPRE_MONTH,0)) ;
         v_KeyType       := 'NUMBER'                                          ;
         v_KeyFlag       :=  2                                                ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:AddManageMonth
         v_KeyName       := 'AddManageMonth'                                  ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).ADD_MANAGE_MONTH,0));
         v_KeyType       := 'NUMBER'                                          ;
         v_KeyFlag       :=  2                                                ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

         --创建JSON串:Cur
         v_KeyName       := 'Cur'                                             ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).CUR_MONEY,0),'fm9999999990.09')       ;
         v_KeyType       := 'NUMBER'                                          ;
         v_KeyFlag       :=  2                                                ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                    );

         --创建JSON串:Fore
         v_KeyName       := 'Fore'                                           ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).FORE_MONEY,0),'fm9999999990.09')     ;
         v_KeyType       := 'NUMBER'                                         ;
         v_KeyFlag       :=  2                                               ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:State
         v_KeyName       := 'State'                                            ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).USE_STATE,0))        ;
         v_KeyType       := 'NUMBER'                                           ;
         v_KeyFlag       :=  2                                                 ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

        --创建JSON串:DepreMethod
         v_KeyName       := 'DepreMethod'                                      ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).DEPRE_METHOD,''))     ;
         v_KeyType       := 'VARCHAR2'                                         ;
         v_KeyFlag       :=  2                                                 ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:DepreYear
         v_KeyName       := 'DepreYear'                                        ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).ACC_DEPRE_AMOUNT,0)) ;
         v_KeyType       := 'NUMBER'                                           ;
         v_KeyFlag       :=  2                                                 ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

         --创建JSON串:DepreManageMethod
         v_KeyName       := 'DepreManageMethod'                                   ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).MANAGE_DEPRE_METHOD,'')) ;
         v_KeyType       := 'VARCHAR2'                                            ;
         v_KeyFlag       :=  2                                                    ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

         --创建JSON串:DepreManageYear
         v_KeyName       := 'DepreManageYear'                                     ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).MANAGE_DEPRE_AMOUNT,0)) ;
         v_KeyType       := 'NUMBER'                                              ;
         v_KeyFlag       :=  2                                                    ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:BackAddDepre
         v_KeyName       := 'BackAddDepre'                                        ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).BACK_ADD_DEPRE_MONEY,0),'fm9999999990.09');
         v_KeyType       := 'NUMBER'                                              ;
         v_KeyFlag       :=  2                                                    ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );
         --创建JSON串:BackAddManageDepre
         v_KeyName       := 'BackAddManageDepre'                                   ;
         v_KeyValue      := to_char(nvl(g_tab_card_source_ret(j).BACK_ADD_MANAGE_DEPRE,0),'fm9999999990.09');
         v_KeyType       := 'NUMBER'                                               ;
         v_KeyFlag       :=  9                                                     ;

         v_JSON_STR := fun_CreateJson( v_JSON_STR
                                      ,v_GroupName             --JSON组名
                                      ,v_KeyName               --键名
                                      ,v_KeyValue              --键值
                                      ,v_KeyType              --键值类型 NUMBER,VARCHAR2
                                      ,v_JsonFlag
                                      ,v_GupFlag
                                      ,v_RowFlag
                                      ,v_KeyFlag
                                     );

      end loop; --<<g_tab_card_source_ret>>
      prm_JSON_STR := v_JSON_STR;
    EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '计提完成返回结果时失败！'||SQLERRM;
    END prc_SpliceJsonSingle;
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreSingle
   || 功能描述 ：计算资产卡片折旧统一接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_naturs     资产性质         IN           VARCHAR2
   ||            prm_ass_card_no    卡片号           IN           VARCHAR2
   ||            prm_bus_type       业务类型         IN           VARCHAR2 
   ||            prm_JSON_STR       返回JSON         OUT          VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreSingle( prm_group_id          IN   NUMBER         --集团
                                 ,prm_hos_id            IN   NUMBER         --医院
                                 ,prm_copy_code         IN   VARCHAR2       --账套
                                 ,prm_acc_year          IN   VARCHAR2       --年度
                                 ,prm_acc_month         IN   VARCHAR2       --月份
                                 ,prm_ass_naturs        IN   VARCHAR2       --资产性质
                                 ,prm_ass_card_no       IN   VARCHAR2       --卡片号
                                 ,prm_bus_type          IN   VARCHAR2       --业务类型[A:申报、R:记录]
                                 ,prm_JSON_STR          OUT  Varchar2       --返回JSON串
                                 ,prm_AppCode           Out  Number         --执行代码
                                 ,prm_ErrTxt            Out  Varchar2       --错误信息
                               )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK                       ;
     prm_ErrTxt      := '计提折旧成功!';
     
     --1、加载全局参数
     prc_LoadPara( prm_group_id
                  ,prm_hos_id
                  ,prm_copy_code
                  ,prm_AppCode
                  ,prm_ErrTxt
                 );

     if prm_AppCode <> def_OK then
        return;
     end if;
     
     --接收业务类型参数
     g_bus_type := nvl(upper(prm_bus_type),'R');
     
     if g_bus_type not in( 'A' ,'B') then
        prm_AppCode     := def_WARNING    ;
        prm_ErrTxt      := '业务类型参数不正确!参数值：[A]申报，[R]记录!';
        return;
     end if;
     
     --2、专用设备
     if prm_ass_naturs = '02' then

        prc_CalcSpecialPortSingle(  prm_group_id         --集团
                                   ,prm_hos_id           --医院
                                   ,prm_copy_code        --账套
                                   ,prm_acc_year         --年度
                                   ,prm_acc_month        --月份
                                   ,prm_ass_card_no      --卡片号
                                   ,prm_JSON_STR         --返回JSON串
                                   ,prm_AppCode          --执行代码
                                   ,prm_ErrTxt           --错误信息
                                 );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     --3、一般设备
     if prm_ass_naturs = '03' then

         prc_CalcGeneralPortSingle( prm_group_id         --集团
                                   ,prm_hos_id           --医院
                                   ,prm_copy_code        --账套
                                   ,prm_acc_year         --年度
                                   ,prm_acc_month        --月份
                                   ,prm_ass_card_no      --卡片号
                                   ,prm_JSON_STR         --返回JSON串
                                   ,prm_AppCode          --执行代码
                                   ,prm_ErrTxt           --错误信息
                                 );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     --3、房屋及建筑物
     if prm_ass_naturs = '01' then

        prc_CalcHousePortSingle(  prm_group_id         --集团
                                 ,prm_hos_id           --医院
                                 ,prm_copy_code        --账套
                                 ,prm_acc_year         --年度
                                 ,prm_acc_month        --月份
                                 ,prm_ass_card_no      --卡片号
                                 ,prm_JSON_STR         --返回JSON串
                                 ,prm_AppCode          --执行代码
                                 ,prm_ErrTxt           --错误信息
                               );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     --4、其他固定资产
     if prm_ass_naturs = '04' then

        prc_CalcOtherPortSingle(  prm_group_id         --集团
                                 ,prm_hos_id           --医院
                                 ,prm_copy_code        --账套
                                 ,prm_acc_year         --年度
                                 ,prm_acc_month        --月份
                                 ,prm_ass_card_no      --卡片号
                                 ,prm_JSON_STR         --返回JSON串
                                 ,prm_AppCode          --执行代码
                                 ,prm_ErrTxt           --错误信息
                               );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     --5、无形资产
     if prm_ass_naturs = '05' then

        prc_CalcInassetsPortSingle( prm_group_id         --集团
                                   ,prm_hos_id           --医院
                                   ,prm_copy_code        --账套
                                   ,prm_acc_year         --年度
                                   ,prm_acc_month        --月份
                                   ,prm_ass_card_no      --卡片号
                                   ,prm_JSON_STR         --返回JSON串
                                   ,prm_AppCode          --执行代码
                                   ,prm_ErrTxt           --错误信息
                                 );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     --6、土地
     if prm_ass_naturs = '06' then

        prc_CalcLandPortSingle( prm_group_id         --集团
                               ,prm_hos_id           --医院
                               ,prm_copy_code        --账套
                               ,prm_acc_year         --年度
                               ,prm_acc_month        --月份
                               ,prm_ass_card_no      --卡片号
                               ,prm_JSON_STR         --返回JSON串
                               ,prm_AppCode          --执行代码
                               ,prm_ErrTxt           --错误信息
                             );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK         ;
        prm_ErrTxt      := '计提折旧成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '计提折旧失败！'||SQLERRM;
   END prc_CalcDepreSingle;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreNatursALL
   || 功能描述 ：计算资产所有卡片统一接口(区分资产性质)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_naturs     资产性质         IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreNatursALL(  prm_group_id          IN   NUMBER         --集团
                                     ,prm_hos_id            IN   NUMBER         --医院
                                     ,prm_copy_code         IN   VARCHAR2       --账套
                                     ,prm_acc_year          IN   VARCHAR2       --年度
                                     ,prm_acc_month         IN   VARCHAR2       --月份
                                     ,prm_ass_naturs        IN   VARCHAR2       --资产性质
                                     ,prm_operator          IN   VARCHAR2       --操作员
                                     ,prm_AppCode           Out  Number         --执行代码
                                     ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK         ;
     prm_ErrTxt      := '计提折旧成功!';

     --1、加载全局参数
     prc_LoadPara( prm_group_id
                  ,prm_hos_id
                  ,prm_copy_code
                  ,prm_AppCode
                  ,prm_ErrTxt
                 );

     if prm_AppCode <> def_OK then
        return;
     end if;

     --2、专用设备
     if prm_ass_naturs = '02' then

        prc_CalcSpecialPortALL( prm_group_id         --集团
                               ,prm_hos_id           --医院
                               ,prm_copy_code        --账套
                               ,prm_acc_year         --年度
                               ,prm_acc_month        --月份
                               ,prm_operator         --操作员
                               ,prm_AppCode          --执行代码
                               ,prm_ErrTxt           --错误信息
                             );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     --3、一般设备
     if prm_ass_naturs = '03' then

         prc_CalcGeneralPortALL( prm_group_id         --集团
                               ,prm_hos_id           --医院
                               ,prm_copy_code        --账套
                               ,prm_acc_year         --年度
                               ,prm_acc_month        --月份
                               ,prm_operator         --操作员
                               ,prm_AppCode          --执行代码
                               ,prm_ErrTxt           --错误信息
                               );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     --3、房屋及建筑物
     if prm_ass_naturs = '01' then

        prc_CalcHousePortALL( prm_group_id         --集团
                             ,prm_hos_id           --医院
                             ,prm_copy_code        --账套
                             ,prm_acc_year         --年度
                             ,prm_acc_month        --月份
                             ,prm_operator         --操作员
                             ,prm_AppCode          --执行代码
                             ,prm_ErrTxt           --错误信息
                             );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     --4、其他固定资产
     if prm_ass_naturs = '04' then

        prc_CalcOtherPortALL(   prm_group_id         --集团
                               ,prm_hos_id           --医院
                               ,prm_copy_code        --账套
                               ,prm_acc_year         --年度
                               ,prm_acc_month        --月份
                               ,prm_operator         --操作员
                               ,prm_AppCode          --执行代码
                               ,prm_ErrTxt           --错误信息
                             );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     --5、无形资产
     if prm_ass_naturs = '05' then

        prc_CalcInassetsPortALL( prm_group_id         --集团
                               ,prm_hos_id           --医院
                               ,prm_copy_code        --账套
                               ,prm_acc_year         --年度
                               ,prm_acc_month        --月份
                               ,prm_operator         --操作员
                               ,prm_AppCode          --执行代码
                               ,prm_ErrTxt           --错误信息
                              );


        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     --6、土地
     if prm_ass_naturs = '06' then

        prc_CalcLandPortALL( prm_group_id         --集团
                            ,prm_hos_id           --医院
                            ,prm_copy_code        --账套
                            ,prm_acc_year         --年度
                            ,prm_acc_month        --月份
                            ,prm_operator         --操作员
                            ,prm_AppCode          --执行代码
                            ,prm_ErrTxt           --错误信息
                          );

        if prm_AppCode <> def_OK then
           return;
        end if;

     end if;

     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK         ;
        prm_ErrTxt      := '计提折旧成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '计提折旧失败！'||SQLERRM;
   END prc_CalcDepreNatursALL;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DelDepreNatursALL
   || 功能描述 ：回退资产所有卡片折旧统一接口(区分资产性质)
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_ass_naturs     资产性质         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DelDepreNatursALL( prm_group_id          IN   NUMBER         --集团
                                   ,prm_hos_id            IN   NUMBER         --医院
                                   ,prm_copy_code         IN   VARCHAR2       --账套
                                   ,prm_acc_year          IN   VARCHAR2       --年度
                                   ,prm_acc_month         IN   VARCHAR2       --月份
                                   ,prm_ass_naturs        IN   VARCHAR2       --资产性质
                                   ,prm_AppCode           Out  Number         --执行代码
                                   ,prm_ErrTxt            Out  Varchar2       --错误信息
                                   )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK         ;
     prm_ErrTxt      := '资产折旧回退成功!';



     --2、专用设备
     if prm_ass_naturs = '02' then

        --(1)删除折旧表数据
        prc_DeleteDepreSpecialAll( prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

        if prm_AppCode <> def_OK then
           return;
        end if;

         --(2)删除分摊表数据
         prc_DeleteManageSpecialAll( prm_group_id               --集团
                                    ,prm_hos_id                 --医院
                                    ,prm_copy_code              --账套
                                    ,prm_acc_year               --年度
                                    ,prm_acc_month              --月份
                                    ,prm_AppCode                --执行代码
                                    ,prm_ErrTxt                 --错误信息
                                   );

         if prm_AppCode <>  def_OK  then
            return;
         end if;

     end if;

     --3、一般设备
     if prm_ass_naturs = '03' then

        --(1)删除折旧表数据
        prc_DeleteDepreGeneralAll( prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

        if prm_AppCode <> def_OK then
           return;
        end if;

         --(2)删除分摊表数据
         prc_DeleteManageGeneralAll( prm_group_id               --集团
                                    ,prm_hos_id                 --医院
                                    ,prm_copy_code              --账套
                                    ,prm_acc_year               --年度
                                    ,prm_acc_month              --月份
                                    ,prm_AppCode                --执行代码
                                    ,prm_ErrTxt                 --错误信息
                                   );

         if prm_AppCode <>  def_OK  then
            return;
         end if;

     end if;

     --3、房屋及建筑物
     if prm_ass_naturs = '01' then

        --(1)删除折旧表数据
        prc_DeleteDepreHouseAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

        if prm_AppCode <> def_OK then
           return;
        end if;

        --(2)删除分摊表数据
        prc_DeleteManageHouseAll( prm_group_id               --集团
                                 ,prm_hos_id                 --医院
                                 ,prm_copy_code              --账套
                                 ,prm_acc_year               --年度
                                 ,prm_acc_month              --月份
                                 ,prm_AppCode                --执行代码
                                 ,prm_ErrTxt                 --错误信息
                                );

        if prm_AppCode <>  def_OK  then
           return;
        end if;

     end if;

     --4、其他固定资产
     if prm_ass_naturs = '04' then

        --(1)删除折旧表数据
        prc_DeleteDepreOtherAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

        if prm_AppCode <> def_OK then
           return;
        end if;

        --(2)删除分摊表数据
        prc_DeleteManageOtherAll( prm_group_id               --集团
                                 ,prm_hos_id                 --医院
                                 ,prm_copy_code              --账套
                                 ,prm_acc_year               --年度
                                 ,prm_acc_month              --月份
                                 ,prm_AppCode                --执行代码
                                 ,prm_ErrTxt                 --错误信息
                                );

        if prm_AppCode <>  def_OK  then
           return;
        end if;

     end if;

     --5、无形资产
     if prm_ass_naturs = '05' then

        --(1)删除折旧表数据
        prc_DeleteDepreInassetsAll(  prm_group_id               --集团
                                    ,prm_hos_id                 --医院
                                    ,prm_copy_code              --账套
                                    ,prm_acc_year               --年度
                                    ,prm_acc_month              --月份
                                    ,prm_AppCode                --执行代码
                                    ,prm_ErrTxt                 --错误信息
                                   );

        if prm_AppCode <> def_OK then
           return;
        end if;

        --(2)删除分摊表数据
        prc_DeleteManageInassetsAll(  prm_group_id               --集团
                                     ,prm_hos_id                 --医院
                                     ,prm_copy_code              --账套
                                     ,prm_acc_year               --年度
                                     ,prm_acc_month              --月份
                                     ,prm_AppCode                --执行代码
                                     ,prm_ErrTxt                 --错误信息
                                    );

        if prm_AppCode <>  def_OK  then
           return;
        end if;

     end if;

     --6、土地
     if prm_ass_naturs = '06' then

        --(1)删除折旧表数据
        prc_DeleteDepreLandAll(  prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

        if prm_AppCode <> def_OK then
           return;
        end if;

        --(2)删除分摊表数据
        prc_DeleteManageLandAll(  prm_group_id               --集团
                                 ,prm_hos_id                 --医院
                                 ,prm_copy_code              --账套
                                 ,prm_acc_year               --年度
                                 ,prm_acc_month              --月份
                                 ,prm_AppCode                --执行代码
                                 ,prm_ErrTxt                 --错误信息
                                );

        if prm_AppCode <>  def_OK  then
           return;
        end if;

     end if;

     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK             ;
        prm_ErrTxt      := '资产折旧回退成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '资产折旧回退失败！'||SQLERRM;
   END prc_DelDepreNatursALL;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreALL
   || 功能描述 ：计算资产所有卡片统一接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreALL(  prm_group_id          IN   NUMBER         --集团
                               ,prm_hos_id            IN   NUMBER         --医院
                               ,prm_copy_code         IN   VARCHAR2       --账套
                               ,prm_acc_year          IN   VARCHAR2       --年度
                               ,prm_acc_month         IN   VARCHAR2       --月份
                               ,prm_operator          IN   VARCHAR2       --操作员
                               ,prm_AppCode           Out  Number         --执行代码
                               ,prm_ErrTxt            Out  Varchar2       --错误信息
                             )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK         ;
     prm_ErrTxt      := '计提折旧成功!';

     --1、加载全局参数
     prc_LoadPara( prm_group_id
                  ,prm_hos_id
                  ,prm_copy_code
                  ,prm_AppCode
                  ,prm_ErrTxt
                 );

     if prm_AppCode <> def_OK then
        return;
     end if;
     
     /********关于医院执行《政府会计制度——行政事业单位会计科目和报表》的衔接规定**********
      *
      *  医院应当对截至2018年12月31日前购置的未计提完折旧的固定资产，在新旧制度转换时，
      *
      *  按照补充规定提供的折旧年限计算补提一个月折旧。
      *
     *************************************************************************************/
     
     g_year_month := prm_acc_year || prm_acc_month;
     
     prc_CalcSpecialPortALL( prm_group_id         --集团
                            ,prm_hos_id           --医院
                            ,prm_copy_code        --账套
                            ,prm_acc_year         --年度
                            ,prm_acc_month        --月份
                            ,prm_operator         --操作员
                            ,prm_AppCode          --执行代码
                            ,prm_ErrTxt           --错误信息
                          );
     
     --2、专用设备
     

     if prm_AppCode <> def_OK then
        return;
     end if;

     --3、一般设备
     prc_CalcGeneralPortALL( prm_group_id         --集团
                            ,prm_hos_id           --医院
                            ,prm_copy_code        --账套
                            ,prm_acc_year         --年度
                            ,prm_acc_month        --月份
                            ,prm_operator         --操作员
                            ,prm_AppCode          --执行代码
                            ,prm_ErrTxt           --错误信息
                            );

     if prm_AppCode <> def_OK then
        return;
     end if;


     --4、房屋及建筑物
     prc_CalcHousePortALL( prm_group_id         --集团
                          ,prm_hos_id           --医院
                          ,prm_copy_code        --账套
                          ,prm_acc_year         --年度
                          ,prm_acc_month        --月份
                          ,prm_operator         --操作员
                          ,prm_AppCode          --执行代码
                          ,prm_ErrTxt           --错误信息
                          );

     if prm_AppCode <> def_OK then
        return;
     end if;


     --5、其他固定资产
     prc_CalcOtherPortALL(   prm_group_id         --集团
                            ,prm_hos_id           --医院
                            ,prm_copy_code        --账套
                            ,prm_acc_year         --年度
                            ,prm_acc_month        --月份
                            ,prm_operator         --操作员
                            ,prm_AppCode          --执行代码
                            ,prm_ErrTxt           --错误信息
                          );

     if prm_AppCode <> def_OK then
        return;
     end if;


     --6、无形资产
     prc_CalcInassetsPortALL( prm_group_id         --集团
                             ,prm_hos_id           --医院
                             ,prm_copy_code        --账套
                             ,prm_acc_year         --年度
                             ,prm_acc_month        --月份
                             ,prm_operator         --操作员
                             ,prm_AppCode          --执行代码
                             ,prm_ErrTxt           --错误信息
                            );


     if prm_AppCode <> def_OK then
        return;
     end if;

     --6、土地
     prc_CalcLandPortALL( prm_group_id         --集团
                         ,prm_hos_id           --医院
                         ,prm_copy_code        --账套
                         ,prm_acc_year         --年度
                         ,prm_acc_month        --月份
                         ,prm_operator         --操作员
                         ,prm_AppCode          --执行代码
                         ,prm_ErrTxt           --错误信息
                       );

     if prm_AppCode <> def_OK then
        return;
     end if;

     if prm_AppCode = def_OK then
   
      --四舍五入 本期折旧数  专用
        UPDATE ass_depre_acc_special 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;
        --四舍五入 本期折旧数  通用
        UPDATE ass_depre_acc_general 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;   
        --四舍五入 本期折旧数  家具
        UPDATE ass_depre_acc_other 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;
        --四舍五入 本期折旧数  房屋
        UPDATE ass_depre_acc_house 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;
        --四舍五入 本期折旧数  土地
        UPDATE ass_depre_acc_land 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;
        --四舍五入 本期折旧数  无形资产
        UPDATE ass_depre_acc_inassets 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;  
       
        prm_AppCode     := def_OK         ;
        prm_ErrTxt      := '计提折旧成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '计提折旧失败！'||SQLERRM;
   END prc_CalcDepreALL;

   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DelDepreALL
   || 功能描述 ：回退资产所有卡片折旧统一接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DelDepreALL( prm_group_id          IN   NUMBER         --集团
                             ,prm_hos_id            IN   NUMBER         --医院
                             ,prm_copy_code         IN   VARCHAR2       --账套
                             ,prm_acc_year          IN   VARCHAR2       --年度
                             ,prm_acc_month         IN   VARCHAR2       --月份
                             ,prm_AppCode           Out  Number         --执行代码
                             ,prm_ErrTxt            Out  Varchar2       --错误信息
                             )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK         ;
     prm_ErrTxt      := '资产折旧回退成功!';



      --1、专用设备

      --(1)删除折旧表数据
      prc_DeleteDepreSpecialAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

      if prm_AppCode <> def_OK then
         return;
      end if;

      --(2)删除分摊表数据
      prc_DeleteManageSpecialAll( prm_group_id               --集团
                                 ,prm_hos_id                 --医院
                                 ,prm_copy_code              --账套
                                 ,prm_acc_year               --年度
                                 ,prm_acc_month              --月份
                                 ,prm_AppCode                --执行代码
                                 ,prm_ErrTxt                 --错误信息
                                );

      if prm_AppCode <>  def_OK  then
         return;
      end if;


      --2、一般设备

      --(1)删除折旧表数据
      prc_DeleteDepreGeneralAll( prm_group_id               --集团
                                ,prm_hos_id                 --医院
                                ,prm_copy_code              --账套
                                ,prm_acc_year               --年度
                                ,prm_acc_month              --月份
                                ,prm_AppCode                --执行代码
                                ,prm_ErrTxt                 --错误信息
                               );

      if prm_AppCode <> def_OK then
         return;
      end if;

       --(2)删除分摊表数据
       prc_DeleteManageGeneralAll( prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

       if prm_AppCode <>  def_OK  then
          return;
       end if;

      --3、房屋及建筑物

      --(1)删除折旧表数据
      prc_DeleteDepreHouseAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

      if prm_AppCode <> def_OK then
         return;
      end if;

      --(2)删除分摊表数据
      prc_DeleteManageHouseAll( prm_group_id               --集团
                               ,prm_hos_id                 --医院
                               ,prm_copy_code              --账套
                               ,prm_acc_year               --年度
                               ,prm_acc_month              --月份
                               ,prm_AppCode                --执行代码
                               ,prm_ErrTxt                 --错误信息
                              );

      if prm_AppCode <>  def_OK  then
         return;
      end if;



      --4、其他固定资产

      --(1)删除折旧表数据
      prc_DeleteDepreOtherAll( prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

      if prm_AppCode <> def_OK then
         return;
      end if;

      --(2)删除分摊表数据
      prc_DeleteManageOtherAll( prm_group_id               --集团
                               ,prm_hos_id                 --医院
                               ,prm_copy_code              --账套
                               ,prm_acc_year               --年度
                               ,prm_acc_month              --月份
                               ,prm_AppCode                --执行代码
                               ,prm_ErrTxt                 --错误信息
                              );

      if prm_AppCode <>  def_OK  then
         return;
      end if;

      --5、无形资产
      --(1)删除折旧表数据
      prc_DeleteDepreInassetsAll(  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

      if prm_AppCode <> def_OK then
         return;
      end if;

      --(2)删除分摊表数据
      prc_DeleteManageInassetsAll(  prm_group_id               --集团
                                   ,prm_hos_id                 --医院
                                   ,prm_copy_code              --账套
                                   ,prm_acc_year               --年度
                                   ,prm_acc_month              --月份
                                   ,prm_AppCode                --执行代码
                                   ,prm_ErrTxt                 --错误信息
                                  );

      if prm_AppCode <>  def_OK  then
         return;
      end if;

      --6、土地
      --(1)删除折旧表数据
      prc_DeleteDepreLandAll(  prm_group_id               --集团
                              ,prm_hos_id                 --医院
                              ,prm_copy_code              --账套
                              ,prm_acc_year               --年度
                              ,prm_acc_month              --月份
                              ,prm_AppCode                --执行代码
                              ,prm_ErrTxt                 --错误信息
                             );

      if prm_AppCode <> def_OK then
         return;
      end if;

      --(2)删除分摊表数据
      prc_DeleteManageLandAll(  prm_group_id               --集团
                               ,prm_hos_id                 --医院
                               ,prm_copy_code              --账套
                               ,prm_acc_year               --年度
                               ,prm_acc_month              --月份
                               ,prm_AppCode                --执行代码
                               ,prm_ErrTxt                 --错误信息
                              );

      if prm_AppCode <>  def_OK  then
         return;
      end if;



     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK             ;
        prm_ErrTxt      := '资产折旧回退成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '资产折旧回退失败！'||SQLERRM;
   END prc_DelDepreALL;
   
   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_CalcDepreALLAssOrInass
   || 功能描述 ：计算资产所有卡片统一接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_operator       操作员           IN           VARCHAR2
   ||            prm_type           资产类别         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_CalcDepreALLAssOrInass(  prm_group_id          IN   NUMBER         --集团
                               ,prm_hos_id            IN   NUMBER         --医院
                               ,prm_copy_code         IN   VARCHAR2       --账套
                               ,prm_acc_year          IN   VARCHAR2       --年度
                               ,prm_acc_month         IN   VARCHAR2       --月份
                               ,prm_operator          IN   VARCHAR2       --操作员
                               ,prm_type              IN   VARCHAR2       --操作员
                               ,prm_AppCode           Out  Number         --执行代码
                               ,prm_ErrTxt            Out  Varchar2       --错误信息
                             )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK         ;
     prm_ErrTxt      := '计提折旧成功!';

     --1、加载全局参数
     prc_LoadPara( prm_group_id
                  ,prm_hos_id
                  ,prm_copy_code
                  ,prm_AppCode
                  ,prm_ErrTxt
                 );

     if prm_AppCode <> def_OK then
        return;
     end if;
     
     /********关于医院执行《政府会计制度——行政事业单位会计科目和报表》的衔接规定**********
      *
      *  医院应当对截至2018年12月31日前购置的未计提完折旧的固定资产，在新旧制度转换时，
      *
      *  按照补充规定提供的折旧年限计算补提一个月折旧。
      *
     *************************************************************************************/
     
     g_year_month := prm_acc_year || prm_acc_month;
     
     if prm_type = 0 then
     
           prc_CalcSpecialPortALL( prm_group_id         --集团
                                  ,prm_hos_id           --医院
                                  ,prm_copy_code        --账套
                                  ,prm_acc_year         --年度
                                  ,prm_acc_month        --月份
                                  ,prm_operator         --操作员
                                  ,prm_AppCode          --执行代码
                                  ,prm_ErrTxt           --错误信息
                                );
           
           --2、专用设备
           

           if prm_AppCode <> def_OK then
              return;
           end if;

           --3、一般设备
           prc_CalcGeneralPortALL( prm_group_id         --集团
                                  ,prm_hos_id           --医院
                                  ,prm_copy_code        --账套
                                  ,prm_acc_year         --年度
                                  ,prm_acc_month        --月份
                                  ,prm_operator         --操作员
                                  ,prm_AppCode          --执行代码
                                  ,prm_ErrTxt           --错误信息
                                  );

           if prm_AppCode <> def_OK then
              return;
           end if;


           --4、房屋及建筑物
           prc_CalcHousePortALL( prm_group_id         --集团
                                ,prm_hos_id           --医院
                                ,prm_copy_code        --账套
                                ,prm_acc_year         --年度
                                ,prm_acc_month        --月份
                                ,prm_operator         --操作员
                                ,prm_AppCode          --执行代码
                                ,prm_ErrTxt           --错误信息
                                );

           if prm_AppCode <> def_OK then
              return;
           end if;


           --5、其他固定资产
           prc_CalcOtherPortALL(   prm_group_id         --集团
                                  ,prm_hos_id           --医院
                                  ,prm_copy_code        --账套
                                  ,prm_acc_year         --年度
                                  ,prm_acc_month        --月份
                                  ,prm_operator         --操作员
                                  ,prm_AppCode          --执行代码
                                  ,prm_ErrTxt           --错误信息
                                );

           if prm_AppCode <> def_OK then
              return;
           end if;
     
     end if;
     
     if prm_type = 1 then
           --6、无形资产
           prc_CalcInassetsPortALL( prm_group_id         --集团
                                   ,prm_hos_id           --医院
                                   ,prm_copy_code        --账套
                                   ,prm_acc_year         --年度
                                   ,prm_acc_month        --月份
                                   ,prm_operator         --操作员
                                   ,prm_AppCode          --执行代码
                                   ,prm_ErrTxt           --错误信息
                                  );


           if prm_AppCode <> def_OK then
              return;
           end if;

           --6、土地
           prc_CalcLandPortALL( prm_group_id         --集团
                               ,prm_hos_id           --医院
                               ,prm_copy_code        --账套
                               ,prm_acc_year         --年度
                               ,prm_acc_month        --月份
                               ,prm_operator         --操作员
                               ,prm_AppCode          --执行代码
                               ,prm_ErrTxt           --错误信息
                             );

           if prm_AppCode <> def_OK then
              return;
           end if;
     
     end if;

     if prm_AppCode = def_OK then
   
      --四舍五入 本期折旧数  专用
        UPDATE ass_depre_acc_special 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;
        --四舍五入 本期折旧数  通用
        UPDATE ass_depre_acc_general 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;   
        --四舍五入 本期折旧数  家具
        UPDATE ass_depre_acc_other 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;
        --四舍五入 本期折旧数  房屋
        UPDATE ass_depre_acc_house 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;
        --四舍五入 本期折旧数  土地
        UPDATE ass_depre_acc_land 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;
        --四舍五入 本期折旧数  无形资产
        UPDATE ass_depre_acc_inassets 
           SET now_depre_amount = round(now_depre_amount, 2)
         WHERE group_id = prm_group_id
           AND hos_id = prm_hos_id
           AND copy_code = prm_copy_code
           AND depre_year = prm_acc_year
           AND depre_month = prm_acc_month;  
       
        prm_AppCode     := def_OK         ;
        prm_ErrTxt      := '计提折旧成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '计提折旧失败！'||SQLERRM;
   END prc_CalcDepreALLAssOrInass;
   
   
   /*-------------------------------------------------------------------------
   || 过程名称 ：prc_DelDepreALLAssOrInass
   || 功能描述 ：回退资产所有卡片折旧统一接口
   || 参数描述 ：参数标识          名称             输入/输出    类型
   ||            -------------------------------------------------------------
   ||            prm_group_id       集团             IN           NUMBER
   ||            prm_hos_id         医院             IN           NUMBER
   ||            prm_copy_code      账套             IN           VARCHAR2
   ||            prm_acc_year       年度             IN           VARCHAR2
   ||            prm_acc_month      月份             IN           VARCHAR2
   ||            prm_type           资产类型         IN           VARCHAR2
   ||            prm_AppCode        执行代码         OUT          NUMBER
   ||            prm_ErrorMsg       错误信息         OUT          VARCHAR2
   ||
   || 作    者 ：           完成日期 ：
   ||-------------------------------------------------------------------------
   || 修改记录 ：           修改日期：
   ||-------------------------------------------------------------------------*/
   Procedure prc_DelDepreALLAssOrInass( prm_group_id          IN   NUMBER         --集团
                             ,prm_hos_id            IN   NUMBER         --医院
                             ,prm_copy_code         IN   VARCHAR2       --账套
                             ,prm_acc_year          IN   VARCHAR2       --年度
                             ,prm_acc_month         IN   VARCHAR2       --月份
                             ,prm_type              IN   VARCHAR2       --月份
                             ,prm_AppCode           Out  Number         --执行代码
                             ,prm_ErrTxt            Out  Varchar2       --错误信息
                             )
   IS
   BEGIN
     --初始化变量
     prm_AppCode     := def_OK         ;
     prm_ErrTxt      := '资产折旧回退成功!';


     if prm_type = 0 then


          --1、专用设备

          --(1)删除折旧表数据
          prc_DeleteDepreSpecialAll( prm_group_id               --集团
                                    ,prm_hos_id                 --医院
                                    ,prm_copy_code              --账套
                                    ,prm_acc_year               --年度
                                    ,prm_acc_month              --月份
                                    ,prm_AppCode                --执行代码
                                    ,prm_ErrTxt                 --错误信息
                                   );

          if prm_AppCode <> def_OK then
             return;
          end if;

          --(2)删除分摊表数据
          prc_DeleteManageSpecialAll( prm_group_id               --集团
                                     ,prm_hos_id                 --医院
                                     ,prm_copy_code              --账套
                                     ,prm_acc_year               --年度
                                     ,prm_acc_month              --月份
                                     ,prm_AppCode                --执行代码
                                     ,prm_ErrTxt                 --错误信息
                                    );

          if prm_AppCode <>  def_OK  then
             return;
          end if;


          --2、一般设备

          --(1)删除折旧表数据
          prc_DeleteDepreGeneralAll( prm_group_id               --集团
                                    ,prm_hos_id                 --医院
                                    ,prm_copy_code              --账套
                                    ,prm_acc_year               --年度
                                    ,prm_acc_month              --月份
                                    ,prm_AppCode                --执行代码
                                    ,prm_ErrTxt                 --错误信息
                                   );

          if prm_AppCode <> def_OK then
             return;
          end if;

           --(2)删除分摊表数据
           prc_DeleteManageGeneralAll( prm_group_id               --集团
                                      ,prm_hos_id                 --医院
                                      ,prm_copy_code              --账套
                                      ,prm_acc_year               --年度
                                      ,prm_acc_month              --月份
                                      ,prm_AppCode                --执行代码
                                      ,prm_ErrTxt                 --错误信息
                                     );

           if prm_AppCode <>  def_OK  then
              return;
           end if;

          --3、房屋及建筑物

          --(1)删除折旧表数据
          prc_DeleteDepreHouseAll( prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

          if prm_AppCode <> def_OK then
             return;
          end if;

          --(2)删除分摊表数据
          prc_DeleteManageHouseAll( prm_group_id               --集团
                                   ,prm_hos_id                 --医院
                                   ,prm_copy_code              --账套
                                   ,prm_acc_year               --年度
                                   ,prm_acc_month              --月份
                                   ,prm_AppCode                --执行代码
                                   ,prm_ErrTxt                 --错误信息
                                  );

          if prm_AppCode <>  def_OK  then
             return;
          end if;



          --4、其他固定资产

          --(1)删除折旧表数据
          prc_DeleteDepreOtherAll( prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

          if prm_AppCode <> def_OK then
             return;
          end if;

          --(2)删除分摊表数据
          prc_DeleteManageOtherAll( prm_group_id               --集团
                                   ,prm_hos_id                 --医院
                                   ,prm_copy_code              --账套
                                   ,prm_acc_year               --年度
                                   ,prm_acc_month              --月份
                                   ,prm_AppCode                --执行代码
                                   ,prm_ErrTxt                 --错误信息
                                  );

          if prm_AppCode <>  def_OK  then
             return;
          end if;
      
      end if;
      
      if prm_type = 1 then 

          --5、无形资产
          --(1)删除折旧表数据
          prc_DeleteDepreInassetsAll(  prm_group_id               --集团
                                      ,prm_hos_id                 --医院
                                      ,prm_copy_code              --账套
                                      ,prm_acc_year               --年度
                                      ,prm_acc_month              --月份
                                      ,prm_AppCode                --执行代码
                                      ,prm_ErrTxt                 --错误信息
                                     );

          if prm_AppCode <> def_OK then
             return;
          end if;

          --(2)删除分摊表数据
          prc_DeleteManageInassetsAll(  prm_group_id               --集团
                                       ,prm_hos_id                 --医院
                                       ,prm_copy_code              --账套
                                       ,prm_acc_year               --年度
                                       ,prm_acc_month              --月份
                                       ,prm_AppCode                --执行代码
                                       ,prm_ErrTxt                 --错误信息
                                      );

          if prm_AppCode <>  def_OK  then
             return;
          end if;

          --6、土地
          --(1)删除折旧表数据
          prc_DeleteDepreLandAll(  prm_group_id               --集团
                                  ,prm_hos_id                 --医院
                                  ,prm_copy_code              --账套
                                  ,prm_acc_year               --年度
                                  ,prm_acc_month              --月份
                                  ,prm_AppCode                --执行代码
                                  ,prm_ErrTxt                 --错误信息
                                 );

          if prm_AppCode <> def_OK then
             return;
          end if;

          --(2)删除分摊表数据
          prc_DeleteManageLandAll(  prm_group_id               --集团
                                   ,prm_hos_id                 --医院
                                   ,prm_copy_code              --账套
                                   ,prm_acc_year               --年度
                                   ,prm_acc_month              --月份
                                   ,prm_AppCode                --执行代码
                                   ,prm_ErrTxt                 --错误信息
                                  );

          if prm_AppCode <>  def_OK  then
             return;
          end if;

      end if;

     if prm_AppCode = def_OK then
        prm_AppCode     := def_OK             ;
        prm_ErrTxt      := '资产折旧回退成功!';
     end if;

   EXCEPTION
      WHEN OTHERS THEN
         prm_AppCode := def_ERR;
         prm_ErrTxt := '资产折旧回退失败！'||SQLERRM;
   END prc_DelDepreALLAssOrInass;
end PKG_ASS_APP;

	]]></sql>
	
</root>

