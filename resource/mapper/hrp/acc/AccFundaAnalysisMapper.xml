<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.acc.dao.AccFundaAnalysisMapper">
 
	<resultMap id="accfundaMap" type="java.util.Map">
		<result property="group_id" column="group_id" />
		<result property="hos_id" column="hos_id" />
		<result property="copy_code" column="copy_code" />
		<result property="bas_code" column="bas_code" />
		<result property="bas_name" column="bas_name" />
		<result property="bas_unit" column="bas_unit" />
		<result property="bas_type_code" column="bas_type_code" />
		<result property="wx_type_code" column="wx_type_code" />
		<result property="fma_en" column="fma_en" />
		<result property="fma_cn" column="fma_cn" />
		<result property="std_val" column="std_val" />
		<result property="is_stop" column="is_stop" />
		<result property="spell_code" column="spell_code" />
		<result property="note" column="note" />
	</resultMap>
	
	<resultMap id="accfundaDataMap" type="java.util.Map">
		<result property="group_id" column="group_id" />
		<result property="hos_id" column="hos_id" />
		<result property="copy_code" column="copy_code" />
		<result property="bas_code" column="bas_code" />
		<result property="bas_name" column="bas_name" />
		<result property="bas_unit" column="bas_unit" />
		<result property="bas_type_code" column="bas_type_code" />
		<result property="bas_type_name" column="bas_type_name" />
		<result property="wx_type_code" column="wx_type_code" />
		<result property="wx_type_name" column="wx_type_name" />
		<result property="fma_en" column="fma_en" />
		<result property="fma_cn" column="fma_cn" />
		<result property="std_val" column="std_val" />
		<result property="is_stop" column="is_stop" />
		<result property="spell_code" column="spell_code" />
		<result property="note" column="note" />
	</resultMap>
	
	<insert id="addAccFunda" useGeneratedKeys="true">

		insert into
		acc_aly_bas(
		group_id,
		hos_id,
		copy_code,
		bas_code,
		bas_name,
		bas_unit,
		bas_type_code,
		wx_type_code,
		fma_en,
		fma_cn,
		std_val,
		is_stop,
		spell_code,
		note
		) values (
		#{group_id,jdbcType=INTEGER}
		,
		#{hos_id,jdbcType=INTEGER}
		,
		#{copy_code,jdbcType=VARCHAR}
		,
		#{bas_code,jdbcType=VARCHAR}
		,
		#{bas_name,jdbcType=VARCHAR}
		,
		#{bas_unit,jdbcType=VARCHAR}
		,
		#{bas_type_code,jdbcType=VARCHAR}
		,
		#{wx_type_code,jdbcType=VARCHAR}
		,
		#{fma_en,jdbcType=VARCHAR}
		,
		#{fma_cn,jdbcType=VARCHAR}
		,
		#{std_val,jdbcType=INTEGER}
		,
		#{is_stop,jdbcType=INTEGER}
		,
		#{spell_code,jdbcType=VARCHAR}
		,
		#{note,jdbcType=VARCHAR}
		)

	</insert>
	
	<delete id="deleteBatchAccFunda" parameterType="java.util.List">

		delete from acc_aly_bas
		<where>
			<foreach collection="list" index="index" item="item" open="("
				separator="or" close=")">
				group_id = #{item.group_id}
				and
				hos_id = #{item.hos_id}
				and
				copy_code = #{item.copy_code}
				and
				bas_code = #{item.bas_code}

			</foreach>
		</where>
	</delete>
	
	<select id="queryAccFundaByCode" parameterType="java.util.Map" resultMap="accfundaDataMap">
		SELECT
		aab.group_id,
		aab.hos_id,
		aab.copy_code,
		aab.bas_code,
		aab.bas_name,
		aab.bas_unit,
		aab.bas_type_code,
		iad.dict_name as bas_type_name,
		aab.wx_type_code, 
		iadd.dict_name as wx_type_name,
		aab.fma_en,
		aab.fma_cn,
		aab.std_val,
		aab.is_stop,
		aab.spell_code,
		aab.note
		FROM acc_aly_bas aab
		left join init_acc_dict iad
		on aab.bas_type_code = iad.dict_code 
			and iad.table_code = 'ACC_ALY_BAS_TYPE'
		left join init_acc_dict iadd
		on aab.wx_type_code = iadd.dict_code
			and iadd.table_code = 'ACC_ALY_WX_TYPE'
		where   aab.group_id = #{group_id,jdbcType=INTEGER}
			
				AND aab.hos_id = #{hos_id,jdbcType=INTEGER}
			
				AND aab.copy_code = #{copy_code,jdbcType=VARCHAR}
			
				AND aab.bas_code = #{bas_code,jdbcType=VARCHAR}
	</select>
	
	<select id="queryAccFundaAnalysis" parameterType="java.util.Map" resultMap="accfundaDataMap">
		SELECT
		aab.group_id,
		aab.hos_id,
		aab.copy_code,
		aab.bas_code,
		aab.bas_name,
		aab.bas_unit,
		aab.bas_type_code,
		iad.dict_name as bas_type_name,
		aab.wx_type_code, 
		iadd.dict_name as wx_type_name,
		aab.fma_en,
		aab.fma_cn,
		aab.std_val,
		aab.is_stop,
		aab.spell_code,
		aab.note
		FROM acc_aly_bas aab
		left join init_acc_dict iad
		on aab.bas_type_code = iad.dict_code 
			and iad.table_code = 'ACC_ALY_BAS_TYPE'
		left join init_acc_dict iadd
		on aab.wx_type_code = iadd.dict_code
			and iadd.table_code = 'ACC_ALY_WX_TYPE'
		where aab.group_id = #{group_id,jdbcType=INTEGER}
			
			AND aab.hos_id = #{hos_id,jdbcType=INTEGER}
			
			AND aab.copy_code = #{copy_code,jdbcType=VARCHAR}
			
			<if test="bas_type_code != null and bas_type_code != ''">
				AND aab.bas_type_code = #{bas_type_code,jdbcType=VARCHAR}
			</if>
			<if test="wx_type_code != null and wx_type_code != ''">
				AND aab.wx_type_code = #{wx_type_code,jdbcType=VARCHAR}
			</if>
			<if test="basic_index != null and basic_index != ''">
				AND 
				(aab.bas_name like '%'||#{basic_index,jdbcType=VARCHAR}||'%'
				OR
				aab.bas_code like '%'||#{basic_index,jdbcType=VARCHAR}||'%')
			</if>
		order by aab.bas_code
	</select>
	
	<update id="updateAccFundaAnalysis" parameterType="java.util.Map">

		update acc_aly_bas set
		bas_name = #{bas_name,jdbcType=VARCHAR},
		bas_unit = #{bas_unit,jdbcType=VARCHAR},
		bas_type_code = #{bas_type_code,jdbcType=VARCHAR},
		wx_type_code = #{wx_type_code,jdbcType=VARCHAR},
		fma_en = #{fma_en,jdbcType=VARCHAR},
		fma_cn = #{fma_cn,jdbcType=VARCHAR},
		std_val = #{std_val,jdbcType=INTEGER},
		is_stop = #{is_stop,jdbcType=INTEGER},
		spell_code = #{spell_code,jdbcType=VARCHAR},
		note = #{note,jdbcType=VARCHAR}
		WHERE
		group_id = #{group_id,jdbcType=INTEGER}
		and
		hos_id = #{hos_id,jdbcType=INTEGER}
		and
		copy_code = #{copy_code,jdbcType=VARCHAR}
		and
		bas_code = #{bas_code,jdbcType=VARCHAR}

	</update>
</mapper>

