<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.acc.dao.commonbuilder.AccPayTypeMapper">

	<resultMap id="accPayType" type="com.chd.hrp.acc.entity.AccPayType">
        <result property="pay_code" column="pay_code"/>
        <result property="group_id" column="group_id"/>
        <result property="hos_id" column="hos_id"/>
        <result property="copy_code" column="copy_code"/>
        <result property="acc_year" column="acc_year"/>
        <result property="pay_name" column="pay_name"/>
        <result property="pay_type" column="pay_type"/>
        <result property="subj_id" column="subj_id"/>
        <result property="subj_name" column="subj_name"/>
        <result property="spell_code" column="spell_code"/>
        <result property="wbx_code" column="wbx_code"/>
        <result property="is_stop" column="is_stop"/>
        
        <result property="type_name" column="type_name"/>
        <result property="source_code" column="source_code"/>
	</resultMap>
	
    <insert id="addAccPayType" useGeneratedKeys="true" >
    
        INSERT INTO ACC_PAY_TYPE (
                    pay_code
			 ,
                    group_id
			 ,
                    hos_id
			 ,
                    copy_code
			 ,
                    pay_name
			 ,
                    pay_type
			 ,
                    spell_code
			 ,
                    wbx_code
			 ,
                    is_stop
			 ,SOURCE_CODE
        ) VALUES (
			#{pay_code}			 ,
			#{group_id}			 ,
			#{hos_id}			 ,
			#{copy_code}			 ,
			#{pay_name}			 ,
			#{pay_type}			 ,
			#{spell_code}			 ,
			#{wbx_code}			 ,
			#{is_stop},
			#{source_code}
			 
        )
    
    </insert>
	<insert id="addBatchAccPayType" parameterType="java.util.List" >
    
        INSERT INTO ACC_PAY_TYPE (
                    pay_code
			 ,
                    group_id
			 ,
                    hos_id
			 ,
                    copy_code
			 ,
                    pay_name
			 ,
                    pay_type
			 ,
                    spell_code
			 ,
                    wbx_code
			 ,
                    is_stop
			 ,SOURCE_CODE
        ) 
		 <foreach collection="list" item="item" index="index" separator=" union" >
        select 		
			#{item.pay_code,jdbcType=VARCHAR}			 ,
			#{item.group_id,jdbcType=INTEGER}			 ,
			#{item.hos_id,jdbcType=INTEGER}			 ,
			#{item.copy_code,jdbcType=VARCHAR}			 ,
			#{item.pay_name,jdbcType=VARCHAR}			 ,
			#{item.pay_type,jdbcType=VARCHAR}			 ,
			#{item.spell_code,jdbcType=VARCHAR}			 ,
			#{item.wbx_code,jdbcType=VARCHAR}			 ,
			#{item.is_stop,jdbcType=INTEGER},	
			#{item.source_code,jdbcType=INTEGER}		 
		 from dual 
		</foreach>
    
    </insert>

	<update id="updateAccPayType" parameterType="java.util.Map">
    
        UPDATE acc_pay_type SET
			 pay_name = #{pay_name}
			 ,
			 pay_type = #{pay_type}
			 ,
			 spell_code = #{spell_code}
			 ,
			 wbx_code = #{wbx_code}
			 ,
			 is_stop = #{is_stop}
			 ,
			 source_code = #{source_code}
			 
        WHERE 
		 pay_code = #{pay_code}
			  and 
		 group_id = #{group_id}
			  and 
		 hos_id = #{hos_id}
			  and 
		 copy_code = #{copy_code}
   
	</update>
	<update id="updateBatchAccPayType" parameterType="java.util.List">
     
	<foreach collection="list" item="item" index="index" open="begin" close="end;" separator=";" >
        UPDATE acc_pay_type SET
			 pay_name = #{item.pay_name}
			 ,
			 pay_type = #{item.pay_type}
			 ,
			 spell_code = #{item.spell_code}
			 ,
			 wbx_code = #{item.wbx_code}
			 ,
			 is_stop = #{item.is_stop}
			 ,
			 source_code = #{item.source_code}
			 
        WHERE 
		 pay_code = #{item.pay_code}
			  and 
		 group_id = #{item.group_id}
			  and 
		 hos_id = #{item.hos_id}
			  and 
		 copy_code = #{item.copy_code}
			 
    </foreach>
	</update>

    <delete id="deleteAccPayType" parameterType="java.util.Map">
   
        DELETE FROM acc_pay_type WHERE
	        pay_code = #{pay_code}   and 
	        group_id = #{group_id}   and 
	        hos_id = #{hos_id}   and 
	        copy_code = #{copy_code}  
   
    </delete>
    <delete id="deleteBatchAccPayType" parameterType="java.util.List">
        DELETE FROM acc_pay_type WHERE
		<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
		 pay_code = #{item.pay_code}
			  and 
		 group_id = #{item.group_id}
			  and 
		 hos_id = #{item.hos_id}
			  and 
		 copy_code = #{item.copy_code}
			 
		</foreach>
        
   
    </delete>
    
    <select id="queryAccPayTypeByCode" resultType="com.chd.hrp.acc.entity.AccPayType" parameterType="string" >
	  
      SELECT 
            apt.pay_code,
            apt.group_id,
            apt.hos_id,
            apt.copy_code,
            apt.pay_name,
            apt.pay_type,
            apt.spell_code,
            apt.wbx_code,
            apt.is_stop,
            apa.type_name,
            apt.source_code
        FROM ACC_PAY_TYPE apt left join acc_pay_attr apa
        on apt.group_id = apa.group_id and apt.hos_id = apa.hos_id
        and apt.copy_code = apa.copy_code and apt.pay_type = apa.pay_type
	        WHERE
		        apt.group_id = #{group_id}   and 
		        apt.hos_id = #{hos_id}  and 
		         apt.copy_code = #{copy_code} and (
		         apt.pay_code = #{pay_code}  or apt.pay_name = #{pay_code})
	</select>
	<select id="queryAccPayType" parameterType="java.util.Map" resultMap="accPayType" >
      
        SELECT 
            apt.pay_code,
            apt.group_id,
            apt.hos_id,
            apt.copy_code,
            apt.pay_name,
            apt.pay_type,
            apt.spell_code,
            apt.wbx_code,
            apt.is_stop,
            apa.type_name,
            apt.source_code
        FROM ACC_PAY_TYPE apt left join acc_pay_attr apa
        on apt.group_id = apa.group_id and apt.hos_id = apa.hos_id
        and apt.copy_code = apa.copy_code and apt.pay_type = apa.pay_type
            <where>                     
            	
			    <if test="pay_code != null and pay_code != ''">
                    AND apt.pay_code like '${pay_code}%'
               </if>
			    <if test="group_id != null and group_id != ''">
                    AND apt.group_id = #{group_id}
               </if>
			    <if test="hos_id != null and hos_id != ''">
                    AND apt.hos_id = #{hos_id}
               </if>
			    <if test="copy_code != null and copy_code != ''">
                    AND apt.copy_code = #{copy_code}
               </if>
			    <if test="pay_name != null and pay_name != ''">
                    AND apt.pay_name like '%${pay_name}%'
               </if>
			    <if test="pay_type != null and pay_type != ''">
                    AND apt.pay_type = #{pay_type}
               </if>
			    <if test="spell_code != null and spell_code != ''">
                    AND apt.spell_code = #{spell_code}
               </if>
			    <if test="wbx_code != null and wbx_code != ''">
                    AND apt.wbx_code = #{wbx_code}
               </if>
			    <if test="is_stop != null and is_stop != ''">
                    AND apt.is_stop = #{is_stop}
               </if>
        </where>   
				order by apt.pay_code asc
    </select>
    
    <select id="queryAccPayTypeByExtend" parameterType="java.util.Map" resultMap="accPayType" >
      
        SELECT 
            pay_code,
            group_id,
            hos_id,
            copy_code,
            pay_name,
            pay_type,
            spell_code,
            wbx_code,
            is_stop,
            source_code
        FROM ACC_PAY_TYPE  apt
            <where>                     
			    not exists(select  pay_code from ACC_PAY_TYPE b 
						<where>
								<if test="group_id != null and group_id != ''">
		                    		AND group_id = #{group_id}
				               </if>
							    <if test="hos_id != null and hos_id != ''">
				                    AND b.hos_id = #{hos_id}
				               </if>
							    <if test="copy_code != null and copy_code != ''">
				                    AND b.copy_code = #{copy_code}
				               </if>
				               and apt.PAY_CODE=b.PAY_CODE and b.is_stop = '0'
						</where>
 							) and apt.is_stop = '0'
 							<if test="group_id != null and group_id != ''">
			                    AND apt.group_id = #{group_id}
			               </if>
						    <if test="hos_code != null and hos_code != ''">
			                    AND apt.hos_id = #{hos_code}
			               </if>
						    <if test="copy_id != null and copy_id != ''">
			                    AND apt.copy_code = #{copy_id}
			               </if>
        </where>   
				order by apt.pay_code asc
    </select>
	
		
	<select id="queryAccPayTypeByVouch"  parameterType="java.util.Map"  resultMap="accPayType" >

		SELECT
		pay_code as pay_code,
		pay_name as pay_name
		FROM ACC_PAY_TYPE
		<where>

		<if test="key != null and key != ''">
		   and   (
				pay_code like '${key}%' or
				pay_name like '%${key}%'
				or spell_code like '%${key}%' or wbx_code like '%${key}%' 
				)
		</if>
		<if test="group_id != null and group_id != ''">
		   and   (group_id = #{group_id} )
		</if>
		<if test="hos_id != null and hos_id != ''">
		   and   (hos_id = #{hos_id} )
		</if>
		<if test="copy_code != null and copy_code != ''">
		   and   (copy_code = #{copy_code} )
		</if>
		<if test="is_stop != null and is_stop != ''">
		   and   (is_stop = #{is_stop} )
		</if>
		</where>
		order by pay_code
	</select>
	
	<select id="queryAccPayTypeByName" parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(1) from acc_pay_type where group_id = #{group_id,jdbcType=NUMERIC} and hos_id = #{hos_id,jdbcType=NUMERIC}
		and copy_code = #{copy_code,jdbcType=VARCHAR} and pay_name = #{pay_name,jdbcType=VARCHAR}
	</select>
</mapper>

