<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.acc.dao.AccNewOldJoinMapper">

	<!-- 临时表会计科目（新旧）结果映射 -->
	<resultMap type="com.chd.hrp.acc.entity.TmpAccSubj" id="tmpAccSubj">
		<result property="subj_code" column="subj_code"/>
		<result property="subj_name" column="subj_name"/>
		<result property="subj_name_all" column="subj_name_all"/>
		<result property="subj_type_code" column="subj_type_code"/>
		<result property="subj_type_name" column="subj_type_name"/>
		<result property="subj_nature_code" column="subj_nature_code"/>
		<result property="subj_nature_name" column="subj_nature_name"/>
		<result property="subj_dire" column="subj_dire"/>
		<result property="subj_dire_name" column="subj_dire_name"/>
		<result property="subj_level" column="subj_level"/>
		<result property="is_cash" column="is_cash"/>
		<result property="is_cash_name" column="is_cash_name"/>
		<result property="is_last" column="is_last"/>
		<result property="is_last_name" column="is_last_name"/>
		<result property="is_check" column="is_check"/>
		<result property="is_check_name" column="is_check_name"/>
		<result property="check1" column="check1"/>
		<result property="check2" column="check2"/>
		<result property="check3" column="check3"/>
		<result property="check4" column="check4"/>
		<result property="note" column="note"/>
		<result property="spell_code" column="spell_code"/>
		<result property="wbx_code" column="wbx_code"/>
	</resultMap>
	
	<!-- 余额结果映射 -->
	<resultMap type="com.chd.hrp.acc.entity.TmpAccLedger" id="tmpAccLedger">
		<result property="subj_code" column="subj_code"/>
		<result property="subj_name" column="subj_name"/>
		<result property="bal_od" column="bal_od"/>
		<result property="bal_oc" column="bal_oc"/>
		<result property="this_od" column="this_od"/>
		<result property="this_oc" column="this_oc"/>
		<result property="sum_od" column="sum_od"/>
		<result property="sum_oc" column="sum_oc"/>
		<result property="end_od" column="end_od"/>
		<result property="end_oc" column="end_oc"/>
	</resultMap>
	<resultMap type="java.util.Map" id="tmpAccLedgerMap">
		<result property="subj_code" column="subj_code"/>
		<result property="subj_name" column="subj_name"/>
		<result property="is_last" column="is_last"/>
		<result property="bal_od" column="bal_od"/>
		<result property="bal_oc" column="bal_oc"/>
		<result property="this_od" column="this_od"/>
		<result property="this_oc" column="this_oc"/>
		<result property="sum_od" column="sum_od"/>
		<result property="sum_oc" column="sum_oc"/>
		<result property="end_od" column="end_od"/>
		<result property="end_oc" column="end_oc"/>
	</resultMap>
	
	<!-- 新旧科目对应 关系表结果映射 -->
	<resultMap type="com.chd.hrp.acc.entity.TmpAccTranMap" id="tmpAccTranMap">
		<result property="subj_code_old" column="subj_code_old"/>
		<result property="subj_name_old" column="subj_name_old"/>
		<result property="subj_name_all_old" column="subj_name_all_old"/>
		<result property="subj_code_new" column="subj_code_new"/>
		<result property="subj_name_new" column="subj_name_new"/>
		<result property="subj_name_all_new" column="subj_name_all_new"/>
		<result property="subj_code_new_b" column="subj_code_new_b"/>
		<result property="subj_name_new_b" column="subj_name_new_b"/>
		<result property="subj_name_all_new_b" column="subj_name_all_new_b"/>
	</resultMap>
	
	<!-- 旧科目添加 -->
	<insert id="addAccSubjOld" parameterType="java.util.Map">
		insert into tmp_acc_subj_old(
			subj_code, subj_name, subj_name_all, subj_type_code, subj_nature_code, subj_dire, subj_level, 
			is_cash, is_last, is_check, check1, check2, check3, check4, note
		) values (
			#{subj_code, jdbcType=VARCHAR},
			#{subj_name, jdbcType=VARCHAR},
			#{subj_name_all, jdbcType=VARCHAR},
			#{subj_type_code, jdbcType=VARCHAR},
			#{subj_nature_code, jdbcType=VARCHAR},
			#{subj_dire, jdbcType=VARCHAR},
			#{subj_level, jdbcType=VARCHAR},
			#{is_cash, jdbcType=VARCHAR},
			#{is_last, jdbcType=VARCHAR},
			#{is_check, jdbcType=VARCHAR},
			#{check1, jdbcType=VARCHAR},
			#{check2, jdbcType=VARCHAR},
			#{check3, jdbcType=VARCHAR},
			#{check4, jdbcType=VARCHAR},
			#{note, jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- 新科目添加 -->
	<insert id="addAccSubjNew" parameterType="java.util.Map">
		insert into tmp_acc_subj_new(
			subj_code, subj_name, subj_name_all, subj_type_code, subj_nature_code, subj_dire, subj_level, 
			is_cash, is_last, is_check, check1, check2, check3, check4, note, spell_code, wbx_code
		) values (
			#{subj_code, jdbcType=VARCHAR},
			#{subj_name, jdbcType=VARCHAR},
			#{subj_name_all, jdbcType=VARCHAR},
			#{subj_type_code, jdbcType=VARCHAR},
			#{subj_nature_code, jdbcType=VARCHAR},
			#{subj_dire, jdbcType=VARCHAR},
			#{subj_level, jdbcType=VARCHAR},
			#{is_cash, jdbcType=VARCHAR},
			#{is_last, jdbcType=VARCHAR},
			#{is_check, jdbcType=VARCHAR},
			#{check1, jdbcType=VARCHAR},
			#{check2, jdbcType=VARCHAR},
			#{check3, jdbcType=VARCHAR},
			#{check4, jdbcType=VARCHAR},
			#{note, jdbcType=VARCHAR},
			#{spell_code, jdbcType=VARCHAR},
			#{wbx_code, jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- 旧科目添加（批量） -->
	<insert id="addAccSubjOldBatch" parameterType="java.util.List">
		insert into tmp_acc_subj_old(
			subj_code, subj_name, subj_name_all, subj_type_code, subj_nature_code, subj_dire, subj_level, 
			is_cash, is_last, is_check, check1, check2, check3, check4, note
		)
		<foreach collection="list" item="item" separator=" union all ">
			select #{item.subj_code, jdbcType=VARCHAR},
				#{item.subj_name, jdbcType=VARCHAR},
				#{item.subj_name_all, jdbcType=VARCHAR},
				#{item.subj_type_code, jdbcType=VARCHAR},
				#{item.subj_nature_code, jdbcType=VARCHAR},
				#{item.subj_dire, jdbcType=VARCHAR},
				#{item.subj_level, jdbcType=VARCHAR},
				#{item.is_cash, jdbcType=VARCHAR},
				#{item.is_last, jdbcType=VARCHAR},
				#{item.is_check, jdbcType=VARCHAR},
				#{item.check1, jdbcType=VARCHAR},
				#{item.check2, jdbcType=VARCHAR},
				#{item.check3, jdbcType=VARCHAR},
				#{item.check4, jdbcType=VARCHAR},
				#{item.note, jdbcType=VARCHAR}
			from dual
		</foreach>
	</insert>
	
	<!-- 新科目添加（批量） -->
	<insert id="addAccSubjNewBatch" parameterType="java.util.List">
		insert into tmp_acc_subj_new(
			subj_code, subj_name, subj_name_all, subj_type_code, subj_nature_code, subj_dire, subj_level, 
			is_cash, is_last, is_check, check1, check2, check3, check4, note, spell_code, wbx_code
		)
		<foreach collection="list" item="item" separator=" union all ">
			select #{item.subj_code, jdbcType=VARCHAR},
				#{item.subj_name, jdbcType=VARCHAR},
				#{item.subj_name_all, jdbcType=VARCHAR},
				#{item.subj_type_code, jdbcType=VARCHAR},
				#{item.subj_nature_code, jdbcType=VARCHAR},
				#{item.subj_dire, jdbcType=VARCHAR},
				#{item.subj_level, jdbcType=VARCHAR},
				#{item.is_cash, jdbcType=VARCHAR},
				#{item.is_last, jdbcType=VARCHAR},
				#{item.is_check, jdbcType=VARCHAR},
				#{item.check1, jdbcType=VARCHAR},
				#{item.check2, jdbcType=VARCHAR},
				#{item.check3, jdbcType=VARCHAR},
				#{item.check4, jdbcType=VARCHAR},
				#{item.note, jdbcType=VARCHAR},
				#{item.spell_code, jdbcType=VARCHAR},
				#{item.wbx_code, jdbcType=VARCHAR}
			from dual
		</foreach>
	</insert>
	
	<!--  -->
	<insert id="saveTmpAccLedger" parameterType="java.util.Map">
		insert into ${table_name} (
			subj_code, subj_name, bal_od, bal_oc, end_od, end_oc
		) values (
			#{subj_code},
			(select subj_name from ${table_name_subj} where subj_code = #{subj_code}),
			#{bal_od},
			#{bal_oc},
			#{end_od},
			#{end_oc}
		)
	</insert>
	
	<!--  -->
	<insert id="saveTmpAccLedgerCheckBatch">
		insert into ${map.table_name_check} (
			subj_code, subj_name, bal_od, bal_oc, end_od, end_oc,
			check_type1, check_code1, check_name1,
			check_type2, check_code2, check_name2,
			check_type3, check_code3, check_name3,
			check_type4, check_code4, check_name4
		)
		<foreach collection="list" item="item" separator=" union all " >
			select 
				#{item.subj_code},
				(select subj_name from ${map.table_name_subj} where subj_code = #{item.subj_code}),
				#{item.bal_od},
				#{item.bal_oc},
				#{item.end_od},
				#{item.end_oc},
				#{item.check_type1}, #{item.check_code1}, #{item.check_name1},
				#{item.check_type2}, #{item.check_code2}, #{item.check_name2},
				#{item.check_type3}, #{item.check_code3}, #{item.check_name3},
				#{item.check_type4}, #{item.check_code4}, #{item.check_name4}
			from dual
		</foreach>
	</insert>
	
	<!--  -->
	<delete id="deleteTmpAccLedgerCheckBatch">
		<foreach collection="list" item="item" separator=" ; ">
			delete from ${map.table_name_check}
			where subj_code = #{item.subj_code}
				<if test="item.check_code1 != ''"> and check_code1 = #{item.check_code1} </if>
				<if test="item.check_code2 != ''"> and check_code2 = #{item.check_code2} </if>
				<if test="item.check_code3 != ''"> and check_code3 = #{item.check_code3} </if>
				<if test="item.check_code4 != ''"> and check_code4 = #{item.check_code4} </if>
		</foreach>
	</delete>
	
	<insert id="addInitAccLedgerOld" parameterType="java.util.Map">
		insert into tmp_acc_ledger_old (subj_code, subj_name) values (#{subj_code}, #{subj_name})
	</insert>
	
	<!-- 会计科目（旧）更新 -->
	<update id="updateAccSubjOldByPK" parameterType="java.util.Map">
		update tmp_acc_subj_old
		<trim prefix="SET"  suffixOverrides=","> 
			<if test="subj_name != null and subj_name != ''">
				subj_name = #{subj_name, jdbcType=VARCHAR},
			</if>
			<if test="subj_name_all != null and subj_name_all != ''">
				subj_name_all = #{subj_name_all, jdbcType=VARCHAR},
			</if>
			<if test="subj_type_code != null and subj_type_code != ''">
				subj_type_code = #{subj_type_code, jdbcType=VARCHAR},
			</if>
			<if test="subj_nature_code != null and subj_nature_code != ''">
				subj_nature_code = #{subj_nature_code, jdbcType=VARCHAR},
			</if>
			<if test="subj_dire != null and subj_dire != ''">
				subj_dire = #{subj_dire, jdbcType=VARCHAR},
			</if>
			<if test="subj_level != null and subj_level != ''">
				subj_level = #{subj_level, jdbcType=VARCHAR},
			</if>
			<if test="is_cash != null and is_cash != ''">
				is_cash = #{is_cash, jdbcType=VARCHAR},
			</if>
			<if test="is_last != null and is_last != ''">
				is_last = #{is_last, jdbcType=VARCHAR},
			</if>
			<if test="is_check != null and is_check != ''">
				is_check = #{is_check, jdbcType=VARCHAR},
			</if>
			<if test="check1 != null and check1 != ''">
				check1 = #{check1, jdbcType=VARCHAR},
			</if>
			<if test="check2 != null and check2 != ''">
				check2 = #{check2, jdbcType=VARCHAR},
			</if>
			<if test="check3 != null and check3 != ''">
				check3 = #{check3, jdbcType=VARCHAR},
			</if>
			<if test="check4 != null and check4 != ''">
				check4 = #{check4, jdbcType=VARCHAR},
			</if>
			<if test="note != null and note != ''">
				note = #{note, jdbcType=VARCHAR},
			</if>
		</trim>
		where subj_code = #{subj_code, jdbcType=VARCHAR}
	</update>
	
	<!-- 会计科目（新）更新 -->
	<update id="updateAccSubjNewByPK" parameterType="java.util.Map">
		update tmp_acc_subj_new
		<trim prefix="SET"  suffixOverrides=","> 
			<if test="subj_name != null and subj_name != ''">
				subj_name = #{subj_name, jdbcType=VARCHAR},
			</if>
			<if test="subj_name_all != null and subj_name_all != ''">
				subj_name_all = #{subj_name_all, jdbcType=VARCHAR},
			</if>
			<if test="subj_type_code != null and subj_type_code != ''">
				subj_type_code = #{subj_type_code, jdbcType=VARCHAR},
			</if>
			<if test="subj_nature_code != null and subj_nature_code != ''">
				subj_nature_code = #{subj_nature_code, jdbcType=VARCHAR},
			</if>
			<if test="subj_dire != null and subj_dire != ''">
				subj_dire = #{subj_dire, jdbcType=VARCHAR},
			</if>
			<if test="subj_level != null and subj_level != ''">
				subj_level = #{subj_level, jdbcType=VARCHAR},
			</if>
			<if test="is_cash != null and is_cash != ''">
				is_cash = #{is_cash, jdbcType=VARCHAR},
			</if>
			<if test="is_last != null and is_last != ''">
				is_last = #{is_last, jdbcType=VARCHAR},
			</if>
			<if test="is_check != null and is_check != ''">
				is_check = #{is_check, jdbcType=VARCHAR},
			</if>
			<if test="check1 != null and check1 != ''">
				check1 = #{check1, jdbcType=VARCHAR},
			</if>
			<if test="check2 != null and check2 != ''">
				check2 = #{check2, jdbcType=VARCHAR},
			</if>
			<if test="check3 != null and check3 != ''">
				check3 = #{check3, jdbcType=VARCHAR},
			</if>
			<if test="check4 != null and check4 != ''">
				check4 = #{check4, jdbcType=VARCHAR},
			</if>
			<if test="note != null and note != ''">
				note = #{note, jdbcType=VARCHAR},
			</if>
			<if test="spell_code != null and spell_code != ''">
				spell_code = #{spell_code, jdbcType=VARCHAR},
			</if>
			<if test="wbx_code != null and wbx_code != ''">
				wbx_code = #{wbx_code, jdbcType=VARCHAR},
			</if>
		</trim>
		where subj_code = #{subj_code, jdbcType=VARCHAR}
	</update>
	
	<!-- 更新科目全称 -->
	<update id="updateSubjNameAllBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" open="begin" close=";end;" separator=";">
			update ${item.table_name} set subj_name_all = #{item.subj_name_all, jdbcType=VARCHAR}
			where subj_code = #{item.subj_code, jdbcType=VARCHAR}
		</foreach>
	</update>
	
	<update id="updateSubjIsLastBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" open="begin" close=";end;" separator=";">
			update ${item.table_name} set is_last = #{item.is_last, jdbcType=VARCHAR}
			where subj_code = #{item.subj_code, jdbcType=VARCHAR}
		</foreach>
	</update>
	
	<!-- 通过科目编码删除旧科目（批量） -->
	<delete id="deleteAccSubjOldByCodeBatch" parameterType="java.util.List">
		delete from tmp_acc_subj_old
		where 
		<foreach collection="list" item="item" separator=" or ">
			subj_code = #{item.subj_code, jdbcType=VARCHAR}
		</foreach>
	</delete>
	
	<!-- 通过科目编码删除新科目（批量） -->
	<delete id="deleteAccSubjNewByCodeBatch" parameterType="java.util.List">
		delete from tmp_acc_subj_new
		where 
		<foreach collection="list" item="item" separator=" or ">
			subj_code = #{item.subj_code, jdbcType=VARCHAR}
		</foreach>
	</delete>
	
	<!-- 删除旧余额 -->
	<delete id="deleteAccLedgerOldByCodeBatch" parameterType="java.util.List">
		delete from tmp_acc_ledger_old
		where 
		<foreach collection="list" item="item" separator=" or ">
			subj_code = #{item.subj_code, jdbcType=VARCHAR}
		</foreach>
	</delete>
	
	<!-- 删除新余额 -->
	<delete id="deleteAccLedgerNewByCodeBatch" parameterType="java.util.List">
		delete from tmp_acc_ledger_new
		where 
		<foreach collection="list" item="item" separator=" or ">
			subj_code = #{item.subj_code, jdbcType=VARCHAR}
		</foreach>
	</delete>
	
	<!--  -->
	<delete id="deleteTmpAccLedger" parameterType="java.util.Map">
		delete from ${table_name} where subj_code = #{subj_code, jdbcType=VARCHAR}
	</delete>
	
	<!-- 通过科目编号删除辅助核算 -->
	<delete id="deleteTmpAccLedgerCheckBySubjCode" parameterType="java.util.Map">
		delete from ${table_name_check} where subj_code = #{subj_code, jdbcType=VARCHAR}
	</delete>
	
	<!-- 查旧科目 -->
	<select id="queryAccSubjOld" parameterType="java.util.Map" resultMap="tmpAccSubj">
		select t1.subj_code,
			t1.subj_name,
			t1.subj_name_all,
			t1.subj_type_code,
<!-- 			t3.subj_type_name, -->
			t1.subj_nature_code,
<!-- 			t2.subj_nature_name, -->
			t1.subj_dire,
<!-- 			case -->
<!-- 				when t1.subj_dire = '0' then '借' -->
<!-- 			else '贷' end subj_dire_name, -->
			t1.subj_level,
			t1.is_cash,
<!-- 			case -->
<!-- 				when t1.is_cash = '1' then '是' -->
<!-- 				when t1.is_cash = '0' then '否' -->
<!-- 			else '' end is_cash_name, -->
			t1.is_last,
<!-- 			case -->
<!-- 				when t1.is_last = '1' then '是' -->
<!-- 				when t1.is_last = '0' then '否' -->
<!-- 			else '' end is_last_name, -->
			t1.is_check,
<!-- 			case -->
<!-- 				when t1.is_check = '1' then '是' -->
<!-- 				when t1.is_check = '0' then '否' -->
<!-- 			else '' end is_check_name, -->
			t1.check1,
			t1.check2,
			t1.check3,
			t1.check4,
			t1.note
		from tmp_acc_subj_old t1
<!-- 		left join acc_subj_nature t2 -->
<!-- 			   on t2.subj_nature_code = t1.subj_nature_code -->
<!-- 			  and t2.group_id = #{group_id, jdbcType=INTEGER} -->
<!-- 			  and t2.hos_id = #{hos_id, jdbcType=INTEGER} -->
<!-- 			  and t2.copy_code = #{copy_code, jdbcType=VARCHAR} -->
<!-- 		left join acc_subj_type t3 -->
<!-- 			   on t3.subj_type_code = t1.subj_type_code -->
<!-- 			  and t3.group_id = #{group_id, jdbcType=INTEGER} -->
<!-- 			  and t3.hos_id = #{hos_id, jdbcType=INTEGER} -->
<!-- 			  and t3.copy_code = #{copy_code, jdbcType=VARCHAR} -->
		where 1=1
			<if test="subj_code != null and subj_code != ''">
				and t1.subj_code like '%${subj_code}%'
			</if>
			<if test="subj_name != null and subj_name != ''">
				and t1.subj_name like '%${subj_name}%'
			</if>
		order by t1.subj_code
	</select>
	
	<!-- 查新科目 -->
	<select id="queryAccSubjNew" parameterType="java.util.Map" resultMap="tmpAccSubj">
		select t1.subj_code,
			t1.subj_name,
			t1.subj_name_all,
			t1.subj_type_code,
<!-- 			t3.subj_type_name, -->
			t1.subj_nature_code,
<!-- 			t2.subj_nature_name, -->
			t1.subj_dire,
<!-- 			case -->
<!-- 				when t1.subj_dire = '0' then '借' -->
<!-- 			else '贷' end subj_dire_name, -->
			t1.subj_level,
			t1.is_cash,
<!-- 			case -->
<!-- 				when t1.is_cash = '1' then '是' -->
<!-- 				when t1.is_cash = '0' then '否' -->
<!-- 			else '' end is_cash_name, -->
			t1.is_last,
<!-- 			case -->
<!-- 				when t1.is_last = '1' then '是' -->
<!-- 				when t1.is_last = '0' then '否' -->
<!-- 			else '' end is_last_name, -->
			t1.is_check,
<!-- 			case -->
<!-- 				when t1.is_check = '1' then '是' -->
<!-- 				when t1.is_check = '0' then '否' -->
<!-- 			else '' end is_check_name, -->
			t1.check1,
			t1.check2,
			t1.check3,
			t1.check4,
			t1.note
		from tmp_acc_subj_new t1
<!-- 		left join acc_subj_nature t2 -->
<!-- 			   on t2.subj_nature_code = t1.subj_nature_code -->
<!-- 			  and t2.group_id = #{group_id, jdbcType=INTEGER} -->
<!-- 			  and t2.hos_id = #{hos_id, jdbcType=INTEGER} -->
<!-- 			  and t2.copy_code = #{copy_code, jdbcType=VARCHAR} -->
<!-- 		left join acc_subj_type t3 -->
<!-- 			   on t3.subj_type_code = t1.subj_type_code -->
<!-- 			  and t3.group_id = #{group_id, jdbcType=INTEGER} -->
<!-- 			  and t3.hos_id = #{hos_id, jdbcType=INTEGER} -->
<!-- 			  and t3.copy_code = #{copy_code, jdbcType=VARCHAR} -->
		where 1=1
			<if test="subj_code != null and subj_code != ''">
				and t1.subj_code like '%${subj_code}%'
			</if>
			<if test="subj_name != null and subj_name != ''">
				and t1.subj_name like '%${subj_name}%'
			</if>
		order by t1.subj_code
	</select>
	
	<!-- 查旧余额 -->
	<select id="queryAccLedgerOld" parameterType="java.util.Map" resultMap="tmpAccLedgerMap">
		select t1.subj_code,
			t1.subj_name,
			t1.bal_od,
			t1.bal_oc,
			t1.this_od,
			t1.this_oc,
			t1.sum_od,
			t1.sum_oc,
			t1.end_od,
			t1.end_oc,
			t2.is_last
		from tmp_acc_ledger_old t1
		left join tmp_acc_subj_old t2
		       on t1.subj_code = t2.subj_code
		where 1=1
			<if test="subj_code != null and subj_code != ''">
				and t1.subj_code like '%${subj_code}%'
			</if>
			<if test="subj_name != null and subj_name != ''">
				and t1.subj_name like '%${subj_name}%'
			</if>
		order by subj_code
	</select>
	
	<!-- 查新余额 -->
	<select id="queryAccLedgerNew" parameterType="java.util.Map" resultMap="tmpAccLedgerMap">
		select t1.subj_code,
			t1.subj_name,
			t1.bal_od,
			t1.bal_oc,
			t1.this_od,
			t1.this_oc,
			t1.sum_od,
			t1.sum_oc,
			t1.end_od,
			t1.end_oc,
			t2.is_last
		from tmp_acc_ledger_new t1
		left join tmp_acc_subj_new t2
		       on t1.subj_code = t2.subj_code
		where 1=1
			<if test="subj_code != null and subj_code != ''">
				and t1.subj_code like '%${subj_code}%'
			</if>
			<if test="subj_name != null and subj_name != ''">
				and t1.subj_name like '%${subj_name}%'
			</if>
		order by subj_code
	</select>
	
	<!-- 查新旧科目对应关系表 -->
	<select id="queryAccSubjMap" parameterType="java.util.Map" resultType="java.util.Map">
		select SUBJ_CODE_OLD,
			SUBJ_NAME_OLD,
			SUBJ_NAME_ALL_OLD,
			SUBJ_CODE_NEW,
			SUBJ_NAME_NEW,
			SUBJ_NAME_ALL_NEW,
			SUBJ_CODE_NEW_B,
			SUBJ_NAME_NEW_B,
			SUBJ_NAME_ALL_NEW_B
		from tmp_acc_tran_map
		where 1=1
			<if test="subj_code != null and subj_code != ''">
				and (
					subj_code_old like '%${subj_code}%' or 
					subj_code_new like '%${subj_code}%'
				)
			</if>
			<if test="subj_name != null and subj_name != ''">
				and (
					subj_name_old like '%${subj_name}%' or 
					subj_name_new like '%${subj_name}%'
				)
			</if>
	</select>
	
	<!-- 取一个临时会计科目（新、旧） -->
	<select id="getTmpAccSubjByPK" parameterType="java.util.Map" resultMap="tmpAccSubj">
		select t1.subj_code,
			t1.subj_name,
			t1.subj_name_all,
			t3.subj_type_code,
			t3.subj_type_name,
			t2.subj_nature_code,
			t2.subj_nature_name,
			t1.subj_dire,
<!-- 			case -->
<!-- 				when t1.subj_dire = '0' then '借' -->
<!-- 			else '贷' end subj_dire_name, -->
			t1.subj_level,
			t1.is_cash,
<!-- 			case -->
<!-- 				when t1.is_cash = '1' then '是' -->
<!-- 				when t1.is_cash = '0' then '否' -->
<!-- 			else '' end is_cash_name, -->
			t1.is_last,
<!-- 			case -->
<!-- 				when t1.is_last = '1' then '是' -->
<!-- 				when t1.is_last = '0' then '否' -->
<!-- 			else '' end is_last_name, -->
			t1.is_check,
<!-- 			case -->
<!-- 				when t1.is_check = '1' then '是' -->
<!-- 				when t1.is_check = '0' then '否' -->
<!-- 			else '' end is_check_name, -->
			t1.check1,
			t1.check2,
			t1.check3,
			t1.check4,
			t1.note
		from ${table_name} t1
		left join acc_subj_nature t2
			   on t2.subj_nature_name = t1.subj_nature_code
			  and t2.group_id = #{group_id, jdbcType=INTEGER}
			  and t2.hos_id = #{hos_id, jdbcType=INTEGER}
			  and t2.copy_code = #{copy_code, jdbcType=VARCHAR}
		left join acc_subj_type t3
			   on t3.subj_type_name = t1.subj_type_code
			  and t3.group_id = #{group_id, jdbcType=INTEGER}
			  and t3.hos_id = #{hos_id, jdbcType=INTEGER}
			  and t3.copy_code = #{copy_code, jdbcType=VARCHAR}
		where t1.subj_code = #{subj_code, jdbcType=VARCHAR}
	</select>
	
	<!-- 取所有子级科目 -->
	<select id="getAllSubSubj" parameterType="java.util.Map" resultMap="tmpAccSubj">
		select t1.subj_code,
			t1.subj_name,
			t1.subj_name_all,
			t3.subj_type_code,
			t3.subj_type_name,
			t2.subj_nature_code,
			t2.subj_nature_name,
			t1.subj_dire,
<!-- 			case -->
<!-- 				when t1.subj_dire = '0' then '借' -->
<!-- 			else '贷' end subj_dire_name, -->
			t1.subj_level,
			t1.is_cash,
<!-- 			case -->
<!-- 				when t1.is_cash = '1' then '是' -->
<!-- 				when t1.is_cash = '0' then '否' -->
<!-- 			else '' end is_cash_name, -->
			t1.is_last,
<!-- 			case -->
<!-- 				when t1.is_last = '1' then '是' -->
<!-- 				when t1.is_last = '0' then '否' -->
<!-- 			else '' end is_last_name, -->
			t1.is_check,
<!-- 			case -->
<!-- 				when t1.is_check = '1' then '是' -->
<!-- 				when t1.is_check = '0' then '否' -->
<!-- 			else '' end is_check_name, -->
			t1.check1,
			t1.check2,
			t1.check3,
			t1.check4,
			t1.note
		from ${table_name} t1
		left join acc_subj_nature t2
			   on t2.subj_nature_name = t1.subj_nature_code
			  and t2.group_id = #{group_id, jdbcType=INTEGER}
			  and t2.hos_id = #{hos_id, jdbcType=INTEGER}
			  and t2.copy_code = #{copy_code, jdbcType=VARCHAR}
		left join acc_subj_type t3
			   on t3.subj_type_name = t1.subj_type_code
			  and t3.group_id = #{group_id, jdbcType=INTEGER}
			  and t3.hos_id = #{hos_id, jdbcType=INTEGER}
			  and t3.copy_code = #{copy_code, jdbcType=VARCHAR}
		where t1.subj_code != #{subj_code, jdbcType=VARCHAR}
		  and t1.subj_code like '${subj_code}%'
	</select>
	
	<!-- 取一个科目余额 -->
	<select id="getTmpAccLedgerByPK" parameterType="java.util.Map" resultMap="tmpAccLedger">
		select subj_code, subj_name,
			bal_od, bal_oc,
			this_od, this_oc,
			sum_od, sum_oc,
			end_od, end_oc
		from ${table_name}
		where subj_code = #{subj_code, jdbcType=VARCHAR}
	</select>
	
	<!--  -->
	<select id="querySubjCheck" parameterType="java.util.Map" resultType="java.util.Map">
		select 
			t1.check_type_name AS check_type_name1,
			t1.check_type_id AS check_type_id1,  
			t1.column_name AS column_check1, 
			t1.column_code AS check1,
			t1.column_check AS column_item1,
			t2.check_type_name AS check_type_name2, 
			t2.check_type_id AS check_type_id2,  
			t2.column_name AS column_check2,
			t2.column_code AS check2, 
			t2.column_check AS column_item2,
			t3.check_type_name AS check_type_name3, 
			t3.check_type_id AS check_type_id3,  
			t3.column_name AS column_check3, 
			t3.column_code AS check3,
			t3.column_check AS column_item3,
			t4.check_type_name AS check_type_name4, 
			t4.check_type_id AS check_type_id4,  
			t4.column_name AS column_check4,
			t4.column_code AS check4,
			t4.column_check AS column_item4
		from ${table_name_subj} t
		left join acc_check_type t1
			   on t1.group_id = #{group_id, jdbcType=INTEGER}
			  and t1.hos_id = #{hos_id, jdbcType=INTEGER}
			  and t1.copy_code = #{copy_code, jdbcType=VARCHAR}
			  and t1.check_type_name = t.check1
		left join acc_check_type t2
			   on t2.group_id = #{group_id, jdbcType=INTEGER}
			  and t2.hos_id = #{hos_id, jdbcType=INTEGER}
			  and t2.copy_code = #{copy_code, jdbcType=VARCHAR}
			  and t2.check_type_name = t.check2
		left join acc_check_type t3
			   on t3.group_id = #{group_id, jdbcType=INTEGER}
			  and t3.hos_id = #{hos_id, jdbcType=INTEGER}
			  and t3.copy_code = #{copy_code, jdbcType=VARCHAR}
			  and t3.check_type_name = t.check3
		left join acc_check_type t4
			   on t4.group_id = #{group_id, jdbcType=INTEGER}
			  and t4.hos_id = #{hos_id, jdbcType=INTEGER}
			  and t4.copy_code = #{copy_code, jdbcType=VARCHAR}
			  and t4.check_type_name = t.check4
		where (t.is_last = '1' or t.is_last = '是')
			<if test="subj_code != null and subj_code != ''">
				and t.subj_code = #{subj_code, jdbcType=VARCHAR}
			</if>
	</select>
	
	<!--  -->
	<select id="queryCheckItemTable" resultType="java.util.Map" parameterType="java.util.Map">
		select 
		(
			select is_change from acc_check_type t1
			left join ${table_name} t2 on t1.check_type_name = t2.check1
			where t1.group_id = #{group_id} and t1.hos_id = #{hos_id} 
			  and t1.copy_code = #{copy_code} and t2.subj_code = #{subj_code}
		) as is_change1,
		(
			select is_change from acc_check_type t1
			left join ${table_name} t2 on t1.check_type_name = t2.check2
			where t1.group_id = #{group_id} and t1.hos_id = #{hos_id} 
			  and t1.copy_code = #{copy_code} and t2.subj_code = #{subj_code}
		) as is_change2,
		(
			select is_change from acc_check_type t1
			left join ${table_name} t2 on t1.check_type_name = t2.check3
			where t1.group_id = #{group_id} and t1.hos_id = #{hos_id} 
			  and t1.copy_code = #{copy_code} and t2.subj_code = #{subj_code}
		) as is_change3,
		(
			select is_change from acc_check_type t1
			left join ${table_name} t2 on t1.check_type_name = t2.check4
			where t1.group_id = #{group_id} and t1.hos_id = #{hos_id} 
			  and t1.copy_code = #{copy_code} and t2.subj_code = #{subj_code}
		) as is_change4,
		( 
			select check_table 
            from acc_check_type  a 
            left join ${table_name} b  on  a.group_id = #{group_id}
            	and a.hos_id = #{hos_id}  and a.copy_code = #{copy_code} and a.check_type_name = b.check1
            where b.subj_code = #{subj_code}
        ) as table1 ,
        (   select column_id 
            from acc_check_type  a 
            left join ${table_name} b on  a.group_id = #{group_id}
            	and a.hos_id = #{hos_id}  and a.copy_code = #{copy_code} and a.check_type_name = b.check1
            where b.subj_code = ${subj_code} 
        ) as column_id1 ,
        ( 
          select column_no 
          from acc_check_type  a 
          left join ${table_name} b on  a.group_id = #{group_id}
          		and a.hos_id = #{hos_id} and a.copy_code = #{copy_code} and a.check_type_name = b.check1
          where b.subj_code = ${subj_code} 
        ) as column_no1 ,
        ( 
        	select a.check_type_id  from   ${table_name} b 
        	left join acc_check_type a 
        		on a.group_id = #{group_id} and a.hos_id = #{hos_id} and a.copy_code = #{copy_code} and a.check_type_name = b.check1
        	where b.subj_code = ${subj_code} 
        ) as check_type_id1,
        ( 
        	select column_code 
          	from acc_check_type  a 
          	left join ${table_name} b  on  a.group_id = #{group_id}  and a.hos_id = #{hos_id}
          		and a.copy_code = #{copy_code}  and a.check_type_name = b.check1
         	where  b.subj_code = ${subj_code} 
        ) as column_code1 ,
        ( select column_name 
          from acc_check_type  a 
          left join ${table_name} b  on  a.group_id = #{group_id} and a.hos_id = #{hos_id} 
            and a.copy_code = #{copy_code} and a.check_type_name = b.check1
          where b.subj_code = ${subj_code} 
        ) as column_name1 ,
        ( 
        	select column_check 
            from acc_check_type  a 
            left join ${table_name} b  on  a.group_id = #{group_id}  and a.hos_id = #{hos_id} 
                and a.copy_code = #{copy_code} and a.check_type_name = b.check1
            where b.subj_code = ${subj_code} 
        ) as column_check1 ,
        ( select check_table 
          from acc_check_type  a 
          left join ${table_name} b  on  a.group_id = #{group_id}
          	and a.hos_id = #{hos_id}  and a.copy_code = #{copy_code}
            and a.check_type_name = b.check2
          where b.subj_code = ${subj_code} 
        ) as table2 ,
        ( select column_id 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id} 
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check2
                      where b.subj_code = ${subj_code} 
                   ) as column_id2 ,
                ( select column_no 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id}
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check2
                     where b.subj_code = ${subj_code}
                   ) as column_no2 ,
                   ( select a.check_type_id 
                    from   ${table_name} b 
                    left join acc_check_type a 
        		on a.group_id = #{group_id} and a.hos_id = #{hos_id} and a.copy_code = #{copy_code} and a.check_type_name = b.check2
                     where b.subj_code = ${subj_code}
                   ) as check_type_id2 ,
                ( select column_code 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id}
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check2
                     where b.subj_code = ${subj_code}
                   ) as column_code2 ,
                ( select column_name 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id} 
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check2
                     where b.subj_code = ${subj_code}
                   ) as column_name2 ,
                ( select column_check 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id}  
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check2
                     where b.subj_code = ${subj_code}
                   ) as column_check2 ,
          ( select check_table 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id} 
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code} 
                        and a.check_type_name = b.check3
                     where b.subj_code = ${subj_code}
                   ) as table3,
                ( select column_id 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id} 
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check3
                     where b.subj_code = ${subj_code}
                   ) as column_id3 ,
                ( select column_no 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id} 
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check3
                     where b.subj_code = ${subj_code}
                   ) as column_no3 ,
                   ( select a.check_type_id
                    from   ${table_name} b 
                    left join acc_check_type a 
        		on a.group_id = #{group_id} and a.hos_id = #{hos_id} and a.copy_code = #{copy_code} and a.check_type_name = b.check3
                     where b.subj_code = ${subj_code} 
		            
                   ) as check_type_id3 ,
                 ( select column_code 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id}
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check3
                     where b.subj_code = ${subj_code}
                   ) as column_code3 ,
                ( select column_name 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id} 
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check3
                     where b.subj_code = ${subj_code}
                   ) as column_name3 ,
                ( select column_check 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id}
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check3
                     where b.subj_code = ${subj_code}
                   ) as column_check3 ,
           ( select check_table 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id}
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code} 
                        and a.check_type_name = b.check4
                     where b.subj_code = ${subj_code}
                   ) as table4 ,
                ( select column_id 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id}
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check4
                     where b.subj_code = ${subj_code}
                   ) as column_id4 ,
                ( select column_no 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id}
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check4
                     where b.subj_code = ${subj_code}
                   ) as column_no4 ,
                   ( select a.check_type_id
                    from   ${table_name} b 
                    left join acc_check_type a 
        		on a.group_id = #{group_id} and a.hos_id = #{hos_id} and a.copy_code = #{copy_code} and a.check_type_name = b.check4
                     where b.subj_code = ${subj_code}
                   ) as check_type_id4 ,
               ( select column_code 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id} 
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check4
                     where b.subj_code = ${subj_code}
                   ) as column_code4 ,
                ( select column_name 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id}
                        and a.hos_id = #{hos_id} 
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check4
                     where b.subj_code = ${subj_code}
                   ) as column_name4 ,
                ( select column_check 
                    from acc_check_type  a 
                    left join ${table_name} b 
                    on  a.group_id = #{group_id} 
                        and a.hos_id = #{hos_id}
                        and a.copy_code = #{copy_code}
                        and a.check_type_name = b.check4
                     where b.subj_code = ${subj_code}
                   ) as column_check4          
                   from dual
	</select>
	
	<!-- 查询科目辅助核算 -->
	<select id="queryLedgerCheckList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT alc.bal_od, alc.bal_oc, alc.this_od, alc.this_oc, alc.sum_od, alc.sum_oc, alc.end_od, alc.end_oc
			<if test=" COLUMN_NAME1 != null and COLUMN_NAME1 != '' and  COLUMN_NO1 != ''">
			,a.${COLUMN_ID1} ||'.'|| a.${COLUMN_NO1} as value1
			,a.${COLUMN_CODE1} ||' '|| a.${COLUMN_NAME1} as check1
			</if>
			<if test=" COLUMN_NAME1 != null and COLUMN_NAME1 != '' and  COLUMN_NO1 == ''">
			,a.${COLUMN_ID1}  as value1
			,a.${COLUMN_CODE1} ||' '|| a.${COLUMN_NAME1} as check1
			</if>
			<if test=" COLUMN_NAME2 != null and COLUMN_NAME2 != '' and COLUMN_NO2 != '' ">
			,b.${COLUMN_ID2} ||'.'|| b.${COLUMN_NO2} as value2
			, b.${COLUMN_CODE2} ||' '|| b.${COLUMN_NAME2} as check2
			</if>
			<if test=" COLUMN_NAME2 != null and COLUMN_NAME2 != '' and COLUMN_NO2 == '' ">
			,b.${COLUMN_ID2}  as value2
			, b.${COLUMN_CODE2} ||' '|| b.${COLUMN_NAME2} as check2
			</if>
			<if test=" COLUMN_NAME3 != null and COLUMN_NAME3 != '' and COLUMN_NO3 != '' ">
			,c.${COLUMN_ID3} ||'.'|| c.${COLUMN_NO3} as value3
			, c.${COLUMN_CODE3} ||' '||  c.${COLUMN_NAME3} as check3
			</if>
			<if test=" COLUMN_NAME3 != null and COLUMN_NAME3 != '' and  COLUMN_NO3 == '' ">
			,c.${COLUMN_ID3}  as value3
			, c.${COLUMN_CODE3} ||' '||  c.${COLUMN_NAME3} as check3
			</if>
			<if test=" COLUMN_NAME4 != null and COLUMN_NAME4 != '' and COLUMN_NO4 != '' ">
			,d.${COLUMN_ID4} ||'.'|| d.${COLUMN_NO4} as value4
			, d.${COLUMN_CODE4} ||' '|| d.${COLUMN_NAME4} as check4
			</if>
			<if test=" COLUMN_NAME4 != null and COLUMN_NAME4 != '' and  COLUMN_NO4 == '' ">
			,d.${COLUMN_ID4} as value4
			, d.${COLUMN_CODE4} ||' '|| d.${COLUMN_NAME4} as check4
			</if>
		FROM ${table_name_check} alc 
		<if test="TABLE1 != NULL and TABLE1 != '' ">
			left join  ${TABLE1}   a
			on  a.group_id = #{group_id}
				and a.hos_id = #{hos_id}
			<if test=" TABLE1 =='ACC_CHECK_ITEM' ">
				and a.copy_code = #{copy_code}
			</if>
    			and  alc.check_code1 = a.${COLUMN_CODE1}
<!--     			and  alc.${COLUMN_CHECK1} = a.${COLUMN_ID1} -->
<!--     		<if test=" TABLE1 !='ACC_CHECK_ITEM' and COLUMN_NO1 != '' and COLUMN_CHECK1_NO != ''"> -->
<!-- 				and  alc.${COLUMN_CHECK1_NO} = a.${COLUMN_NO1} -->
<!-- 			</if> -->
			<if test="IS_CHANGE1 == 1">
				and a.is_stop = 0 and a.is_disable = 0
			</if>
		</if>
		<if test="TABLE2 != NULL and TABLE1 != '' ">
			left join  ${TABLE2}   b on b.group_id = #{group_id}
			and b.hos_id = #{hos_id}
    		<if test=" TABLE2 == 'ACC_CHECK_ITEM' ">
			and b.copy_code = #{copy_code}
			</if>
    		and  alc.check_code2 = b.${COLUMN_CODE2}
<!--     		and  alc.${COLUMN_CHECK2} = b.${COLUMN_ID2} -->
<!--     		<if test=" TABLE2 !='ACC_CHECK_ITEM' and COLUMN_NO2 != '' and COLUMN_CHECK2_NO != ''"> -->
<!-- 			and  alc.${COLUMN_CHECK2_NO} = b.${COLUMN_NO2} -->
<!-- 			</if> -->
			<if test="IS_CHANGE2 == 1">
				and b.is_stop = 0 and b.is_disable = 0
			</if>
		</if>
		<if test="TABLE3 != NULL and TABLE3 != '' ">
			left join  ${TABLE3}   c on c.group_id = #{group_id}
			and c.hos_id = #{hos_id}
    		<if test=" TABLE3 =='ACC_CHECK_ITEM' ">
			and c.copy_code = #{copy_code}
			</if>
    		and  alc.check_code3 = c.${COLUMN_CODE3}
<!--     		and  alc.${COLUMN_CHECK3} = c.${COLUMN_ID3} -->
<!--     		<if test=" TABLE3 !='ACC_CHECK_ITEM' and COLUMN_NO3 != '' and COLUMN_CHECK3_NO != ''"> -->
<!-- 			and  alc.${COLUMN_CHECK3_NO} = c.${COLUMN_NO3} -->
<!-- 			</if> -->
			<if test="IS_CHANGE3 == 1">
				and c.is_stop = 0 and c.is_disable = 0
			</if>
		</if>
		<if test="TABLE4 != NULL and TABLE4 != '' ">
			left join  ${TABLE4}   d
		on  
			d.group_id = #{group_id}
			and d.hos_id = #{hos_id}
    		<if test=" TABLE4 =='ACC_CHECK_ITEM' ">
			and d.copy_code = #{hos_id}
			</if> 
    		and  alc.check_code4 = d.${COLUMN_CODE4}
<!--     		<if test=" TABLE4 !='ACC_CHECK_ITEM' and COLUMN_NO4 != '' and COLUMN_CHECK4_NO != ''"> -->
<!-- 			and  alc.${COLUMN_CHECK4_NO} = d.${COLUMN_NO4} -->
<!-- 			</if> -->
			<if test="IS_CHANGE4 == 1">
				and d.is_stop = 0 and d.is_disable = 0
			</if>
		</if>
		<where>
			<if test="subj_code != null  and subj_code != ''">
				alc.subj_code = #{subj_code}
			</if>
		</where>
	</select>

	<!-- 导入系统自带的数据 -->
	<insert id="importSystemAccSubjOldOldSubj">
	INSERT INTO
	TMP_ACC_SUBJ_OLD
	( select
	p1.SUBJ_CODE,p1.SUBJ_NAME,p1.SUBJ_NAME_ALL,p6.SUBJ_TYPE_name,p7.SUBJ_NATURE_name,

	case
	when p1.SUBJ_DIRE = 0 then '借'
	when p1.subj_dire = 1 then '贷' end subj_dire ,
	p1.subj_level,
	case
	when p1.is_cash = 0 then '否'
	when p1.is_cash = 1 then '是' end is_cash
	,
	case
	when p1.IS_LAST = 0 then '否'
	when p1.is_last = 1 then '是' end is_last
	,
	case
	when p1.IS_CHECK = 0 then '否'
	when p1.is_check = 1 then '是'
	end is_check
	,
	p2.check_type_name check1
	,p3.check_type_name check2,p4.check_type_name check3,p5.check_type_name check4,null
	from acc_subj p1
	left join acc_check_type p2
	on p1.group_id = p2.group_id
	and p1.hos_id = p2.hos_id
	and p1.copy_code = p2.copy_code
	and p1.check1 = p2.check_type_id
	left join acc_check_type p3
	on p1.group_id = p3.group_id
	and p1.hos_id = p3.hos_id
	and p1.copy_code = p3.copy_code
	and p1.check2 = p3.check_type_id
	left join acc_check_type p4
	on p1.group_id = p4.group_id
	and p1.hos_id = p4.hos_id
	and p1.copy_code = p4.copy_code
	and p1.check3 = p4.check_type_id
	left join acc_check_type p5
	on p1.group_id = p5.group_id
	and p1.hos_id = p5.hos_id
	and p1.copy_code = p5.copy_code
	and p1.check4 = p5.check_type_id
	left join acc_subj_type p6
	on p1.group_id = p6.group_id
	and p1.hos_id = p6.hos_id
	and p1.copy_code = p6.copy_code
	and p1.SUBJ_TYPE_CODE = p6.subj_type_code
	left join acc_subj_nature p7
	on p1.group_id = p7.group_id
	and p1.hos_id = p7.hos_id
	and p1.copy_code = p7.copy_code
	and p1.SUBJ_NATURE_CODE = p7.SUBJ_NATURE_CODE
	WHERE
	p1.GROUP_ID = #{group_id,jdbcType=INTEGER}
	AND p1.HOS_ID = #{hos_id,jdbcType=INTEGER}
	AND p1.COPY_CODE = #{copy_code,jdbcType=VARCHAR}
	AND p1.ACC_YEAR = '2018')
	</insert>
	
	<!-- 删除旧科目和新科目的数据 -->
	<delete id="deleteimportSystemAccSubjNewSubj">
		DELETE FROM
			${table}
		WHERE SUBJ_CODE IN
			(SELECT
				SUBJ_CODE
			FROM
				ACC_SUBJ
			WHERE
				GROUP_ID = #{group_id,jdbcType=INTEGER}
				AND HOS_ID = #{hos_id,jdbcType=INTEGER}
				AND COPY_CODE = #{copy_code,jdbcType=VARCHAR}
				AND ACC_YEAR = '2018')
	</delete>

	<!-- 查询需要赋值的数据 -->
	<select id="queryimportSystemAccSubjNewSubj" resultType="com.chd.hrp.acc.entity.TmpAccSubj">
		SELECT
			SUBJ_CODE,SUBJ_NAME,SUBJ_NAME_ALL,SUBJ_TYPE_CODE,SUBJ_NATURE_CODE,SUBJ_DIRE,SUBJ_LEVEL,IS_CASH,IS_LAST,
			IS_CHECK,CHECK1,CHECK1,CHECK1,CHECK1
		FROM
			ACC_SUBJ
		WHERE
			GROUP_ID = #{group_id,jdbcType=INTEGER}
			AND HOS_ID = #{hos_id,jdbcType=INTEGER}
			AND COPY_CODE = #{copy_code,jdbcType=VARCHAR}
			AND ACC_YEAR = '2018'
	</select>
	
	<!-- 查辅助核算项 -->
	<select id="queryLedgerCheckCodeAndName" resultType="java.util.Map" parameterType="java.util.Map">
		select ${column_code} as column_code, ${column_name} as column_name
		from ${check_table}
		where group_id = #{group_id, jdbcType=INTEGER} 
		  and hos_id = #{hos_id, jdbcType=INTEGER} 
		  and (
		      ${column_code} = #{check_name, jdbcType=VARCHAR} or 
		      ${column_name} = #{check_name, jdbcType=VARCHAR}
		  )
		<if test="is_sys == '0'">
			and copy_code = #{copy_code, jdbcType=VARCHAR}
		</if>
		<if test="is_change == '1'">
			and is_stop = 0 
		</if>
		<if test="check_table == 'ACC_CHECK_ITEM'">
			and check_type_id = #{check_type_id, jdbcType=BIGINT}
		</if>
	</select>

	<!-- 添加新科目数据 -->
	<insert id="importSystemAccSubjNewSubj">
	INSERT INTO
		TMP_ACC_SUBJ_NEW
			<foreach collection="list" close=" ) " open="  ( " item="vo" separator=" union all ">
			SELECT
				#{vo.subj_code,jdbcType=VARCHAR} SUBJ_CODE,
				#{vo.subj_name,jdbcType=VARCHAR} SUBJ_NAME,
				#{vo.subj_name_all,jdbcType=VARCHAR} SUBJ_NAME_ALL,
				#{vo.subj_type_code,jdbcType=VARCHAR} SUBJ_TYPE_CODE,
				#{vo.subj_nature_code,jdbcType=VARCHAR} SUBJ_NATURE_CODE,
				#{vo.subj_dire,jdbcType=VARCHAR} SUBJ_DIRE,
				#{vo.subj_level,jdbcType=VARCHAR} SUBJ_LEVEL,
				#{vo.is_cash,jdbcType=VARCHAR} IS_CASH,
				#{vo.is_last,jdbcType=VARCHAR} IS_LAST,
				#{vo.is_check,jdbcType=VARCHAR} IS_CHECK,
				#{vo.check1,jdbcType=VARCHAR} CHECK1,
				#{vo.check2,jdbcType=VARCHAR} CHECK2,
				#{vo.check3,jdbcType=VARCHAR} CHECK3,
				#{vo.check4,jdbcType=VARCHAR} CHECK4,
				null,
				#{vo.spell_code,jdbcType=VARCHAR} SPELL_CODE,
				#{vo.wbx_code,jdbcType=VARCHAR} WBX_CODE
			FROM
				DUAL
			</foreach>
	</insert>

	<delete id="deleteimportSystemAccSubjOld">
		delete from ${table}
		where subj_code in (select t2.subj_code
							from acc_leder t1
							left join acc_subj t2 
							       on t2.group_id = t1.group_id
							      and t2.hos_id = t1.hos_id
							      and t2.copy_code = t1.copy_code
							      and t2.subj_code = t1.subj_code
							where t1.group_id = #{group_id,jdbcType=INTEGER}
							  and t1.hos_id = #{hos_id,jdbcType=INTEGER}
							  and t1.copy_code = #{copy_code,jdbcType=VARCHAR}
							  and t1.acc_year = '2018'
							  and t1.acc_month = '12'
							  and t2.IS_LAST = 1
						    )
	</delete>

	
	<insert id="importSystemAccSubjOld">
		insert into TMP_ACC_LEDGER_OLD (
			select t2.subj_code,
				   t2.subj_name,
				   case
				      when t2.subj_dire = 0 then t1.end_os
				   else 0 end as bal_od,
				   case
				       when t2.subj_dire = 1 then t1.end_os
				   else 0 end as bal_oc,
				   0 this_od,
				   0 this_oc,
				   0 sum_od,
				   0 sum_oc,
				   case
				       when t2.subj_dire = 0 then t1.end_os
				   else 0 end as end_od,
				   case
				       when t2.subj_dire = 1 then t1.end_os
				   else 0 end as end_oc
			from acc_leder t1
			left join acc_subj t2 
				   on t2.group_id = t1.group_id
				  and t2.hos_id = t1.hos_id
				  and t2.copy_code = t1.copy_code
				  and t2.subj_code = t1.subj_code
				  and t2.acc_year = t1.acc_year
			where t1.group_id = #{group_id,jdbcType=INTEGER}
			  and t1.hos_id = #{hos_id,jdbcType=INTEGER}
			  and t1.copy_code = #{copy_code,jdbcType=INTEGER}
			  and t1.acc_year = '2018'
			  and t1.acc_month = '12'
			  and t2.is_last = 1
		)
	</insert>
	
	<!-- 导入系统的辅助核算 -->
	<insert id="importLedgerCheckFromSys" parameterType="java.util.Map">
		declare 
	      cursor subj_cursor is 
	        select t.group_id, t.hos_id, t.copy_code, t.subj_code, t.subj_name, t.subj_dire,
	          t1.column_check col1, t1.check_type_name tname1, t1.check_table tab1, t1.column_id cid1, t1.column_code code1, t1.column_name name1, t1.is_sys sys1, t1.is_change change1, 
	          t2.column_check col2, t2.check_type_name tname2, t2.check_table tab2, t2.column_id cid2, t2.column_code code2, t2.column_name name2, t2.is_sys sys2, t2.is_change change2,
	          t3.column_check col3, t3.check_type_name tname3, t3.check_table tab3, t3.column_id cid3, t3.column_code code3, t3.column_name name3, t3.is_sys sys3, t3.is_change change3,
	          t4.column_check col4, t4.check_type_name tname4, t4.check_table tab4, t4.column_id cid4, t4.column_code code4, t4.column_name name4, t4.is_sys sys4, t4.is_change change4
	        from acc_subj t 
	        left join acc_check_type t1
	               on t.group_id = t1.group_id 
	              and t.hos_id = t1.hos_id 
	              and t.copy_code = t1.copy_code 
	              and t.check1 = t1.check_type_id 
	        left join acc_check_type t2
	               on t.group_id = t2.group_id 
	              and t.hos_id = t2.hos_id 
	              and t.copy_code = t2.copy_code 
	              and t.check2 = t2.check_type_id 
	        left join acc_check_type t3 
	               on t.group_id = t3.group_id 
	              and t.hos_id = t2.hos_id 
	              and t.copy_code = t3.copy_code 
	              and t.check3 = t3.check_type_id 
	        left join acc_check_type t4 
	               on t.group_id = t4.group_id 
	              and t.hos_id = t4.hos_id 
	              and t.copy_code = t4.copy_code 
	              and t.check4 = t4.check_type_id
	        where t.group_id = #{group_id, jdbcType=INTEGER}
	          and t.hos_id = #{hos_id, jdbcType=INTEGER}
	          and t.copy_code = #{copy_code, jdbcType=VARCHAR}
	          and t.is_last = 1 
	          and t.acc_year = '2018'
	          and (t.is_check = 1 or t.subj_nature_code in('02', '03'));
	      c_row subj_cursor%rowtype;
	      v_sql varchar2(4000);
	      v_group_id number(18) := #{group_id, jdbcType=INTEGER};
	      v_hos_id number(18) := #{hos_id, jdbcType=INTEGER};
	      v_copy_code varchar(20) := #{copy_code, jdbcType=VARCHAR};
	    begin 
	      delete from tmp_acc_ledger_check_old;
	      
	      for c_row in subj_cursor loop
	        v_sql := '
	          insert into tmp_acc_ledger_check_old(
	            subj_code, subj_name, bal_od, bal_oc, this_od, this_oc, sum_od, sum_oc, end_od, end_oc,
	            check_type1, check_code1, check_name1, 
	            check_type2, check_code2, check_name2, 
	            check_type3, check_code3, check_name3, 
	            check_type4, check_code4, check_name4 
	          )
	          select t0.subj_code, t0.subj_name,
	          case '|| c_row.subj_dire ||' when 0 then t.end_os else 0 end bal_od,
	          case '|| c_row.subj_dire ||' when 1 then t.end_os else 0 end bal_oc,
	          0 this_od, 0 this_oc, 0 sum_od, 0 sum_oc,
	          case '|| c_row.subj_dire ||' when 0 then t.end_os else 0 end end_od,
	          case '|| c_row.subj_dire ||' when 1 then t.end_os else 0 end end_oc, '||
	          case 
	            when c_row.tab1 is not null 
	              then ''''|| c_row.tname1 || ''' as check_type1,t1.'|| c_row.code1 || ' as check_code1,t1.' || c_row.name1 || ' as check_name1, '  
	          else ' null check_type1,null check_code1,null check_name1, ' end ||
	          case 
	            when c_row.tab2 is not null 
	              then ''''|| c_row.tname2 || ''' as check_type2,t2.'|| c_row.code2 || ' as check_code2,t2.' || c_row.name2 || ' as check_name2, '  
	          else ' null check_type2,null check_code2,null check_name2, ' end ||
	          case 
	            when c_row.tab3 is not null 
	              then ''''|| c_row.tname3 || ''' as check_type3,t3.'|| c_row.code3 || ' as check_code3,t3.' || c_row.name3 || ' as check_name3, '  
	          else 'null check_type3,null check_code3,null check_name3,' end ||
	          case 
	            when c_row.tab4 is not null 
	              then ''''|| c_row.tname4 || ''' as check_type4,t4.'|| c_row.code4 || ' as check_code4,t4.' || c_row.name4 || ' as check_name4 '  
	          else ' null check_type4,null check_code4,null check_name4 ' end ||'
	          from acc_leder_check t 
	          left join acc_subj t0
	                 on t0.group_id = t.group_id
	                and t0.hos_id = t.hos_id
	                and t0.copy_code = t.copy_code
	                and t0.subj_code = t.subj_code
	                and t0.acc_year = t.acc_year '|| 
	          case when c_row.tab1 is not null then  '
	            left join '|| case when c_row.change1 = 1 then replace(c_row.tab1, '_DICT', '') else c_row.tab1 end || ' t1 
	                   on t.group_id = t1.group_id 
	                  and t.hos_id = t1.hos_id '||
	                  case when c_row.sys1 = 1 then ' and t1.'|| c_row.cid1 ||' = t.'|| c_row.col1 ||'_id ' 
	                  else ' and t1.'|| c_row.cid1 || ' = t.'|| c_row.col1 end ||
	                  case when c_row.sys1 = 0 then  ' and t.copy_code = t1.copy_code ' else '' end 
	          else '' end ||
	          case when c_row.tab2 is not null then  '
	            left join '|| case when c_row.change2 = 1 then replace(c_row.tab2, '_DICT', '') else c_row.tab2 end || ' t2 
	                   on t.group_id = t2.group_id 
	                  and t.hos_id = t2.hos_id '||
	                  case when c_row.sys2 = 1 then ' and t2.'|| c_row.cid2 ||' = t.'|| c_row.col2 ||'_id ' 
	                  else ' and t2.'|| c_row.cid2 || ' = t.'|| c_row.col2 end ||
	                  case when c_row.sys2 = 0 then ' and t.copy_code = t2.copy_code '  else '' end 
	          else '' end ||
	          case when c_row.tab3 is not null then '
	            left join '|| case when c_row.change3 = 1 then replace(c_row.tab3, '_DICT', '') else c_row.tab3 end || ' t3 
	                   on t.group_id = t3.group_id 
	                  and t.hos_id = t3.hos_id '||
	                  case when c_row.sys3 = 1 then ' and t3.'|| c_row.cid3 ||' = t.'|| c_row.col3 ||'_id ' 
	                  else ' and t3.'|| c_row.cid3 || ' = t.'|| c_row.col3 end ||
	                  case when c_row.sys3 = 0 then ' and t.copy_code = t3.copy_code ' else '' end 
	          else '' end ||
	          case when c_row.tab4 is not null then '
	            left join '|| case when c_row.change4 = 1 then replace(c_row.tab4, '_DICT', '') else c_row.tab4 end || ' t4 
	                   on t.group_id = t4.group_id 
	                  and t.hos_id = t4.hos_id '||
	                  case when c_row.sys4 = 1 then ' and t4.'|| c_row.cid4 ||' = t.'|| c_row.col4 ||'_id ' 
	                  else ' and t4.'|| c_row.cid4 || ' = t.'|| c_row.col4 end ||
	                  case when c_row.sys4 = 0 then ' and t.copy_code = t4.copy_code ' else '' end 
	          else '' end ||'
	          where t.group_id = '|| v_group_id ||' and t.hos_id = '|| v_hos_id ||' and t.copy_code = '''|| v_copy_code ||''' 
	            and t.acc_year = ''2018'' and t.acc_month = ''12'' and t.subj_code = '''||c_row.subj_code||'''
	          ';
	        execute immediate v_sql;
	      end loop;
	    end;
	</insert>

	<!-- 导入Excel前删除重复旧数据 -->
	<delete id="deleteAccSubjAccLedgerOld">
		delete from
			TMP_ACC_LEDGER_OLD
		where subj_code in 
			<foreach collection="list" open=" ( " item="vo" close=" ) " separator=",">
				#{vo.subj_code,jdbcType=VARCHAR}
			</foreach>
	</delete>

	<!-- 旧余额数据导入 -->
	<insert id="addAccSubjAccLedgerOld">
		INSERT INTO 
			TMP_ACC_LEDGER_OLD
			<foreach collection="list" close=" ) " item="vo" open=" ( " separator=" union all ">
				select
					#{vo.subj_code,jdbcType=INTEGER} subj_code,
					#{vo.subj_name,jdbcType=VARCHAR} subj_name,
					#{vo.bal_od,jdbcType=DOUBLE} bal_od,
					#{vo.bal_oc,jdbcType=DOUBLE} bal_oc,
					#{vo.this_od,jdbcType=DOUBLE} this_od,
					#{vo.this_oc,jdbcType=DOUBLE} this_oc,
					#{vo.sum_od,jdbcType=DOUBLE} sum_od,
					#{vo.sum_oc,jdbcType=DOUBLE} sum_oc,
					#{vo.end_od,jdbcType=DOUBLE} end_od,
					#{vo.end_oc,jdbcType=DOUBLE} end_oc
				from 
					dual
			</foreach>
	</insert>

	<!-- 旧科目转换新科目 -->
	<select id="regenerateAccSubjOld" statementType="CALLABLE">
		call PKG_TMP_TRANS.prc_Trans_Subj
		(#{code,mode=OUT,jdbcType=INTEGER},
         #{name,mode=OUT,jdbcType=VARCHAR})
	</select>
	
	<!-- 映射关系存储过程 -->
	<select id="regenerateAccSubjnewOldMap" statementType="CALLABLE">
		call PKG_TMP_TRANS.prc_Insert_Tran_Map
		(#{code,mode=OUT,jdbcType=INTEGER},
         #{name,mode=OUT,jdbcType=VARCHAR})
	</select>
	
	<!-- 查余额sum -->
	<select id="queryLedgerSumBySubjCode" parameterType="java.util.Map" resultType="java.util.Map">
		select sum(bal_od) as bal_od, sum(bal_oc) from ${table_name_check} where subj_code = #{subj_code}
	</select>
	
	<update id="updateTmpAccLedger" parameterType="java.util.Map">
		update ${table_name_ledger} set 
			bal_od = #{bal_od, jdbcType=DOUBLE}, 
			bal_oc = #{bal_oc, jdbcType=DOUBLE}, 
			end_od = #{end_od, jdbcType=DOUBLE},
			end_oc = #{end_oc, jdbcType=DOUBLE}
		where subj_code = #{subj_code, jdbcType=VARCHAR}
	</update>
	
	<!-- 查询是否存在非法的辅助核算名称 -->
 	<select id="queryaddOfficiallyNewSubj" resultType="java.util.Map">
	select t.subj_code,t.check1 subj_name from (
		select check1,to_char(wm_concat(subj_code)) subj_code from (
		select check1,subj_code from tmp_acc_subj_new where check1 is not null union
		all
		select check2,subj_code from tmp_acc_subj_new where check2 is not null union
		all
		select check3,subj_code from tmp_acc_subj_new where check3 is not null union
		all
		select check4,subj_code from tmp_acc_subj_new where check4 is not null) group
		by check1) t
	left join
		(select check_type_id,check_type_name from acc_check_type
			where group_id = #{group_id,jdbcType=INTEGER}
			and hos_id = #{hos_id,jdbcType=INTEGER} and copy_code = #{copy_code,jdbcType=VARCHAR}) p
		on t.check1 = p.check_type_name
	where p.check_type_id is null and p.check_type_name is null
	union all
	select count(1)||'',null from tmp_acc_subj_new
 	</select>
 
 	<!-- 查询新年度是否存在相同的科目 -->
 	<select id="queryaddOfficiallyAccSubj" resultType="int">
	select count(1) 
		from acc_subj
	where group_id = #{group_id,jdbcType=INTEGER}
		and hos_id = #{hos_id,jdbcType=INTEGER}
		and copy_code = #{copy_code,jdbcType=VARCHAR}
		and acc_year = '2019'
 	</select>
 
 	<!-- 查询需要添加拼音码的数据 -->
 	<select id="queryNewList" resultType="Map">
	with acc_check_types as (select check_type_id, check_type_name
	from acc_check_type
	where group_id = #{group_id,jdbcType=INTEGER}
	and hos_id = #{hos_id,jdbcType=INTEGER}
	and copy_code = #{copy_code,jdbcType=VARCHAR}), acc_subj_types as (select subj_type_code,
	subj_type_name
	from acc_subj_type
	where group_id = #{group_id,jdbcType=INTEGER}
	and hos_id = #{hos_id,jdbcType=INTEGER}
	and copy_code = #{copy_code,jdbcType=VARCHAR}
	), acc_subj_natures as (select SUBJ_NATURE_CODE,
	SUBJ_NATURE_NAME
	from acc_subj_nature
	where group_id = #{group_id,jdbcType=INTEGER}
	and hos_id = #{hos_id,jdbcType=INTEGER}
	and copy_code = #{copy_code,jdbcType=VARCHAR}
	)
	select #{group_id,jdbcType=INTEGER} group_id,
	#{hos_id,jdbcType=INTEGER} hos_id,
	#{copy_code,jdbcType=VARCHAR} copy_code,
	p1.SUBJ_CODE,
	p1.SUBJ_NAME,
	p1.SUBJ_NAME_ALL,
	p6.SUBJ_TYPE_code,
	case
	  when p7.SUBJ_NATURE_CODE is null 
	  then '01' else p7.SUBJ_NATURE_CODE end 
	SUBJ_NATURE_CODE,
	case
	when p1.SUBJ_DIRE = '借' then
	0
	when p1.subj_dire = '贷' then
	1 else 0
	end subj_dire,
	p1.SUBJ_LEVEL,
	case
	when nvl(p1.IS_CASH,'否') = '否' then
	0
	when p1.IS_CASH = '是' then
	1 else 0
	end IS_CASH,
	case
	when nvl(p1.IS_LAST,'否') = '否' then
	0
	when p1.IS_LAST = '是' then
	1 else 0
	end IS_LAST,
	case
	when nvl(p1.IS_CHECK,'否') = '否' then
	0
	when p1.IS_CHECK = '是' then
	1 else 0
	end IS_CHECK,
	p2.check_type_id CHECK1,
	p3.check_type_id CHECK2,
	p4.check_type_id CHECK3,
	p5.check_type_id CHECK4,
	p1.SPELL_CODE,
	p1.WBX_CODE,
	'2019' ACC_YEAR,
	0 IS_REMIT,
	case
	when length(p1.subj_code) = 4 then
	'top'
	when length(p1.subj_code) > 4 then
	substr(p1.subj_code, 0, (length(p1.subj_code) - 2))
	end super_code,
	0 is_stop,
	case
	when p1.subj_code like '1%'
	or p1.subj_code like '2%'
	or p1.subj_code like '3%'
	or p1.subj_code like '4%'
	or p1.subj_code like '5%' then '01'
	when p1.subj_code like '6%'
	or p1.subj_code like '7%'
	or p1.subj_code like '8%' then '02' end kind_code
	from tmp_acc_subj_new p1
	left join acc_check_types p2
	on p1.check1 = p2.check_type_name
	left join acc_check_types p3
	on p1.check2 = p3.check_type_name
	left join acc_check_types p4
	on p1.check3 = p4.check_type_name
	left join acc_check_types p5
	on p1.check4 = p5.check_type_name
	left join acc_subj_types p6
	on p1.subj_type_code = p6.subj_type_name
	left join acc_subj_natures p7
	on p1.SUBJ_NATURE_CODE = p7.SUBJ_NATURE_NAME
 	</select>
 
 	<!-- 正式载入新科目 -->
 	<insert id="addOfficiallyNewSubj">
	insert into acc_subj
	(subj_id,
	GROUP_ID,
	HOS_ID,
	COPY_CODE,
	SUBJ_CODE,
	SUBJ_NAME,
	SUBJ_NAME_ALL,
	SUBJ_TYPE_CODE,
	SUBJ_NATURE_CODE,
	SUBJ_DIRE,
	SUBJ_LEVEL,
	IS_CASH,
	IS_LAST,
	IS_CHECK,
	CHECK1,
	CHECK2,
	CHECK3,
	CHECK4,
	SPELL_CODE,
	WBX_CODE,
	acc_year,
	IS_REMIT,
	super_code,
	is_stop,
	kind_code
	)
	select acc_subj_seq.nextval,tt.*
	from (
	<foreach collection="list" item="vo" separator=" union all">
	select 
	#{vo.GROUP_ID,jdbcType=INTEGER},
	#{vo.HOS_ID,jdbcType=INTEGER},
	#{vo.COPY_CODE,jdbcType=VARCHAR},
	#{vo.SUBJ_CODE,jdbcType=VARCHAR},
	#{vo.SUBJ_NAME,jdbcType=VARCHAR},
	#{vo.SUBJ_NAME_ALL,jdbcType=VARCHAR},
	#{vo.SUBJ_TYPE_CODE,jdbcType=VARCHAR},
	#{vo.SUBJ_NATURE_CODE,jdbcType=VARCHAR},
	#{vo.SUBJ_DIRE,jdbcType=INTEGER},
	#{vo.SUBJ_LEVEL,jdbcType=INTEGER},
	#{vo.IS_CASH,jdbcType=INTEGER},
	#{vo.IS_LAST,jdbcType=INTEGER},
	#{vo.IS_CHECK,jdbcType=INTEGER},
	#{vo.CHECK1,jdbcType=INTEGER},
	#{vo.CHECK2,jdbcType=INTEGER},
	#{vo.CHECK3,jdbcType=INTEGER},
	#{vo.CHECK4,jdbcType=INTEGER},
	#{vo.SPELL_CODE,jdbcType=VARCHAR},
	#{vo.WBX_CODE,jdbcType=VARCHAR},
	#{vo.ACC_YEAR,jdbcType=VARCHAR},
	#{vo.IS_REMIT,jdbcType=INTEGER},
	#{vo.SUPER_CODE,jdbcType=VARCHAR},
	#{vo.IS_STOP,jdbcType=INTEGER},
	#{vo.KIND_CODE,jdbcType=VARCHAR}
	from dual
	</foreach> ) tt
 	</insert>

	<!-- 余额与辅助辅助核算正式载入系统 -->
	<insert id="ledgerAndCheckIntoSys" parameterType="java.util.Map">
		declare 
	        cursor c_ledger_check is 
	          select t.subj_code,
	            t1.check_type_id type_id1, t1.column_check col1, t1.check_type_name tname1, t1.check_table tab1, t1.column_id cid1, t1.column_no cno1, t1.column_code code1, t1.column_name name1, t1.is_sys sys1, t1.is_change change1, 
	            t2.check_type_id type_id2, t2.column_check col2, t2.check_type_name tname2, t2.check_table tab2, t2.column_id cid2, t2.column_no cno2, t2.column_code code2, t2.column_name name2, t2.is_sys sys2, t2.is_change change2,
	            t3.check_type_id type_id3, t3.column_check col3, t3.check_type_name tname3, t3.check_table tab3, t3.column_id cid3, t3.column_no cno3, t3.column_code code3, t3.column_name name3, t3.is_sys sys3, t3.is_change change3,
	            t4.check_type_id type_id4, t4.column_check col4, t4.check_type_name tname4, t4.check_table tab4, t4.column_id cid4, t4.column_no cno4, t4.column_code code4, t4.column_name name4, t4.is_sys sys4, t4.is_change change4 
	          from tmp_acc_subj_new t 
	          left join acc_check_type t1
	                 on t1.group_id = #{group_id, jdbcType=INTEGER}
	                and t1.hos_id = #{hos_id, jdbcType=INTEGER}
	                and t1.copy_code = #{copy_code, jdbcType=VARCHAR}
	                and t.check1 = t1.check_type_name 
	          left join acc_check_type t2
	                 on t2.group_id = #{group_id, jdbcType=INTEGER}
	                and t2.hos_id = #{hos_id, jdbcType=INTEGER}
	                and t2.copy_code = #{copy_code, jdbcType=VARCHAR}
	                and t.check2 = t2.check_type_name 
	          left join acc_check_type t3 
	                 on t3.group_id = #{group_id, jdbcType=INTEGER}
	                and t3.hos_id = #{hos_id, jdbcType=INTEGER}
	                and t3.copy_code = #{copy_code, jdbcType=VARCHAR}
	                and t.check3 = t3.check_type_name 
	          left join acc_check_type t4 
	                 on t4.group_id = #{group_id, jdbcType=INTEGER}
	                and t4.hos_id = #{hos_id, jdbcType=INTEGER}
	                and t4.copy_code = #{copy_code, jdbcType=VARCHAR}
	                and t.check4 = t4.check_type_name 
	          where t.is_check = '是';
	        c_row c_ledger_check%rowtype;
	        
	        v_sql varchar2(4000);
	        v_group_id number(18) := #{group_id, jdbcType=INTEGER};
	        v_hos_id number(18) := #{hos_id, jdbcType=INTEGER};
	        v_copy_code varchar(20) := #{copy_code, jdbcType=VARCHAR};
	      begin 
	        delete from acc_leder 
            where group_id = v_group_id and hos_id = v_hos_id and copy_code = v_copy_code
              and acc_year = '2019' and acc_month = '00';
	      
	        delete from acc_leder_check 
	        where group_id = v_group_id and hos_id = v_hos_id and copy_code = v_copy_code 
	          and acc_year = '2019' and acc_month = '00';
	          
	        insert into acc_leder (group_id, hos_id, copy_code, acc_year, acc_month, subj_code,
			  bal_os, this_od, this_oc, sum_od, sum_oc, end_os,
			  bal_os_w, this_od_w, this_oc_w, sum_od_w, sum_oc_w, end_os_w
			)
			select v_group_id group_id, v_hos_id hos_id, v_copy_code copy_code, '2019' acc_year, '00' acc_month, subj_code, 
			  0 bal_os, 0 this_od, 0 this_oc, 0 sum_od, 0 sum_oc, (nvl(bal_od, 0) + nvl(bal_oc, 0)) as end_os,
			  0 bal_os_w, 0 this_od_w, 0 this_oc_w, 0 sum_od_w, 0 sum_oc_w, 0 end_os_w
			from tmp_acc_ledger_new;
			
	        for c_row in c_ledger_check loop
	          v_sql := 'insert into acc_leder_check(group_id, hos_id, copy_code, acc_year, acc_month, subj_code,
	                      bal_os, this_od, this_oc, sum_od, sum_oc, end_os, 
	                      bal_os_w, this_od_w, this_oc_w, sum_od_w, sum_oc_w, end_os_w '||
	                      case when c_row.col1 is not null then 
	                        case when c_row.sys1 = 1 then 
	                          case when c_row.change1 = 1 then ', '||c_row.col1||'_id, '||c_row.col1||'_no' else ', '||c_row.col1||'_id' end 
	                        else ', '||c_row.col1 end
	                      else '' end ||
	                      case when c_row.col2 is not null then 
	                        case when c_row.sys2 = 1 then 
	                          case when c_row.change2 = 1 then ', '||c_row.col2||'_id, '||c_row.col2||'_no' else ', '||c_row.col2||'_id' end 
	                        else ', '||c_row.col2 end
	                      else '' end ||
	                      case when c_row.col3 is not null then 
	                        case when c_row.sys3 = 1 then 
	                          case when c_row.change3 = 1 then ', '||c_row.col3||'_id, '||c_row.col3||'_no' else ', '||c_row.col3||'_id' end 
	                        else ', '||c_row.col3 end
	                      else '' end ||
	                      case when c_row.col4 is not null then 
	                        case when c_row.sys4 = 1 then 
	                          case when c_row.change4 = 1 then ', '||c_row.col4||'_id, '||c_row.col4||'_no' else ', '||c_row.col4||'_id' end 
	                        else ', '||c_row.col4 end
	                      else '' end||'
	                    )select '||v_group_id||', '||v_hos_id||', '''||v_copy_code||''', ''2019'', ''00'', t.subj_code, 
	                      nvl(t.bal_od, 0) + nvl(t.bal_oc, 0), t.this_od, t.this_oc, t.sum_od, t.sum_oc, t.end_od + t.end_oc,
	                      0, 0, 0, 0, 0, 0 ' ||
	                      case when c_row.col1 is not null then 
	                        case when c_row.change1 = 1 then ', t1.'||c_row.cid1||', t1.'||c_row.cno1 
	                        else ', t1.'||c_row.cid1 end 
	                      else '' end ||
	                      case when c_row.col2 is not null then 
	                        case when c_row.change2 = 1 then ', t2.'||c_row.cid2||', t2.'||c_row.cno2 
	                        else ', t2.'||c_row.cid2 end 
	                      else '' end ||
	                      case when c_row.col3 is not null then 
	                        case when c_row.change3 = 1 then ', t3.'||c_row.cid3||', t3.'||c_row.cno3 
	                        else ', t3.'||c_row.cid3 end 
	                      else '' end ||
	                      case when c_row.col4 is not null then 
	                        case when c_row.change4 = 1 then ', t4.'||c_row.cid4||', t4.'||c_row.cno4 
	                        else ', t4.'||c_row.cid4 end 
	                      else '' end || '
	                    from tmp_acc_ledger_check_new t '|| 
	                    case when c_row.tab1 is not null then  '
	                      left join '|| c_row.tab1 || ' t1 
	                             on t1.group_id = ' || v_group_id || ' 
	                            and t1.hos_id = ' || v_hos_id ||'
	                            and t1.'|| c_row.code1 ||' = t.check_code1'|| 
	                            case when c_row.tab1 = 'ACC_CHECK_ITEM' then ' and t1.check_type_id = '|| c_row.type_id1 else '' end ||
	                            case when c_row.sys1 = 0 then ' and t1.copy_code = ''' || v_copy_code || '''' else '' end || 
	                            case when c_row.change1 = 1 then ' and t1.is_stop = 0 ' else '' end 
	                    else '' end || 
	                    case when c_row.tab2 is not null then  '
	                      left join '|| c_row.tab2 || ' t2 
	                             on t2.group_id = ' || v_group_id || ' 
	                            and t2.hos_id = ' || v_hos_id ||'
	                            and t2.'|| c_row.code2 ||' = t.check_code2'|| 
	                            case when c_row.tab2 = 'ACC_CHECK_ITEM' then ' and t2.check_type_id = '|| c_row.type_id2 else '' end ||
	                            case when c_row.sys2 = 0 then ' and t2.copy_code = ''' || v_copy_code || '''' else '' end || 
	                            case when c_row.change2 = 1 then ' and t2.is_stop = 0 ' else '' end 
	                    else '' end || 
	                    case when c_row.tab3 is not null then  '
	                      left join '|| c_row.tab3 || ' t3 
	                             on t3.group_id = ' || v_group_id || ' 
	                            and t3.hos_id = ' || v_hos_id ||'
	                            and t3.'|| c_row.code3 ||' = t.check_code3'||
	                            case when c_row.tab3 = 'ACC_CHECK_ITEM' then ' and t3.check_type_id = '|| c_row.type_id3 else '' end || 
	                            case when c_row.sys3 = 0 then ' and t3.copy_code = ''' || v_copy_code || '''' else '' end || 
	                            case when c_row.change3 = 1 then ' and t3.is_stop = 0 ' else '' end 
	                    else '' end || 
	                    case when c_row.tab4 is not null then  '
	                      left join '|| c_row.tab4 || ' t4 
	                             on t4.group_id = ' || v_group_id || ' 
	                            and t4.hos_id = ' || v_hos_id ||'
	                            and t4.'|| c_row.code4 ||' = t.check_code4'|| 
	                            case when c_row.tab4 = 'ACC_CHECK_ITEM' then ' and t4.check_type_id = '|| c_row.type_id4 else '' end ||
	                            case when c_row.sys4 = 0 then ' and t4.copy_code = ''' || v_copy_code || '''' else '' end || 
	                            case when c_row.change4 = 1 then ' and t4.is_stop = 0 ' else '' end 
	                    else '' end ||  '
	                    where t.subj_code = '''||c_row.subj_code||'''';
	          execute immediate v_sql;
	        end loop;
	      end;
	</insert>
	
	<!-- 生成余额 -->
	<select id="regenerateAccSubjnewLedger" statementType="CALLABLE">
		call PKG_TMP_TRANS.prc_Insert_Ledger
		(#{code,mode=OUT,jdbcType=INTEGER},
         #{name,mode=OUT,jdbcType=VARCHAR})
	</select>
	
	<!-- 生成余额辅助核算 -->
	<select id="regenerateAccSubjnewLedgerFuzhu" statementType="CALLABLE">
		call PKG_TMP_TRANS.prc_Insert_Ledger_Check
		(#{code,mode=OUT,jdbcType=INTEGER},
         #{name,mode=OUT,jdbcType=VARCHAR})
	</select>
	
	<select id="querySubjCodeOldSelect" resultType="java.util.Map">
		select subj_code "id",subj_code||' '||subj_name_all "text" from tmp_acc_subj_old
		where rownum &lt; 11 order by subj_code
	</select>
	
	<select id="querySubjcodenewSelect" resultType="java.util.Map">
		select subj_code "id",subj_code||' '||subj_name_all "text"
		from
			tmp_acc_subj_new
		where
			<if test=" code == 1 ">
			(subj_code like '1%' or 
			subj_code like '2%' or 
			subj_code like '3%' or
			subj_code like '4%' or 
			subj_code like '5%')
			</if>
			<if  test=" code == 2 ">
			(subj_code like '6%' or 
			subj_code like '7%' or 
			subj_code like '8%')
			</if>
			and rownum &lt; 11
		order by
			subj_code
	</select>
	
	<!-- 删除映射关系数据 -->
	<delete id="deleteUpdateTranMap">
		delete from
			tmp_acc_tran_map
		where
			subj_code_old = #{subj_code_old_s,jdbcType=VARCHAR}
			and subj_code_new = #{subj_code_new_s,jdbcType=VARCHAR}
			<if test="subj_code_new_b_s == null or subj_code_new_b_s == '' or subj_code_new_b_s == 'null' ">
			and subj_code_new_b is null
			</if>
			<if test="subj_code_new_b_s != null and subj_code_new_b_s != '' and subj_code_new_b_s != 'null'">
			and subj_code_new_b = #{subj_code_new_b_s,jdbcType=VARCHAR}
			</if>
	</delete>
	
	<!-- 修改映射关系 -->
	<insert id="updateTranMap">
		insert into
			tmp_acc_tran_map
			select * from
				(select subj_code from tmp_acc_subj_old where subj_code = #{subj_code_old,jdbcType=VARCHAR}),
				(select subj_name from tmp_acc_subj_old where subj_code = #{subj_code_old,jdbcType=VARCHAR}),
				(select subj_name_all from tmp_acc_subj_old where subj_code = #{subj_code_old,jdbcType=VARCHAR}),
				(select subj_code from tmp_acc_subj_new where subj_code = #{subj_code_new,jdbcType=VARCHAR}),
				(select subj_name from tmp_acc_subj_new where subj_code = #{subj_code_new,jdbcType=VARCHAR}),
				(select subj_name_all from tmp_acc_subj_new where subj_code = #{subj_code_new,jdbcType=VARCHAR}),
				(select subj_code from tmp_acc_subj_new where subj_code = #{subj_code_new_b,jdbcType=VARCHAR}),
				(select subj_name from tmp_acc_subj_new where subj_code = #{subj_code_new_b,jdbcType=VARCHAR}),
				(select subj_name_all from tmp_acc_subj_new where subj_code = #{subj_code_new_b,jdbcType=VARCHAR})
			dual
	</insert>
	
	<!-- 批量删除映射关系 -->
	<delete id="deleteTranMapList">
		delete from
			tmp_acc_tran_map
		where
			<foreach collection="list" separator="or" item="vo">
				(SUBJ_CODE_OLD = #{vo.SUBJ_CODE_OLD,jdbcType=VARCHAR}
				 and SUBJ_CODE_new = #{vo.SUBJ_CODE_NEW,jdbcType=VARCHAR}
			<if test="vo.SUBJ_CODE_NEW_B == 0 ">
				and subj_code_new_b is null
			</if>
			<if test="vo.SUBJ_CODE_NEW_B != null and vo.SUBJ_CODE_NEW_B != 0 ">
				and subj_code_new_b = #{vo.SUBJ_CODE_NEW_B,jdbcType=VARCHAR}
			</if>
				 )
			</foreach>
	</delete>
	
	<select id="queryNewLedgerExists" resultType="java.lang.Integer" parameterType="java.util.Map">
		select count(*) from acc_leder 
		where group_id = #{group_id, jdbcType=INTEGER}
		  and hos_id = #{hos_id, jdbcType=INTEGER}
		  and copy_code = #{copy_code, jdbcType=VARCHAR}
		  and acc_year = '2019'
		  and acc_month = '00'
	</select>
	
	<select id="queryExistsLastForNew" resultType="java.util.Map" parameterType="java.util.Set">
		<foreach collection="set" item="item" separator=" union all ">
			select '${item}' subj_code, count(*) count
			from tmp_acc_subj_new
			where subj_code != #{item, jdbcType=VARCHAR} 
			  and subj_code like '${item}%'
		</foreach>
	</select>
	<select id="queryExistsLastForOld" resultType="java.util.Map" parameterType="java.util.Set">
		<foreach collection="set" item="item" separator=" union all ">
			select '${item}' subj_code, count(*) count
			from tmp_acc_subj_old
			where subj_code != #{item, jdbcType=VARCHAR} 
			  and subj_code like '${item}%'
		</foreach>
	</select>
	
	<select id="queryTmpSubjIsLast" parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(*) from ${table_name} 
		where subj_code != #{subj_code, jdbcType=VARCHAR}
		  and subj_code like '${subj_code}%'
	</select>
	
	<!-- 删除新余额（批量） -->
	<delete id="deleteTmpAccLedgerNewBatch" parameterType="java.util.List">
		delete from tmp_acc_ledger_new where
		<foreach collection="list" item="item" separator=" or ">
			subj_code = #{item.subj_code, jdbcType=VARCHAR}
		</foreach>
	</delete>
	
	<insert id="addTmpAccLedgerNewBatch" parameterType="java.util.List">
		insert into tmp_acc_ledger_new (
			subj_code, subj_name, bal_od, bal_oc, this_od, this_oc, sum_od, sum_oc, end_od, end_oc
		)
		<foreach collection="list" item="item" open="(" close=")" separator=" union all ">
			select #{item.subj_code, jdbcType=VARCHAR} subj_code,
				   #{item.subj_name, jdbcType=VARCHAR} subj_name,
				   #{item.bal_od, jdbcType=DOUBLE} bal_od,
				   #{item.bal_oc, jdbcType=DOUBLE} bal_oc,
				   #{item.this_od, jdbcType=DOUBLE} this_od,
				   #{item.this_oc, jdbcType=DOUBLE} this_oc,
				   #{item.sum_od, jdbcType=DOUBLE} sum_od,
				   #{item.sum_oc, jdbcType=DOUBLE} sum_oc,
				   #{item.end_od, jdbcType=DOUBLE} end_od,
				   #{item.end_oc, jdbcType=DOUBLE} end_oc
			from dual
		</foreach>
	</insert>
	
	<delete id="deleteTmpAccTranMapBatch" parameterType="java.util.List">
		delete from tmp_acc_tran_map
		where (
			<foreach collection="list" item="item" separator=" or ">
				subj_code_old = #{item.subj_code_old, jdbcType=VARCHAR} or
				subj_code_new = #{item.subj_code_new, jdbcType=VARCHAR} 
			</foreach>
		)
	</delete>
	
	<insert id="addTmpAccTranMapBatch" parameterType="java.util.List">
		insert into tmp_acc_tran_map (
			subj_code_old, subj_name_old, subj_name_all_old,
			subj_code_new, subj_name_new, subj_name_all_new,
			subj_code_new_b, subj_name_new_b, subj_name_all_new_b
		)
		<foreach collection="list" item="item" separator=" union all ">
			select #{item.subj_code_old, jdbcType=VARCHAR},
				   #{item.subj_name_old, jdbcType=VARCHAR},
				   #{item.subj_name_all_old, jdbcType=VARCHAR},
				   #{item.subj_code_new, jdbcType=VARCHAR},
				   #{item.subj_name_new, jdbcType=VARCHAR},
				   #{item.subj_name_all_new, jdbcType=VARCHAR},
				   #{item.subj_code_new_b, jdbcType=VARCHAR},
				   #{item.subj_name_new_b, jdbcType=VARCHAR},
				   #{item.subj_name_all_new_b, jdbcType=VARCHAR}
			from dual
		</foreach>
	</insert>
</mapper>