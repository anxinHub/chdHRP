<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.mat.dao.account.balance.MatAccountBalanceInvHoldMapper">

		<resultMap id="accountBalanceInvHold" type="com.chd.hrp.mat.entity.MatAccountBalanceInvHold">
			<result property="inv_id"         column="inv_id"/>
			<result property="inv_code"       column="inv_code"/>
			<result property="memory_encoding"       column="memory_encoding"/>
			<result property="inv_name"       column="inv_name"/>
			<result property="inv_model"      column="inv_model"/>
			<result property="unit_name"      column="unit_name"/>
			<result property="mat_type_code"  column="mat_type_code"/>
			<result property="mat_type_name"  column="mat_type_name"/>
			<result property="begin_price"    column="begin_price"/>
			<result property="begin_amount"   column="begin_amount"/>
			<result property="begin_money"    column="begin_money"/>
			<result property="in_price"       column="in_price"/>
			<result property="in_amount"      column="in_amount"/>
			<result property="in_money"       column="in_money"/>
			<result property="out_price"      column="out_price"/>
			<result property="out_amount"     column="out_amount"/>
			<result property="out_money"      column="out_money"/>
			<result property="end_price"      column="end_price"/>
			<result property="end_amount"     column="end_amount"/>
			<result property="end_money"      column="end_money"/>
		</resultMap>
		<resultMap type="java.util.Map" id="accountBalanceInvHoldMap"></resultMap>

	<select id="queryMatAccountBalanceInvHold" parameterType="java.util.Map"  resultMap="accountBalanceInvHold">
		with t_result as(
			select inv_id, inv_code, memory_encoding, inv_name, inv_model, unit_name, mat_type_code, mat_type_name, 
				begin_price, begin_amount, begin_money, 
				in_price, in_amount, in_money, 
				out_price, out_amount, out_money, 
				end_price, end_amount, end_money
			from ( 
				select a.inv_id, b.inv_code, b.memory_encoding, b.inv_name, b.inv_model, b.unit_name, b.mat_type_code, b.mat_type_name,  
					a.in_amount, a.in_money, case when in_amount = 0 then 0 else in_money / in_amount end AS in_price, 
					a.out_amount, a.out_money, case when out_amount = 0 then 0 else out_money / out_amount end AS out_price, 
					c.begin_amount, c.begin_money, case when begin_amount = 0 then 0 else begin_money / begin_amount end AS begin_price, 
					nvl(c.begin_amount, 0) + a.in_amount - a.out_amount AS end_amount, 
					nvl(c.begin_money, 0) + a.in_money - a.out_money AS end_money, 
					case 
						when (nvl(c.begin_amount, 0) + a.in_amount - a.out_amount) = 0 then 0 
						else (nvl(c.begin_money, 0) + a.in_money - a.out_money) / (nvl(c.begin_amount, 0) + a.in_amount - a.out_amount) 
					end 
					AS end_price  
				from(
					select inv_id, sum(in_amount) in_amount, sum(in_money) in_money, 
						sum(out_amount) out_amount, sum(out_money) out_money
					from mat_inv_balance
					where group_id = #{group_id,jdbcType=INTEGER}
						and hos_id = #{hos_id,jdbcType=INTEGER}
						and copy_code = #{copy_code,jdbcType=VARCHAR}
						and year||month between #{b_year_month,jdbcType=VARCHAR} and #{e_year_month,jdbcType=VARCHAR}
						<if test="store_id != null and store_id != ''">
							and store_id = #{store_id,jdbcType=INTEGER}
						</if>
						<if test="store_id == null or store_id == ''">
							and to_char(store_id) in (
								select perm_code from v_user_data_perm  
								where group_id = #{group_id,jdbcType=INTEGER}
								and hos_id = #{hos_id,jdbcType=INTEGER}
								and table_code = 'HOS_STORE_DICT'
								and user_id = #{user_id,jdbcType=INTEGER}
								and is_read = 1 and is_write = 1 
							)
						</if>
					group by inv_id
				) a
				inner join(
					select a.inv_id, a.inv_code, a.memory_encoding, a.inv_name, a.inv_model, b.unit_name, c.mat_type_code, c.mat_type_name
					from mat_inv_dict a
					left join hos_unit b
						on a.group_id = b.group_id
						and a.hos_id = b.hos_id
						and a.unit_code = b.unit_code
					left join mat_type_dict c
						on a.group_id = c.group_id
						and a.hos_id = c.hos_id
						and a.copy_code = c.copy_code
						and a.mat_type_id = c.mat_type_id
						<if test="show_history == '1'">
							and a.mat_type_no = c.mat_type_no
						</if>
						<if test="show_history != '1'">
							and c.is_stop = 0
						</if>
					where a.group_id = #{group_id,jdbcType=INTEGER}
						and a.hos_id = #{hos_id,jdbcType=INTEGER}
						and a.copy_code = #{copy_code,jdbcType=VARCHAR}
						and a.is_stop = 0
						<if test="type_level != null and type_level != ''">
							and c.type_level &lt;= ${type_level}
						</if>
						<if test="mat_type_id != null and mat_type_id != ''">
							and a.mat_type_id = #{mat_type_id,jdbcType=INTEGER}
						</if>
						<if test="mat_type_code != null and mat_type_code != ''">
							and c.mat_type_code like '${mat_type_code}%'
						</if>
						<if test="mat_type_code ==null or mat_type_code == ''">
							and to_char(c.mat_type_id) in (
								select perm_code from v_user_data_perm  
								where group_id = #{group_id,jdbcType=INTEGER}
									and hos_id = #{hos_id,jdbcType=INTEGER}
									and table_code = 'MAT_TYPE_DICT'
									and user_id = #{user_id,jdbcType=INTEGER}
									and is_read = 1 and is_write = 1 
							)
						</if>
						<if test="inv_model != null and inv_model != ''">
					and (a.inv_model like '%${inv_model}%'
					 or a.inv_name like '%${inv_model}%'
				         or a.inv_code like '%${inv_model}%'
					     or upper(a.spell_code) like '%${inv_model}%'
					     or upper(a.wbx_code) like '%${inv_model}%'
					     or lower(a.spell_code) like '%${inv_model}%'
					     or lower(a.wbx_code) like '%${inv_model}%'
					     )
			</if>  
				) b
					on a.inv_id = b.inv_id
				left join (
					select inv_id, sum(begin_amount) begin_amount, sum(begin_money) begin_money
					from mat_inv_balance
					where group_id = #{group_id,jdbcType=INTEGER}
						and hos_id = #{hos_id,jdbcType=INTEGER}
						and copy_code = #{copy_code,jdbcType=VARCHAR}
						and year||month = #{b_year_month,jdbcType=VARCHAR}
						<if test="store_id != null and store_id != ''">
							and store_id = #{store_id,jdbcType=INTEGER}
						</if>
						<if test="store_id == null or store_id == ''">
							and to_char(store_id) in (
								select perm_code from v_user_data_perm  
								where group_id = #{group_id,jdbcType=INTEGER}
								and hos_id = #{hos_id,jdbcType=INTEGER}
								and table_code = 'HOS_STORE_DICT'
								and user_id = #{user_id,jdbcType=INTEGER}
								and is_read = 1 and is_write = 1 
							)
						</if>
					group by inv_id
				)c
					on a.inv_id = c.inv_id
				<where>
					<if test="show_zero != null and show_zero != '' and show_zero == '1'.toString()">
						and (a.in_amount &lt;&gt; 0 or a.out_amount &lt;&gt; 0 or c.begin_amount &lt;&gt; 0)
					</if>
				</where>
			)e
			<where>
				<if test="begin_price != null and begin_price != '' and end_price != null and end_price != ''">
					and (
					    (end_price &gt;= #{begin_price,jdbcType=INTEGER} and end_price &lt;= #{end_price,jdbcType=INTEGER}) 
					 or (begin_price &gt;= #{begin_price,jdbcType=INTEGER} and begin_price &lt;= #{end_price,jdbcType=INTEGER}) 
					 or (in_price &gt;= #{begin_price,jdbcType=INTEGER} and in_price &lt;= #{end_price,jdbcType=INTEGER}) 
					 or (out_price &gt;= #{begin_price,jdbcType=INTEGER} and out_price &lt;= #{end_price,jdbcType=INTEGER}) 
					)
				</if>
				<if test="begin_price != null and begin_price != ''  and (end_price == null or end_price == '')">
					and (
					    end_price &gt;= #{begin_price,jdbcType=INTEGER} 
					 or begin_price &gt;= #{begin_price,jdbcType=INTEGER}  
					 or in_price &gt;= #{begin_price,jdbcType=INTEGER} 
					 or out_price &gt;= #{begin_price,jdbcType=INTEGER} 
					)
				</if>
				<if test="end_price != null and end_price != '' and (begin_price == null or begin_price == '')">
					and (
					    end_price &lt;= #{end_price,jdbcType=INTEGER}
					 or begin_price &lt;= #{end_price,jdbcType=INTEGER}
					 or in_price &lt;= #{end_price,jdbcType=INTEGER}
					 or out_price &lt;= #{end_price,jdbcType=INTEGER} 
					)
				</if>		
				<if test="show_zero != null and show_zero != '' and show_zero == '1'.toString()">
					and end_amount &lt;&gt; 0
				</if>
			</where>
			<!-- 20170602 hsy 应即墨要求排序改为优先按存储编码再按材料编码 -->
			order by mat_type_code, memory_encoding, inv_code
		)
		select inv_id, to_char(inv_code) inv_code, memory_encoding, inv_name, inv_model, unit_name, mat_type_code, mat_type_name, 
			begin_price, begin_amount, begin_money, in_price, in_amount, in_money, 
			out_price, out_amount, out_money, end_price, end_amount, end_money
		from t_result
		union all
		select null, to_char('合计'), null, null, null, null, null, null, null, sum(begin_amount), sum(begin_money), 
			null, sum(in_amount), sum(in_money), null, sum(out_amount), sum(out_money), 
			null, sum(end_amount), sum(end_money)
		from t_result
	</select>
	<select id="queryMatAccountBalanceInvHoldPrint" parameterType="java.util.Map"  resultMap="accountBalanceInvHoldMap">
		with t_result as(
			select inv_id, inv_code, memory_encoding, inv_name, inv_model, unit_name, mat_type_code, mat_type_name, 
				begin_price, begin_amount, begin_money, 
				in_price, in_amount, in_money, 
				out_price, out_amount, out_money, 
				end_price, end_amount, end_money
			from (
				select a.inv_id, b.inv_code, b.memory_encoding, b.inv_name, b.inv_model, b.unit_name, b.mat_type_code, b.mat_type_name,  
					a.in_amount, a.in_money, case when in_amount = 0 then 0 else in_money / in_amount end AS in_price, 
					a.out_amount, a.out_money, case when out_amount = 0 then 0 else out_money / out_amount end AS out_price, 
					c.begin_amount, c.begin_money, case when begin_amount = 0 then 0 else begin_money / begin_amount end AS begin_price, 
					nvl(c.begin_amount, 0) + a.in_amount - a.out_amount AS end_amount, 
					nvl(c.begin_money, 0) + a.in_money - a.out_money AS end_money, 
					case 
						when (nvl(c.begin_amount, 0) + a.in_amount - a.out_amount) = 0 then 0 
						else (nvl(c.begin_money, 0) + a.in_money - a.out_money) / (nvl(c.begin_amount, 0) + a.in_amount - a.out_amount) 
					end 
					AS end_price  
				from(
					select inv_id, sum(in_amount) in_amount, sum(in_money) in_money, 
						sum(out_amount) out_amount, sum(out_money) out_money
					from mat_inv_balance
					where group_id = #{group_id,jdbcType=INTEGER}
						and hos_id = #{hos_id,jdbcType=INTEGER}
						and copy_code = #{copy_code,jdbcType=VARCHAR}
						and year||month between #{b_year_month,jdbcType=VARCHAR} and #{e_year_month,jdbcType=VARCHAR}
						<if test="store_id != null and store_id != ''">
							and store_id = #{store_id,jdbcType=INTEGER}
						</if>
						<if test="store_id == null or store_id == ''">
							and to_char(store_id) in (
								select perm_code from v_user_data_perm  
								where group_id = #{group_id,jdbcType=INTEGER}
								and hos_id = #{hos_id,jdbcType=INTEGER}
								and table_code = 'HOS_STORE_DICT'
								and user_id = #{user_id,jdbcType=INTEGER}
								and is_read = 1 and is_write = 1 
							)
						</if>
					group by inv_id
				) a
				inner join(
					select a.inv_id, a.inv_code, a.memory_encoding, a.inv_name, a.inv_model, b.unit_name, c.mat_type_code, c.mat_type_name
					from mat_inv_dict a
					left join hos_unit b
						on a.group_id = b.group_id
						and a.hos_id = b.hos_id
						and a.unit_code = b.unit_code
					left join mat_type_dict c
						on a.group_id = c.group_id
						and a.hos_id = c.hos_id
						and a.copy_code = c.copy_code
						and a.mat_type_id = c.mat_type_id
						<if test="show_history == '1'">
							and a.mat_type_no = c.mat_type_no
						</if>
						<if test="show_history != '1'">
							and c.is_stop = 0
						</if>
					where a.group_id = #{group_id,jdbcType=INTEGER}
						and a.hos_id = #{hos_id,jdbcType=INTEGER}
						and a.copy_code = #{copy_code,jdbcType=VARCHAR}
						and a.is_stop = 0
						<if test="type_level != null and type_level != ''">
							and c.type_level &lt;= ${type_level}
						</if>
						<if test="mat_type_id != null and mat_type_id != ''">
							and a.mat_type_id = #{mat_type_id,jdbcType=INTEGER}
						</if>
						<if test="mat_type_code != null and mat_type_code != ''">
							and c.mat_type_code like '${mat_type_code}%'
						</if>
						<if test="mat_type_code ==null or mat_type_code == ''">
							and to_char(c.mat_type_id) in (
								select perm_code from v_user_data_perm  
								where group_id = #{group_id,jdbcType=INTEGER}
									and hos_id = #{hos_id,jdbcType=INTEGER}
									and table_code = 'MAT_TYPE_DICT'
									and user_id = #{user_id,jdbcType=INTEGER}
									and is_read = 1 and is_write = 1 
							)
						</if>
						<if test="inv_model != null and inv_model != ''">
					and (a.inv_model like '%${inv_model}%'
					 or a.inv_name like '%${inv_model}%'
				         or a.inv_code like '%${inv_model}%'
					     or upper(a.spell_code) like '%${inv_model}%'
					     or upper(a.wbx_code) like '%${inv_model}%'
					     or lower(a.spell_code) like '%${inv_model}%'
					     or lower(a.wbx_code) like '%${inv_model}%'
					     )
			</if>  
				) b
					on a.inv_id = b.inv_id
				left join (
					select inv_id, sum(begin_amount) begin_amount, sum(begin_money) begin_money
					from mat_inv_balance
					where group_id = #{group_id,jdbcType=INTEGER}
						and hos_id = #{hos_id,jdbcType=INTEGER}
						and copy_code = #{copy_code,jdbcType=VARCHAR}
						and year||month = #{b_year_month,jdbcType=VARCHAR}
						<if test="store_id != null and store_id != ''">
							and store_id = #{store_id,jdbcType=INTEGER}
						</if>
						<if test="store_id == null or store_id == ''">
							and to_char(store_id) in (
								select perm_code from v_user_data_perm  
								where group_id = #{group_id,jdbcType=INTEGER}
								and hos_id = #{hos_id,jdbcType=INTEGER}
								and table_code = 'HOS_STORE_DICT'
								and user_id = #{user_id,jdbcType=INTEGER}
								and is_read = 1 and is_write = 1 
							)
						</if>
					group by inv_id
				)c
					on a.inv_id = c.inv_id
				<where>
					<if test="show_zero != null and show_zero != '' and show_zero == '1'">
						and (a.in_amount &lt;&gt; 0 or a.out_amount &lt;&gt; 0 or c.begin_amount &lt;&gt; 0)
					</if>
				</where>
			)e
			<where>
				<if test="begin_price != null and begin_price != ''">
					and end_price &gt;= #{begin_price,jdbcType=INTEGER}
				</if>
				<if test="end_price != null and end_price != ''">
					and end_price &lt;= #{end_price,jdbcType=INTEGER}
				</if>		
				<if test="show_zero != null and show_zero != '' and show_zero == '1'">
					and end_amount &lt;&gt; 0
				</if>
			</where>
			<!-- 20170602 hsy 应即墨要求排序改为优先按存储编码再按材料编码 -->
			order by mat_type_code, memory_encoding, inv_code
		)
		select inv_id, to_char(inv_code) inv_code, memory_encoding, inv_name, inv_model, unit_name, mat_type_code, mat_type_name, 
			begin_price, begin_amount, begin_money, in_price, in_amount, in_money, 
			out_price, out_amount, out_money, end_price, end_amount, end_money
		from t_result
		union all
		select null, to_char('合计'), null, null, null, null, null, null, null, sum(begin_amount), sum(begin_money), 
			null, sum(in_amount), sum(in_money), null, sum(out_amount), sum(out_money), 
			null, sum(end_amount), sum(end_money)
		from t_result
	</select>
</mapper>

