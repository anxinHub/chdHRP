<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.budg.dao.budgincome.toptodown.hosyearinbudg.BudgMedIncomeHosYearMapper">
	
	<resultMap id="budgMedIncomeHosYear" type="com.chd.hrp.budg.entity.BudgMedIncomeHosYear">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="year" column="year"/>
	<result property="subj_code" column="subj_code"/>
	<result property="count_value" column="count_value"/>
	<result property="budg_value" column="budg_value"/>
	<result property="remark" column="remark"/>
	<result property="last_year_income" column="last_year_income"/>
	</resultMap>
		
	<resultMap id="budgMedIncomeHosYearMap" type="java.util.Map">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="year" column="year"/>
	<result property="subj_code" column="subj_code"/>
	<result property="count_value" column="count_value"/>
	<result property="budg_value" column="budg_value"/>
	<result property="remark" column="remark"/>
	<result property="last_year_income" column="last_year_income"/>
	
	
	<result property="subj_name" column="subj_name"/>
	<result property="is_single_count" column="is_single_count"/>
	<result property="resolve_or_sum" column="resolve_or_sum"/>
	<result property="resolve_way" column="resolve_way"/>
	<result property="grow_rate" column="grow_rate"/>
	<result property="resolve_rate" column="resolve_rate"/>
	<result property="is_last" column="is_last"/>
	
	<result property="super_code" column="super_code"/>
	<result property="subj_level" column="subj_level"/>
	<result property="parentValue" column="parentValue"/>
	<result property="sumLastIncome" column="sumLastIncome"/>
	
	</resultMap>
	
	<insert id="add" useGeneratedKeys="true" >
	
		INSERT INTO BUDG_MED_INCOME_HOS_YEAR (
		group_id
		,
		hos_id
		,
		copy_code
		,
		year
		,
		subj_code
		,
		count_value
		,
		budg_value
		,
		remark
		,
		last_year_income
		) VALUES (
		#{group_id,jdbcType=INTEGER}
		,
		#{hos_id,jdbcType=INTEGER}
		,
		#{copy_code,jdbcType=VARCHAR}
		,
		#{year,jdbcType=VARCHAR}
		,
		#{subj_code,jdbcType=VARCHAR}
		,
		#{count_value,jdbcType=INTEGER}
		,
		#{budg_value,jdbcType=INTEGER}
		,
		#{remark,jdbcType=VARCHAR}
		,
		#{last_year_income,jdbcType=INTEGER}
		
		)
	
	</insert>
	<insert id="addBatch" parameterType="java.util.List" >
	
		INSERT INTO BUDG_MED_INCOME_HOS_YEAR (
		group_id
		,
		hos_id
		,
		copy_code
		,
		year
		,
		subj_code
		,
		count_value
		,
		budg_value
		,
		remark
		,
		last_year_income
		
		) select  t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
			#{item.group_id,jdbcType=INTEGER}
			,
			#{item.hos_id,jdbcType=INTEGER}
			,
			#{item.copy_code,jdbcType=VARCHAR}
			,
			#{item.year,jdbcType=VARCHAR}
			,
			#{item.subj_code,jdbcType=VARCHAR}
			,
			#{item.count_value,jdbcType=INTEGER}
			,
			#{item.budg_value,jdbcType=INTEGER}
			,
			#{item.remark,jdbcType=VARCHAR}
			,
			#{item.last_year_income,jdbcType=INTEGER}
			
		    from dual
		</foreach>
		)t
	</insert>
	
	<update id="update" parameterType="java.util.Map">
	
		UPDATE budg_med_income_hos_year set
			count_value = #{count_value,jdbcType=INTEGER}
			,
			budg_value = #{budg_value,jdbcType=INTEGER}
			,
			remark = #{remark,jdbcType=VARCHAR}
			,
			last_year_income = #{last_year_income,jdbcType=INTEGER}
		<where>                     
			<if test="group_id != null and group_id != ''">
			AND group_id = #{group_id,jdbcType=INTEGER}
			</if>
			<if test="hos_id != null and hos_id != ''">
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			</if>
			<if test="copy_code != null and copy_code != ''">
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			</if>
			<if test="year != null and year != ''">
			AND year = #{year,jdbcType=VARCHAR}
			</if>
			<if test="subj_code != null and subj_code != ''">
			AND subj_code = #{subj_code,jdbcType=VARCHAR}
			</if>
		</where>  
	</update>
	<update id="updateBatch" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE budg_med_income_hos_year 
			<trim prefix="SET"  suffixOverrides=","> 
				remark = #{item.remark,jdbcType=VARCHAR}
				,
				
				last_year_income = #{item.last_year_income,jdbcType=INTEGER}
				,
		
				count_value = #{item.count_value,jdbcType=INTEGER}
				,
			<if test="item.budg_value != null and item.budg_value != ''">
				budg_value = #{item.budg_value}
			</if>
			</trim>
			<where>                     
				<if test="item.group_id != null and item.group_id != ''">
				AND group_id = #{item.group_id,jdbcType=INTEGER}
				</if>  
				<if test="item.hos_id != null and item.hos_id != ''">
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				</if>  
				<if test="item.copy_code != null and item.copy_code != ''">
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				</if>  
				<if test="item.year != null and item.year != ''">
				AND year = #{item.year,jdbcType=VARCHAR}
				</if>  
				<if test="item.subj_code != null and item.subj_code != ''">
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
				</if>  
			</where>  			
		</foreach>
	</update>
		<insert id="addBatchResolveRate" parameterType="java.util.List" >
	
		INSERT INTO BUDG_HOS_RESOLVE_RATE (
		group_id
		,
		hos_id
		,
		copy_code
		,
		year
		,
		subj_code
		,
		grow_rate
		,
		resolve_rate
		,
		remark
		,
		last_year_income
		
		) select  t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
			#{item.group_id,jdbcType=INTEGER}
			,
			#{item.hos_id,jdbcType=INTEGER}
			,
			#{item.copy_code,jdbcType=VARCHAR}
			,
			#{item.year,jdbcType=VARCHAR}
			,
			#{item.subj_code,jdbcType=VARCHAR}
			,
			#{item.grow_rate,jdbcType=INTEGER}
			,
			#{item.resolve_rate,jdbcType=INTEGER}
			,
			#{item.remark,jdbcType=VARCHAR}
			,
			#{item.last_year_income,jdbcType=INTEGER}
			
		    from dual
		</foreach>
		)t
	</insert>
	<delete id="delete" parameterType="java.util.Map">
	
		DELETE FROM budg_med_income_hos_year 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id,jdbcType=INTEGER}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id,jdbcType=INTEGER}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code,jdbcType=VARCHAR}
		</if>
		<if test="year != null and year != ''">
		AND year = #{year,jdbcType=VARCHAR}
		</if>
		<if test="subj_code != null and subj_code != ''">
		AND subj_code = #{subj_code,jdbcType=VARCHAR}
		</if>
		</where>  
	</delete>
	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM budg_med_income_hos_year 
		<where>
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				<if test="item.subj_code != null and item.subj_code != ''">
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
				</if>
			</foreach>
	    </where>  
	</delete>
	<delete id="deleteBatchResolveRate" parameterType="java.util.List">
		DELETE FROM BUDG_HOS_RESOLVE_RATE 
		<where>
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				<if test="item.subj_code != null and item.subj_code != ''">
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
				</if>
			</foreach>
	    </where>  
	    </delete>
	<select id="query" parameterType="java.util.Map" resultMap="budgMedIncomeHosYearMap" >
	
		SELECT 
		bmihy.group_id,
		bmihy.hos_id,
		bmihy.copy_code,
		bmihy.year,
		bmihy.subj_code,
		bmihy.count_value,
		bmihy.budg_value,
		bmihy.remark,
		bmihy.last_year_income,
		bis.subj_name,
		bis.is_last,
		bmiep.resolve_way,
		bhrr.grow_rate
		FROM BUDG_MED_INCOME_HOS_YEAR bmihy
		LEFT JOIN BUDG_INCOME_SUBJ  bis
				ON
					bmihy.group_id = bis.group_id
					and bmihy.hos_id = bis.hos_id
					and bmihy.copy_code = bis.copy_code
					and bmihy.year = bis.budg_year
					and bmihy.subj_code = bis.subj_code
		LEFT JOIN BUDG_MED_INCOME_EDIT_PLAN bmiep
				ON
					bmihy.group_id = bmiep.group_id
					and bmihy.hos_id = bmiep.hos_id
					and bmihy.copy_code = bmiep.copy_code
					and bmihy.year = bmiep.budg_year
					and bmihy.subj_code = bmiep.subj_code
		LEFT JOIN BUDG_HOS_RESOLVE_RATE  bhrr
				ON
					bmihy.group_id = bhrr.group_id
					and bmihy.hos_id = bhrr.hos_id
					and bmihy.copy_code = bhrr.copy_code
					and bmihy.year = bhrr.year
					and bmihy.subj_code = bhrr.subj_code
		where                     
			bmihy.group_id = #{group_id,jdbcType=INTEGER}
			AND bmihy.hos_id = #{hos_id,jdbcType=INTEGER}
			AND bmihy.copy_code = #{copy_code,jdbcType=VARCHAR}
			
			<if test="year != null and year != ''">
				AND bmihy.year = #{year,jdbcType=VARCHAR}
			</if>
			<if test="subj_code != null and subj_code != ''">
				  and bmihy.subj_code in (
	          select bis2.subj_code from budg_income_subj bis2
	          start with bis2.subj_code=#{subj_code,jdbcType=VARCHAR} connect by bis2.super_code=prior bis2.subj_code
	        )  
			</if>
			<if test="subj_level != null and subj_level != ''">
				AND bis.subj_level = #{subj_level,jdbcType=VARCHAR}
			</if>
			<if test="is_single_count != null and is_single_count != ''">
				AND bmiep.is_single_count = #{is_single_count,jdbcType=INTEGER}
			</if>
		order by  bmihy.subj_code asc
	</select>
	<select id="queryByCode" resultMap="budgMedIncomeHosYear"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		year,
		subj_code,
		count_value,
		budg_value,
		remark,
		last_year_income
		FROM budg_med_income_hos_year 
		WHERE 
		group_id = #{group_id,jdbcType=INTEGER}   and 
		hos_id = #{hos_id,jdbcType=INTEGER}   and 
		copy_code = #{copy_code,jdbcType=VARCHAR}   and 
		year = #{year,jdbcType=VARCHAR}   and 
		subj_code = #{subj_code,jdbcType=VARCHAR} 
	
	</select>
	<select id="queryByUniqueness" resultMap="budgMedIncomeHosYear"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		year,
		subj_code,
		count_value,
		budg_value,
		remark,
		last_year_income
		FROM BUDG_MED_INCOME_HOS_YEAR 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id,jdbcType=INTEGER}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id,jdbcType=INTEGER}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code,jdbcType=VARCHAR}
		</if>
		<if test="year != null and year != ''">
		AND year = #{year,jdbcType=VARCHAR}
		</if>
		<if test="subj_code != null and subj_code != ''">
		AND subj_code = #{subj_code,jdbcType=VARCHAR}
		</if>
		<if test="count_value != null and count_value != ''">
		AND count_value = #{count_value,jdbcType=INTEGER}
		</if>
		<if test="budg_value != null and budg_value != ''">
		AND budg_value = #{budg_value,jdbcType=INTEGER}
		</if>
		<if test="remark != null and remark != ''">
		AND remark = #{remark,jdbcType=VARCHAR}
		</if>
		<if test="last_year_income != null and last_year_income != ''">
		AND last_year_income = #{last_year_income,jdbcType=INTEGER}
		</if>
		</where>   
		order by group_id asc
	</select>
	<select id="queryExists" resultMap="budgMedIncomeHosYear"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		year,
		subj_code,
		count_value,
		budg_value,
		remark,
		last_year_income
		FROM BUDG_MED_INCOME_HOS_YEAR 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id,jdbcType=INTEGER}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id,jdbcType=INTEGER}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code,jdbcType=VARCHAR}
		</if>
		<if test="year != null and year != ''">
		AND year = #{year,jdbcType=VARCHAR}
		</if>
		<if test="subj_code != null and subj_code != ''">
		AND subj_code = #{subj_code,jdbcType=VARCHAR}
		</if>
		<if test="count_value != null and count_value != ''">
		AND count_value = #{count_value,jdbcType=INTEGER}
		</if>
		<if test="budg_value != null and budg_value != ''">
		AND budg_value = #{budg_value,jdbcType=INTEGER}
		</if>
		<if test="remark != null and remark != ''">
		AND remark = #{remark,jdbcType=VARCHAR}
		</if>
		<if test="last_year_income != null and last_year_income != ''">
		AND last_year_income = #{last_year_income,jdbcType=INTEGER}
		</if>
		</where>   
		order by group_id asc
	</select>
	
	<!-- 根据科目编码查询上年收入-->
	<select id="queryLastYearIncome" parameterType="java.util.Map" resultMap="budgMedIncomeHosYearMap" >
	
		SELECT  
			sum(amount) as last_year_income
		FROM BUDG_MED_INCOME_EXECUTE 

		where   
			group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND year = #{year,jdbcType=VARCHAR}
			AND subj_code like (#{subj_code} || '%')
	</select>
	
	<!-- 查询添加数据是否已存在 -->
	<select id="queryDataExist" resultType="java.lang.String">
		<foreach collection="list" item="item" index="index" separator=" union all " >
			SELECT to_number(${item.rowNo})+ 1 rowNo
			FROM BUDG_MED_INCOME_HOS_YEAR
			where
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
		</foreach>
	</select>
	
	<!-- 分解计算   增量生成时 查询生成数据 -->
	<select id="queryData" parameterType="java.util.Map" resultMap="budgMedIncomeHosYearMap" >
	
		SELECT  
			a.group_id ,
			a.hos_id ,
			a.copy_code ,
			a.budg_year year ,
			a.subj_code ,
			a.resolve_or_sum 
		FROM BUDG_MED_INCOME_EDIT_PLAN a
		where    
			a.group_id = #{group_id,jdbcType=INTEGER}
			AND a.hos_id = #{hos_id,jdbcType=INTEGER}
			AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
			AND a.budg_year = #{budg_year,jdbcType=VARCHAR}
			AND a.is_single_count = #{is_single_count,jdbcType=INTEGER}
			and not exists(
				select 1 from BUDG_MED_INCOME_HOS_YEAR b
				 where a.group_id = b.group_id and a.hos_id = b.hos_id and a.copy_code = b.copy_code
				 		and a.budg_year = b.year and a.subj_code = b.subj_code
				 
			)
	</select>
	
	<!-- 计算时 查询计算数据 -->
	<select id="queryCollectData" parameterType="java.util.Map" resultMap="budgMedIncomeHosYearMap" >
	
		with temp as(<!-- 构建  计算数据临时表 -->
			SELECT  
				a.group_id ,
				a.hos_id ,
				a.copy_code ,
				a.year ,
				a.subj_code ,
				c.subj_name ,
				nvl(a.last_year_income,0) last_year_income ,
				b.resolve_or_sum ,
				b.resolve_way ,
				c.super_code ,
				c.subj_level ,
				nvl(d.grow_rate , 0) grow_rate ,
				nvl(d.resolve_rate,0) resolve_rate
			FROM BUDG_MED_INCOME_HOS_YEAR a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.year = b.budg_year
					and a.subj_code = b.subj_code
			left join budg_income_subj c
				on
					a.group_id = c.group_id 
					and a.hos_id = c.hos_id
					and a.copy_code = c.copy_code
					and a.year = c.budg_year
					and a.subj_code = c.subj_code
			left join BUDG_HOS_RESOLVE_RATE d
				on 
					a.group_id = d.group_id
					and a.hos_id = d.hos_id 
					and a.copy_code = d.copy_code
					and a.year = d.year
					and a.subj_code = d.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
				AND b.is_single_count = #{is_single_count,jdbcType=INTEGER}
		),
		subjData as( <!-- 非独立核算 分解方法 科目 -->
			select bs.group_id , bs.hos_id , bs.copy_code , bs.budg_year year , bs.subj_code , bs.super_code , bs.subj_level  
			from budg_income_subj bs
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					bs.group_id = b.group_id
					and bs.hos_id = b.hos_id 
					and bs.copy_code = b.copy_code
					and bs.budg_year = b.budg_year
					and bs.subj_code = b.subj_code
			where
				bs.group_id = #{group_id,jdbcType=INTEGER}
				AND bs.hos_id = #{hos_id,jdbcType=INTEGER}
				AND bs.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND bs.budg_year = #{year,jdbcType=VARCHAR}
				AND b.is_single_count = #{is_single_count,jdbcType=INTEGER}
				<!-- 分解  -->
				AND b.resolve_or_sum = '01'
		),
		exeTemp as (<!-- 非独立核算 分解方法  科目 上年执行数据 -->
			select a.group_id , a.hos_id , a.copy_code , a.year , a.subj_code , a.super_code , a.subj_level  , nvl(sum(b.amount),0) amount		
			from subjData a
			left join BUDG_MED_INCOME_EXECUTE b
				on
					a.group_id = b.group_id 
					and a.hos_id = b.hos_id
					and a.copy_code = b.copy_code
					and a.year = b.year + 1
					and b.subj_code like (a.subj_code || '%')
			where 
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
			group by a.group_id , a.hos_id , a.copy_code , a.year , a.subj_code , a.super_code , a.subj_level 
		) ,
		subjAllValue as ( <!--  所有科目的预算   -->
			select  a.group_id , a.hos_id , a.copy_code , a.budg_year , a.subj_code ,  b.budg_value
			from budg_income_subj  a
			left join BUDG_MED_INCOME_HOS_YEAR b
				on
					a.group_id = b.group_id 
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.budg_year = b. year 
					and a.subj_code = b.subj_code 
			where
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.budg_year = #{year,jdbcType=VARCHAR}
		)
		
		<!-- 同时 查询 其父级科目 的 预算及 其所有非独立核算一级子科目的上年执行数据和  -->
		select t.* , nvl(v.budg_value,-1) parentValue , et.amount sumLastIncome
		from temp  t
		left join subjAllValue v
			on
				t.group_id = v.group_id
				and t.hos_id = v.hos_id 
				and t.copy_code = v.copy_code
				and t.year = v.budg_year
				and t.super_code = v.subj_code
		left join (select group_id , hos_id , copy_code , year , super_code , subj_level , sum(amount) amount 
					from exeTemp 
					
					group by group_id , hos_id , copy_code , year , super_code , subj_level ) et
			on 
				t.group_id = et.group_id
				and t.hos_id = et.hos_id 
				and t.copy_code = et.copy_code
				and t.year = et.year
				and t.super_code = et.super_code
				and t.subj_level = et.subj_level
		
	</select>
	
	<!-- 计算时 根据科目 查询 其同级独立核算科目  及同级汇总科目 的预算之和 -->
	<select id="querySumValue" parameterType="java.util.Map" resultType="java.lang.Double" >
	
			SELECT  nvl(sum(budg_value),0)
			FROM BUDG_MED_INCOME_HOS_YEAR a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.year = b.budg_year
					and a.subj_code = b.subj_code
			left join budg_income_subj c
				on
					a.group_id = c.group_id 
					and a.hos_id = c.hos_id
					and a.copy_code = c.copy_code
					and a.year = c.budg_year
					and a.subj_code = c.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
				<!-- 独立核算科目  或 汇总科目 -->
				AND (b.is_single_count = 1 or (b.is_single_count = 0  and resolve_or_sum = '02'))
				AND a.subj_code like (${super_code} || '%')
				and c.subj_level = #{subj_level,jdbcType=INTEGER	}
	</select>
	
	<!-- 计算时 根据科目 查询 其同级独立核算科目  、同级汇总科目 预算数据 -->
	<select id="querySubjList" parameterType="java.util.Map" resultMap="budgMedIncomeHosYearMap" >
	
			SELECT  a.group_id , a.hos_id , a.copy_code , a.year , a.subj_code ,c.subj_name, c.subj_level,
				nvl(a.budg_value,-1) budg_value ,b.is_single_count , b.resolve_or_sum , b.resolve_way
			FROM BUDG_MED_INCOME_HOS_YEAR a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.year = b.budg_year
					and a.subj_code = b.subj_code
			left join budg_income_subj c
				on
					a.group_id = c.group_id 
					and a.hos_id = c.hos_id
					and a.copy_code = c.copy_code
					and a.year = c.budg_year
					and a.subj_code = c.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
				AND (b.is_single_count = 1 or (b.is_single_count = 0  and resolve_or_sum = '02'))
				AND c.super_code =#{super_code,jdbcType=VARCHAR} 
	</select>
	
	
	<!-- 计算时 根据科目 查询 其父级科目信息 -->
	<select id="queryParentSubj" parameterType="java.util.Map" resultMap="budgMedIncomeHosYearMap" >
	
			SELECT  a.group_id , a.hos_id , a.copy_code , a.year , a.subj_code ,c.subj_name, c.subj_level,
				nvl(a.budg_value,-1) budg_value ,b.is_single_count , b.resolve_or_sum , b.resolve_way
			FROM BUDG_MED_INCOME_HOS_YEAR a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.year = b.budg_year
					and a.subj_code = b.subj_code
			left join budg_income_subj c
				on
					a.group_id = c.group_id 
					and a.hos_id = c.hos_id
					and a.copy_code = c.copy_code
					and a.year = c.budg_year
					and a.subj_code = c.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
				AND a.subj_code = #{super_code,jdbcType=VARCHAR} 
	</select>
		
	<!--分解计算时 分解方法为 平均分摊  根据 参数 查询    与其上级科目的的一级所有子科目  数量 -->
	<select id="querySubjCount" parameterType="java.util.Map" resultType="java.lang.Integer" >
	
			SELECT  count(a.subj_code)  
			from budg_income_subj a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id 
					and a.hos_id = b.hos_id
					and a.copy_code = b.copy_code
					and a.budg_year = b.budg_year
					and a.subj_code = b.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.budg_year = #{year,jdbcType=VARCHAR}
				AND a.super_code = #{super_code,jdbcType=VARCHAR}
				<!-- 非独立核算 -->
				AND b.is_single_count = 0
				<!-- 分解 -->
				AND b.resolve_or_sum = '01'
	</select>
	
	<!-- 分解计算 递归  查询  计算 所传科目 预算 所需 数据  -->
	<select id="queryCountData" parameterType="java.util.Map" resultMap="budgMedIncomeHosYearMap" >
	
		with temp as(<!-- 构建  计算数据临时表 -->
			SELECT  
				a.group_id ,
				a.hos_id ,
				a.copy_code ,
				a.year ,
				a.subj_code ,
				c.subj_name ,
				nvl(a.last_year_income,0) last_year_income ,
				b.resolve_or_sum ,
				b.resolve_way ,
				c.super_code ,
				c.subj_level ,
				nvl(d.grow_rate , 0) grow_rate ,
				nvl(d.resolve_rate,0) resolve_rate
			FROM BUDG_MED_INCOME_HOS_YEAR a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.year = b.budg_year
					and a.subj_code = b.subj_code
			left join budg_income_subj c
				on
					a.group_id = c.group_id 
					and a.hos_id = c.hos_id
					and a.copy_code = c.copy_code
					and a.year = c.budg_year
					and a.subj_code = c.subj_code
			left join BUDG_HOS_RESOLVE_RATE d
				on 
					a.group_id = d.group_id
					and a.hos_id = d.hos_id 
					and a.copy_code = d.copy_code
					and a.year = d.year
					and a.subj_code = d.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
				AND b.is_single_count = #{is_single_count,jdbcType=INTEGER}
				AND a.subj_code = #{subj_code,jdbcType=VARCHAR}
		),
		subjData as( <!-- 非独立核算 分解方法 科目 -->
			select bs.group_id , bs.hos_id , bs.copy_code , bs.budg_year year , bs.subj_code , bs.super_code , bs.subj_level  
			from budg_income_subj bs
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					bs.group_id = b.group_id
					and bs.hos_id = b.hos_id 
					and bs.copy_code = b.copy_code
					and bs.budg_year = b.budg_year
					and bs.subj_code = b.subj_code
			where
				bs.group_id = #{group_id,jdbcType=INTEGER}
				AND bs.hos_id = #{hos_id,jdbcType=INTEGER}
				AND bs.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND bs.budg_year = #{year,jdbcType=VARCHAR}
				AND b.is_single_count = #{is_single_count,jdbcType=INTEGER}
				<!-- 分解  -->
				AND b.resolve_or_sum = '01'
		),
		exeTemp as (<!-- 非独立核算 分解方法  科目 上年执行数据 -->
			select a.group_id , a.hos_id , a.copy_code , a.year , a.subj_code , a.super_code , a.subj_level  , nvl(sum(b.amount),0) amount		
			from subjData a
			left join BUDG_MED_INCOME_EXECUTE b
				on
					a.group_id = b.group_id 
					and a.hos_id = b.hos_id
					and a.copy_code = b.copy_code
					and a.year = b.year + 1
					and b.subj_code like (a.subj_code || '%')
			where 
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
			group by a.group_id , a.hos_id , a.copy_code , a.year , a.subj_code , a.super_code , a.subj_level 
		) ,
		subjAllValue as ( <!--  所有科目的预算   -->
			select  a.group_id , a.hos_id , a.copy_code , a.budg_year , a.subj_code ,  b.budg_value
			from budg_income_subj  a
			left join BUDG_MED_INCOME_HOS_YEAR b
				on
					a.group_id = b.group_id 
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.budg_year = b. year 
					and a.subj_code = b.subj_code 
			where
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.budg_year = #{year,jdbcType=VARCHAR}
		)
		
		<!-- 同时 查询 其父级科目 的 预算及 其所有非独立核算一级子科目的上年执行数据和  -->
		select t.* , nvl(v.budg_value,-1) parentValue , et.amount sumLastIncome
		from temp  t
		left join subjAllValue v
			on
				t.group_id = v.group_id
				and t.hos_id = v.hos_id 
				and t.copy_code = v.copy_code
				and t.year = v.budg_year
				and t.super_code = v.subj_code
		left join (select group_id , hos_id , copy_code , year , super_code , subj_level , sum(amount) amount 
					from exeTemp 
					
					group by group_id , hos_id , copy_code , year , super_code , subj_level ) et
			on 
				t.group_id = et.group_id
				and t.hos_id = et.hos_id 
				and t.copy_code = et.copy_code
				and t.year = et.year
				and t.super_code = et.super_code
				and t.subj_level = et.subj_level
		
	</select>
	
	<!-- 计算时 根据科目 查询 其所有下级科目信息 及 预算数据 -->
	<select id="queryChildSubj" parameterType="java.util.Map" resultMap="budgMedIncomeHosYearMap" >
	
			SELECT  a.group_id , a.hos_id , a.copy_code , a.year , a.subj_code ,c.subj_name, c.subj_level,
				nvl(a.budg_value,-1) budg_value ,b.is_single_count , b.resolve_or_sum , b.resolve_way
			FROM BUDG_MED_INCOME_HOS_YEAR a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.year = b.budg_year
					and a.subj_code = b.subj_code
			left join budg_income_subj c
				on
					a.group_id = c.group_id 
					and a.hos_id = c.hos_id
					and a.copy_code = c.copy_code
					and a.year = c.budg_year
					and a.subj_code = c.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
				AND c.super_code = #{subj_code,jdbcType=VARCHAR}
	</select>
	
	<!-- 根据 科目 汇总其所有下级科目预算 -->
	<select id="querySumSubjValue" parameterType="java.util.Map" resultType="java.lang.Double" >
	
			SELECT  sum(nvl(a.budg_value,0))
			FROM BUDG_MED_INCOME_HOS_YEAR a
			left join budg_income_subj c
				on
					a.group_id = c.group_id 
					and a.hos_id = c.hos_id
					and a.copy_code = c.copy_code
					and a.year = c.budg_year
					and a.subj_code = c.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
				AND c.super_code  = #{subj_code,jdbcType=VARCHAR}
	</select>
	
	<!-- 更新 医院年度医疗收入预算  计算值、预算值 -->
	<update id="updateValue" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE budg_med_income_hos_year set
		
				count_value = #{item.count_value,jdbcType=INTEGER}
				,
				budg_value = #{item.budg_value}
			where                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
		</foreach>
	</update>
	
	<!-- 更新 医院医疗收入科目分解比例维护表 分解比例 -->
	<update id="updateResolveRate" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE BUDG_HOS_RESOLVE_RATE set
		
				resolve_rate = #{item.resolve_rate,jdbcType=INTEGER}
			where                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
		</foreach>
	</update>
	

	<!-- 汇总科室年各级科目预算值   然后 更新医院年预算值 -->
	<select id="sumDeptBudgValue" parameterType="java.util.Map" resultMap="budgMedIncomeHosYearMap" >
			with temp as
			 (select group_id,
			         hos_id,
			         copy_code,
			         year,
			         subj_code,
			         sum(budg_value) budg_value
			    from BUDG_MED_INCOME_DEPT_YEAR
			   where 
				   	group_id = #{group_id,jdbcType=INTEGER}
					AND hos_id = #{hos_id,jdbcType=INTEGER}
					AND copy_code = #{copy_code,jdbcType=VARCHAR}
					AND year = #{year,jdbcType=VARCHAR}
			   group by group_id, hos_id, copy_code, year, subj_code)
			SELECT t.group_id,
			       t.hos_id,
			       t.copy_code,
			       t.year,
			       bis.subj_code,
			       bis.subj_name,
			       sum(t.budg_value) budg_value
			FROM budg_income_subj bis
			LEFT JOIN temp t
			  ON
			     bis.group_id = t.group_id
			     and bis.hos_id = t.hos_id
			     and bis.copy_code = t.copy_code
			     and bis.budg_year = t.year
			     and t.subj_code like bis.subj_code || '%'
			WHERE 
			 	t.group_id = #{group_id,jdbcType=INTEGER}
				AND t.hos_id = #{hos_id,jdbcType=INTEGER}
				AND t.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND t.year = #{year,jdbcType=VARCHAR}
			GROUP BY t.group_id,t.hos_id,t.copy_code,t.year,bis.subj_code,bis.subj_name
			ORDER BY bis.subj_code
	</select>
<!-- 	自上而下  科室汇总功能使用 -->
	<update id="updateHosBudgValue" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE budg_med_income_hos_year 
			SET
				budg_value = #{item.budg_value}
			
			WHERE                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
		</foreach>
	</update>

	<!-- 医院年度医疗收入预算  更新 计算值、预算值 -->
	<update id="updateGrowRate" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE BUDG_MED_INCOME_HOS_YEAR  set
				count_value = last_year_income* (1+to_number(${item.grow_rate})/100)
				,
				budg_value = last_year_income * (1+to_number(${item.grow_rate})/100)
			where                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
		</foreach>
	</update>

</mapper>

