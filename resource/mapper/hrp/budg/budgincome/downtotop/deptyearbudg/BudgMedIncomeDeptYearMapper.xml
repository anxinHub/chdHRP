<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.budg.dao.budgincome.downtotop.deptyearbudg.BudgMedIncomeDeptYearMapper">
	
	<resultMap id="budgMedIncomeDeptYear" type="com.chd.hrp.budg.entity.BudgMedIncomeDeptYear">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="year" column="year"/>
	<result property="subj_code" column="subj_code"/>
	<result property="dept_id" column="dept_id"/>
	<result property="count_value" column="count_value"/>
	<result property="budg_value" column="budg_value"/>
	<result property="remark" column="remark"/>
	<result property="grow_rate" column="grow_rate"/>
	<result property="resolve_rate" column="resolve_rate"/>
	<result property="last_year_income" column="last_year_income"/>
	<result property="state" column="state"/>
	<result property="reason" column="reason"/>
	<result property="refer_value" column="refer_value"/>
	</resultMap>
		
	<resultMap id="budgMedIncomeDeptYearMap" type="java.util.Map">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="year" column="year"/>
	<result property="subj_code" column="subj_code"/>
	<result property="dept_id" column="dept_id"/>
	<result property="dept_code" column="dept_code"/>
	<result property="dept_name" column="dept_name"/>
	<result property="count_value" column="count_value"/>
	<result property="budg_value" column="budg_value"/>
	<result property="remark" column="remark"/>
	<result property="grow_rate" column="grow_rate"/>
	<result property="resolve_rate" column="resolve_rate"/>
	<result property="last_year_income" column="last_year_income"/>
	<result property="state" column="state"/>
	<result property="reason" column="reason"/>
	<result property="refer_value" column="refer_value"/>
	<result property="parentValue" column="parentValue"/>
	<result property="sumLastIncome" column="sumLastIncome"/>
	<result property="resolve_or_sum" column="resolve_or_sum"/>
	<result property="resolve_way" column="resolve_way"/>
	
	<result property="super_code" column="super_code"/>
	<result property="subj_level" column="subj_level"/>

	<result property="subj_name" column="subj_name"/>
	<result property="is_last" column="is_last"/>
	</resultMap>
	
	<insert id="add" useGeneratedKeys="true" >
	
		INSERT INTO BUDG_MED_INCOME_DEPT_YEAR (
			group_id
			,
			hos_id
			,
			copy_code
			,
			year
			,
			subj_code
			,
			dept_id
			,
			count_value
			,
			budg_value
			,
			remark
			,
			grow_rate
			,
			resolve_rate
			,
			last_year_income
			,
			state
			,
			reason
			,
			refer_value
		) VALUES (
			#{group_id,jdbcType=INTEGER}
			,
			#{hos_id,jdbcType=INTEGER}
			,
			#{copy_code,jdbcType=VARCHAR}
			,
			#{year,jdbcType=VARCHAR}
			,
			#{subj_code,jdbcType=VARCHAR}
			,
			#{dept_id,jdbcType=INTEGER}
			,
			#{count_value,jdbcType=INTEGER}
			,
			#{budg_value,jdbcType=INTEGER}
			,
			#{remark,jdbcType=VARCHAR}
			,
			#{grow_rate,jdbcType=INTEGER}
			,
			#{resolve_rate,jdbcType=INTEGER}
			,
			#{last_year_income,jdbcType=INTEGER}
			,
			#{state,jdbcType=VARCHAR}
			,
			#{reason,jdbcType=VARCHAR}
			,
			#{refer_value,jdbcType=INTEGER}
		)
	
	</insert>
	<insert id="addBatch" parameterType="java.util.List" >
	
		INSERT INTO BUDG_MED_INCOME_DEPT_YEAR (
			group_id
			,
			hos_id
			,
			copy_code
			,
			year
			,
			subj_code
			,
			dept_id
			,
			count_value
			,
			budg_value
			,
			remark
			,
			grow_rate
			,
			resolve_rate
			,
			last_year_income
			,
			state
			,
			reason
			,
			refer_value
		
		) select  t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
			#{item.group_id,jdbcType=INTEGER}
			,
			#{item.hos_id,jdbcType=INTEGER}
			,
			#{item.copy_code,jdbcType=VARCHAR}
			,
			#{item.year,jdbcType=VARCHAR}
			,
			#{item.subj_code,jdbcType=VARCHAR}
			,
			#{item.dept_id,jdbcType=INTEGER}
			,
			#{item.count_value,jdbcType=INTEGER}
			,
			#{item.budg_value,jdbcType=INTEGER}
			,
			#{item.remark,jdbcType=VARCHAR}
			,
			#{item.grow_rate,jdbcType=INTEGER}
			,
			#{item.resolve_rate,jdbcType=INTEGER}
			,
			#{item.last_year_income,jdbcType=INTEGER}
			,
			#{item.state,jdbcType=VARCHAR}
			,
			#{item.reason,jdbcType=VARCHAR}
			,
			#{item.refer_value,jdbcType=INTEGER}
			
		    from dual
		</foreach>
		)t
	</insert>
	
	<update id="update" parameterType="java.util.Map">
	
		UPDATE budg_med_income_dept_year  SETS
			count_value = #{count_value,jdbcType=INTEGER}
			,
			budg_value = #{budg_value,jdbcType=INTEGER}
			,
			remark = #{remark,jdbcType=VARCHAR}
			,
			grow_rate = #{grow_rate,jdbcType=INTEGER}
			,
			resolve_rate = #{resolve_rate,jdbcType=INTEGER}
			,
			last_year_income = #{last_year_income,jdbcType=INTEGER}
		<where>                     
			<if test="group_id != null and group_id != ''">
			AND group_id = #{group_id,jdbcType=INTEGER}
			</if>
			<if test="hos_id != null and hos_id != ''">
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			</if>
			<if test="copy_code != null and copy_code != ''">
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			</if>
			<if test="year != null and year != ''">
			AND year = #{year,jdbcType=VARCHAR}
			</if>
			<if test="subj_code != null and subj_code != ''">
			AND subj_code = #{subj_code,jdbcType=VARCHAR}
			</if>
			<if test="dept_id != null and dept_id != ''">
			AND dept_id = #{dept_id,jdbcType=INTEGER}
			</if>
		</where>  
	</update>
	<update id="updateBatch" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE budg_med_income_dept_year SET
				<if test="item.count_value != null and item.count_value != ''">
				count_value = #{item.count_value,jdbcType=INTEGER}
				,
				</if>
				<if test="item.budg_value != null and item.budg_value != ''">
				budg_value = #{item.budg_value,jdbcType=INTEGER}
				,
				</if>
				remark = #{item.remark,jdbcType=VARCHAR}
				,
				grow_rate = #{item.grow_rate,jdbcType=INTEGER}
				,
				resolve_rate = #{item.resolve_rate,jdbcType=INTEGER}
				,
				last_year_income = #{item.last_year_income,jdbcType=INTEGER}
			WHERE                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				
				AND year = #{item.year,jdbcType=VARCHAR}
				
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
				
				AND dept_id = #{item.dept_id,jdbcType=INTEGER}
		</foreach>
	</update>
	
	<delete id="delete" parameterType="java.util.Map">
	
		DELETE FROM budg_med_income_dept_year 
		WHERE                     
			group_id = #{group_id,jdbcType=INTEGER}
			
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
		
			AND year = #{year,jdbcType=VARCHAR}
			
			AND subj_code = #{subj_code,jdbcType=VARCHAR}
			
			AND dept_id = #{dept_id,jdbcType=INTEGER}
	</delete>
	
	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM budg_med_income_dept_year 
		<where>
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
				AND dept_id = #{item.dept_id,jdbcType=INTEGER}
			</foreach>
	    </where>  
	</delete>
	
	<select id="query" parameterType="java.util.Map" resultMap="budgMedIncomeDeptYearMap" >
	 with a as (
		SELECT 
		bmidy.group_id,
		bmidy.hos_id,
		bmidy.copy_code,
		bmidy.year,
		bmidy.subj_code,
		bis.subj_name,
		bmidy.dept_id,
		hd.dept_code ,
		hd.dept_name ,
		bmidy.count_value,
		bmidy.budg_value,
		bmidy.remark,
		bmidy.grow_rate,
		bmidy.resolve_rate,
		bmidy.last_year_income,
		bmidy.state,
		bmidy.reason,
		bmidy.refer_value,
		bis.is_last,
		bmiep.resolve_way
		FROM BUDG_MED_INCOME_DEPT_YEAR bmidy
		LEFT JOIN BUDG_INCOME_SUBJ  bis
				ON
					bmidy.group_id = bis.group_id
					and bmidy.hos_id = bis.hos_id
					and bmidy.copy_code = bis.copy_code
					and bmidy.year = bis.budg_year
					and bmidy.subj_code = bis.subj_code
		LEFT JOIN BUDG_MED_INCOME_EDIT_PLAN bmiep
				ON
					bmidy.group_id = bmiep.group_id
					and bmidy.hos_id = bmiep.hos_id
					and bmidy.copy_code = bmiep.copy_code
					and bmidy.year = bmiep.budg_year
					and bmidy.subj_code = bmiep.subj_code
		LEFT JOIN BUDG_DEPT_RESOLVE_RATE  bdrr
				ON
					bmidy.group_id = bdrr.group_id
					and bmidy.hos_id = bdrr.hos_id
					and bmidy.copy_code = bdrr.copy_code
					and bmidy.year = bdrr.year
					and bmidy.subj_code = bdrr.subj_code
		LEFT JOIN HOS_DEPT_DICT hd
			ON
				bmidy.group_id  = hd.group_id
				and bmidy.hos_id  = hd.hos_id
				and bmidy.dept_id  = hd.dept_id
				and hd.is_stop = 0
		WHERE 
			bmidy.group_id = #{group_id,jdbcType=INTEGER}
			AND bmidy.hos_id = #{hos_id,jdbcType=INTEGER}
			AND bmidy.copy_code = #{copy_code,jdbcType=VARCHAR}
		<if test="year != null and year != ''">
			AND bmidy.year = #{year,jdbcType=VARCHAR}
		</if>
			<if test="subj_code != null and subj_code != ''">
				  and bmidy.subj_code in (
	          select bis2.subj_code from budg_income_subj bis2
	          start with bis2.subj_code=#{subj_code,jdbcType=VARCHAR} connect by bis2.super_code=prior bis2.subj_code
	        )  
			</if>
		<if test="dept_id != null and dept_id != ''">
			AND bmidy.dept_id = #{dept_id,jdbcType=INTEGER}
		</if>
		<if test="state != null and state != '' and state != '04'">
			AND bmidy.state = #{state,jdbcType=INTEGER}
		</if>
		<if test="state == '04'">
			AND bmidy.state is null
		</if>
		<if test="subj_level != null and subj_level != ''">
			AND bis.subj_level = #{subj_level,jdbcType=VARCHAR}
		</if>
		<if test="is_single_count != null and is_single_count != ''">
			AND bmiep.is_single_count = #{is_single_count,jdbcType=INTEGER}
		</if>
		 group by bmidy.group_id, bmidy.hos_id, bmidy.copy_code, bmidy.year, bmidy.subj_code
      , bis.subj_name, bmidy.dept_id, hd.dept_code, hd.dept_name, bmidy.count_value
      , bmidy.budg_value, bmidy.remark, bmidy.grow_rate, bmidy.resolve_rate, bmidy.last_year_income
      , bmidy.state, bmidy.reason, bmidy.refer_value, bis.is_last, bmiep.resolve_way
		order by  bmidy.subj_code 
		)

<!-- 
select null as group_id, null as hos_id, null as copy_code,null as year ,null as subj_code, '预算值合计' as subj_name,null as dept_id, null as dept_code, null as dept_name, null as count_value,nvl(sum(budg_value),0)budg_value ,
null as remark, null as grow_rate, null as resolve_rate, null as last_year_income
  ,null as state,null as reason, null as refer_value, null as is_last, null as resolve_way from  BUDG_MED_INCOME_DEPT_YEAR   bmidy
left join BUDG_INCOME_SUBJ bis on bmidy.group_id = bis.group_id
and bmidy.hos_id = bis.hos_id
and bmidy.copy_code = bis.copy_code
and bmidy.year = bis.budg_year
and bmidy.subj_code = bis.subj_code 
LEFT JOIN BUDG_MED_INCOME_EDIT_PLAN bmiep
				ON
					bmidy.group_id = bmiep.group_id
					and bmidy.hos_id = bmiep.hos_id
					and bmidy.copy_code = bmiep.copy_code
					and bmidy.year = bmiep.budg_year
					and bmidy.subj_code = bmiep.subj_code
WHERE 
			bmidy.group_id = #{group_id,jdbcType=INTEGER}
			AND bmidy.hos_id = #{hos_id,jdbcType=INTEGER}
			AND bmidy.copy_code = #{copy_code,jdbcType=VARCHAR}
			  and bis.is_last='1'
		<if test="year != null and year != ''">
			AND bmidy.year = #{year,jdbcType=VARCHAR}
		</if>
		<if test="subj_code != null and subj_code != ''">
				  and bmidy.subj_code in (
	          select bis2.subj_code from budg_income_subj bis2
	          start with bis2.subj_code=#{subj_code,jdbcType=VARCHAR} connect by bis2.super_code=prior bis2.subj_code
	        )  
			</if>
		<if test="dept_id != null and dept_id != ''">
			AND bmidy.dept_id = #{dept_id,jdbcType=INTEGER}
		</if>
		<if test="state != null and state != '' and state != '04'">
			AND bmidy.state = #{state,jdbcType=INTEGER}
		</if>
		<if test="state == '04'">
			AND bmidy.state is null
		</if>
		<if test="subj_level != null and subj_level != ''">
			AND bis.subj_level = #{subj_level,jdbcType=VARCHAR}
		</if>
		<if test="is_single_count != null and is_single_count != ''">
			AND bmiep.is_single_count = #{is_single_count,jdbcType=INTEGER}
		</if>
		union all -->
		select * from a
	</select>
	<select id="queryByCode" resultMap="budgMedIncomeDeptYear"  parameterType="java.util.Map" >
	
		SELECT 
			group_id,
			hos_id,
			copy_code,
			year,
			subj_code,
			dept_id,
			count_value,
			budg_value,
			remark,
			grow_rate,
			resolve_rate,
			last_year_income,
			state,
			reason,
			refer_value
		FROM budg_med_income_dept_year 
		WHERE 
		group_id = #{group_id,jdbcType=INTEGER}   and 
		hos_id = #{hos_id,jdbcType=INTEGER}   and 
		copy_code = #{copy_code,jdbcType=VARCHAR}   and 
		year = #{year,jdbcType=VARCHAR}   and 
		subj_code = #{subj_code,jdbcType=VARCHAR}   and 
		dept_id = #{dept_id,jdbcType=INTEGER} 
	
	</select>
	<select id="queryByUniqueness" resultMap="budgMedIncomeDeptYear"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		year,
		subj_code,
		dept_id,
		count_value,
		budg_value,
		remark,
		grow_rate,
		resolve_rate,
		last_year_income,
		state,
		reason,
		refer_value
		FROM BUDG_MED_INCOME_DEPT_YEAR 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id,jdbcType=INTEGER}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id,jdbcType=INTEGER}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code,jdbcType=VARCHAR}
		</if>
		<if test="year != null and year != ''">
		AND year = #{year,jdbcType=VARCHAR}
		</if>
		<if test="subj_code != null and subj_code != ''">
		AND subj_code = #{subj_code,jdbcType=VARCHAR}
		</if>
		<if test="dept_id != null and dept_id != ''">
		AND dept_id = #{dept_id,jdbcType=INTEGER}
		</if>
		</where>   
		order by group_id asc
	</select>
	<select id="queryExists" resultMap="budgMedIncomeDeptYear"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		year,
		subj_code,
		dept_id,
		count_value,
		budg_value,
		remark,
		grow_rate,
		resolve_rate,
		last_year_income,
		state,
		reason,
		refer_value
		FROM BUDG_MED_INCOME_DEPT_YEAR 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id,jdbcType=INTEGER}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id,jdbcType=INTEGER}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code,jdbcType=VARCHAR}
		</if>
		<if test="year != null and year != ''">
		AND year = #{year,jdbcType=VARCHAR}
		</if>
		<if test="subj_code != null and subj_code != ''">
		AND subj_code = #{subj_code,jdbcType=VARCHAR}
		</if>
		<if test="dept_id != null and dept_id != ''">
		AND dept_id = #{dept_id,jdbcType=INTEGER}
		</if>
		</where>   
		order by group_id asc
	</select>
	
	<!-- 根据科目编码查询上年收入-->
	<select id="queryLastYearIncome" parameterType="java.util.Map" resultMap="budgMedIncomeDeptYearMap" >
	
		with temp as ( <!-- 汇总  组建 科室年度执行数据 临时表(末级科室、末级科目) -->
			select a.group_id , a.hos_id , a.copy_code , a.year , a.dept_id , hdd.dept_code , a.subj_code , sum(a.amount) amount
			from BUDG_MED_INCOME_EXECUTE a
			left join hos_dept_dict hdd
				on
					a.group_id = hdd.group_id
					and a.hos_id = hdd.hos_id
					and a.dept_id = hdd.dept_id
					and hdd.is_stop = 0
			where 
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
			group by a.group_id , a.hos_id , a.copy_code , a.year , a.dept_id , hdd.dept_code , a.subj_code
		),
		budgDept as ( <!-- 预算科室 信息 临时表 （归集用）  -->
			select ada.group_id , ada.hos_id , ada.dept_id , hdd.dept_code  
			from acc_dept_attr ada
			LEFT JOIN hos_dept_dict hdd
				on
					ada.group_id = hdd.group_id
					and ada.hos_id = hdd.hos_id
					and ada.dept_id = hdd.dept_id
					and ada.is_budg = 1
					and hdd.is_stop = 0
			
		),
		sumData as ( <!-- 预算科室 末级科目  科室年度 执行数据  临时表 -->
			select a.group_id , a.hos_id , a.copy_code , a.year , t.dept_id , a.subj_code , sum(a.amount) amount
			from temp  a
			left join  budgDept t
				on
					a.group_id = t.group_id
					and a.hos_id = t.hos_id
					and a.dept_code like (t.dept_code || '%')
			group by a.group_id , a.hos_id , a.copy_code , a.year , t.dept_id , a.subj_code
		)
		SELECT  
			sum(amount) as last_year_income
		FROM sumData 

		where    
			 group_id = #{group_id,jdbcType=INTEGER}
			 AND hos_id = #{hos_id,jdbcType=INTEGER}
			 AND copy_code = #{copy_code,jdbcType=VARCHAR}
		   	 AND year = #{year,jdbcType=VARCHAR}
			 AND dept_id = #{dept_id,jdbcType=VARCHAR} 
			 AND subj_code like(#{subj_code} || '%' ) 
	</select>
	
	<!-- 科室年度医疗收入预算  更新 计算值、预算值 -->
	<update id="updateGrowRate" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE BUDG_MED_INCOME_DEPT_YEAR  set
				count_value = last_year_income* (1+to_number(${item.grow_rate})/100)
				,
				budg_value = last_year_income * (1+to_number(${item.grow_rate})/100)
				,
				grow_rate = #{item.grow_rate,jdbcType=INTEGER}
			where                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
				AND dept_id = #{item.dept_id,jdbcType=INTEGER}
		</foreach>
	</update>
	
		<!-- 根据主键 查询数据状态 -->
	<select id="queryState" resultType="string"  parameterType="java.util.Map" >
	
		SELECT state FROM BUDG_MED_INCOME_DEPT_YEAR 
		WHERE                     
			group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND year = #{year,jdbcType=VARCHAR}
			AND subj_code = #{subj_code,jdbcType=VARCHAR}
			AND dept_id = #{dept_id,jdbcType=INTEGER}
	</select>
	
	<!-- 下发 撤回 更新数据 -->
	<update id="issuedOrRetractUpdate" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE BUDG_MED_INCOME_DEPT_YEAR set
				state = #{item.state,jdbcType=VARCHAR}
			WHERE                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
				AND dept_id = #{item.dept_id,jdbcType=INTEGER}
		</foreach>
	</update>
	
	<!-- 确认  更新数据 -->
	<update id="passOrDisPassUpdate" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE BUDG_MED_INCOME_DEPT_YEAR set
				reason = #{item.reason,jdbcType=VARCHAR},
				refer_value = #{item.refer_value,jdbcType=INTEGER},
				state = #{item.state,jdbcType=VARCHAR}
			WHERE                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
				AND dept_id = #{item.dept_id,jdbcType=INTEGER}
		</foreach>
	</update>
	
	<!-- 计算时 查询计算数据 -->
	<select id="queryCollectData" parameterType="java.util.Map" resultMap="budgMedIncomeDeptYearMap" >
	
		with temp as(<!-- 构建  计算数据临时表 -->
			SELECT  
				a.group_id ,
				a.hos_id ,
				a.copy_code ,
				a.year ,
				a.dept_id ,
				a.subj_code ,
				c.subj_name ,
				a.last_year_income,
				b.resolve_or_sum ,
				b.resolve_way ,
				c.super_code ,
				c.subj_level ,
				nvl(d.grow_rate , 0) grow_rate ,
				nvl(d.resolve_rate,0) resolve_rate
			FROM BUDG_MED_INCOME_DEPT_YEAR a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.year = b.budg_year
					and a.subj_code = b.subj_code
			left join budg_income_subj c
				on
					a.group_id = c.group_id 
					and a.hos_id = c.hos_id
					and a.copy_code = c.copy_code
					and a.year = c.budg_year
					and a.subj_code = c.subj_code
			left join BUDG_HOS_RESOLVE_RATE d
				on 
					a.group_id = d.group_id
					and a.hos_id = d.hos_id 
					and a.copy_code = d.copy_code
					and a.year = d.year
					and a.subj_code = d.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
				AND b.is_single_count = #{is_single_count,jdbcType=INTEGER}
		),
		subjData as( <!-- 非独立核算 分解方法 科目 -->
			select bs.group_id , bs.hos_id , bs.copy_code , bs.budg_year year , bs.subj_code , bs.super_code , bs.subj_level  
			from budg_income_subj bs
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					bs.group_id = b.group_id
					and bs.hos_id = b.hos_id 
					and bs.copy_code = b.copy_code
					and bs.budg_year = b.budg_year
					and bs.subj_code = b.subj_code
			where
				bs.group_id = #{group_id,jdbcType=INTEGER}
				AND bs.hos_id = #{hos_id,jdbcType=INTEGER}
				AND bs.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND bs.budg_year = #{year,jdbcType=VARCHAR}
				AND b.is_single_count = #{is_single_count,jdbcType=INTEGER}
				<!-- 分解  -->
				AND b.resolve_or_sum = '01'
		),
		lastData as ( <!-- 汇总  组建 科室年度执行数据 临时表(末级科室、末级科目) -->
			select a.group_id , a.hos_id , a.copy_code , a.year , a.dept_id , hdd.dept_code , a.subj_code , sum(a.amount) amount
			from BUDG_MED_INCOME_EXECUTE a
			left join hos_dept_dict hdd
				on
					a.group_id = hdd.group_id
					and a.hos_id = hdd.hos_id
					and a.dept_id = hdd.dept_id
					and hdd.is_stop = 0
			where 
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = to_char(to_number(#{year})-1)
			group by a.group_id , a.hos_id , a.copy_code , a.year , a.dept_id , hdd.dept_code , a.subj_code
		),
		budgDept as ( <!-- 预算科室 信息 临时表 （归集用）  -->
			select ada.group_id , ada.hos_id , ada.dept_id , hdd.dept_code 
			from acc_dept_attr ada
			LEFT JOIN hos_dept_dict hdd
				on
					ada.group_id = hdd.group_id
					and ada.hos_id = hdd.hos_id
					and ada.dept_id = hdd.dept_id
					and ada.is_budg = 1
					and hdd.is_stop = 0
			
		),
		sumData as ( <!-- 预算科室 末级科目  科室年度 执行数据  临时表 -->
			select a.group_id , a.hos_id , a.copy_code , a.year , t.dept_id , a.subj_code , sum(a.amount) amount
			from lastData  a
			left join  budgDept t
				on
					a.group_id = t.group_id
					and a.hos_id = t.hos_id
					and a.dept_code like (t.dept_code || '%')
					and t.dept_code is not null
			group by a.group_id , a.hos_id , a.copy_code , a.year , t.dept_id , a.subj_code
		),
		exeTemp as (<!-- 非独立核算 分解方法  科目 上年执行数据 -->
			select a.group_id , a.hos_id , a.copy_code , a.year , a.subj_code , b.dept_id , a.super_code , a.subj_level  , sum(b.amount) amount		
			from subjData a
			left join sumData b
				on
					a.group_id = b.group_id 
					and a.hos_id = b.hos_id
					and a.copy_code = b.copy_code
					and a.year = b.year + 1
					and b.subj_code like (a.subj_code || '%')
			where 
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
			group by a.group_id , a.hos_id , a.copy_code , a.year , a.subj_code , b.dept_id , a.super_code , a.subj_level 
		) ,
		subjAllValue as ( <!--  所有科目的预算   -->
			select  a.group_id , a.hos_id , a.copy_code , a.budg_year , a.subj_code , b.dept_id ,  sum(nvl(b.budg_value,0)) budg_value
			from budg_income_subj  a
			left join BUDG_MED_INCOME_DEPT_YEAR b
				on
					a.group_id = b.group_id 
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.budg_year = b. year 
					and a.subj_code = b.subj_code 
			where
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.budg_year = #{year,jdbcType=VARCHAR}
			group by a.group_id , a.hos_id , a.copy_code , a.budg_year , a.subj_code ,b.dept_id 
		)
		
		<!-- 同时 查询 其父级科目 的 预算及 其所有非独立核算一级子科目的上年执行数据和  -->
		select t.* , nvl(v.budg_value,0) parentValue , nvl(et.amount,0) sumLastIncome
		from temp  t
		left join subjAllValue v
			on
				t.group_id = v.group_id
				and t.hos_id = v.hos_id 
				and t.copy_code = v.copy_code
				and t.year = v.budg_year
				and t.dept_id = v.dept_id
				and t.super_code = v.subj_code
		left join (select group_id , hos_id , copy_code , year , dept_id , super_code , subj_level , sum(amount) amount 
					from exeTemp 
					
					group by group_id , hos_id , copy_code , year , dept_id , super_code , subj_level ) et
			on 
				t.group_id = et.group_id
				and t.hos_id = et.hos_id 
				and t.copy_code = et.copy_code
				and t.year = et.year
				and t.dept_id = et.dept_id
				and t.super_code = et.super_code
				and t.subj_level = et.subj_level
		
	</select>
	
	<!-- 计算时 根据科目 查询 其同级独立核算项目的预算之和 -->
	<select id="querySumValue" parameterType="java.util.Map" resultType="java.lang.Double" >
	
			SELECT  sum(nvl(budg_value,0))
			FROM BUDG_MED_INCOME_DEPT_YEAR a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.year = b.budg_year
					and a.subj_code = b.subj_code
			left join budg_income_subj c
				on
					a.group_id = c.group_id 
					and a.hos_id = c.hos_id
					and a.copy_code = c.copy_code
					and a.year = c.budg_year
					and a.subj_code = c.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
				AND a.dept_id = #{dept_id,jdbcType=INTEGER}
				AND b.is_single_count = 0
				AND a.subj_code like (${super_code} || '%')
				and c.subj_level = #{subj_level,jdbcType=INTEGER	}
	</select>
	
		
	<!--分解计算时 分解方法为 平均分摊  根据 参数 查询    与其上级科目的的一级所有子科目  数量 -->
	<select id="querySubjCount" parameterType="java.util.Map" resultType="java.lang.Integer" >
	
			SELECT  count(a.subj_code)  
			from budg_income_subj a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id 
					and a.hos_id = b.hos_id
					and a.copy_code = b.copy_code
					and a.budg_year = b.budg_year
					and a.subj_code = b.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.BUDG_YEAR = #{year,jdbcType=VARCHAR}
				AND a.super_code = #{super_code,jdbcType=VARCHAR}
				<!-- 非独立核算 -->
				AND b.is_single_count = 0
				<!-- 分解 -->
				AND b.resolve_or_sum = '01'
	</select>
	
	<!-- 根据 科目 汇总其所有下级科目(末级科目)预算 -->
	<select id="querySumSubjValue" parameterType="java.util.Map" resultType="java.lang.Double" >
	
			SELECT  sum(nvl(budg_value,0))
			FROM BUDG_MED_INCOME_DEPT_YEAR a
			left join BUDG_MED_INCOME_EDIT_PLAN b
				on
					a.group_id = b.group_id
					and a.hos_id = b.hos_id 
					and a.copy_code = b.copy_code
					and a.year = b.budg_year
					and a.subj_code = b.subj_code
			left join budg_income_subj c
				on
					a.group_id = c.group_id 
					and a.hos_id = c.hos_id
					and a.copy_code = c.copy_code
					and a.year = c.budg_year
					and a.subj_code = c.subj_code
			where    
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = #{year,jdbcType=VARCHAR}
				AND a.dept_id = #{dept_id,jdbcType=INTEGER}
				AND b.is_single_count = 1
				AND a.subj_code like (${subj_code} || '%')
				and c.is_last = 1
	</select>
	
	<!-- 更新 科室年度医疗收入预算  计算值、预算值 -->
	<update id="updateValue" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE BUDG_MED_INCOME_DEPT_YEAR set
		
				count_value = #{item.count_value,jdbcType=INTEGER}
				,
				budg_value = #{item.budg_value}
			where                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND dept_id = #{item.dept_id,jdbcType=INTEGER}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
		</foreach>
	</update>
	
	<!-- 更新 科室医疗收入科目分解比例维护表 分解比例 -->
	<update id="updateResolveRate" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE BUDG_DEPT_RESOLVE_RATE set
		
				resolve_rate = #{item.resolve_rate,jdbcType=INTEGER}
			where                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND dept_id = #{item.dept_id,jdbcType=INTEGER}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
		</foreach>
	</update>
	
	<!-- 增量生成时 查询生成数据 -->
	<select id="queryData" parameterType="java.util.Map" resultMap="budgMedIncomeDeptYearMap" >
		with temp as ( <!-- 汇总  组建 科室年度执行数据 临时表(末级科室、末级科目) -->
			select a.group_id , a.hos_id , a.copy_code , a.year , a.dept_id , hdd.dept_code , a.subj_code , sum(a.amount) amount
			from BUDG_MED_INCOME_EXECUTE a
			left join hos_dept_dict hdd
				on
					a.group_id = hdd.group_id
					and a.hos_id = hdd.hos_id
					and a.dept_id = hdd.dept_id
					and hdd.is_stop = 0
			where 
				a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.year = to_char(to_number(#{budg_year})-1)
			group by a.group_id , a.hos_id , a.copy_code , a.year , a.dept_id , hdd.dept_code , a.subj_code
		),
		budgDept as (<!--  预算科室 信息 临时表 （归集用）  -->
			select ada.group_id , ada.hos_id , ada.dept_id , hdd.dept_code 
			from acc_dept_attr ada
			LEFT JOIN hos_dept_dict hdd
				on
					ada.group_id = hdd.group_id
					and ada.hos_id = hdd.hos_id
					and ada.dept_id = hdd.dept_id
					and ada.is_budg = 1
					and hdd.is_stop = 0
			
		),
		sumData as (<!--  预算科室 末级科目  科室年度 执行数据  临时表 -->
			select a.group_id , a.hos_id , a.copy_code , a.year , t.dept_id , a.subj_code , sum(a.amount) amount
			from temp  a
			left join  budgDept t
				on
					a.group_id = t.group_id
					and a.hos_id = t.hos_id
					and a.dept_code like (t.dept_code || '%')
					and t.dept_code is not null
			group by a.group_id , a.hos_id , a.copy_code , a.year , t.dept_id , a.subj_code
		)
		select a.group_id, a.hos_id, a.copy_code, a.budg_year year,t.dept_id,a.subj_code, a.resolve_or_sum , sum(t.amount) last_year_income 
		from BUDG_MED_INCOME_EDIT_PLAN a 
		left join sumData t
			on  
				a.group_id = t.group_id
				and a.hos_id = t.hos_id
				and a.copy_code = t.copy_code
				and a.budg_year = t.year + 1
				and t.subj_code like (a.subj_code || '%')
		where
			a.is_single_count =  #{is_single_count,jdbcType=INTEGER}
				and a.group_id = #{group_id,jdbcType=INTEGER}
				AND a.hos_id = #{hos_id,jdbcType=INTEGER}
				AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
				AND a.budg_year = #{budg_year,jdbcType=VARCHAR}
			and t.dept_id is not null
			and not exists (
			    select 1
			    from BUDG_DEPT_INDEPENDENT_SUBJ b
			    where t.group_id = b.group_id
			      and t.hos_id = b.hos_id
			      and t.copy_code = b.copy_code
			      and t.year = b.year
			      and t.subj_code = b.subj_code
			      and t.dept_id = b.dept_id
			  )
			  
	group by a.group_id, a.hos_id, a.copy_code, a.budg_year,t.dept_id,a.subj_code, a.resolve_or_sum
	</select>
</mapper>

