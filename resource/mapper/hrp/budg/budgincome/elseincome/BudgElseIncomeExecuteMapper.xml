<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.budg.dao.budgincome.elseincome.BudgElseIncomeExecuteMapper">
	
	<resultMap id="elseIncomeExecute" type="com.chd.hrp.budg.entity.BudgElseIncomeExecute">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="year" column="year"/>
	<result property="month" column="month"/>
	<result property="subj_code" column="subj_code"/>
	<result property="amount" column="amount"/>
	<result property="remark" column="remark"/>
	</resultMap>
		
	<resultMap id="elseIncomeExecuteMap" type="java.util.Map">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="year" column="year"/>
	<result property="month" column="month"/>
	<result property="subj_code" column="subj_code"/>
	<result property="subj_name" column="subj_name"/>
	<result property="amount" column="amount"/>
	<result property="remark" column="remark"/>
	</resultMap>
	
	<resultMap type="java.util.Map" id="selectMap">
		<result property="code" column="code"/>
		<result property="name" column="name"/>
	</resultMap>
	
	<insert id="add" useGeneratedKeys="true" >
	
		INSERT INTO BUDG_ELSE_INCOME_EXECUTE (
			group_id
			,
			hos_id
			,
			copy_code
			,
			year
			,
			month
			,
			subj_code
			,
			amount
			,
			remark
			
			
		) VALUES (
			#{group_id,jdbcType=INTEGER}
			,
			#{hos_id,jdbcType=INTEGER}
			,
			#{copy_code,jdbcType=VARCHAR}
			,
			#{year,jdbcType=VARCHAR}
			,
			#{month,jdbcType=VARCHAR}
			,
			#{subj_code,jdbcType=VARCHAR}
			,
			#{amount,jdbcType=INTEGER}
			,
			#{remark,jdbcType=VARCHAR}
			
		)
	
	</insert>
	<insert id="addBatch" parameterType="java.util.List" >
	
		INSERT INTO BUDG_ELSE_INCOME_EXECUTE (
			group_id
			,
			hos_id
			,
			copy_code
			,
			year
			,
			month
			,
			subj_code
			,
			amount
			,
			remark
		
		) select  t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
			#{item.group_id,jdbcType=INTEGER}
			,
			#{item.hos_id,jdbcType=INTEGER}
			,
			#{item.copy_code,jdbcType=VARCHAR}
			,
			#{item.year,jdbcType=VARCHAR}
			,
			#{item.month,jdbcType=VARCHAR}
			,
			#{item.subj_code,jdbcType=VARCHAR}
			,
			#{item.amount,jdbcType=INTEGER}
			,
			#{item.remark,jdbcType=VARCHAR}
			
		    from dual
		</foreach>
		)t
	</insert>
	
	<update id="update" parameterType="java.util.Map">
	
		UPDATE BUDG_ELSE_INCOME_EXECUTE set
				amount = #{amount,jdbcType=INTEGER}
				,
				remark = #{remark,jdbcType=VARCHAR}
				
		where                    
			group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND year = #{year,jdbcType=VARCHAR}
			AND month = #{month,jdbcType=VARCHAR}
			AND subj_code = #{subj_code,jdbcType=VARCHAR}
			
	</update>
	<update id="updateBatch" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE BUDG_ELSE_INCOME_EXECUTE set
				amount = #{item.amount,jdbcType=INTEGER}
				,
				remark = #{item.remark,jdbcType=VARCHAR}
			where                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND month = #{item.month,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
		</foreach>
	</update>
	
	<delete id="delete" parameterType="java.util.Map">
	
		DELETE FROM BUDG_ELSE_INCOME_EXECUTE 
		where                    
			group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND year = #{year,jdbcType=VARCHAR}
			AND month = #{month,jdbcType=VARCHAR}
			AND subj_code = #{subj_code,jdbcType=VARCHAR}
	</delete>
	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM BUDG_ELSE_INCOME_EXECUTE 
		where
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND month = #{item.month,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
			</foreach>
	</delete>
	<select id="query" parameterType="java.util.Map" resultMap="elseIncomeExecuteMap" >
		with temp as(
		SELECT 
<!-- 		<if test="para_value == 1">  -->
		beie.group_id,
		beie.hos_id,
		beie.copy_code,
<!-- 		</if> -->
		beie.year,
		beie.month,
		beie.subj_code,
		bis.subj_name,
		beie.amount,
		beie.remark
		FROM BUDG_ELSE_INCOME_EXECUTE  beie
		LEFT JOIN BUDG_INCOME_SUBJ bis
			ON
				beie.group_id = bis.group_id
				AND beie.hos_id = bis.hos_id
				AND beie.copy_code = bis.copy_code AND 

				beie.year = bis.budg_year
				AND beie.subj_code = bis.subj_code
		where 
	                   
			beie.group_id = #{group_id,jdbcType=INTEGER}
			AND beie.hos_id = #{hos_id,jdbcType=INTEGER}
			AND beie.copy_code = #{copy_code,jdbcType=VARCHAR} AND 
	
			beie.year = #{year,jdbcType=VARCHAR}
			<if test="month != null and month != ''">
			AND beie.month = #{month,jdbcType=VARCHAR}
			</if>
			<if test="subj_code != null and subj_code != ''">
			AND beie.subj_code = #{subj_code,jdbcType=VARCHAR}
			</if>
			
		order by beie.month,beie.subj_code asc)
		select 
			null group_id,
			null hos_id,
			null copy_code,
			'合计' year,
			null month,
			null subj_code,
			null subj_name,
			sum(amount) amount,
			null remark
		FROM temp  
		group by 
			
				 group_id , hos_id  , copy_code ,
		
			 year 
			<if test="month != null and month != ''">
			,month
			</if> 
			<if test="dept_id != null and dept_id != ''">
			,dept_id
			</if> 
		union all
		select * from temp 
	</select>
	<select id="queryByCode" resultMap="elseIncomeExecuteMap"  parameterType="java.util.Map" >
	
		SELECT 
			group_id,
			hos_id,
			copy_code,
			year,
			month ,
			subj_code,
			amount,
			remark
		FROM BUDG_ELSE_INCOME_EXECUTE  
		WHERE 
			group_id = #{group_id,jdbcType=INTEGER}   
			and hos_id = #{hos_id,jdbcType=INTEGER}   
			and copy_code = #{copy_code,jdbcType=VARCHAR}
			and year = #{year,jdbcType=VARCHAR}   
			and month = #{month,jdbcType=VARCHAR}   
			and subj_code = #{subj_code,jdbcType=VARCHAR} 
	
	</select>
	<select id="queryByUniqueness" resultMap="elseIncomeExecute"  parameterType="java.util.Map" >
	
		SELECT 
			group_id,
			hos_id,
			copy_code,
			year,
			month ,
			subj_code,
			amount,
			remark
		FROM BUDG_ELSE_INCOME_EXECUTE 
		<where>                     
			<if test="group_id != null and group_id != ''">
			AND group_id = #{group_id,jdbcType=INTEGER}
			</if>
			<if test="hos_id != null and hos_id != ''">
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			</if>
			<if test="copy_code != null and copy_code != ''">
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			</if>
			<if test="year != null and year != ''">
			AND year = #{year,jdbcType=VARCHAR}
			</if>
			<if test="month != null and month != ''">
			AND month = #{month,jdbcType=VARCHAR}
			</if>
			<if test="subj_code != null and subj_code != ''">
			AND subj_code = #{subj_code,jdbcType=VARCHAR}
			</if>
		</where>   
		order by subj_code asc
	</select>
	
	<select id="queryExists" resultMap="elseIncomeExecute"  parameterType="java.util.Map" >
	
		SELECT 
			group_id,
			hos_id,
			copy_code,
			year,
			month ,
			subj_code,
			amount,
			remark
		FROM BUDG_ELSE_INCOME_EXECUTE 
		where                     
			group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND year = #{year,jdbcType=VARCHAR}
			AND month = #{month,jdbcType=VARCHAR}
			<if test="subj_code != null and subj_code != ''">
			AND subj_code = #{subj_code,jdbcType=VARCHAR}
			</if>
		order by subj_code asc
	</select>
	
	<select id="querySubjCodeExist" resultType="java.lang.Integer"  parameterType="java.util.Map" >
	
		SELECT count(1) FROM BUDG_INCOME_SUBJ
		where                     
			group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND budg_year = #{year,jdbcType=VARCHAR}
			AND subj_code = #{subj_code,jdbcType=VARCHAR}
			<if test="is_last != null and is_last != '' ">
			AND is_last = #{is_last,jdbcType=INTEGER}
			</if>
			
	</select>
	
	<!-- 收入预算科目下拉框(其他收入) -->
	<select id="queryBudgIncomeSubj" resultMap="selectMap">
		SELECT
		subj_code code,
		subj_name name
		FROM BUDG_INCOME_SUBJ
		where
			group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND budg_year = #{budg_year,jdbcType=VARCHAR}
			<if test="is_last != null and is_last != ''">
			AND is_last = #{is_last,jdbcType=INTEGER}
			</if>
			<if test="key != null and key != ''">
				AND ( subj_code like '${key}%' or
					subj_name like '%${key}%'  or 
					spell_code like '%${key}%' or
					wbx_code like '%${key}%' )
			</if>
			order by subj_code
	</select>
	
	<!-- 查询添加数据是否已存在 -->
	<select id="queryDataExist" resultType="java.lang.String">
		<foreach collection="list" item="item" index="index" separator=" union all " >
			SELECT to_number(${item.rowNo})+ 1 rowNo
			FROM BUDG_ELSE_INCOME_EXECUTE
			where
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND month = #{item.month,jdbcType=VARCHAR}
				AND subj_code = #{item.subj_code,jdbcType=VARCHAR}
		</foreach>
	</select>
	
<!-- 	财务取数 -->
	<select id="getDatafromAcc" resultMap="elseIncomeExecuteMap"  parameterType="java.util.Map" >
		
		with temp as
		 (select  
			 	<if test="para_value == 1">
			 	   b.group_id,
	               b.hos_id,
	               b.copy_code,
				 </if>
		         c.acc_year,
		         c.acc_month,
		         a.subj_code,
		         sum(b.credit) amount
		    from acc_vouch_detail b
		    left join acc_vouch c
		      on c.group_id = b.group_id
		     and c.hos_id = b.hos_id
		     and c.copy_code = b.copy_code
		     and c.acc_year = b.acc_year
		     and b.vouch_id = c.vouch_id
		    left join acc_subj a
		      on a.group_id = b.group_id
		     and a.hos_id = b.hos_id
		     and a.copy_code = b.copy_code
		     and a.acc_year = b.acc_year
		     and a.subj_id = b.subj_id
		    left join budg_acc_subj_ship bass
		      on bass.group_id = a.group_id
		     and bass.hos_id = a.hos_id
		     and bass.copy_code = a.copy_code
		     and bass.acc_subj_code2 = a.subj_code
		   where 
			 <if test="para_value == 1">
			    b.group_id =  #{group_id,jdbcType=INTEGER}
			    and b.hos_id = #{hos_id,jdbcType=INTEGER}
			    and b.copy_code = #{copy_code,jdbcType=VARCHAR} and 
			 </if> 
		     b.acc_year = #{budg_year,jdbcType=VARCHAR}
		     and c.acc_month = #{acc_month,jdbcType=VARCHAR}
		     and bass.subj_code like '4301%'
		   group by 
			   <if test="para_value == 1">
			 	 b.group_id,
	             b.hos_id,
	             b.copy_code,
	           </if> 
		       c.acc_year,
		       a.subj_code,
		       c.acc_month
		   order by a.subj_code, c.acc_month)
		
		select 
			<if test="para_value == 1"> 
		       bass.group_id,
		       bass.hos_id,
		       bass.copy_code, 
		       bass.budg_year year,
		       t.acc_month month,
	           bass.subj_code,
	         </if>
	         <if test="para_value == 0">
	           #{group_id} group_id,
		       #{hos_id} hos_id,
		       #{copy_code} copy_code,
		       t.acc_year year,
		       t.acc_month month,
	           bass.subj_code,
	         </if>
		       sum(t.amount) amount
		  from temp t
		  left join budg_acc_subj_ship bass
		    on
		     <if test="para_value == 1"> 
	          t.group_id = bass.group_id
	          and t.hos_id = bass.hos_id
	          and t.copy_code = bass.copy_code and 
	        </if> 
		   	t.acc_year = bass.budg_year
		    and t.subj_code = bass.acc_subj_code2
		 left join budg_income_subj bis 
	     	 on bass.budg_year = bis.budg_year
		     and bass.subj_code = bis.subj_code
		 where 
		     bass.subj_code is not null 
		 	 and bis.is_last = 1
		 group by 
		 	<if test="para_value == 1"> 
		       bass.group_id,
		       bass.hos_id,
		       bass.copy_code, 
		       bass.budg_year year,
		       t.acc_month month,
	           bass.subj_code
	         </if>
	         <if test="para_value == 0">
		       t.acc_year,
		       t.acc_month,
	           bass.subj_code
	         </if>
	     order by 
	     		bass.subj_code, t.acc_month
	</select>
	
	<select id="getDatafromAcc2" resultMap="elseIncomeExecuteMap"  parameterType="java.util.Map" >
		
		with temp as
		 (select b.group_id,
		         b.hos_id,
		         c.acc_year,
		         c.acc_month,
		         a.subj_code,
		         sum(b.credit) as amount
		    from acc_vouch_detail b
		    left join acc_vouch c
		      on c.group_id = b.group_id
		     and c.hos_id = b.hos_id
		     and c.copy_code = b.copy_code
		     and c.acc_year = b.acc_year
		     and b.vouch_id = c.vouch_id
		    left join acc_subj a
		      on a.group_id = b.group_id
		     and a.hos_id = b.hos_id
		     and a.copy_code = b.copy_code
		     and a.acc_year = b.acc_year
		     and a.subj_code = b.subj_code
		    left join budg_acc_subj_ship bass
		      on bass.group_id = a.group_id
		     and bass.hos_id = a.hos_id
		     and bass.budg_year = a.acc_year
		     and bass.acc_subj_code2 = a.subj_code
		   where b.group_id = #{group_id,jdbcType=INTEGER}
		     and b.hos_id = #{hos_id,jdbcType=INTEGER}
		     and b.copy_code in (<foreach collection="copy_codes" item="copy_code_item" separator=",">#{copy_code_item}</foreach>)
		     and b.acc_year = #{budg_year,jdbcType=VARCHAR}
		     and c.acc_month between #{begin_month,jdbcType=VARCHAR} and #{end_month,jdbcType=VARCHAR}
		     and bass.subj_code like '4301%'
		   group by b.group_id, b.hos_id, c.acc_year, a.subj_code, c.acc_month
		   order by a.subj_code, c.acc_month)
		select bass.group_id,
		       bass.hos_id,
		       #{copy_code,jdbcType=VARCHAR} copy_code,
		       bass.budg_year as year,
		       t.acc_month as month,
		       bass.subj_code,
		       sum(t.amount) as amount
		  from temp t
		  left join budg_acc_subj_ship bass
		    on t.group_id = bass.group_id
		   and t.hos_id = bass.hos_id
		   and t.acc_year = bass.budg_year
		   and t.subj_code = bass.acc_subj_code2
		  left join budg_income_subj bis
		    on bass.budg_year = bis.budg_year
		   and bass.subj_code = bis.subj_code
		 where bass.subj_code is not null
		   and bis.is_last = 1
		 group by bass.group_id,
		          bass.hos_id,
		          bass.budg_year,
		          t.acc_month,
		          bass.subj_code
		 order by bass.subj_code, t.acc_month
	</select>
	
	<select id="queryIncomeFlag2" resultType="int">
	
		select count(0) from BUDG_CARRY
		where 
			 group_id =  #{group_id,jdbcType=INTEGER}
		     and hos_id = #{hos_id,jdbcType=INTEGER}
		     and copy_code = #{copy_code,jdbcType=VARCHAR}
		     and year = #{budg_year,jdbcType=VARCHAR}
		     and month between #{begin_month,jdbcType=VARCHAR} and #{end_month,jdbcType=VARCHAR} 
		     and income_flag = 1
	</select>
	
<!-- 	批量插入财务取出的数据   财务取数功能专用 -->
	<insert id="addBatchData" parameterType="java.util.List" >
	
		INSERT INTO BUDG_ELSE_INCOME_EXECUTE (
			group_id
			,
			hos_id
			,
			copy_code
			,
			year
			,
			month
			,
			subj_code
			,
			amount
		
		) select  t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
			#{item.group_id,jdbcType=INTEGER}
			,
			#{item.hos_id,jdbcType=INTEGER}
			,
			#{item.copy_code,jdbcType=VARCHAR}
			,
			#{item.year,jdbcType=VARCHAR}
			,
			#{item.month,jdbcType=VARCHAR}
			,
			#{item.subj_code,jdbcType=VARCHAR}
			,
			#{item.amount,jdbcType=INTEGER}
			
		    from dual
		</foreach>
		)t
	</insert>
</mapper>

