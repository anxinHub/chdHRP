<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.chd.hrp.ass.dao.biandongcategory.AssBianDongCategoryMainMapper">

	<resultMap id="AssBianDongCategoryMain"
		type="com.chd.hrp.ass.entity.biandongcategory.AssBianDongCategoryMain">
		<result property="group_id" column="group_id" />
		<result property="hos_id" column="hos_id" />
		<result property="copy_code" column="copy_code" />
		<result property="year_month" column="year_month" />
		<result property="ass_id" column="ass_id" />
		<result property="dept_id" column="user_dept_id" />
		<result property="store_id" column="store_id" />
		<result property="ass_type_name" column="ass_type_name" />
		<result property="begin_amount" column="begin_amount" />
		<result property="begin_money" column="begin_money" />
		<result property="add_amount" column="add_amount" />
		<result property="add_money" column="add_money" />
		<result property="dec_amount" column="dec_amount" />
		<result property="dec_money" column="dec_money" />
		<result property="end_amount" column="end_amount" />
		<result property="end_money" column="end_money" />

	</resultMap>

	<resultMap id="AssBianDongCategoryMainMap"
		type="java.util.Map">
		<result property="group_id" column="group_id" />
		<result property="hos_id" column="hos_id" />
		<result property="copy_code" column="copy_code" />
		<result property="year_month" column="year_month" />
		<result property="ass_id" column="ass_id" />
		<result property="dept_id" column="user_dept_id" />
		<result property="store_id" column="store_id" />
		<result property="ass_type_name" column="ass_type_name" />
		<result property="begin_amount" column="begin_amount" />
		<result property="begin_money" column="begin_money" />
		<result property="add_amount" column="add_amount" />
		<result property="add_money" column="add_money" />
		<result property="dec_amount" column="dec_amount" />
		<result property="dec_money" column="dec_money" />
		<result property="end_amount" column="end_amount" />
		<result property="end_money" column="end_money" />

	</resultMap>
	<select id="queryAssBianDongCategory" parameterType="java.util.Map"
		resultMap="AssBianDongCategoryMain">
			<!-- with init_t as(
		     	SELECT 
	            t2.ass_naturs,
	            sum(nvl(t1.price,0)) AS begin_money,
	            sum(nvl(t1.depre_money,0)) AS depre_begin_money, 
	            sum(nvl(t1.cur_money,0)) AS cur_begin_money
		        FROM ASS_TYPE_COLLECT t1
		        LEFT JOIN ASS_TYPE_DICT t2
		          ON t1.ass_type_id = t2.ass_type_id
		             and t1.copy_code=t2.copy_code
        and t1.hos_id=t2.hos_id 
		        LEFT JOIN ASS_BUS_TYPE_DICT t3
		          ON t1.buy_type = t3.bus_type_code
		             and t1.copy_code=t3.copy_code
        and t1.hos_id=t3.hos_id 
		        WHERE t3.in_out_type = 0 and t1.is_init = 1
		          AND t1.group_id = #{group_id} AND t1.hos_id = #{hos_id} AND t1.copy_code = #{copy_code}
		          <if test="acc_year != null and acc_year != ''">
			      AND t1.acc_year = #{acc_year} AND t1.acc_month = #{acc_month}
			      </if>
		        GROUP BY t2.ass_naturs
			),
			in_t AS(
			    SELECT 
			    t2.ass_naturs,
			    sum(t1.price) AS in_price,
			    sum(t1.depre_money) AS depre_money,
			    sum(t1.cur_money) AS cur_money
			    FROM ASS_TYPE_COLLECT t1
			    LEFT JOIN ASS_TYPE_DICT t2
			      ON t1.ass_type_id = t2.ass_type_id
			         and t1.copy_code=t2.copy_code
        and t1.hos_id=t2.hos_id 
			    LEFT JOIN ASS_BUS_TYPE_DICT t3
			      ON t1.buy_type = t3.bus_type_code
			         and t1.copy_code=t3.copy_code
        and t1.hos_id=t3.hos_id 
			    WHERE t3.in_out_type = 0 AND t1.is_init = 0
			      AND t1.group_id = #{group_id} AND t1.hos_id = #{hos_id} AND t1.copy_code = #{copy_code}
			      <if test="acc_year != null and acc_year != ''">
			      AND t1.acc_year = #{acc_year} AND t1.acc_month = #{acc_month}
			      </if>
			    GROUP BY t2.ass_naturs
			),
			out_t AS(
			    SELECT 
			    t2.ass_naturs,
			    sum(t1.price) AS out_price,
			    sum(t1.depre_money) AS depre_money,
			    sum(t1.cur_money) AS cur_money
			    FROM ASS_TYPE_COLLECT t1
			    LEFT JOIN ASS_TYPE_DICT t2
			      ON t1.ass_type_id = t2.ass_type_id
			         and t1.copy_code=t2.copy_code
        and t1.hos_id=t2.hos_id 
			    LEFT JOIN ASS_BUS_TYPE_DICT t3
			      ON t1.buy_type = t3.bus_type_code
			         and t1.copy_code=t3.copy_code
        and t1.hos_id=t3.hos_id 
			    WHERE t3.in_out_type = 1 and t1.is_init = 0
			      AND t1.group_id = #{group_id} AND t1.hos_id = #{hos_id} AND t1.copy_code = #{copy_code}
			      <if test="acc_year != null and acc_year != ''">
			      AND t1.acc_year = #{acc_year} AND t1.acc_month = #{acc_month}
			      </if>
			    GROUP BY t2.ass_naturs
			)
			
			SELECT * FROM (
			SELECT 
		      t1.naturs_code AS ass_type_code,
		      t1.naturs_name AS ass_type_name,
		      nvl(t1_init.begin_money,0) AS begin_money,原值期初
		      nvl(t1_i.in_price,0) AS add_money,原值 借方
		      nvl(t1_o.out_price,0) AS dec_money,原值 贷方
		      nvl(t1_init.begin_money,0)+nvl(t1_i.in_price,0)-nvl(t1_o.out_price,0) as end_money原值 余额
		      FROM ass_naturs t1
		      LEFT JOIN init_t t1_init
		        ON t1_init.ass_naturs = t1.naturs_code
		      LEFT JOIN in_t t1_i
		        ON t1.naturs_code = t1_i.ass_naturs
		      LEFT JOIN out_t t1_o
		        ON t1.naturs_code = t1_o.ass_naturs
		    
		    UNION ALL
		    SELECT 
		      '合计' AS ass_type_code,
		      '合计' AS ass_type_name,
		      nvl(sum(t1_init.begin_money),0) AS begin_money,
		      nvl(sum(t1_i.in_price),0) AS add_money,
		      nvl(sum(t1_o.out_price),0) AS dec_money,
		      nvl(sum(t1_init.begin_money),0)+nvl(sum(t1_i.in_price),0)-nvl(sum(t1_o.out_price),0) as end_money
		      FROM ass_naturs t1
		      LEFT JOIN init_t t1_init
		        ON t1_init.ass_naturs = t1.naturs_code
		      LEFT JOIN in_t t1_i
		        ON t1.naturs_code = t1_i.ass_naturs
		      LEFT JOIN out_t t1_o
		        ON t1.naturs_code = t1_o.ass_naturs
		    ) t
		      ORDER BY t.ass_type_code -->
		      
		      with type_t as(
			     SELECT 
			            t1.ass_type_code,
			            t1.ass_type_name,
			            t1.type_level,
			            nvl(t1.super_code,0) super_code,
			            nvl(t2.r_begin,0) AS begin_money,
			            nvl(t2.r_add,0) AS add_money,
			            nvl(t2.r_dec,0) AS dec_money,
			            nvl(t2.r_end,0) as end_money
			          
			            FROM ASS_TYPE_DICT t1
			            LEFT JOIN ass_collect_type_main t2
			              ON t1.group_id = t2.group_id
			             and t1.hos_id = t2.hos_id
			             and t1.copy_code = t2.copy_code
			             and t1.ass_type_id = t2.ass_type_id
			             <if test="acc_year != null and acc_year != ''">
					      AND t2.acc_year = #{acc_year} 
					     </if>
					     <if test="acc_month != null and acc_month != ''">
					      AND t2.acc_month = #{acc_month}
					     </if>
			     WHERE 
			      t1.group_id = #{group_id} AND t1.hos_id = #{hos_id} AND t1.copy_code = #{copy_code}
			      <!-- AND t1.is_stop = 0 -->        
				 
			),
			temp1 AS(
			  SELECT 
			    t2.ass_type_code,
			    t2.ass_type_name,
			    sum(t2.begin_money) begin_money,
			    sum(t2.add_money) add_money,
	            sum(t2.dec_money) dec_money,
	            sum(t2.end_money) end_money
			  FROM (
				  SELECT 
				    connect_by_root(t1.ass_type_code) ass_type_code,
			        connect_by_root(t1.ass_type_name) ass_type_name,
			        t1.begin_money,
			        t1.add_money,
			        t1.dec_money,
			        t1.end_money
				  FROM type_t t1
				  START WITH t1.super_code IN (
				    SELECT super_code FROM type_t 
			        <if test="type_level != null and type_level != ''">
			        WHERE  type_level =#{type_level}
			        </if>
				    )
				  CONNECT BY PRIOR t1.ass_type_code = t1.super_code
				  ) t2
				GROUP BY t2.ass_type_code,t2.ass_type_name
				ORDER BY t2.ass_type_code
			),
			temp2 AS (
			  SELECT 
			  	t.ass_type_code,
			    cast(lpad(chr(41377), level * 2 - 1,chr(41377)) || t.ass_type_name as varchar2(50)) ass_type_name
			  FROM type_t t
			  START WITH t.super_code = 0
			  CONNECT BY PRIOR t.ass_type_code = t.super_code
			)
			SELECT * FROM (
				SELECT
				  t2.ass_type_code,
				  t2.ass_type_name,
				  t1.begin_money,
				  t1.add_money,
		          t1.dec_money,
		          t1.end_money
				FROM  temp1 t1, temp2 t2
			    WHERE t1.ass_type_code = t2.ass_type_code
			    
			    UNION ALL
			    
			    SELECT 
			      null AS ass_type_code,
			      '合计' AS ass_type_name,
			      nvl(sum(t3.begin_money),0) AS begin_money,
			      nvl(sum(t3.add_money),0) AS add_money,
			      nvl(sum(t3.dec_money),0) AS dec_money,
			      nvl(sum(t3.end_money),0) as end_money
			      FROM type_t t3
			      <if test="type_level != null and type_level != ''">
			      START WITH t3.super_code IN (
				    SELECT super_code FROM type_t 
			        WHERE  type_level =#{type_level}
				    )
				  CONNECT BY PRIOR t3.ass_type_code = t3.super_code
				  </if>
		    ) t
		      ORDER BY t.ass_type_code

	</select>


	<!-- 打印 -->
	<select id="queryAssBianDongCategoryMainPrint" parameterType="java.util.Map" resultMap="AssBianDongCategoryMainMap">
	with type_t as(
			     SELECT 
			            t1.ass_type_code,
			            t1.ass_type_name,
			            t1.type_level,
			            nvl(t1.super_code,0) super_code,
			            nvl(t2.r_begin,0) AS begin_money,
			            nvl(t2.r_add,0) AS add_money,
			            nvl(t2.r_dec,0) AS dec_money,
			            nvl(t2.r_end,0) as end_money
			          
			            FROM ASS_TYPE_DICT t1
			            LEFT JOIN ass_collect_type_main t2
			              ON t1.group_id = t2.group_id
			             and t1.hos_id = t2.hos_id
			             and t1.copy_code = t2.copy_code
			             and t1.ass_type_id = t2.ass_type_id
			             <if test="acc_year != null and acc_year != ''">
					      AND t2.acc_year = #{acc_year} 
					     </if>
					     <if test="acc_month != null and acc_month != ''">
					      AND t2.acc_month = #{acc_month}
					     </if>
			     WHERE 
			      t1.group_id = #{group_id} AND t1.hos_id = #{hos_id} AND t1.copy_code = #{copy_code}
			      <!-- AND t1.is_stop = 0 -->        
				 
			),
			temp1 AS(
			  SELECT 
			    t2.ass_type_code,
			    t2.ass_type_name,
			    sum(t2.begin_money) begin_money,
			    sum(t2.add_money) add_money,
	            sum(t2.dec_money) dec_money,
	            sum(t2.end_money) end_money
			  FROM (
				  SELECT 
				    connect_by_root(t1.ass_type_code) ass_type_code,
			        connect_by_root(t1.ass_type_name) ass_type_name,
			        t1.begin_money,
			        t1.add_money,
			        t1.dec_money,
			        t1.end_money
				  FROM type_t t1
				  START WITH t1.super_code IN (
				    SELECT super_code FROM type_t 
			        <if test="type_level != null and type_level != ''">
			        WHERE  type_level =#{type_level}
			        </if>
				    )
				  CONNECT BY PRIOR t1.ass_type_code = t1.super_code
				  ) t2
				GROUP BY t2.ass_type_code,t2.ass_type_name
				ORDER BY t2.ass_type_code
			),
			temp2 AS (
			  SELECT 
			  	t.ass_type_code,
			    cast(lpad(chr(41377), level * 2 - 1,chr(41377)) || t.ass_type_name as varchar2(50)) ass_type_name
			  FROM type_t t
			  START WITH t.super_code = 0
			  CONNECT BY PRIOR t.ass_type_code = t.super_code
			)
			SELECT * FROM (
				SELECT
				  t2.ass_type_code,
				  t2.ass_type_name,
				  t1.begin_money,
				  t1.add_money,
		          t1.dec_money,
		          t1.end_money
				FROM  temp1 t1, temp2 t2
			    WHERE t1.ass_type_code = t2.ass_type_code
			    
			    UNION ALL
			    
			    SELECT 
			      null AS ass_type_code,
			      '合计' AS ass_type_name,
			      nvl(sum(t3.begin_money),0) AS begin_money,
			      nvl(sum(t3.add_money),0) AS add_money,
			      nvl(sum(t3.dec_money),0) AS dec_money,
			      nvl(sum(t3.end_money),0) as end_money
			      FROM type_t t3
			      <if test="type_level != null and type_level != ''">
			      START WITH t3.super_code IN (
				    SELECT super_code FROM type_t 
			        WHERE  type_level =#{type_level}
				    )
				  CONNECT BY PRIOR t3.ass_type_code = t3.super_code
				  </if>
		    ) t
		      ORDER BY t.ass_type_code
	
	</select>
</mapper>

