<?xml version="1.0" encoding="UTF-8" ?>
<root>

	<sql id="mat_affi_in_confirm" type="proc"><![CDATA[
	CREATE OR REPLACE PROCEDURE mat_affi_in_confirm
      /*代销入库 入库确认*/
      (
       p_group_id numeric,  --集团ID
        p_hos_id numeric,  --医院ID
        p_copy_code nvarchar2,  --帐套编码
        p_user_id nvarchar2,  --当前操作用户
        p_in_ids nvarchar2,  --入库单Ids 1,2,3
        p_confirm_date nvarchar2,  --入库确认日期
        msg OUT nvarchar2  --返回值格式："msg":"···","state":"true/false","vouch_id":"···"
      )
      IS
        is_flag numeric;  --判断状态依据
        sys_date date;  --当前系统时间(用于同步表里的时间)
        para_price numeric(1,0);  --单价小数位数
        para_money numeric(1,0);  --金额小数位数
        err_msg nvarchar2(4000);  --记录库存不足的材料
        is_update numeric(1,0);  --是否（材料只要出现库存不足的情况以后的材料就值判断库存，不更新表）
         acc_year varchar2(10);
          acc_month varchar2(10);
      BEGIN
        /*初始化变量*/
         sys_date := to_date(p_confirm_date, 'yyyy-MM-dd'); /*获取当前系统时间*/
        is_update := 0; /*0：材料库存充足，更新表，1：材料库存出现不足，不再更新表，只检查材料库存*/

        /*金额位数*/
        select para_value into para_money from acc_para
        where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
          and mod_code = '04' and para_code = '04005';
        /*单价位数*/
        select para_value into para_price from acc_para
        where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
          and mod_code = '04' and para_code = '04006';

         /*获取当前日期所在会计期间*/
          select acc_year, acc_month
            into acc_year, acc_month
          from acc_year_month
          where group_id = p_group_id
            and hos_id = p_hos_id
            and copy_code = p_copy_code
            and sys_date between begin_date and end_date;
        declare
          v_year nvarchar2(4);  --年份
          v_month nvarchar2(2);  --月份
          v_in_id numeric(16,0);  --入库单ID
          v_bus_type_code nvarchar2(20);  --业务类型
          v_store_id numeric(16,0);  --仓库ID
          v_sup_id numeric(16,0);  --供应商ID
          v_detail_id numeric(16,0);  --入库单明细ID
          v_inv_id numeric(16,0);  --材料ID
          v_inv_no numeric(16,0);  --材料变更号
          v_inv_code nvarchar2(20);  --材料code
          v_inv_name nvarchar2(100);  --材料name
          v_is_bar numeric(1,0);  --是否条码管理
          v_is_batch numeric(1,0);  --是否按批管理
          v_is_quality numeric(1,0);  --是否保质期管理
          v_is_disinfect numeric(1,0);  --是否为灭菌材料
          v_amount numeric(16,6);  --数量
          v_back_amount numeric(16,6);  --退货数量的绝对值用于判断库存是否足够
          v_price numeric(16,6);  --单价
          v_amount_money numeric(16,6);  --金额
          v_sale_price numeric(16,6);  --批发单价
          v_sale_money numeric(16,6);  --批发金额
          v_batch_no nvarchar2(100);  --批号
          v_batch_sn numeric(16,0);  --批次
          v_bar_code nvarchar2(100);  --条码
          v_location_id numeric(16,0);  --货位
          v_inva_date date;  --有效期
          v_disinfect_date date;  --灭菌日期
          v_sell_price numeric(16,4);  --当前零售价
          v_new_sell_price numeric(16,4);  --历史零售价
         TYPE cur_range IS REF CURSOR;  --定义游标指针
           v_cursor cur_range;  --定义游标变量
           inv_amount numeric(16,6);  --退库时材料库存
        begin
          OPEN v_cursor FOR  --to_char(sys_date,'yyyy'), to_char(sys_date,'mm'), mai.year, mai.month
            select
              case when mai.bus_type_code = '1' then '0000'
                else acc_year end,
              case when mai.bus_type_code = '1' then '00'
                else acc_month end,
              mai.in_id, mai.bus_type_code, mai.store_id, nvl(mai.sup_id, 0),maid.detail_id,
              maid.inv_id, maid.inv_no,mid.inv_code,mid.inv_name,mid.is_batch,mid.is_bar, mid.is_quality, mid.is_disinfect, nvl(maid.amount, 0),
              round(nvl(maid.price, 0), para_price),round(nvl(maid.amount_money, 0),para_money),round(nvl(maid.sale_price, 0), para_price), round(nvl(maid.sale_money, 0), para_money),
              nvl(maid.batch_no,'-'), nvl(maid.batch_sn,'0'), nvl(maid.bar_code, '-'), nvl(maid.location_id, 0), maid.inva_date,maid.disinfect_date,
              round(nvl(maid.sell_price, 0),para_price), round(nvl(c.new_sell_price, 0),para_price)
            from mat_affi_in mai
            left join mat_affi_in_detail maid on mai.group_id = maid.group_id
              and mai.hos_id = maid.hos_id
              and mai.in_id = maid.in_id
            left join (
                 select mc.* from mat_inv_sell_change mc
                 join (
                      select max(auto_id) auto_id, inv_id from mat_inv_sell_change
                      group by inv_id
                 ) misc on mc.auto_id = misc.auto_id
            )c on maid.group_id = c.group_id and maid.hos_id = c.hos_id and maid.copy_code = c.copy_code and maid.inv_id = c.inv_id
            left join mat_inv_dict mid on mid.inv_id = maid.inv_id and mid.inv_no = maid.inv_no and mid.group_id = maid.group_id
                 and mid.hos_id = maid.hos_id  and mid.copy_code = maid.copy_code and mid.is_stop = 0 and mid.use_state = 1
            where mai.group_id = p_group_id and mai.hos_id = p_hos_id and mai.copy_code = p_copy_code
      ---     --and mai.in_id in (p_in_ids)
               and instr(','||p_in_ids||',',','||mai.in_id||',') > 0 --例如：11,22中存在 1、11、2、22,所以前后加','判断,11,、,22,
              and mai.state < 3
            order by mai.in_id, maid.detail_id;

          loop  /*开启游标*/
            FETCH v_cursor into v_year, v_month, v_in_id, v_bus_type_code, v_store_id, v_sup_id, v_detail_id,
              v_inv_id, v_inv_no, v_inv_code, v_inv_name, v_is_batch, v_is_bar, v_is_quality, v_is_disinfect, v_amount, v_price, v_amount_money,
              v_sale_price, v_sale_money, v_batch_no, v_batch_sn, v_bar_code, v_location_id,
              v_inva_date, v_disinfect_date, v_sell_price, v_new_sell_price;
        --从游标中取一条记录，存放到变量中
            EXIT WHEN v_cursor%NOTFOUND;
            /*判断业务类型，入库和退货流程不一样*/
             /*判断是否为代销退库*/
              if v_bus_type_code = 29 /*材料退货*/
                then
                  --dbms_output.put_line('退库操作');
                  v_back_amount := -1*v_amount;  --仅仅用于判断
                  /*获取该材料当前批号当前批次当前条码的库存量*/
                  select sum(nvl(left_amount,0)) into inv_amount from mat_affi_fifo
                  where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                    and inv_id = v_inv_id and store_id = v_store_id and batch_no = v_batch_no
                    and batch_sn = v_batch_sn and bar_code = v_bar_code and price = v_price
                    and sale_price = v_sale_price;
                  dbms_output.put_line('退库操作批次:'||v_amount||' <= '||inv_amount);
                  if v_back_amount <= inv_amount /*当前批次库存充足直接退货*/
                    then
                      if is_update = 0  /*可以更新表*/
                           then
                    /*判断该批号是否存在*/
                    select count(1) into is_flag from mat_batch_validity
                    where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code and inv_id = v_inv_id and batch_no = v_batch_no;
                    if is_flag = 0
                      then
                        /*不存在则插入*/
                        insert into mat_batch_validity(group_id, hos_id, copy_code, inv_id, batch_no, inva_date)
                        values(p_group_id, p_hos_id, p_copy_code, v_inv_id, v_batch_no, v_inva_date);
                    end if;
                end if;
                /*如果不是默认批号需要插入材料批号灭菌期表*/
                if v_batch_no <> '-' and v_is_disinfect = 1
                  then
                      /*判断该批号是否存在*/
                      select count(1) into is_flag from mat_batch_disinfect
                      where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                        and inv_id = v_inv_id and batch_no = v_batch_no;
                      if is_flag = 0
                        then
                          /*不存在则插入*/
                          insert into mat_batch_disinfect(group_id, hos_id, copy_code, inv_id, batch_no, disinfect_date)
                          values(p_group_id, p_hos_id, p_copy_code, v_inv_id, v_batch_no, v_disinfect_date);
                      end if;
                  end if;
               /*材料零售价有变化则需插入零售价变更表*/
                if v_sell_price <> v_new_sell_price
                  then
                    insert into mat_inv_sell_change(group_id, hos_id, copy_code, auto_id, inv_id, inv_no, in_detail_id, old_sell_price, new_sell_price, change_date, oper)
                    values(p_group_id, p_hos_id, p_copy_code, mat_inv_sell_change_seq.nextval, v_inv_id, v_inv_no, v_detail_id, v_new_sell_price, v_sell_price, sys_date, p_user_id);
                end if;

              /*更新代销出入库结存表 mat_affi_fifo*/
              select count(1) into is_flag from mat_affi_fifo
              where group_id = p_group_id  and hos_id = p_hos_id and copy_code = p_copy_code  and store_id = v_store_id
                    and inv_id = v_inv_id and batch_no = v_batch_no and batch_sn = v_batch_sn and bar_code = v_bar_code
                    and price = v_price;
                  dbms_output.put_line(is_flag);

              if is_flag = 0
                then
                  /*不存在则插入*/
                  insert into mat_affi_fifo(group_id, hos_id, copy_code, store_id, inv_id, batch_no, batch_sn, bar_code, price, sale_price,
                    in_amount, in_money, in_sale_money, out_amount, out_money, out_sale_money, left_amount, left_money, left_sale_money, location_id, sup_id)
                  values(p_group_id, p_hos_id, p_copy_code, v_store_id, v_inv_id, v_batch_no, v_batch_sn, v_bar_code, v_price, v_sale_price,
                    v_amount, v_amount_money, v_sale_money, 0, 0, 0, v_amount, v_amount_money, v_sale_money, v_location_id, v_sup_id);
                else
                /*存在则修改*/
                update mat_affi_fifo
                set in_amount = in_amount + v_amount, in_money = in_money + v_amount_money, in_sale_money = in_sale_money + v_sale_money,
                      left_amount = left_amount + v_amount, left_money = left_money + v_amount_money, left_sale_money = left_sale_money + v_sale_money
                where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                  and store_id = v_store_id and inv_id = v_inv_id and batch_no = v_batch_no
                  and batch_sn = v_batch_sn and bar_code = v_bar_code and price = v_price
                  ;
              end if;
              /*更新代销物资批次结存表 mat_affi_batch*/
              select count(1) into is_flag from mat_affi_batch
              where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                and year = v_year and month = v_month and store_id = v_store_id
                and inv_id = v_inv_id and batch_no = v_batch_no and batch_sn = v_batch_sn
                and bar_code = v_bar_code and price = v_price;

              if is_flag = 0
                then
                  /*不存在则插入*/
                  insert into mat_affi_batch(group_id, hos_id, copy_code, year, month, inv_id, store_id, batch_no, batch_sn, bar_code,
                    price, sale_price, end_amount, end_money,end_sale_money, begin_amount, begin_money, begin_sale_money,
                    in_amount, in_money, in_sale_money, out_amount, out_money, out_sale_money, y_in_amount, y_in_money, y_in_sale_money,
                    y_out_amount, y_out_money, y_out_sale_money, location_id)
                  values(p_group_id, p_hos_id, p_copy_code, v_year, v_month, v_inv_id, v_store_id, v_batch_no, v_batch_sn, v_bar_code,
                    v_price, v_sale_price, 0, 0, 0, 0, 0, 0, v_amount, v_amount_money, v_sale_money, 0, 0, 0, v_amount, v_amount_money, v_sale_money,
                    0, 0, 0, v_location_id);
              else
                /*存在则修改*/
                update mat_affi_batch
                set in_amount = in_amount + v_amount, in_money = in_money + v_amount_money, in_sale_money = in_sale_money + v_sale_money,
                      y_in_amount = y_in_amount + v_amount, y_in_money = y_in_money + v_amount_money, y_in_sale_money = y_in_sale_money + v_sale_money
                where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                      and year = v_year and month = v_month and store_id = v_store_id
                      and inv_id = v_inv_id and batch_no = v_batch_no and batch_sn = v_batch_sn
                      and bar_code = v_bar_code and price = v_price;
              end if;

              /*更新代销材料结余表 mat_affi_balance*/
              select count(1) into is_flag from mat_affi_balance
              where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                    and year = v_year and month = v_month and store_id = v_store_id and inv_id = v_inv_id;
              if is_flag = 0
                then
                /* dbms_output.put_line('group_id:'||+p_group_id||'--hos_id:'||+p_hos_id||'--copy_code:'||+p_copy_code||'--year:'||+v_year||'--month:'||+v_month);
                 dbms_output.put_line('store_id:'||+v_store_id||'--inv_id:'||+v_inv_id);*/
                  /*不存在则插入*/
                  insert into mat_affi_balance(group_id, hos_id, copy_code, year, month, store_id, inv_id, end_amount, end_money, end_sale_money,
                      begin_amount, begin_money, begin_sale_money, in_amount, in_money, in_sale_money, out_amount, out_money, out_sale_money,
                      y_in_amount, y_in_money, y_in_sale_money, y_out_amount, y_out_money, y_out_sale_money, location_id)
                  values(p_group_id, p_hos_id, p_copy_code, v_year, v_month, v_store_id, v_inv_id, 0, 0, 0,0, 0, 0, v_amount, v_amount_money, v_sale_money, 0, 0, 0,
                      v_amount, v_amount_money, v_sale_money, 0, 0, 0, v_location_id);
              else
                /*存在则修改*/
                update mat_affi_balance
                       set in_amount = in_amount + v_amount, in_money = in_money + v_amount_money, in_sale_money = in_sale_money + v_sale_money,
                       y_in_amount = y_in_amount + v_amount, y_in_money = y_in_money + v_amount_money, y_in_sale_money = y_in_sale_money + v_sale_money
                where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                      and year = v_year and month = v_month and store_id = v_store_id and inv_id = v_inv_id;
              end if;

              /*更新材料结存表 mat_affi_inv_hold*/
              select count(1) into is_flag from mat_affi_inv_hold
              where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                    and store_id = v_store_id and inv_id = v_inv_id;
              if is_flag = 0
                then
                  /*不存在则插入*/
                  insert into mat_affi_inv_hold(group_id, hos_id, copy_code, store_id, inv_id, cur_amount, cur_money, location_id)
                        values(p_group_id, p_hos_id, p_copy_code, v_store_id, v_inv_id, v_amount, v_amount_money, v_location_id);
              else
                /*存在则修改*/
                update mat_affi_inv_hold
                       set cur_amount = cur_amount + v_amount, cur_money = cur_money + v_amount_money
                      where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                      and store_id = v_store_id and inv_id = v_inv_id;
              end if;
                      
                  else
                    
                    /*记录库存不足的材料*/
                    dbms_output.put_line('退库操作库存不足:'||v_inv_code||' '||v_inv_name);
                    err_msg := err_msg||v_inv_code||' '||v_inv_name||',';
                    if is_update = 0
                      then
                        is_update := 1;
                    end if;
                  end if;

              else/*材料入库*/
                dbms_output.put_line('入库操作');
                dbms_output.put_line(v_batch_no);
                /*如果不是默认批号需要插入材料批号有效期表*/
                /*if v_batch_no <> '-' and v_is_quality = 1
                  then*/
                   if v_inva_date is not null
                  then
                    /*判断该批号是否存在*/
                    select count(1) into is_flag from mat_batch_validity
                    where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code and inv_id = v_inv_id and batch_no = v_batch_no;
                    if is_flag = 0
                      then
                        /*不存在则插入*/
                        insert into mat_batch_validity(group_id, hos_id, copy_code, inv_id, batch_no, inva_date)
                        values(p_group_id, p_hos_id, p_copy_code, v_inv_id, v_batch_no, v_inva_date);
                    end if;
                end if;
                /*如果不是默认批号需要插入材料批号灭菌期表*/
                if v_batch_no <> '-' and v_is_disinfect = 1
                  then
                      /*判断该批号是否存在*/
                      select count(1) into is_flag from mat_batch_disinfect
                      where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                        and inv_id = v_inv_id and batch_no = v_batch_no;
                      if is_flag = 0
                        then
                          /*不存在则插入*/
                          insert into mat_batch_disinfect(group_id, hos_id, copy_code, inv_id, batch_no, disinfect_date)
                          values(p_group_id, p_hos_id, p_copy_code, v_inv_id, v_batch_no, v_disinfect_date);
                      end if;
                  end if;
               /*材料零售价有变化则需插入零售价变更表*/
                if v_sell_price <> v_new_sell_price
                  then
                    insert into mat_inv_sell_change(group_id, hos_id, copy_code, auto_id, inv_id, inv_no, in_detail_id, old_sell_price, new_sell_price, change_date, oper)
                    values(p_group_id, p_hos_id, p_copy_code, mat_inv_sell_change_seq.nextval, v_inv_id, v_inv_no, v_detail_id, v_new_sell_price, v_sell_price, sys_date, p_user_id);
                end if;

              /*更新代销出入库结存表 mat_affi_fifo*/
              select count(1) into is_flag from mat_affi_fifo
              where group_id = p_group_id  and hos_id = p_hos_id and copy_code = p_copy_code  and store_id = v_store_id
                    and inv_id = v_inv_id and batch_no = v_batch_no and batch_sn = v_batch_sn and bar_code = v_bar_code
                    and price = v_price ;
                  dbms_output.put_line(is_flag);

              if is_flag = 0
                then
                  /*不存在则插入*/
                  insert into mat_affi_fifo(group_id, hos_id, copy_code, store_id, inv_id, batch_no, batch_sn, bar_code, price, sale_price,
                    in_amount, in_money, in_sale_money, out_amount, out_money, out_sale_money, left_amount, left_money, left_sale_money, location_id, sup_id)
                  values(p_group_id, p_hos_id, p_copy_code, v_store_id, v_inv_id, v_batch_no, v_batch_sn, v_bar_code, v_price, v_sale_price,
                    v_amount, v_amount_money, v_sale_money, 0, 0, 0, v_amount, v_amount_money, v_sale_money, v_location_id, v_sup_id);
                else
                /*存在则修改*/
                update mat_affi_fifo
                set in_amount = in_amount + v_amount, in_money = in_money + v_amount_money, in_sale_money = in_sale_money + v_sale_money,
                      left_amount = left_amount + v_amount, left_money = left_money + v_amount_money, left_sale_money = left_sale_money + v_sale_money
                where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                  and store_id = v_store_id and inv_id = v_inv_id and batch_no = v_batch_no
                  and batch_sn = v_batch_sn and bar_code = v_bar_code and price = v_price
                  ;
              end if;
              /*更新代销物资批次结存表 mat_affi_batch*/
              select count(1) into is_flag from mat_affi_batch
              where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                and year = v_year and month = v_month and store_id = v_store_id
                and inv_id = v_inv_id and batch_no = v_batch_no and batch_sn = v_batch_sn
                and bar_code = v_bar_code and price = v_price;

              if is_flag = 0
                then
                  /*不存在则插入*/
                  insert into mat_affi_batch(group_id, hos_id, copy_code, year, month, inv_id, store_id, batch_no, batch_sn, bar_code,
                    price, sale_price, end_amount, end_money,end_sale_money, begin_amount, begin_money, begin_sale_money,
                    in_amount, in_money, in_sale_money, out_amount, out_money, out_sale_money, y_in_amount, y_in_money, y_in_sale_money,
                    y_out_amount, y_out_money, y_out_sale_money, location_id)
                  values(p_group_id, p_hos_id, p_copy_code, v_year, v_month, v_inv_id, v_store_id, v_batch_no, v_batch_sn, v_bar_code,
                    v_price, v_sale_price, 0, 0, 0, 0, 0, 0, v_amount, v_amount_money, v_sale_money, 0, 0, 0, v_amount, v_amount_money, v_sale_money,
                    0, 0, 0, v_location_id);
              else
                /*存在则修改*/
                update mat_affi_batch
                set in_amount = in_amount + v_amount, in_money = in_money + v_amount_money, in_sale_money = in_sale_money + v_sale_money,
                      y_in_amount = y_in_amount + v_amount, y_in_money = y_in_money + v_amount_money, y_in_sale_money = y_in_sale_money + v_sale_money
                where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                      and year = v_year and month = v_month and store_id = v_store_id
                      and inv_id = v_inv_id and batch_no = v_batch_no and batch_sn = v_batch_sn
                      and bar_code = v_bar_code and price = v_price ;
              end if;

              /*更新代销材料结余表 mat_affi_balance*/
              select count(1) into is_flag from mat_affi_balance
              where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                    and year = v_year and month = v_month and store_id = v_store_id and inv_id = v_inv_id;
              if is_flag = 0
                then
                /* dbms_output.put_line('group_id:'||+p_group_id||'--hos_id:'||+p_hos_id||'--copy_code:'||+p_copy_code||'--year:'||+v_year||'--month:'||+v_month);
                 dbms_output.put_line('store_id:'||+v_store_id||'--inv_id:'||+v_inv_id);*/
                  /*不存在则插入*/
                  insert into mat_affi_balance(group_id, hos_id, copy_code, year, month, store_id, inv_id, end_amount, end_money, end_sale_money,
                      begin_amount, begin_money, begin_sale_money, in_amount, in_money, in_sale_money, out_amount, out_money, out_sale_money,
                      y_in_amount, y_in_money, y_in_sale_money, y_out_amount, y_out_money, y_out_sale_money, location_id)
                  values(p_group_id, p_hos_id, p_copy_code, v_year, v_month, v_store_id, v_inv_id, 0, 0, 0,0, 0, 0, v_amount, v_amount_money, v_sale_money, 0, 0, 0,
                      v_amount, v_amount_money, v_sale_money, 0, 0, 0, v_location_id);
              else
                /*存在则修改*/
                update mat_affi_balance
                       set in_amount = in_amount + v_amount, in_money = in_money + v_amount_money, in_sale_money = in_sale_money + v_sale_money,
                       y_in_amount = y_in_amount + v_amount, y_in_money = y_in_money + v_amount_money, y_in_sale_money = y_in_sale_money + v_sale_money
                where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                      and year = v_year and month = v_month and store_id = v_store_id and inv_id = v_inv_id;
              end if;

              /*更新材料结存表 mat_affi_inv_hold*/
              select count(1) into is_flag from mat_affi_inv_hold
              where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                    and store_id = v_store_id and inv_id = v_inv_id;
              if is_flag = 0
                then
                  /*不存在则插入*/
                  insert into mat_affi_inv_hold(group_id, hos_id, copy_code, store_id, inv_id, cur_amount, cur_money, location_id)
                        values(p_group_id, p_hos_id, p_copy_code, v_store_id, v_inv_id, v_amount, v_amount_money, v_location_id);
              else
                /*存在则修改*/
                update mat_affi_inv_hold
                       set cur_amount = cur_amount + v_amount, cur_money = cur_money + v_amount_money
                      where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                      and store_id = v_store_id and inv_id = v_inv_id;
              end if;
            end if;
            /*期初需要重新计算开始月份到结账月份之间的begin与end*/
            if v_bus_type_code = 1 then
              select count(*) into is_flag from acc_year_month
                where group_id = p_group_id and hos_id = p_hos_id
                  and copy_code = p_copy_code and mat_flag = 1;
              if is_flag <> 0 then
                declare
                  vv_year_month varchar2(6); --启用年月
                  vv_mat_year varchar2(4); --期间年
                  vv_mat_month varchar2(2); --期间月
                  TYPE cur_init IS REF CURSOR;  --定义游标指针
                  init_cursor cur_init;  --定义游标变量
                begin
                  select start_year || start_month
                  into vv_year_month
                  from mat_store_start
                  where group_id = p_group_id and hos_id = p_hos_id
                    and copy_code = p_copy_code and store_id = v_store_id;
                  --开始期间和已结账期间游标
                  open init_cursor for
                    select acc_year, acc_month
                    from acc_year_month
                    where group_id = p_group_id and hos_id = p_hos_id
                      and copy_code = p_copy_code
                      and ((acc_year || acc_month = vv_year_month) or (acc_year || acc_month > vv_year_month and mat_flag = 1))
                    order by acc_year, acc_month;
                  loop /*开启游标*/
                    FETCH init_cursor into vv_mat_year, vv_mat_month; /*从游标中取一条记录，存放到变量中*/
                    EXIT WHEN init_cursor%NOTFOUND;
                      --补写mat_affi_batch表
                      select count(1) into is_flag from mat_affi_batch
                      where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                        and year = vv_mat_year and month = vv_mat_month and store_id = v_store_id
                        and inv_id = v_inv_id and batch_no = v_batch_no and batch_sn = v_batch_sn
                        and bar_code = v_bar_code and price = v_price and sale_price = v_sale_price;
                      if is_flag = 0 then
                        /*不存在则插入*/
                        insert into mat_affi_batch(group_id, hos_id, copy_code, year, month, inv_id, store_id, batch_no, batch_sn, bar_code,
                          price, sale_price, end_amount, end_money, end_sale_money, begin_amount, begin_money, begin_sale_money,
                          in_amount, in_money, in_sale_money, out_amount, out_money, out_sale_money, y_in_amount, y_in_money, y_in_sale_money,
                          y_out_amount, y_out_money, y_out_sale_money, location_id)
                        values(p_group_id, p_hos_id, p_copy_code, vv_mat_year, vv_mat_month, v_inv_id, v_store_id, v_batch_no, v_batch_sn, v_bar_code,
                          v_price, v_sale_price, 0, 0, 0, v_amount, v_amount_money, v_sale_money, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v_location_id);
                      else
                        /*存在则修改*/
                        update mat_affi_batch
                        set begin_amount = begin_amount + v_amount,
                          begin_money = begin_money + v_amount_money,
                          begin_sale_money = begin_sale_money + v_sale_money
                        where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                          and year = vv_mat_year and month = vv_mat_month and store_id = v_store_id
                          and inv_id = v_inv_id and batch_no = v_batch_no and batch_sn = v_batch_sn
                          and bar_code = v_bar_code and price = v_price and sale_price = v_sale_price;
                      end if;
                      --补写mat_affi_balance表
                      select count(1) into is_flag from mat_affi_balance
                      where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                        and year = vv_mat_year and month = vv_mat_month and store_id = v_store_id and inv_id = v_inv_id;
                      if is_flag = 0 then
                        /*不存在则插入*/
                        insert into mat_affi_balance(group_id, hos_id, copy_code, year, month, store_id, inv_id, end_amount, end_money, end_sale_money,
                          begin_amount, begin_money, begin_sale_money, in_amount, in_money, in_sale_money, out_amount, out_money, out_sale_money,
                          y_in_amount, y_in_money, y_in_sale_money, y_out_amount, y_out_money, y_out_sale_money, location_id)
                        values(p_group_id, p_hos_id, p_copy_code, vv_mat_year, vv_mat_month, v_store_id, v_inv_id, 0, 0, 0,
                          v_amount, v_amount_money, v_sale_money, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, v_location_id);
                      else
                        /*存在则修改*/
                        update mat_affi_balance
                        set begin_amount = begin_amount + v_amount,
                          begin_money = begin_money + v_amount_money,
                          begin_sale_money = begin_sale_money + v_sale_money
                        where group_id = p_group_id and hos_id = p_hos_id and copy_code = p_copy_code
                          and year = vv_mat_year and month = vv_mat_month and store_id = v_store_id and inv_id = v_inv_id;
                      end if;
                  end loop;  /*结束游标*/
                  CLOSE init_cursor;  /*关闭游标*/
                end;
              end if;
            end if;
          end loop;  /*结束游标*/
          CLOSE v_cursor;  --关闭游标
        end;

        /*如果存在材料库存不足回滚事物并返回*/
        if length(err_msg) > 0
          then
            msg := '{"error":"'||err_msg||'库存不足！"}';
            rollback;
            return;
        end if;

        /*更新入库单状态*/
        --处理非期初单据
        update mat_affi_in set state = 3, confirmer = p_user_id, confirm_date = sys_date,
          year = acc_year, month = acc_month
        where group_id = p_group_id
          and hos_id = p_hos_id
          and copy_code = p_copy_code
          and state < 3
          and bus_type_code <> '1'
          and instr(','||p_in_ids||',',','||in_id||',') > 0;
        --单独处理期初
        update mat_affi_in set state = 3, confirmer = p_user_id, confirm_date = sys_date,
          year = '0000', month = '00'
        where group_id = p_group_id
          and hos_id = p_hos_id
          and copy_code = p_copy_code
          and state < 3
          and bus_type_code = '1'
          and instr(','||p_in_ids||',',','||in_id||',') > 0;

        /*返回信息*/
        msg := '{"msg":"操作成功.","state":"true"}';

      END mat_affi_in_confirm;
	

	]]></sql>
	
</root>

