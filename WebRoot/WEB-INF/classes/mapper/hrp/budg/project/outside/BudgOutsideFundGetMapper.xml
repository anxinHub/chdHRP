<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.budg.dao.project.outside.BudgOutsideFundGetMapper">
	
	<resultMap id="budgOutsideFundGet" type="com.chd.hrp.budg.entity.BudgOutsideFundGet">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="record_id" column="record_id"/>
	<result property="remark" column="remark"/>
	<result property="get_date" column="get_date"/>
	<result property="income_subj" column="income_subj"/>
	<result property="proj_id" column="proj_id"/>
	<result property="proj_no" column="proj_no"/>
	<result property="source_id" column="source_id"/>
	<result property="get_amount" column="get_amount"/>
	</resultMap>
		
	<resultMap id="budgOutsideFundGetMap" type="java.util.Map">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="record_id" column="record_id"/>
	<result property="remark" column="remark"/>
	<result property="get_date" column="get_date"/>
	<result property="income_subj" column="income_subj"/>
	<result property="proj_id" column="proj_id"/>
	<result property="proj_no" column="proj_no"/>
	<result property="source_id" column="source_id"/>
	<result property="get_amount" column="get_amount"/>
	<result property="subj_id" column="subj_id"/>
	<result property="subj_name" column="subj_name"/>
	<result property="proj_name" column="proj_name"/>
	<result property="source_name" column="source_name"/>
	</resultMap>
	
	<insert id="addBudgOutsideFundGet" useGeneratedKeys="true" >
	
		INSERT INTO BUDG_OUTSIDE_FUND_GET (
		<trim suffix="" suffixOverrides=",">
		group_id,
       hos_id,
       copy_code,
       record_id,
       remark,
       get_date,
       income_subj,
       proj_id,
       proj_no,
       source_id,
       get_amount
		</trim>
		) VALUES (
		<trim suffix="" suffixOverrides=",">
		#{group_id,jdbcType=INTEGER}
		,
		#{hos_id,jdbcType=INTEGER}
		,
		#{copy_code,jdbcType=VARCHAR}
		,
		#{record_id,jdbcType=INTEGER}
		,
		#{remark,jdbcType=VARCHAR}
		,
		#{get_date,jdbcType=DATE}
		,
		#{income_subj,jdbcType=VARCHAR}
		,
		#{proj_id,jdbcType=INTEGER}
		,
		#{proj_no,jdbcType=INTEGER}
		,
		#{source_id,jdbcType=INTEGER}
		,
		#{get_amount,jdbcType=INTEGER}
		</trim>		
		)
	
	</insert>
	<insert id="addBatch" parameterType="java.util.List" >
	
		INSERT INTO BUDG_OUTSIDE_FUND_GET (
		group_id
		,
		hos_id
		,
		copy_code
		,
		record_id
		,
		remark
		,
		get_date
		,
		income_subj
		,
		proj_id
		,
		proj_no
		,
		source_id
		,
		get_amount
		
		) select BUDG_OUTSIDE_FUND_GET_SEQ.nextval , t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
			#{item.group_id,jdbcType=INTEGER}
			,
			#{item.hos_id,jdbcType=INTEGER}
			,
			#{item.copy_code,jdbcType=VARCHAR}
			,
			#{item.record_id,jdbcType=INTEGER}
			,
			#{item.remark,jdbcType=VARCHAR}
			,
			#{item.get_date,jdbcType=DATE}
			,
			#{item.income_subj,jdbcType=VARCHAR}
			,
			#{item.proj_id,jdbcType=INTEGER}
			,
			#{item.proj_no,jdbcType=INTEGER}
			,
			#{item.source_id,jdbcType=INTEGER}
			,
			#{item.get_amount,jdbcType=INTEGER}
			
		    from dual
		</foreach>
		)t
	</insert>
	
	<update id="updateBudgOutsideFundGet" parameterType="java.util.Map">
	
		UPDATE budg_outside_fund_get 
		set
			remark = #{remark,jdbcType=VARCHAR}
			,
			get_date = #{get_date,jdbcType=DATE}
			,
			income_subj = #{income_subj,jdbcType=VARCHAR}
			,
			proj_id = #{proj_id,jdbcType=INTEGER}
			,
			proj_no = #{proj_no,jdbcType=INTEGER}
			,
			source_id = #{source_id,jdbcType=INTEGER}
			,
			get_amount = #{get_amount,jdbcType=INTEGER}
			
			where                     
			    group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND record_id = #{record_id,jdbcType=INTEGER}
	</update>
	
	<update id="updateBatch" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE budg_outside_fund_get 
			<trim prefix="SET"  suffixOverrides=","> 
			<if test="item.remark != null and item.remark != ''">
			remark = #{item.remark,jdbcType=VARCHAR}
			,
			</if>
			<if test="item.get_date != null and item.get_date != ''">
			get_date = #{item.get_date,jdbcType=DATE}
			,
			</if>
			<if test="item.income_subj != null and item.income_subj != ''">
			income_subj = #{item.income_subj,jdbcType=VARCHAR}
			,
			</if>
			<if test="item.proj_id != null and item.proj_id != ''">
			proj_id = #{item.proj_id,jdbcType=INTEGER}
			,
			</if>
			<if test="item.proj_no != null and item.proj_no != ''">
			proj_no = #{item.proj_no,jdbcType=INTEGER}
			,
			</if>
			<if test="item.source_id != null and item.source_id != ''">
			source_id = #{item.source_id,jdbcType=INTEGER}
			,
			</if>
			<if test="item.get_amount != null and item.get_amount != ''">
			get_amount = #{item.get_amount,jdbcType=INTEGER}
			,
			</if>
			</trim>
			<where>                     
			<if test="item.group_id != null and item.group_id != ''">
			AND group_id = #{item.group_id,jdbcType=INTEGER}
			</if>  
			<if test="item.hos_id != null and item.hos_id != ''">
			AND hos_id = #{item.hos_id,jdbcType=INTEGER}
			</if>  
			<if test="item.copy_code != null and item.copy_code != ''">
			AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
			</if>  
			<if test="item.record_id != null and item.record_id != ''">
			AND record_id = #{item.record_id,jdbcType=INTEGER}
			</if>  
			<if test="item.remark != null and item.remark != ''">
			AND remark = #{item.remark,jdbcType=VARCHAR}
			</if>  
			<if test="item.get_date != null and item.get_date != ''">
			AND get_date = #{item.get_date,jdbcType=DATE}
			</if>  
			<if test="item.income_subj != null and item.income_subj != ''">
			AND income_subj = #{item.income_subj,jdbcType=VARCHAR}
			</if>  
			<if test="item.proj_id != null and item.proj_id != ''">
			AND proj_id = #{item.proj_id,jdbcType=INTEGER}
			</if>  
			<if test="item.proj_no != null and item.proj_no != ''">
			AND proj_no = #{item.proj_no,jdbcType=INTEGER}
			</if>  
			<if test="item.source_id != null and item.source_id != ''">
			AND source_id = #{item.source_id,jdbcType=INTEGER}
			</if>  
			<if test="item.get_amount != null and item.get_amount != ''">
			AND get_amount = #{item.get_amount,jdbcType=INTEGER}
			</if>  
			</where>  			
		</foreach>
	</update>
	
	
	<delete id="delete" parameterType="java.util.Map">
	
		DELETE FROM budg_outside_fund_get 
		where                     
		  group_id = #{group_id,jdbcType=INTEGER}
		AND hos_id = #{hos_id,jdbcType=INTEGER}
		AND copy_code = #{copy_code,jdbcType=VARCHAR}
		AND record_id = #{record_id,jdbcType=INTEGER}
	</delete>
	
	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM budg_outside_fund_get 
		<where>
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				  group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND record_id = #{item.record_id,jdbcType=INTEGER}
			</foreach>
	    </where>  
	</delete>
	<select id="queryBudgOutsideFundGet" parameterType="java.util.Map" resultMap="budgOutsideFundGetMap" >
	
	 select bofg.group_id,
        bofg.hos_id,
        bofg.copy_code,
        bofg.record_id,
        bofg.remark,
        bofg.get_date,
        bofg.income_subj,
        accs.subj_id,
        accs.subj_name,
        bofg.proj_id||','||hpd.proj_no as proj_id,
        hpd.proj_name,
        bofg.proj_no,
        bofg.source_id,
        hoss.source_name,
        bofg.get_amount
   from BUDG_OUTSIDE_FUND_GET bofg
   left join ACC_SUBJ accs
   on accs.group_id=bofg.group_id
   and accs.hos_id =bofg.hos_id
   and accs.copy_code = bofg.copy_code
   and accs.subj_id = bofg.income_subj
   and accs.acc_year=#{acc_year}
   left join hos_proj_dict hpd
     on hpd.group_id = bofg.group_id
    and hpd.hos_id = bofg.hos_id
    and hpd.proj_id = bofg.proj_id
    and hpd.is_stop = 0
  left join HOS_SOURCE hoss
   on hoss.group_id = bofg.group_id
   and hoss.hos_id = bofg.hos_id
   and hoss.source_id = bofg.source_id
		where                     
		  bofg.group_id = #{group_id,jdbcType=INTEGER}
		AND bofg.hos_id = #{hos_id,jdbcType=INTEGER}
		AND bofg.copy_code = #{copy_code,jdbcType=VARCHAR}
		<if test="proj_name != '' and proj_name != null">
	and ( hpd.proj_name like '%${proj_name}%' or
          hpd.proj_code like '%${proj_name}%' or 
          hpd.proj_simple like '%${proj_name}%'or 
          hpd.spell_code like '%${proj_name}%' or 
          hpd.wbx_code like '%v${proj_name}%' )
		</if>
		<if test="get_date != '' and get_date != null and end_get_date != '' and end_get_date != null ">
			and bofg.get_date  between to_date(#{get_date},'yyyy-mm-dd') and to_date(#{end_get_date},'yyyy-mm-dd')
		</if>
		<if test="source_id != '' and source_id != null">
			and bofg.source_id = #{source_id}
		</if>
	</select>
	<select id="queryByCode" resultMap="budgOutsideFundGet"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		record_id,
		remark,
		get_date,
		income_subj,
		proj_id,
		proj_no,
		source_id,
		get_amount
		FROM budg_outside_fund_get 
		WHERE 
		group_id = #{group_id,jdbcType=INTEGER}   and 
		hos_id = #{hos_id,jdbcType=INTEGER}   and 
		copy_code = #{copy_code,jdbcType=VARCHAR}   and 
		record_id = #{record_id,jdbcType=INTEGER} 
	
	</select>
	<select id="queryOutsideFundGetByUniqueness" resultMap="budgOutsideFundGetMap"  parameterType="java.util.Map" >
	
		select group_id,
		       hos_id,
		       copy_code,
		       proj_id,
		       source_id,
		       sum(get_amount) as get_amount
		from   budg_outside_fund_get	
		where                   
		    group_id = #{group_id,jdbcType=INTEGER}
		AND hos_id = #{hos_id,jdbcType=INTEGER}
		AND copy_code = #{copy_code,jdbcType=VARCHAR}
		and get_date > = to_date('${budg_year}-01-01','yyyy-mm-dd')
		<if test="proj_id != '' and proj_id != null">
		and proj_id = #{proj_id}
		</if>
		group by group_id, hos_id, copy_code,  proj_id, source_id
	</select>
	<select id="queryExists" resultMap="budgOutsideFundGet"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
       hos_id,
       copy_code,
       record_id,
       remark,
       get_date,
       income_subj,
       proj_id,
       proj_no,
       source_id,
       get_amount
		FROM BUDG_OUTSIDE_FUND_GET 
		where                    
		 group_id = #{group_id,jdbcType=INTEGER}
		AND hos_id = #{hos_id,jdbcType=INTEGER}
		AND copy_code = #{copy_code,jdbcType=VARCHAR}
		AND record_id = #{record_id,jdbcType=INTEGER}
		order by group_id asc
	</select>
	
	<insert id="addbudgProjYear" parameterType="java.util.Map">
		insert into budg_proj_year
		  (group_id,
		   hos_id,
		   copy_code,
		   budg_year,
		   proj_id,
		   source_id,
		   in_amount,
		   t_in_amount,
		   usable_amount
		    )
		values
		  (#{group_id},
		   #{hos_id},
		   #{copy_code},
		   #{budg_year},
		   #{proj_id},
		   #{source_id},
		   #{in_amount},
		   #{t_in_amount},
		   #{usable_amount}
			)
	</insert>
	
	<update id="updatebudgProjYearbyYearPidSid" parameterType="java.util.Map">
	 update budg_proj_year
    set 
        in_amount = #{in_amount,jdbcType=INTEGER},
        t_in_amount = #{t_in_amount,jdbcType=INTEGER},
        usable_amount = #{usable_amount,jdbcType=INTEGER}
	  where group_id = #{group_id}
	    and hos_id = #{hos_id}
	    and copy_code = #{copy_code}
	    and budg_year = #{budg_year}
	    and proj_id = #{proj_id}
	    and source_id = #{source_id}	
	</update>
	
</mapper>

