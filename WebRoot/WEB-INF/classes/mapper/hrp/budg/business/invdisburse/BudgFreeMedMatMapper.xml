<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.budg.dao.business.invdisburse.BudgFreeMedMatMapper">
	
	<resultMap id="budgFreeMedMat" type="com.chd.hrp.budg.entity.BudgFreeMedMat">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="year" column="year"/>
	<result property="month" column="month"/>
	<result property="dept_id" column="dept_id"/>
	<result property="mat_type_id" column="mat_type_id"/>
	<result property="work_budg_out" column="work_budg_out"/>
	<result property="work_budg_in" column="work_budg_in"/>
	<result property="work_budg_check" column="work_budg_check"/>
	<result property="work_cost_rate_out" column="work_cost_rate_out"/>
	<result property="work_cost_rate_in" column="work_cost_rate_in"/>
	<result property="work_cost_rate_check" column="work_cost_rate_check"/>
	<result property="count_value" column="count_value"/>
	<result property="adj_rate" column="adj_rate"/>
	<result property="cost_budg" column="cost_budg"/>
	<result property="remark" column="remark"/>
	</resultMap>
		
	<resultMap id="budgFreeMedMatMap" type="java.util.Map">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="year" column="year"/>
	<result property="month" column="month"/>
	<result property="dept_id" column="dept_id"/>
	<result property="dept_name" column="dept_name"/>
	<result property="mat_type_id" column="mat_type_id"/>
	<result property="mat_type_name" column="mat_type_name"/>
	<result property="work_budg_out" column="work_budg_out"/>
	<result property="work_budg_in" column="work_budg_in"/>
	<result property="work_budg_check" column="work_budg_check"/>
	<result property="work_cost_rate_out" column="work_cost_rate_out"/>
	<result property="work_cost_rate_in" column="work_cost_rate_in"/>
	<result property="work_cost_rate_check" column="work_cost_rate_check"/>
	<result property="count_value" column="count_value"/>
	<result property="adj_rate" column="adj_rate"/>
	<result property="cost_budg" column="cost_budg"/>
	<result property="remark" column="remark"/>
	<result property="cost_subj_code" column="cost_subj_code"/>
	<result property="income_subj_code" column="income_subj_code"/>
				       
	</resultMap>
	
	<insert id="add" useGeneratedKeys="true" >
	
		INSERT INTO BUDG_FREE_MED_MAT (
			group_id
			,
			hos_id
			,
			copy_code
			,
			year
			,
			month
			,
			dept_id
			,
			mat_type_id
			,
			work_budg_out
			,
			work_budg_in
			,
			work_budg_check
			,
			work_cost_rate_out
			,
			work_cost_rate_in
			,
			work_cost_rate_check
			,
			count_value
			,
			adj_rate
			,
			cost_budg
			,
			remark
		) VALUES (
			#{group_id,jdbcType=INTEGER}
			,
			#{hos_id,jdbcType=INTEGER}
			,
			#{copy_code,jdbcType=VARCHAR}
			,
			#{year,jdbcType=VARCHAR}
			,
			#{month,jdbcType=VARCHAR}
			,
			#{dept_id,jdbcType=INTEGER}
			,
			#{mat_type_id,jdbcType=INTEGER}
			,
			#{work_budg_out,jdbcType=INTEGER}
			,
			#{work_budg_in,jdbcType=INTEGER}
			,
			#{work_budg_check,jdbcType=INTEGER}
			,
			#{work_cost_rate_out,jdbcType=INTEGER}
			,
			#{work_cost_rate_in,jdbcType=INTEGER}
			,
			#{work_cost_rate_check,jdbcType=INTEGER}
			,
			#{count_value,jdbcType=INTEGER}
			,
			#{adj_rate,jdbcType=INTEGER}
			,
			#{cost_budg,jdbcType=INTEGER}
			,
			#{remark,jdbcType=VARCHAR}
		)
	
	</insert>
	
	<insert id="addBatch" parameterType="java.util.List" >
		INSERT INTO BUDG_FREE_MED_MAT (
			group_id
			,
			hos_id
			,
			copy_code
			,
			year
			,
			month
			,
			dept_id
			,
			mat_type_id
			,
			work_budg_out
			,
			work_budg_in
			,
			work_budg_check
			,
			work_cost_rate_out
			,
			work_cost_rate_in
			,
			work_cost_rate_check
			,
			count_value
			,
			adj_rate
			,
			cost_budg
			,
			remark
		) select t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
				#{item.group_id,jdbcType=INTEGER}
				,
				#{item.hos_id,jdbcType=INTEGER}
				,
				#{item.copy_code,jdbcType=VARCHAR}
				,
				#{item.year,jdbcType=VARCHAR}
				,
				#{item.month,jdbcType=VARCHAR}
				,
				#{item.dept_id,jdbcType=INTEGER}
				,
				#{item.mat_type_id,jdbcType=INTEGER}
				,
				#{item.work_budg_out,jdbcType=INTEGER}
				,
				#{item.work_budg_in,jdbcType=INTEGER}
				,
				#{item.work_budg_check,jdbcType=INTEGER}
				,
				#{item.work_cost_rate_out,jdbcType=INTEGER}
				,
				#{item.work_cost_rate_in,jdbcType=INTEGER}
				,
				#{item.work_cost_rate_check,jdbcType=INTEGER}
				,
				#{item.count_value,jdbcType=INTEGER}
				,
				#{item.adj_rate,jdbcType=INTEGER}
				,
				#{item.cost_budg,jdbcType=INTEGER}
				,
				#{item.remark,jdbcType=VARCHAR}
		    from dual
		</foreach>
		)t
	</insert>
	
	<update id="update" parameterType="java.util.Map">
	
		UPDATE budg_free_med_mat  set
			cost_budg = #{cost_budg,jdbcType=INTEGER}
			,
			remark = #{remark,jdbcType=VARCHAR}
		where                     
			group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND year = #{year,jdbcType=VARCHAR}
			AND month = #{month,jdbcType=VARCHAR}
			AND dept_id = #{dept_id,jdbcType=INTEGER}
			AND mat_type_id = #{mat_type_id,jdbcType=INTEGER}
	</update>
	
	<update id="updateBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE budg_free_med_mat 
			set
				work_budg_out = #{item.work_budg_out,jdbcType=INTEGER}
				,
				work_budg_in = #{item.work_budg_in,jdbcType=INTEGER}
				,
				work_budg_check = #{item.work_budg_check,jdbcType=INTEGER}
				,
				work_cost_rate_out = #{item.work_cost_rate_out,jdbcType=INTEGER}
				,
				work_cost_rate_in = #{item.work_cost_rate_in,jdbcType=INTEGER}
				,
				work_cost_rate_check = #{item.work_cost_rate_check,jdbcType=INTEGER}
				,
				count_value = #{item.count_value,jdbcType=INTEGER}
				,
				adj_rate = #{item.adj_rate,jdbcType=INTEGER}
				,
				cost_budg = #{item.cost_budg,jdbcType=INTEGER}
				,
				remark = #{item.remark,jdbcType=VARCHAR}
			where                     
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND month = #{item.month,jdbcType=VARCHAR}
				AND dept_id = #{item.dept_id,jdbcType=INTEGER}
				AND mat_type_id = #{item.mat_type_id,jdbcType=INTEGER}
 		</foreach>
	</update>
		<insert id="generatebudgFreeMedMat" parameterType="java.util.Map">
			insert into budg_free_med_mat
					  (group_id,
					   hos_id,
					   copy_code,
					   year,
					   month,
					   dept_id,
					   mat_type_id 
					 )
					select bfmmc.group_id,bfmmc.hos_id,bfmmc.copy_code,bmts.budg_year year,bfmmc.month,bfmmc.dept_id,bfmmc.mat_type_id
					from BUDG_FREE_MED_MAT_COST bfmmc
					left join budg_mat_type_subj  bmts
					on  bfmmc.group_id = bmts.group_id
					and bfmmc.hos_id = bmts.hos_id
					and bfmmc.copy_code = bmts.copy_code
					and bfmmc.mat_type_id = bmts.mat_type_id
					and bmts.budg_year = ${year}
					where bfmmc.group_id=#{group_id}
					and bfmmc.hos_id = #{hos_id}
					and bfmmc.copy_code=#{copy_code}
					and bfmmc.year = ${year}-1
					and bmts.mat_type_id is not null
		</insert>
		
		<select id="queryBudgFreeMedMatCostByYear" resultMap="budgFreeMedMatMap" parameterType="java.util.Map">
			select 
			    a.group_id,
			    a.hos_id,
			    a.copy_code,
			    a.year,
			    a.month,
			    a.dept_id,
			    a.nature,
			    a.mat_type_id
			from budg_free_med_mat_cost a
			left join hos_dept_dict hdd
		         on a.group_id = hdd.group_id
		         and a.hos_id = hdd.hos_id
		         and a.dept_id = hdd.dept_id
		         and hdd.is_stop = 0
	        left join acc_dept_attr ada
		         on hdd.group_id = ada.group_id
		         and hdd.hos_id = ada.hos_id
		         and hdd.dept_id = ada.dept_id
		         and ada.is_budg = 1
			where a.group_id = #{group_id} 
			      and a.hos_id = #{hos_id} 
			      and a.copy_code = #{copy_code} 
			      and a.year = #{last_year} 
			
		</select>
			<select id="queryBudgMatTypeSubjByYear" resultType="java.lang.Integer" parameterType="java.util.Map">
				select 
					count(0)
				from BUDG_MAT_TYPE_SUBJ
				where 
				  group_id = #{group_id} 
			      and hos_id = #{hos_id} 
			      and copy_code = #{copy_code} 
			      and budg_year = #{year} 
			</select>
		
		<update id="updatebudgFreeMedMat" parameterType="java.util.Map">
		
		begin
			update BUDG_FREE_MED_MAT bfmm
			   set WORK_BUDG_OUT =
			       (select nvl(bwdm.budg_value,0)
			          from BUDG_WORK_DEPT_MONTH bwdm
			         where bfmm.group_id = bwdm.group_id
			           and bfmm.hos_id = bwdm.hos_id
			           and bfmm.copy_code = bwdm.copy_code
			           and bfmm.year = bwdm.year
			           and bfmm.month = bwdm.month
			           and bfmm.dept_id = bwdm.dept_id
			           and bwdm.index_code = '01');
			           
			update BUDG_FREE_MED_MAT bfmm
			   set WORK_BUDG_IN =
			       (select nvl(bwdm.budg_value,0)
			          from BUDG_WORK_DEPT_MONTH bwdm
			         where bfmm.group_id = bwdm.group_id
			           and bfmm.hos_id = bwdm.hos_id
			           and bfmm.copy_code = bwdm.copy_code
			           and bfmm.year = bwdm.year
			           and bfmm.month = bwdm.month
			           and bfmm.dept_id = bwdm.dept_id
			           and bwdm.index_code = '02');
			           
			update BUDG_FREE_MED_MAT bfmm
			   set WORK_BUDG_CHECK =
			       (select nvl(bwdm.budg_value,0)
			          from BUDG_WORK_DEPT_MONTH bwdm
			         where bfmm.group_id = bwdm.group_id
			           and bfmm.hos_id = bwdm.hos_id
			           and bfmm.copy_code = bwdm.copy_code
			           and bfmm.year = bwdm.year
			           and bfmm.month = bwdm.month
			           and bfmm.dept_id = bwdm.dept_id
			           and bwdm.index_code = '03');
			           
			update BUDG_FREE_MED_MAT a
			   set WORK_COST_RATE_OUT =
			       (select case sum(bwde.execute_value)
			                 when 0 then
			                  0
			                 else
			                  nvl(sum(bfmmc.amount) / sum(bwde.execute_value), 0)
			               end
			          from BUDG_FREE_MED_MAT bfmm
			         inner join BUDG_FREE_MED_MAT_COST bfmmc
			            on bfmm.group_id = bfmmc.group_id
			           and bfmm.hos_id = bfmmc.hos_id
			           and bfmm.copy_code = bfmmc.copy_code
			           and bfmmc.year = #{pre_year}
			           and bfmmc.month = bfmm.month
			           and bfmm.dept_id = bfmmc.dept_id
			           and bfmmc.nature = '01'
			         inner join BUDG_WORK_DEPT_EXECUTE bwde
			            on bfmm.group_id = bwde.group_id
			           and bfmm.hos_id = bwde.hos_id
			           and bfmm.copy_code = bwde.copy_code
			           and bwde.year = #{pre_year}
			           and bfmm.month = bwde.month
			           and bfmm.dept_id = bwde.dept_id
			           and bwde.index_code = '01'
			         where bfmm.group_id = a.group_id
			           and bfmm.hos_id = a.hos_id
			           and bfmm.copy_code = a.copy_code
			           and bfmm.dept_id = a.dept_id)
			 where a.group_id = #{group_id}
			   and a.hos_id = #{hos_id}
			   and a.copy_code = #{copy_code}
			   and a.year = #{year};
			   
			update BUDG_FREE_MED_MAT a
			   set WORK_COST_RATE_IN =
			       (select case sum(bwde.execute_value)
			                 when 0 then
			                  0
			                 else
			                  nvl(sum(bfmmc.amount) / sum(bwde.execute_value), 0)
			               end
			          from BUDG_FREE_MED_MAT bfmm
			         inner join BUDG_FREE_MED_MAT_COST bfmmc
			            on bfmm.group_id = bfmmc.group_id
			           and bfmm.hos_id = bfmmc.hos_id
			           and bfmm.copy_code = bfmmc.copy_code
			           and bfmmc.year = #{pre_year} 
			           and bfmmc.month = bfmm.month
			           and bfmm.dept_id = bfmmc.dept_id
			           and bfmmc.nature = '02'
			         inner join BUDG_WORK_DEPT_EXECUTE bwde
			            on bfmm.group_id = bwde.group_id
			           and bfmm.hos_id = bwde.hos_id
			           and bfmm.copy_code = bwde.copy_code
			           and bwde.year = #{pre_year}
			           and bfmm.month = bwde.month
			           and bfmm.dept_id = bwde.dept_id
			           and bwde.index_code = '02'
			         where bfmm.group_id = a.group_id
			           and bfmm.hos_id = a.hos_id
			           and bfmm.copy_code = a.copy_code
			           and bfmm.dept_id = a.dept_id)
			 where a.group_id = #{group_id}
			   and a.hos_id = #{hos_id}
			   and a.copy_code = #{copy_code}
			   and a.year = #{year};
			   
			update BUDG_FREE_MED_MAT a
			   set WORK_COST_RATE_CHECK =
			       (select case sum(bwde.execute_value)
			                 when 0 then
			                  0
			                 else
			                  nvl(sum(bfmmc.amount) / sum(bwde.execute_value), 0)
			               end
			          from BUDG_FREE_MED_MAT bfmm
			         inner join BUDG_FREE_MED_MAT_COST bfmmc
			            on bfmm.group_id = bfmmc.group_id
			           and bfmm.hos_id = bfmmc.hos_id
			           and bfmm.copy_code = bfmmc.copy_code
			           and bfmmc.year = #{pre_year}
			           and bfmmc.month = bfmm.month
			           and bfmm.dept_id = bfmmc.dept_id
			           and bfmmc.nature = '03'
			         inner join BUDG_WORK_DEPT_EXECUTE bwde
			            on bfmm.group_id = bwde.group_id
			           and bfmm.hos_id = bwde.hos_id
			           and bfmm.copy_code = bwde.copy_code
			           and bwde.year = #{pre_year}
			           and bfmm.month = bwde.month
			           and bfmm.dept_id = bwde.dept_id
			           and bwde.index_code = '03'
			         where bfmm.group_id = a.group_id
			           and bfmm.hos_id = a.hos_id
			           and bfmm.copy_code = a.copy_code
			           and bfmm.dept_id = a.dept_id)
			 where a.group_id = #{group_id}
			   and a.hos_id = #{hos_id}
			   and a.copy_code = #{copy_code}
			   and a.year = #{year};
			   
			update BUDG_FREE_MED_MAT a
			   set a.count_value =
			       (select nvl(bfmm.work_budg_out, 0) * nvl(bfmm.work_cost_rate_out, 0) +
			               nvl(bfmm.work_budg_in, 0) * nvl(bfmm.work_cost_rate_in, 0) +
			               nvl(bfmm.work_budg_check, 0) *
			               nvl(bfmm.work_cost_rate_check, 0)
			          from BUDG_FREE_MED_MAT bfmm
			         where bfmm.group_id = a.group_id
			           and bfmm.hos_id = a.hos_id
			           and bfmm.copy_code = a.copy_code
			           and bfmm.dept_id = a.dept_id
			           and bfmm.year = #{year}
			           and bfmm.month = a.month)
			 where a.group_id = #{group_id}
			   and a.hos_id = #{hos_id}
			   and a.copy_code = #{copy_code}; 
			   
			   end;
		</update>
	<update id="budgChargeMatUpdateAdjRate" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE budg_free_med_mat 
			set
			adj_rate = ${item.adj_rate} ,
			
			remark = #{item.remark,jdbcType=VARCHAR}
			where                     
			 group_id = #{item.group_id,jdbcType=INTEGER}
			AND hos_id = #{item.hos_id,jdbcType=INTEGER}
			AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
			AND year = #{item.year,jdbcType=VARCHAR}
			AND month = #{item.month,jdbcType=VARCHAR}
			AND dept_id = #{item.dept_id,jdbcType=INTEGER}
			AND mat_type_id = #{item.mat_type_id,jdbcType=INTEGER};
			
			
			UPDATE budg_free_med_mat 
			set
			cost_budg = count_value*(1+adj_rate)
			where                     
			 group_id = #{item.group_id,jdbcType=INTEGER}
			AND hos_id = #{item.hos_id,jdbcType=INTEGER}
			AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
			AND year = #{item.year,jdbcType=VARCHAR}
			AND month = #{item.month,jdbcType=VARCHAR}
			AND dept_id = #{item.dept_id,jdbcType=INTEGER}
			AND mat_type_id = #{item.mat_type_id,jdbcType=INTEGER}
 		</foreach>
	</update>
	
	<delete id="delete" parameterType="java.util.Map">
	
		DELETE FROM budg_free_med_mat 
		<where>                     
		AND group_id = #{group_id,jdbcType=INTEGER}
		AND hos_id = #{hos_id,jdbcType=INTEGER}
		AND copy_code = #{copy_code,jdbcType=VARCHAR}
		AND year = #{year,jdbcType=VARCHAR}
		<if test="month != null and month != ''">
		AND month = #{month,jdbcType=VARCHAR}
		</if>
		<if test="dept_id != null and dept_id != ''">
		AND dept_id = #{dept_id,jdbcType=INTEGER}
		</if>
		<if test="mat_type_id != null and mat_type_id != ''">
		AND mat_type_id = #{mat_type_id,jdbcType=INTEGER}
		</if>
		</where>  
	</delete>
	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM budg_free_med_mat 
		where
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				 group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND year = #{item.year,jdbcType=VARCHAR}
				AND month = #{item.month,jdbcType=VARCHAR}
				AND dept_id = #{item.dept_id,jdbcType=INTEGER}
				AND mat_type_id = #{item.mat_type_id,jdbcType=INTEGER}
			</foreach>
	</delete>
	<select id="query" parameterType="java.util.Map" resultMap="budgFreeMedMatMap" >
		SELECT 
			bfmm.group_id,
			bfmm.hos_id,
			bfmm.copy_code,
			bfmm.year,
			bfmm.month,
			bfmm.dept_id,
	    hdd.dept_name,
			bfmm.mat_type_id,
	    mtd.mat_type_name,
			bfmm.work_budg_out,
			bfmm.work_budg_in,
			bfmm.work_budg_check,
			bfmm.work_cost_rate_out,
			bfmm.work_cost_rate_in,
			bfmm.work_cost_rate_check,
			bfmm.count_value,
			bfmm.adj_rate,
			bfmm.cost_budg,
			bfmm.remark
			FROM BUDG_FREE_MED_MAT bfmm
	    left join mat_type_dict mtd
		    on bfmm.group_id = mtd.group_id
		    and bfmm.hos_id = mtd.hos_id
		    and bfmm.copy_code = mtd.copy_code
		    and bfmm.mat_type_id =mtd.mat_type_id
		    left join hos_dept_dict hdd
		   on bfmm.group_id = hdd.group_id
		    and bfmm.hos_id = hdd.hos_id
		    and bfmm.dept_id = hdd.dept_id
		    and hdd.is_stop = 0 
		    and hdd.is_disable = 0
		where                    
		    bfmm.group_id = #{group_id,jdbcType=INTEGER}
			AND bfmm.hos_id = #{hos_id,jdbcType=INTEGER}
			AND bfmm.copy_code = #{copy_code,jdbcType=VARCHAR}
			<if test="year != null and year != ''">
			AND bfmm.year = #{year,jdbcType=VARCHAR}
			</if>
			<if test="month != null and month != ''">
			AND bfmm.month = #{month,jdbcType=VARCHAR}
			</if>
			<if test="dept_id != null and dept_id != ''">
			AND bfmm.dept_id = #{dept_id,jdbcType=INTEGER}
			</if>
			<if test="mat_type_id != null and mat_type_id != ''">
			AND bfmm.mat_type_id = #{mat_type_id,jdbcType=INTEGER}
			</if>
	</select>
	<select id="queryByCode" resultMap="budgFreeMedMatMap"  parameterType="java.util.Map" >
		SELECT 
			bfmm.group_id,
			bfmm.hos_id,
			bfmm.copy_code,
			bfmm.year,
			bfmm.month,
			bfmm.dept_id,
	    	hdd.dept_name,
			bfmm.mat_type_id,
	   		mtd.mat_type_name,
			bfmm.work_budg_out,
			bfmm.work_budg_in,
			bfmm.work_budg_check,
			bfmm.work_cost_rate_out,
			bfmm.work_cost_rate_in,
			bfmm.work_cost_rate_check,
			bfmm.count_value,
			bfmm.adj_rate,
			bfmm.cost_budg,
			bfmm.remark
			FROM BUDG_FREE_MED_MAT bfmm
	    left join mat_type_dict mtd
		    on bfmm.group_id = mtd.group_id
		    and bfmm.hos_id = mtd.hos_id
		    and bfmm.copy_code = mtd.copy_code
		    and bfmm.mat_type_id =mtd.mat_type_id
		    left join hos_dept_dict hdd
		   on bfmm.group_id = hdd.group_id
		    and bfmm.hos_id = hdd.hos_id
		    and bfmm.dept_id = hdd.dept_id
		    and hdd.is_stop = 0 
		    and hdd.is_disable = 0
		WHERE 
		bfmm.group_id = #{group_id,jdbcType=INTEGER}   and 
		bfmm.hos_id = #{hos_id,jdbcType=INTEGER}   and 
		bfmm.copy_code = #{copy_code,jdbcType=VARCHAR}   and 
		bfmm.year = #{year,jdbcType=VARCHAR}   and 
		bfmm.month = #{month,jdbcType=VARCHAR}   and 
		bfmm.dept_id = #{dept_id,jdbcType=INTEGER}   and 
		bfmm.mat_type_id = #{mat_type_id,jdbcType=INTEGER} 
	
	</select>
	<select id="queryByUniqueness" resultMap="budgFreeMedMat"  parameterType="java.util.Map" >
	
		SELECT 
			group_id,
			hos_id,
			copy_code,
			year,
			month,
			dept_id,
			mat_type_id,
			work_budg_out,
			work_budg_in,
			work_budg_check,
			work_cost_rate_out,
			work_cost_rate_in,
			work_cost_rate_check,
			count_value,
			adj_rate,
			cost_budg,
			remark
		FROM BUDG_FREE_MED_MAT 
		where                     
		group_id = #{group_id,jdbcType=INTEGER}
		
		AND hos_id = #{hos_id,jdbcType=INTEGER}
		
		AND copy_code = #{copy_code,jdbcType=VARCHAR}
		<if test="year != null and year != ''">
		AND year = #{year,jdbcType=VARCHAR}
		</if>
		<if test="month != null and month != ''">
		AND month = #{month,jdbcType=VARCHAR}
		</if>
		<if test="dept_id != null and dept_id != ''">
		AND dept_id = #{dept_id,jdbcType=INTEGER}
		</if>
		<if test="mat_type_id != null and mat_type_id != ''">
		AND mat_type_id = #{mat_type_id,jdbcType=INTEGER}
		</if>
	</select>
	<select id="queryExists" resultMap="budgFreeMedMat"  parameterType="java.util.Map" >
	
		SELECT 
			group_id,
			hos_id,
			copy_code,
			year,
			month,
			dept_id,
			mat_type_id,
			work_budg_out,
			work_budg_in,
			work_budg_check,
			work_cost_rate_out,
			work_cost_rate_in,
			work_cost_rate_check,
			count_value,
			adj_rate,
			cost_budg,
			remark
		FROM BUDG_FREE_MED_MAT 
		where                   
			 group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND year = #{year,jdbcType=VARCHAR}
			AND month = #{month,jdbcType=VARCHAR}
			AND dept_id = #{dept_id,jdbcType=INTEGER}
			AND mat_type_id = #{mat_type_id,jdbcType=INTEGER}
	</select>
	
<!-- 	通过sql 查询拼装所需生成数据 -->
	<select id="querydataList" resultMap="budgFreeMedMatMap"  parameterType="java.util.Map" >
	with temp as
		 (select bss.workload_index_out,
		         bss.workload_index_in,
		         bss.workload_index_check
		    from budg_sys_set bss
		   where bss.group_id = #{group_id}
		     and bss.hos_id = #{hos_id}
		     and bss.copy_code = #{copy_code}
		     and bss.budg_year = #{year}),
		 exe as ( <!-- 上年  科室年度执行数据 临时表  -->
				select a.group_id , a.hos_id , a.copy_code , a.year , a.dept_id , hdd.dept_code , a.index_code , a.execute_value
				from BUDG_WORK_DEPT_EXECUTE_YEAR a
				left join hos_dept_dict hdd
					on
						a.group_id = hdd.group_id 
						and a.hos_id = hdd.hos_id
						and a.dept_id = hdd.dept_id
						and hdd.is_stop = 0
				where
					a.group_id = #{group_id}
			     and a.hos_id = #{hos_id}
			     and a.copy_code = #{copy_code}
			     and a.year = #{last_year}
			),
			budgDept as(
				select ada.group_id , ada.hos_id , ada.dept_id , hdd.dept_code
				from acc_dept_attr ada
				left join hos_dept_dict hdd
					on
						ada.group_id = hdd.group_id
						and ada.hos_id = hdd.hos_id
						and ada.dept_id = hdd.dept_id
						and hdd.is_stop = 0
				where
					ada.group_id = #{group_id}
			     	and ada.hos_id = #{hos_id}
			     	and ada.is_budg = 1
			),
		t as(<!-- 业务预算 科室年度执行数据  （末级科室）  归集为 预算科室 年度执行数据  -->
			select a.group_id , a.hos_id , b.copy_code , b.year , a.dept_id , b.index_code , 
				sum(nvl(b.execute_value,0))  execute_value
			from budgDept a
			left join exe  b
				on
					a.group_id = b.group_id
					and a.hos_id = b.hos_id
					and b.dept_code like (a.dept_code || '%') 
			where b.year is  not null 
			group by a.group_id , a.hos_id , b.copy_code , b.year , a.dept_id , b.index_code
		),
		budgValue as
		 (select distinct a.group_id,
		                  a.hos_id,
		                  a.copy_code,
		                  a.dept_id,
		                  a.year,
		                  a.month,
		                  nvl((select sum(b.budg_value)
		                        from budg_work_dept_month b
		                       where b.year = #{year}
		                         and b.index_code =
		                             (select workload_index_out from temp)
		                         and a.dept_id = b.dept_id
		                         and a.month = b.month),
		                      0) out_v,
		                  
		                  nvl((select sum(b.budg_value)
		                        from budg_work_dept_month b
		                       where b.year = 2017
		                         and b.index_code =
		                             (select workload_index_in from temp)
		                         and a.dept_id = b.dept_id
		                         and a.month = b.month),
		                      0) in_v,
		                  
		                  nvl((select sum(b.budg_value)
		                        from budg_work_dept_month b
		                       where b.year = 2017
		                         and b.index_code =
		                             (select workload_index_check from temp)
		                         and a.dept_id = b.dept_id
		                         and a.month = b.month),
		                      0) check_v
		    from BUDG_WORK_DEPT_MONTH a
		   where a.group_id = #{group_id}
		     and a.hos_id = #{hos_id}
		     and a.copy_code = #{copy_code}
		     and a.year = #{year}),
		
		costKey as
		 (select distinct bfm.group_id,
		                  bfm.hos_id,
		                  bfm.copy_code,
		                  bfm.year,
		                  bfm.month,
		                  bfm.dept_id,
		                  bfm.mat_type_id
		    from budg_free_med_mat_cost bfm
		   where bfm.group_id = #{group_id}
		     and bfm.hos_id = #{hos_id}
		     and bfm.copy_code = #{copy_code}
		     and bfm.year = #{last_year}),
		
		out_rate_v as <!-- 业务量支出配比（门诊） -->
		 (select bc.group_id,
		         bc.hos_id,
		         bc.copy_code,
		         bc.year,
		         bc.dept_id,
		         bc.nature,
		         bc.mat_type_id,
		         t.index_code ,
		         case nvl(sum(t.execute_value), 0)
		           when 0 then
		            0
		           else
		            nvl(sum(bc.amount), 0) / nvl(sum(t.execute_value), 0)
		         end out_rate
		    from BUDG_FREE_MED_MAT_COST bc
		    left join t 
		      on bc.group_id = t.group_id
		     and bc.hos_id = t.hos_id
		     and bc.copy_code = t.copy_code
		     and bc.year = t.year
		     and bc.dept_id = t.dept_id
		   where bc.group_id = #{group_id}
		     and bc.hos_id = #{hos_id}
		     and bc.copy_code = #{copy_code}
		     and bc.year = #{last_year}
		     and t.index_code = (select workload_index_out from temp)
		     and bc.nature = '01'
		   group by bc.group_id, bc.hos_id, bc.copy_code, bc.year, bc.dept_id, bc.nature, bc.mat_type_id, t.index_code ),
		
		in_rate_v as <!-- 业务量支出配比（住院） -->
		 (select bc.group_id,
		         bc.hos_id,
		         bc.copy_code,
		         bc.year,
		         bc.dept_id,
		         bc.nature,
		         bc.mat_type_id,
		         t.index_code ,
		         case nvl(sum(t.execute_value), 0)
		           when 0 then
		            0
		           else
		            nvl(sum(bc.amount), 0) / nvl(sum(t.execute_value), 0)
		         end in_rate
		    from BUDG_FREE_MED_MAT_COST bc
		    left join t 
		      on bc.group_id = t.group_id
		     and bc.hos_id = t.hos_id
		     and bc.copy_code = t.copy_code
		     and bc.year = t.year
		     and bc.dept_id = t.dept_id
		   where bc.group_id = #{group_id}
		     and bc.hos_id = #{hos_id}
		     and bc.copy_code = #{copy_code}
		     and bc.year = #{last_year}
		     and bc.nature = '02'
		     and t.index_code = (select workload_index_in from temp)
		   group by bc.group_id,
		            bc.hos_id,
		            bc.copy_code,
		            bc.year,
		            bc.dept_id,
		            bc.nature,
		            bc.mat_type_id,
		            t.index_code),
		
		check_rate_v as <!-- 业务量支出配比（检查） -->
		 (select bc.group_id,
		         bc.hos_id,
		         bc.copy_code,
		         bc.year,
		         bc.dept_id,
		         bc.nature,
		         bc.mat_type_id,
		         t.index_code ,
		         case nvl(sum(t.execute_value), 0)
		           when 0 then
		            0
		           else
		            nvl(sum(bc.amount), 0) / nvl(sum(t.execute_value), 0)
		         end check_rate
		    from BUDG_FREE_MED_MAT_COST bc
		    left join t 
		      on bc.group_id = t.group_id
		     and bc.hos_id = t.hos_id
		     and bc.copy_code = t.copy_code
		     and bc.year = t.year
		     and bc.dept_id = t.dept_id
		   where bc.group_id = #{group_id}
		     and bc.hos_id = #{hos_id}
		     and bc.copy_code = #{copy_code}
		     and bc.year = #{last_year}
		     and bc.nature = '03'
		     and t.index_code = (select workload_index_check from temp)
		   group by bc.group_id,
		            bc.hos_id,
		            bc.copy_code,
		            bc.year,
		            bc.dept_id,
		            bc.nature,
		            bc.mat_type_id,
		            t.index_code)
		
		select ck.group_id,
		       ck.hos_id,
		       ck.copy_code,
		       ck.year + 1 year,
		       ck.month,
		       ck.dept_id,
		       ck.mat_type_id,
		       nvl(bv.out_v, 0) work_budg_out,
		       nvl(bv.in_v, 0) work_budg_in,
		       nvl(bv.check_v, 0) work_budg_check,
		       nvl(outr.out_rate, 0) work_cost_rate_out,
		       nvl(inr.in_rate, 0) work_cost_rate_in,
		       nvl(checkr.check_rate, 0) work_cost_rate_check,
		       nvl((bv.out_v * outr.out_rate + bv.in_v * inr.in_rate +
		           bv.check_v * checkr.check_rate),
		           0) count_value,
		       0 adj_rate,
		       nvl((bv.out_v * outr.out_rate + bv.in_v * inr.in_rate +
		           bv.check_v * checkr.check_rate),
		           0) cost_budg,
		       ' ' remark
		  from costKey ck
		  left join budgValue bv
		    on ck.group_id = bv.group_id
		   and ck.hos_id = bv.hos_id
		   and ck.copy_code = bv.copy_code
		   and ck.year = bv.year
		   and ck.month = bv.month
		   and ck.dept_id = bv.dept_id
		  left join out_rate_v outr
		    on ck.group_id = outr.group_id
		   and ck.hos_id = outr.hos_id
		   and ck.copy_code = outr.copy_code
		   and ck.year = outr.year
		   and ck.dept_id = outr.dept_id
		   and ck.mat_type_id = outr.mat_type_id
		  left join in_rate_v inr
		    on ck.group_id = inr.group_id
		   and ck.hos_id = inr.hos_id
		   and ck.copy_code = inr.copy_code
		   and ck.year = inr.year
		   and ck.dept_id = inr.dept_id
		   and ck.mat_type_id = inr.mat_type_id
		  left join check_rate_v checkr
		    on ck.group_id = checkr.group_id
		   and ck.hos_id = checkr.hos_id
		   and ck.copy_code = checkr.copy_code
		   and ck.year = checkr.year
		   and ck.dept_id = checkr.dept_id
		   and ck.mat_type_id = checkr.mat_type_id
		
		 where ck.group_id = #{group_id}
		   and ck.hos_id = #{hos_id}
		   and ck.copy_code = #{copy_code}
		   and ck.year = #{last_year}

	</select>
	
	<select id="queryDataExists" resultType="java.lang.Integer"  parameterType="java.util.Map" >
		SELECT 
		  count(0)
		FROM BUDG_FREE_MED_MAT 
		WHERE                   
			 group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND year = #{year,jdbcType=VARCHAR}
			AND month = #{month,jdbcType=VARCHAR}
			AND dept_id = #{dept_id,jdbcType=INTEGER}
			AND mat_type_id = #{mat_type_id,jdbcType=INTEGER}
	</select>
</mapper>

