<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.mat.dao.dura.balance.MatDuraStoreBalanceMapper">
	
	<resultMap id="matDuraStoreBalance"  type="java.util.Map">
		<result property="group_id" column="group_id"/>
		<result property="hos_id" column="hos_id"/>
		<result property="copy_code" column="copy_code"/>
		<result property="store_id" column="store_id"/>
		<result property="inv_id" column="inv_id"/>
		<result property="price" column="price"/>
		<result property="in_amount" column="in_amount"/>
		<result property="in_money" column="in_money"/>
		<result property="out_amount" column="out_amount"/>
		<result property="out_money" column="out_money"/>
		<result property="left_amount" column="left_amount"/>
		<result property="left_money" column="left_money"/>
		<result property="bar_code" column="bar_code"/>
	</resultMap>
	
	<!-- 没有单行操作的业务 -->
	<insert id="add" useGeneratedKeys="true" >
	
		INSERT INTO MAT_DURA_STORE_BALANCE (
			group_id, hos_id, copy_code, store_id, inv_id, price, in_amount, in_money,
			out_amount, out_money, left_amount, left_money 
		) VALUES (
			#{group_id,jdbcType=INTEGER}, 
			#{hos_id,jdbcType=INTEGER}, 
			#{copy_code,jdbcType=VARCHAR}, 
			#{store_id,jdbcType=INTEGER}, 
			#{inv_id,jdbcType=INTEGER}, 
			#{price,jdbcType=INTEGER}, 
			#{in_amount,jdbcType=INTEGER}, 
			#{in_money,jdbcType=NUMERIC}, 
			#{out_amount,jdbcType=INTEGER}, 
			#{out_money,jdbcType=NUMERIC}, 
			#{left_amount,jdbcType=INTEGER}, 
			#{left_money,jdbcType=NUMERIC}
		)
	
	</insert>
	<insert id="addBatch" parameterType="java.util.List" >
		INSERT INTO MAT_DURA_STORE_BALANCE (
			group_id, hos_id, copy_code, store_id, inv_id, price, in_amount, in_money, 
			out_amount, out_money, left_amount, left_money, bar_code 
		)
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
				#{item.group_id,jdbcType=INTEGER}, 
				#{item.hos_id,jdbcType=INTEGER}, 
				#{item.copy_code,jdbcType=VARCHAR}, 
				#{item.store_id,jdbcType=INTEGER}, 
				#{item.inv_id,jdbcType=INTEGER}, 
				#{item.price,jdbcType=INTEGER}, 
				#{item.in_amount,jdbcType=INTEGER}, 
				#{item.in_money,jdbcType=NUMERIC}, 
				#{item.out_amount,jdbcType=INTEGER}, 
				#{item.out_money,jdbcType=NUMERIC}, 
				#{item.left_amount,jdbcType=INTEGER}, 
				#{item.left_money,jdbcType=NUMERIC},
				#{item.bar_code,jdbcType=VARCHAR} 
		    from dual
		</foreach>
	</insert>
	
	<!-- 没有单行操作的业务 -->
	<update id="update" parameterType="java.util.Map">
	
		UPDATE MAT_DURA_STORE_BALANCE 
		<trim prefix="SET"  suffixOverrides=","> 
			<if test="in_amount != null ">
				in_amount = #{in_amount,jdbcType=INTEGER}, 
			</if>
			<if test="in_money != null">
				in_money = #{in_money,jdbcType=NUMERIC}, 
			</if>
			<if test="out_amount != null ">
				out_amount = #{out_amount,jdbcType=INTEGER}, 
			</if>
			<if test="out_money != null ">
				out_money = #{out_money,jdbcType=NUMERIC},
			</if>
			<if test="left_amount != null ">
				left_amount = #{left_amount,jdbcType=INTEGER}, 
			</if>
			<if test="left_money != null ">
				left_money = #{left_money,jdbcType=NUMERIC}, 
			</if>
		</trim>
		WHERE group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND store_id = #{store_id,jdbcType=INTEGER}
			AND inv_id = #{inv_id,jdbcType=INTEGER}
			AND price = #{price,jdbcType=INTEGER}
	</update>
	
	<update id="updateBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";">
			UPDATE MAT_DURA_STORE_BALANCE
			<trim prefix="SET" suffixOverrides=",">
				<if test="item.in_amount != null ">
					in_amount = #{item.in_amount,jdbcType=NUMERIC},
				</if>
				<if test="item.in_money != null ">
					in_money = #{item.in_money,jdbcType=NUMERIC},
				</if>
				<if test="item.out_amount != null ">
					out_amount = #{item.out_amount,jdbcType=NUMERIC},
				</if>
				<if test="item.out_money != null ">
					out_money = #{item.out_money,jdbcType=NUMERIC},
				</if>
				<if test="item.left_amount != null">
					left_amount = #{item.left_amount,jdbcType=NUMERIC},
				</if>
				<if test="item.left_money != null ">
					left_money = #{item.left_money,jdbcType=NUMERIC},
				</if>
			</trim>
			WHERE group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND store_id = #{item.store_id,jdbcType=INTEGER}
				AND inv_id = #{item.inv_id,jdbcType=INTEGER}
				AND price = #{item.price,jdbcType=NUMERIC}
				AND bar_code = #{item.bar_code,jdbcType=VARCHAR}
		</foreach>
	</update>
	
	<update id="updateOrAddBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";">
			<if test="item.operation == 'insert'">
				insert into MAT_DURA_STORE_BALANCE(group_id, hos_id, copy_code, store_id, inv_id, price, bar_code, in_amount, in_money, out_amount, out_money, left_amount, left_money) 
				values(
					#{item.group_id,jdbcType=INTEGER},
					#{item.hos_id,jdbcType=INTEGER},
					#{item.copy_code,jdbcType=VARCHAR},
					#{item.store_id,jdbcType=INTEGER},
					#{item.inv_id,jdbcType=INTEGER},
					#{item.price,jdbcType=NUMERIC},
					#{item.bar_code,jdbcType=VARCHAR},
					#{item.in_amount,jdbcType=NUMERIC},
					#{item.in_money,jdbcType=NUMERIC},
					#{item.out_amount,jdbcType=NUMERIC},
					#{item.out_money,jdbcType=NUMERIC},
					#{item.left_amount,jdbcType=NUMERIC},
					#{item.left_money,jdbcType=NUMERIC})
			</if>
			<if test="item.operation == 'update'">
				UPDATE MAT_DURA_STORE_BALANCE
				<trim prefix="SET" suffixOverrides=",">
					<if test="item.in_amount != null ">
						in_amount = #{item.in_amount,jdbcType=NUMERIC},
					</if>
					<if test="item.in_money != null ">
						in_money = #{item.in_money,jdbcType=NUMERIC},
					</if>
					<if test="item.out_amount != null ">
						out_amount = #{item.out_amount,jdbcType=NUMERIC},
					</if>
					<if test="item.out_money != null ">
						out_money = #{item.out_money,jdbcType=NUMERIC},
					</if>
					<if test="item.left_amount != null">
						left_amount = #{item.left_amount,jdbcType=NUMERIC},
					</if>
					<if test="item.left_money != null ">
						left_money = #{item.left_money,jdbcType=NUMERIC},
					</if>
				</trim>
				WHERE group_id = #{item.group_id,jdbcType=INTEGER}
					AND hos_id = #{item.hos_id,jdbcType=INTEGER}
					AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
					AND store_id = #{item.store_id,jdbcType=INTEGER}
					AND inv_id = #{item.inv_id,jdbcType=INTEGER}
					AND price = #{item.price,jdbcType=NUMERIC}
					AND bar_code = #{item.bar_code,jdbcType=VARCHAR}
			</if>
		</foreach>
	</update>
	
	<!-- 没有单行操作的业务 -->
	<delete id="delete" parameterType="java.util.Map">
		DELETE FROM MAT_DURA_STORE_BALANCE 
		WHERE group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND store_id = #{store_id,jdbcType=INTEGER}
			AND inv_id = #{inv_id,jdbcType=INTEGER}
			AND price = #{price,jdbcType=INTEGER}
	</delete>
	
	<!-- 删除业务期末结账的存储过程处理 -->
	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM MAT_DURA_STORE_BALANCE 
		WHERE
		<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
			group_id = #{item.group_id,jdbcType=INTEGER}
			AND hos_id = #{item.hos_id,jdbcType=INTEGER}
			AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
			AND store_id = #{item.store_id,jdbcType=INTEGER}
			AND inv_id = #{item.inv_id,jdbcType=INTEGER}
			AND price = #{item.price,jdbcType=INTEGER}
		</foreach>
	</delete>
	
	<select id="query" parameterType="java.util.Map" resultMap="matDuraStoreBalance" >
		SELECT 
			group_id, hos_id, copy_code, store_id, inv_id, price, in_amount, in_money, 
			out_amount, out_money, left_amount, left_money 
		FROM MAT_DURA_STORE_BALANCE 
		WHERE group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND store_id = #{store_id,jdbcType=INTEGER}
			<if test="inv_id != null ">
			AND inv_id = #{inv_id,jdbcType=INTEGER}
			</if>
			<if test="price != null ">
			AND price = #{price,jdbcType=INTEGER}
			</if>
			<if test="sql != null and sql != ''">
				${sql}
			</if>
		order by store_id, inv_id 
	</select>
	
	<select id="queryExists" resultMap="matDuraStoreBalance"  parameterType="java.util.Map" >
		SELECT 
			group_id, hos_id, copy_code, store_id, inv_id, price, in_amount, in_money, 
			out_amount, out_money, left_amount, left_money 
		FROM MAT_DURA_STORE_BALANCE 
		WHERE group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND store_id = #{store_id,jdbcType=INTEGER}
			AND inv_id = #{inv_id,jdbcType=INTEGER}
			AND price = #{price,jdbcType=INTEGER}
	</select>
	
	<!-- 根据主键取对应帐表数据 -->
	<select id="queryByCode" resultMap="matDuraStoreBalance"  parameterType="java.util.Map" >
		select group_id, hos_id, copy_code, store_id, inv_id, nvl(price, 0) as price, bar_code,
			nvl(in_amount, 0) as in_amount, nvl(in_money, 0) as in_money, 
			nvl(out_amount, 0) as out_amount, nvl(out_money, 0) as out_money, 
			nvl(left_amount, 0) as left_amount, nvl(left_money, 0) as left_money 
		from MAT_DURA_STORE_BALANCE
		where group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND store_id = #{store_id,jdbcType=INTEGER}
			AND inv_id = #{inv_id,jdbcType=INTEGER}
			AND price = #{price,jdbcType=NUMERIC}
			AND bar_code = #{bar_code,jdbcType=VARCHAR}
	</select>
	
	<!-- 根据材料查询表信息 -->
	<select id="queryByInvList" resultMap="matDuraStoreBalance"  parameterType="java.util.List" >
		with list_temp as (
			<foreach collection="list" item="item" index="index" separator=" union all " >
				select    
					#{item.group_id,jdbcType=INTEGER} as group_id, 
					#{item.hos_id,jdbcType=INTEGER} as hos_id, 
					#{item.copy_code,jdbcType=VARCHAR} as copy_code,  
					#{item.store_id,jdbcType=INTEGER} as store_id, 
					#{item.inv_id,jdbcType=INTEGER} as inv_id, 
					#{item.price,jdbcType=NUMERIC} as price, 
				from dual
			</foreach>
		)
		select a.group_id, a.hos_id, a.copy_code, a.store_id, a.inv_id, nvl(b.price, 0) as price, 
			nvl(b.in_amount, 0) as in_amount, nvl(b.in_money, 0) as in_money,  
			nvl(b.out_amount, 0) as out_amount, nvl(b.out_money, 0) as out_money, 
			nvl(b.left_amount, 0) as left_amount, nvl(b.left_money, 0) as left_money   
		from list_temp a
		inner join MAT_DURA_STORE_BALANCE b
			on a.group_id = b.group_id and a.hos_id = b.hos_id
			and a.copy_code = b.copy_code and a.store_id = b.store_id
			and a.inv_id = b.inv_id and a.price = b.price 
		order by a.store_id, a.inv_id
	</select>
</mapper>

