<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.ass.dao.back.AssBackLandMapper">
	
	<resultMap id="assBackLand" type="com.chd.hrp.ass.entity.back.AssBackLand">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="ass_back_no" column="ass_back_no"/>
	<result property="ven_id" column="ven_id"/>
	<result property="ven_no" column="ven_no"/>
	<result property="back_money" column="back_money"/>
	<result property="note" column="note"/>
	<result property="create_emp" column="create_emp"/>
	<result property="create_date" column="create_date"/>
	<result property="back_date" column="back_date"/>
	<result property="confirm_emp" column="confirm_emp"/> 
	<result property="state" column="state"/>
	</resultMap>
		
	<resultMap id="assBackLandMap" type="java.util.Map">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="ass_back_no" column="ass_back_no"/>
	<result property="ass_card_no" column="ass_card_no"/>
	<result property="store_code" column="store_code"/>
	<result property="store_name" column="store_name"/>
	<result property="ven_code" column="ven_code"/>
	<result property="ven_name" column="ven_name"/>
	<result property="create_emp_name" column="create_emp_name"/>
	<result property="confirm_emp_name" column="confirm_emp_name"/>
	<result property="ven_id" column="ven_id"/>
	<result property="ven_no" column="ven_no"/>
	<result property="back_money" column="back_money"/>
	<result property="note" column="note"/>
	<result property="create_emp" column="create_emp"/>
	<result property="create_date" column="create_date"/>
	<result property="back_date" column="back_date"/>
	<result property="confirm_emp" column="confirm_emp"/>
	<result property="state" column="state"/>
	<result property="price" column="price"/>
	<result property="add_depre" column="add_depre"/>
	<result property="add_manage_depre" column="add_manage_depre"/>
	<result property="cur_money" column="cur_money"/>
	<result property="fore_money" column="fore_money"/>
	<result property="note_detail" column="note_detail"/>
	<result property="ass_id" column="ass_id"/>
	<result property="ass_no" column="ass_no"/>
	<result property="ass_code" column="ass_code"/>
	<result property="ass_name" column="ass_name"/>
	</resultMap>
	
	<insert id="add" useGeneratedKeys="true" >
	
		INSERT INTO ASS_BACK_LAND (
		<trim suffix="" suffixOverrides=",">
		<if test="group_id != null and group_id != ''">
		group_id
		,
		</if>
		<if test="hos_id != null and hos_id != ''">
		hos_id
		,
		</if>
		<if test="copy_code != null and copy_code != ''">
		copy_code
		,
		</if>
		<if test="ass_back_no != null and ass_back_no != ''">
		ass_back_no
		,
		</if>
		<if test="ven_id != null and ven_id != ''">
		ven_id
		,
		</if>
		<if test="ven_no != null and ven_no != ''">
		ven_no
		,
		</if>
		<if test="back_money != null and back_money != ''">
		back_money
		,
		</if>
		<if test="note != null and note != ''">
		note
		,
		</if>
		<if test="create_emp != null and create_emp != ''">
		create_emp
		,
		</if>
		<if test="create_date != null and create_date != ''">
		create_date
		,
		</if>
		<if test="state != null and state != ''">
		state
		,
		</if>
		</trim>
		) VALUES (
		<trim suffix="" suffixOverrides=",">
		<if test="group_id != null and group_id != ''">
		#{group_id}
		,
		</if>
		<if test="hos_id != null and hos_id != ''">
		#{hos_id}
		,
		</if>
		<if test="copy_code != null and copy_code != ''">
		#{copy_code}
		,
		</if>
		<if test="ass_back_no != null and ass_back_no != ''">
		#{ass_back_no}
		,
		</if>
		<if test="ven_id != null and ven_id != ''">
		to_number(#{ven_id})
		,
		</if>
		<if test="ven_no != null and ven_no != ''">
		to_number(#{ven_no})
		,
		</if>
		<if test="back_money != null and back_money != ''">
		to_number(#{back_money})
		,
		</if>
		<if test="note != null and note != ''">
		#{note}
		,
		</if>
		<if test="create_emp != null and create_emp != ''">
		to_number(#{create_emp})
		,
		</if>
		<if test="create_date != null and create_date != ''">
		to_date(#{create_date},'YYYY-MM-DD')
		,
		</if>
		<if test="state != null and state != ''">
		to_number(#{state})
		
		</if>
		</trim>		
		)
	
	</insert>
	<insert id="addBatch" parameterType="java.util.List" >
	
		INSERT INTO ASS_BACK_LAND (
		group_id
		,
		hos_id
		,
		copy_code
		,
		ass_back_no
		,
		ven_id
		,
		ven_no
		,
		back_money
		,
		note
		,
		create_emp
		,
		create_date
		,
		back_date
		,
		confirm_emp
		,
		state
		
		) select t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
			#{item.group_id}
			,
			#{item.hos_id}
			,
			#{item.copy_code}
			,
			#{item.ass_back_no}
			,
			#{item.ven_id}
			,
			#{item.ven_no}
			,
			#{item.back_money}
			,
			#{item.note}
			,
			#{item.create_emp}
			,
			#{item.create_date}
			,
			#{item.back_date}
			,
			#{item.confirm_emp}
			,
			#{item.state}
			
		    from dual
		</foreach>
		)t
	</insert>
	
	<update id="updateBackMoney" parameterType="java.util.Map">
	
		UPDATE ass_back_land 
		<trim prefix="SET"  suffixOverrides=","> 
		<if test="back_money != null and back_money != ''">
		back_money = #{back_money}
		,
		</if>
		</trim>
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code}
		</if>
		<if test="ass_back_no != null and ass_back_no != ''">
		AND ass_back_no = #{ass_back_no}
		</if>
		</where>  
	</update>
	
	<update id="update" parameterType="java.util.Map">
	
		UPDATE ass_back_land 
		<trim prefix="SET"  suffixOverrides=","> 
		<if test="ven_id != null and ven_id != ''">
		ven_id = #{ven_id}
		,
		</if>
		<if test="ven_no != null and ven_no != ''">
		ven_no = #{ven_no}
		,
		</if>
		<if test="note != null and note != ''">
		note = #{note}
		,
		</if>
		<if test="create_date != null and create_date != ''">
		create_date = to_date(#{create_date},'YYYY-MM-DD')
		,
		</if>
		<if test="note == null or note == ''">
		note = null
		,
		</if>
		</trim>
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code}
		</if>
		<if test="ass_back_no != null and ass_back_no != ''">
		AND ass_back_no = #{ass_back_no}
		</if>
		</where>  
	</update>
	
	<update id="updateBatchConfirm" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_back_land 
			<trim prefix="SET"  suffixOverrides=","> 
			back_date = to_date(#{item.back_date},'YYYY-MM-DD')
			,
			confirm_emp = #{item.confirm_emp,jdbcType=INTEGER}
			,
			state = 2
			</trim>
			<where>                     
			<if test="item.group_id != null and item.group_id != ''">
			group_id = #{item.group_id}
			</if>  
			<if test="item.hos_id != null and item.hos_id != ''">
			AND hos_id = #{item.hos_id}
			</if>  
			<if test="item.copy_code != null and item.copy_code != ''">
			AND copy_code = #{item.copy_code}
			</if>  
			<if test="item.ass_back_no != null and item.ass_back_no != ''">
			AND ass_back_no = #{item.ass_back_no}
			</if>  
			</where>  			
		</foreach>
	</update>
	
	
	<update id="updateBatch" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_back_land 
			<trim prefix="SET"  suffixOverrides=","> 
			<if test="item.ven_id != null and item.ven_id != ''">
			ven_id = #{item.ven_id}
			,
			</if>
			<if test="item.ven_no != null and item.ven_no != ''">
			ven_no = #{item.ven_no}
			,
			</if>
			<if test="item.note != null and item.note != ''">
			note = #{item.note}
			,
			</if>
			</trim>
			<where>                     
			<if test="item.group_id != null and item.group_id != ''">
			AND group_id = #{item.group_id}
			</if>  
			<if test="item.hos_id != null and item.hos_id != ''">
			AND hos_id = #{item.hos_id}
			</if>  
			<if test="item.copy_code != null and item.copy_code != ''">
			AND copy_code = #{item.copy_code}
			</if>  
			<if test="item.ass_back_no != null and item.ass_back_no != ''">
			AND ass_back_no = #{item.ass_back_no}
			</if>  
			</where>  			
		</foreach>
	</update>
	
	<delete id="delete" parameterType="java.util.Map">
	
		DELETE FROM ass_back_land 
		<where>                     
		AND group_id = #{group_id}
		AND hos_id = #{hos_id}
		AND copy_code = #{copy_code}
		AND ass_back_no = #{ass_back_no}
		</where>  
	</delete>
	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM ass_back_land 
		<where>
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				group_id = #{item.group_id}
				AND hos_id = #{item.hos_id}
				AND copy_code = #{item.copy_code}
				AND ass_back_no = #{item.ass_back_no}
			</foreach>
	    </where>  
	</delete>
	<select id="query" parameterType="java.util.Map" resultMap="assBackLand" >
		select * from (
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.ass_back_no,
			a.ven_id,
			a.ven_no,
			c.sup_code ven_code,
			c.sup_name ven_name,
			a.back_money,
			a.note,
			a.create_emp,
			su2.user_name create_emp_name,
			a.create_date,
			a.back_date,
			a.confirm_emp,
			su3.user_name confirm_emp_name,
			a.state,
			case when a.state = 0 then '新建' when a.state = 1 then '审核' when a.state = 2 then '退货确认' else '' end state_name
		FROM ASS_BACK_LAND a
		
		left join hos_sup_dict c on
		a.group_id = c.group_id
		and a.hos_id = c.hos_id
		and a.ven_id = c.sup_id
		and c.is_stop = 0
		
		left join sys_user su2 on
		a.group_id = su2.group_id
		and a.hos_id = su2.hos_id
		and a.create_emp = su2.user_id
		
		left join sys_user su3 on
		a.group_id = su3.group_id
		and a.hos_id = su3.hos_id
		and a.confirm_emp = su3.user_id
		
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND a.group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND a.hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND a.copy_code = #{copy_code}
		</if>
		<if test="ass_back_no != null and ass_back_no != ''">
		AND a.ass_back_no = #{ass_back_no}
		</if>
		<if test="ven_id != null and ven_id != ''">
		AND a.ven_id = #{ven_id}
		</if>
		<if test="ven_no != null and ven_no != ''">
		AND a.ven_no = #{ven_no}
		</if>
		<if test="back_money != null and back_money != ''">
		AND a.back_money = #{back_money}
		</if>
		<if test="note != null and note != ''">
		AND a.note = #{note}
		</if>
		<if test="create_emp != null and create_emp != ''">
		AND a.create_emp = #{create_emp}
		</if>
		<if test="create_date != null and create_date != ''">
		AND a.create_date = #{create_date}
		</if>
		<if test="back_date != null and back_date != ''">
		AND a.back_date = #{back_date}
		</if>
		<if test="create_date_beg != null and create_date_beg != '' and create_date_end != null and create_date_end != ''">
		AND a.create_date between to_date(#{create_date_beg},'YYYY-MM-DD') and to_date(#{create_date_end},'YYYY-MM-DD')
		</if>
		<if test="back_date_beg != null and back_date_beg != '' and back_date_end != null and back_date_end != ''">
		AND a.back_date between to_date(#{back_date_beg},'YYYY-MM-DD') and to_date(#{back_date_end},'YYYY-MM-DD')
		</if>
		<if test="confirm_emp != null and confirm_emp != ''">
		AND a.confirm_emp = #{confirm_emp}
		</if>
		<if test="state != null and state != ''">
		AND a.state = #{state}
		</if>
		</where>   
		union all
		
		SELECT 
			  null group_id,
			  null hos_id,
		      null copy_code,
		      null ass_back_no,
		      null ven_id,
		      null ven_no,
		      null ven_code,
		      null ven_name,
		      sum(a.back_money) back_money,
		      '合计' note,
		      null create_emp,
		      null create_emp_name,
		      null create_date,
		      null back_date,
		      null confirm_emp,
		      null confirm_emp_name,
		      null state,
		      null state_name
		    FROM ASS_BACK_LAND a 
		    <where>                     
				<if test="group_id != null and group_id != ''">
				AND a.group_id = #{group_id}
				</if>
				<if test="hos_id != null and hos_id != ''">
				AND a.hos_id = #{hos_id}
				</if>
				<if test="copy_code != null and copy_code != ''">
				AND a.copy_code = #{copy_code}
				</if>
				<if test="ass_back_no != null and ass_back_no != ''">
				AND a.ass_back_no = #{ass_back_no}
				</if>
				<if test="ven_id != null and ven_id != ''">
				AND a.ven_id = #{ven_id}
				</if>
				<if test="ven_no != null and ven_no != ''">
				AND a.ven_no = #{ven_no}
				</if>
				<if test="back_money != null and back_money != ''">
				AND a.back_money = #{back_money}
				</if>
				<if test="note != null and note != ''">
				AND a.note = #{note}
				</if>
				<if test="create_emp != null and create_emp != ''">
				AND a.create_emp = #{create_emp}
				</if>
				<if test="create_date != null and create_date != ''">
				AND a.create_date = #{create_date}
				</if>
				<if test="back_date != null and back_date != ''">
				AND a.back_date = #{back_date}
				</if>
				<if test="create_date_beg != null and create_date_beg != '' and create_date_end != null and create_date_end != ''">
				AND a.create_date between to_date(#{create_date_beg},'YYYY-MM-DD') and to_date(#{create_date_end},'YYYY-MM-DD')
				</if>
				<if test="back_date_beg != null and back_date_beg != '' and back_date_end != null and back_date_end != ''">
				AND a.back_date between to_date(#{back_date_beg},'YYYY-MM-DD') and to_date(#{back_date_end},'YYYY-MM-DD')
				</if>
				<if test="confirm_emp != null and confirm_emp != ''">
				AND a.confirm_emp = #{confirm_emp}
				</if>
				<if test="state != null and state != ''">
				AND a.state = #{state}
				</if>
			</where>   
		    ) t
		order by t.create_date desc
	</select>
	
	<select id="queryAssBackLanByAssBackNo" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.ass_back_no as id,
			a.ass_back_no,
			a.ven_id,
			a.ven_no,
			c.sup_code ven_code,
			c.sup_name ven_name,
			to_char(a.back_money,'FM999,999,990.00') back_money,
			a.note,
			su2.user_name as create_emp,
			to_char(a.create_date,'yyyy-mm-dd') create_date,
			to_char(a.back_date,'yyyy-mm-dd') back_date,
			su3.user_name as confirm_emp,
			case when a.state = 0 then '新建' when a.state = 1 then '审核' when a.state = 2 then '退货确认' else '' end as state,
      		td.sum_amount
		FROM ASS_BACK_LAND a
		
		left join hos_sup_dict c on
		a.group_id = c.group_id
		and a.hos_id = c.hos_id
		and a.ven_id = c.sup_id
		and c.is_stop = 0
		
		left join sys_user su2 on
		a.group_id = su2.group_id
		and a.hos_id = su2.hos_id
		and a.create_emp = su2.user_id
		
		left join sys_user su3 on
		a.group_id = su3.group_id
		and a.hos_id = su3.hos_id
		and a.confirm_emp = su3.user_id
		
		left join (
			select 
			group_id,
			hos_id,
			copy_code,
			ass_back_no,
			count(1) sum_amount 
			
			from ASS_BACK_DETAIL_LAND 
			where                    
			group_id = #{group_id}
			AND hos_id = #{hos_id}
			AND copy_code = #{copy_code}
			AND ass_back_no in (${ass_back_no})
			group by group_id,hos_id,copy_code,ass_back_no
		) td on
		a.group_id = td.group_id
		and a.hos_id = td.hos_id
		and a.copy_code = td.copy_code
		and a.ass_back_no = td.ass_back_no
		
		 where                      
			a.group_id = #{group_id}
		AND a.hos_id = #{hos_id}
		AND a.copy_code = #{copy_code}
		AND a.ass_back_no in(${ass_back_no})
	order by a.create_date desc 		
	</select>
	
	<select id="queryAssBackLanDetailByAssBackNo" resultType="java.util.Map" parameterType="java.util.Map">
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.ass_back_no as id,
			a.ass_card_no,
			c.ass_id,
			c.ass_no,
			c.ass_code,
			c.ass_name,
			to_char(a.price,'FM999,999,990.00') price,
		    b.ass_amount,
		    to_char(a.price * b.ass_amount,'FM999,999,990.00') sum_price,
			to_char(a.add_depre,'FM999,999,990.00') add_depre,
			to_char(a.add_manage_depre,'FM999,999,990.00') add_manage_depre,
			to_char(a.cur_money,'FM999,999,990.00') cur_money,
			to_char(a.fore_money,'FM999,999,990.00') fore_money,
			a.note
		FROM ASS_BACK_DETAIL_LAND a
		
		left join ass_card_land b on
		a.group_id = b.group_id
		and a.hos_id = b.hos_id
		and a.copy_code = b.copy_code
		and a.ass_card_no = b.ass_card_no
		
		left join ass_no_dict c on
		b.group_id = c.group_id
		and b.hos_id = c.hos_id
		and b.copy_code = c.copy_code 
		and b.ass_id = c.ass_id
		and c.is_stop = 0
		
		 where                      
			a.group_id = #{group_id,jdbcType=INTEGER}
		AND a.hos_id = #{hos_id,jdbcType=INTEGER}
		AND a.copy_code = #{copy_code,jdbcType=VARCHAR}
		AND a.ass_back_no in(${ass_back_no})
		order by a.ass_card_no desc 	
	</select>
	<select id="queryByCode" resultMap="assBackLand"  parameterType="java.util.Map" >
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.ass_back_no,
			a.ven_id,
			a.ven_no,
			c.sup_code ven_code,
			c.sup_name ven_name,
			a.back_money,
			a.note,
			a.create_emp,
			su2.user_name create_emp_name,
			a.create_date,
			a.back_date,
			a.confirm_emp,
			su3.user_name confirm_emp_name,
			a.state,
			case when a.state = 0 then '新建' when a.state = 1 then '审核' when a.state = 2 then '退货确认' else '' end state_name
		FROM ASS_BACK_LAND a
		
		left join hos_sup_dict c on
		a.group_id = c.group_id
		and a.hos_id = c.hos_id
		and a.ven_id = c.sup_id
		and c.is_stop = 0
		
		left join sys_user su2 on
		a.group_id = su2.group_id
		and a.hos_id = su2.hos_id
		and a.create_emp = su2.user_id
		
		left join sys_user su3 on
		a.group_id = su3.group_id
		and a.hos_id = su3.hos_id
		and a.confirm_emp = su3.user_id
		WHERE 
		a.group_id = #{group_id}   and 
		a.hos_id = #{hos_id}   and 
		a.copy_code = #{copy_code}   and 
		a.ass_back_no = #{ass_back_no} 
	
	</select>
	<select id="queryByUniqueness" resultMap="assBackLand"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		ass_back_no,
		ven_id,
		ven_no,
		back_money,
		note,
		create_emp,
		create_date,
		back_date,
		confirm_emp,
		state
		FROM ASS_BACK_LAND 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code}
		</if>
		<if test="ass_back_no != null and ass_back_no != ''">
		AND ass_back_no = #{ass_back_no}
		</if>
		<if test="ven_id != null and ven_id != ''">
		AND ven_id = #{ven_id}
		</if>
		<if test="ven_no != null and ven_no != ''">
		AND ven_no = #{ven_no}
		</if>
		<if test="back_money != null and back_money != ''">
		AND back_money = #{back_money}
		</if>
		<if test="note != null and note != ''">
		AND note = #{note}
		</if>
		<if test="create_emp != null and create_emp != ''">
		AND create_emp = #{create_emp}
		</if>
		<if test="create_date != null and create_date != ''">
		AND create_date = #{create_date}
		</if>
		<if test="back_date != null and back_date != ''">
		AND back_date = #{back_date}
		</if>
		<if test="confirm_emp != null and confirm_emp != ''">
		AND confirm_emp = #{confirm_emp}
		</if>
		<if test="state != null and state != ''">
		AND state = #{state}
		</if>
		</where>   
		order by create_date desc
	</select>
	<select id="queryExists" resultMap="assBackLand"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		ass_back_no,
		ven_id,
		ven_no,
		back_money,
		note,
		create_emp,
		create_date,
		back_date,
		confirm_emp,
		state
		FROM ASS_BACK_LAND 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code}
		</if>
		<if test="ass_back_no != null and ass_back_no != ''">
		AND ass_back_no = #{ass_back_no}
		</if>
		<if test="ven_id != null and ven_id != ''">
		AND ven_id = #{ven_id}
		</if>
		<if test="ven_no != null and ven_no != ''">
		AND ven_no = #{ven_no}
		</if>
		<if test="back_money != null and back_money != ''">
		AND back_money = #{back_money}
		</if>
		<if test="note != null and note != ''">
		AND note = #{note}
		</if>
		<if test="create_emp != null and create_emp != ''">
		AND create_emp = #{create_emp}
		</if>
		<if test="create_date != null and create_date != ''">
		AND create_date = #{create_date}
		</if>
		<if test="back_date != null and back_date != ''">
		AND back_date = #{back_date}
		</if>
		<if test="confirm_emp != null and confirm_emp != ''">
		AND confirm_emp = #{confirm_emp}
		</if>
		<if test="state != null and state != ''">
		AND state = #{state}
		</if>
		</where>   
		order by create_date desc
	</select>
	
	<select id="collectAssBackLand" statementType="CALLABLE"
		parameterType="java.util.Map">
		<![CDATA[ {call PKG_ASS_APP.prc_CalcDepreSingle(
			#{group_id,jdbcType=INTEGER, mode=IN},  
	        #{hos_id,jdbcType=INTEGER, mode=IN},  
	        #{copy_code,jdbcType=VARCHAR, mode=IN},  
	        #{ass_year,jdbcType=VARCHAR, mode=IN},
	        #{ass_month,jdbcType=VARCHAR, mode=IN},
	        #{ass_naturs,jdbcType=VARCHAR, mode=IN},
	        #{ass_card_no,jdbcType=VARCHAR, mode=IN},
	        'B',
	        #{ass_json_str,jdbcType=VARCHAR,mode=OUT},
	        #{ass_AppCode,jdbcType=INTEGER,mode=OUT},
	        #{ass_ErrTxt,jdbcType=VARCHAR,mode=OUT}
        )} 
		 ]]>
	</select>
	
		<!-- 状态查询  （打印时校验数据专用） -->
	<select id="queryAssBackLanStates" parameterType="java.util.Map" resultType="java.lang.String" >
		SELECT ass_back_no  FROM ASS_BACK_LAND 
		WHERE
			group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			<if test="ass_back_no != null and ass_back_no != ''">
			AND ass_back_no in  (${ass_back_no})
			</if>
		
			<!-- 前台传参   2 确认 -->
			and state != #{state,jdbcType=INTEGER}
	</select>
	
	<!-- 明细查询 -->
	<select  id="queryDetails" parameterType="java.util.Map" resultMap="assBackLandMap">
			with detail_tmp as
							 (select a.group_id,
							         a.hos_id,
							         a.copy_code,
							         a.ass_back_no,
							         b.ass_card_no,
							         a.ven_id,
							         a.ven_no,
							         c.sup_code ven_code,
							         c.sup_name ven_name,
							         a.back_money,
							         a.note,
							         a.create_emp,
							         su2.user_name create_emp_name,
							         a.create_date,
							         a.back_date,
							         a.confirm_emp,
							         su3.user_name confirm_emp_name,
							         a.state,
							         case
							           when a.state = 0 then
							            '新建'
							           when a.state = 1 then
							            '审核'
							           when a.state = 2 then
							            '退货确认'
							           else
							            ''
							         end state_name,
							         f.ass_id,
							         f.ass_no,
							         e.ass_code,
							         e.ass_name,
							         b.price,
							         b.add_depre,
							         b.add_manage_depre,
							         b.cur_money,
							         b.fore_money,
							         b.note note_detail
							    from ASS_BACK_LAND  a
							    left join ASS_BACK_DETAIL_LAND b
							      on a.group_id = b.group_id
							     and a.hos_id = b.hos_id
							     and a.copy_code = b.copy_code
							     and a.ass_back_no = b.ass_back_no
							    left join ass_card_land f
							      on b.group_id = f.group_id
							     and b.hos_id = f.hos_id
							     and b.copy_code = f.copy_code
							     and b.ass_card_no = f.ass_card_no
							    left join ass_no_dict e
							      on f.group_id = e.group_id
							     and f.hos_id = e.hos_id
							     and f.copy_code = e.copy_code
							     and f.ass_id = e.ass_id
							     and e.is_stop = 0
							   
							    left join hos_sup_dict c
							      on a.group_id = c.group_id
							     and a.hos_id = c.hos_id
							     and a.ven_id = c.sup_id
							     and c.is_stop = 0
							  
							    left join sys_user su2
							      on a.group_id = su2.group_id
							     and a.hos_id = su2.hos_id
							     and a.create_emp = su2.user_id
							  
							    left join sys_user su3
							      on a.group_id = su3.group_id
							     and a.hos_id = su3.hos_id
							     and a.confirm_emp = su3.user_id
							  <where>                     
									<if test="group_id != null and group_id != ''">
									AND a.group_id = #{group_id}
									</if>
									<if test="hos_id != null and hos_id != ''">
									AND a.hos_id = #{hos_id}
									</if>
									<if test="copy_code != null and copy_code != ''">
									AND a.copy_code = #{copy_code}
									</if>
									<if test="ass_back_no != null and ass_back_no != ''">
									AND a.ass_back_no = #{ass_back_no}
									</if>
									<if test="ven_id != null and ven_id != ''">
									AND a.ven_id = #{ven_id}
									</if>
									<if test="ven_no != null and ven_no != ''">
									AND a.ven_no = #{ven_no}
									</if>
									<if test="back_money != null and back_money != ''">
									AND a.back_money = #{back_money}
									</if>
									<if test="note != null and note != ''">
									AND a.note = #{note}
									</if>
									<if test="create_emp != null and create_emp != ''">
									AND a.create_emp = #{create_emp}
									</if>
									<if test="create_date != null and create_date != ''">
									AND a.create_date = #{create_date}
									</if>
									<if test="back_date != null and back_date != ''">
									AND a.back_date = #{back_date}
									</if>
									<if test="create_date_beg != null and create_date_beg != '' and create_date_end != null and create_date_end != ''">
									AND a.create_date between to_date(#{create_date_beg},'YYYY-MM-DD') and to_date(#{create_date_end},'YYYY-MM-DD')
									</if>
									<if test="back_date_beg != null and back_date_beg != '' and back_date_end != null and back_date_end != ''">
									AND a.back_date between to_date(#{back_date_beg},'YYYY-MM-DD') and to_date(#{back_date_end},'YYYY-MM-DD')
									</if>
									<if test="confirm_emp != null and confirm_emp != ''">
									AND a.confirm_emp = #{confirm_emp}
									</if>
									<if test="state != null and state != ''">
									AND a.state = #{state}
									</if>
									</where>  
							  ),
							sum_tmp as
							 (select null group_id,
							         null hos_id,
							         null copy_code,
							         null ass_back_no,
							         null ass_card_no,
							         null store_id,
							         null store_no,
							         null store_code,
							         null store_name,
							         null ven_id,
							         null ven_no,
							         null ven_code,
							         null ven_name,
							         sum(price) back_money,
							         '合计' note,
							         null create_emp,
							         null create_emp_name,
							         null create_date,
							         null back_date,
							         null confirm_emp,
							         null confirm_emp_name,
							         null state,
							         null state_name,
							         null ass_id,
							         null ass_no,
							         null ass_code,
							         null ass_name,
							         sum(price) price,
							         sum(add_depre) add_depre,
							         sum(add_manage_depre) add_manage_depre,
							         sum(cur_money) cur_money,
							         sum(fore_money) fore_money,
							         null note_detail
							    from detail_tmp)
							
							select group_id,
							       hos_id,
							       copy_code,
							       ass_back_no,
							       ass_card_no,
							       ven_id,
							       ven_no,
							       ven_code,
							       ven_name,
							       back_money,
							       note,
							       create_emp,
							       create_emp_name,
							       create_date,
							       back_date,
							       confirm_emp,
							       confirm_emp_name,
							       state,
							       state_name,
							       ass_id,
							       ass_no,
							       ass_code,
							       ass_name,
							       price,
							       add_depre,
							       add_manage_depre,
							       cur_money,
							       fore_money,
							       note_detail
							  from detail_tmp
							union all
							select group_id,
							       hos_id,
							       copy_code,
							       ass_back_no,
							       ass_card_no,
							       ven_id,
							       ven_no,
							       ven_code,
							       ven_name,
							       back_money,
							       note,
							       create_emp,
							       create_emp_name,
							       create_date,
							       back_date,
							       confirm_emp,
							       confirm_emp_name,
							       state,
							       state_name,
							       ass_id,
							       ass_no,
							       ass_code,
							       ass_name,
							       price,
							       add_depre,
							       add_manage_depre,
							       cur_money,
							       fore_money,
							       note_detail
							  from sum_tmp
							
							 order by create_date desc
			
	
	</select>
</mapper>

