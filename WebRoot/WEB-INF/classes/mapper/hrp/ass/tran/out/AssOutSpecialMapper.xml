<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.ass.dao.tran.out.AssOutSpecialMapper">
	
	<resultMap id="assOutSpecial" type="com.chd.hrp.ass.entity.tran.out.AssOutSpecial">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="out_no" column="out_no"/>
	<result property="bill_type" column="bill_type"/>
	<result property="store_id" column="store_id"/>
	<result property="store_no" column="store_no"/>
	<result property="dept_id" column="dept_id"/>
	<result property="dept_no" column="dept_no"/>
	<result property="create_emp" column="create_emp"/>
	<result property="create_date" column="create_date"/>
	<result property="audit_emp" column="audit_emp"/>
	<result property="audit_date" column="audit_date"/>
	<result property="state" column="state"/>
	<result property="note" column="note"/>
	<result property="is_import" column="is_import"/>
	<result property="purc_emp" column="purc_emp"/>
	<result property="purc_emp_name" column="purc_emp_name"/>
	</resultMap>
		
	<resultMap id="assOutSpecialMap" type="java.util.Map">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="out_no" column="out_no"/>
	<result property="bill_type" column="bill_type"/>
	<result property="store_id" column="store_id"/>
	<result property="store_no" column="store_no"/>
	<result property="dept_id" column="dept_id"/>
	<result property="dept_no" column="dept_no"/>
	<result property="create_emp" column="create_emp"/>
	<result property="create_date" column="create_date"/>
	<result property="audit_emp" column="audit_emp"/>
	<result property="audit_date" column="audit_date"/>
	<result property="state" column="state"/>
	<result property="note" column="note"/>
	
	<result property="bill_type_name" column="bill_type_name"/>
	<result property="store_code" column="store_code"/>
	<result property="store_name" column="store_name"/>
	<result property="dept_code" column="dept_code"/>
	<result property="dept_name" column="dept_name"/>
	<result property="create_emp_name" column="create_emp_name"/>
	<result property="audit_emp_name" column="audit_emp_name"/>
	<result property="state_name" column="state_name"/>
	<result property="ass_card_no" column="ass_card_no"/>
	<result property="ass_id" column="ass_id"/>
	<result property="ass_no" column="ass_no"/>
	<result property="ass_code" column="ass_code"/>
	<result property="ass_name" column="ass_name"/>
	<result property="ass_spec" column="ass_spec"/>
	<result property="ass_mondl" column="ass_mondl"/>
	<result property="ass_brand" column="ass_brand"/>
	<result property="ass_amount" column="ass_amount"/>
	<result property="price" column="price"/>
	<result property="purc_emp" column="purc_emp"/>
	<result property="purc_emp_name" column="purc_emp_name"/>
	</resultMap>
	
	<resultMap id="assOutDetailSpecialMap" type="java.util.Map">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="out_no" column="out_no"/>
	<result property="ass_card_no" column="ass_card_no"/>
	<result property="note" column="note"/>
	</resultMap>
	
	
	
	<insert id="add" useGeneratedKeys="true" >
	
		INSERT INTO ASS_OUT_SPECIAL (
		<trim suffix="" suffixOverrides=",">
		<if test="group_id != null and group_id != ''">
		group_id
		,
		</if>
		<if test="hos_id != null and hos_id != ''">
		hos_id
		,
		</if>
		<if test="copy_code != null and copy_code != ''">
		copy_code
		,
		</if>
		<if test="out_no != null and out_no != ''">
		out_no
		,
		</if>
		<if test="bill_type != null and bill_type != ''">
		bill_type
		,
		</if>
		<if test="store_id != null and store_id != ''">
		store_id
		,
		</if>
		<if test="store_no != null and store_no != ''">
		store_no
		,
		</if>
		<if test="dept_id != null and dept_id != ''">
		dept_id
		,
		</if>
		<if test="dept_no != null and dept_no != ''">
		dept_no
		,
		</if>
		<if test="create_emp != null and create_emp != ''">
		create_emp
		,
		</if>
		<if test="create_date != null and create_date != ''">
		create_date
		,
		</if>
		<if test="state != null and state != ''">
		state
		,
		</if>
		<if test="note != null and note != ''">
		note
		,
		</if>
		<if test="purc_emp != null and purc_emp != ''">
		purc_emp
		,
		</if>
		</trim>
		) VALUES (
		<trim suffix="" suffixOverrides=",">
		<if test="group_id != null and group_id != ''">
		#{group_id}
		,
		</if>
		<if test="hos_id != null and hos_id != ''">
		#{hos_id}
		,
		</if>
		<if test="copy_code != null and copy_code != ''">
		#{copy_code}
		,
		</if>
		<if test="out_no != null and out_no != ''">
		#{out_no}
		,
		</if>
		<if test="bill_type != null and bill_type != ''">
		#{bill_type}
		,
		</if>
		<if test="store_id != null and store_id != ''">
		#{store_id}
		,
		</if>
		<if test="store_no != null and store_no != ''">
		#{store_no}
		,
		</if>
		<if test="dept_id != null and dept_id != ''">
		#{dept_id}
		,
		</if>
		<if test="dept_no != null and dept_no != ''">
		#{dept_no}
		,
		</if>
		<if test="create_emp != null and create_emp != ''">
		#{create_emp}
		,
		</if>
		<if test="create_date != null and create_date != ''">
		to_date(#{create_date},'YYYY-MM-DD')
		,
		</if>
		<if test="state != null and state != ''">
		#{state}
		,
		</if>
		<if test="note != null and note != ''">
		#{note}
		,
		</if>
		<if test="purc_emp != null and purc_emp != ''">
		#{purc_emp}
		,
		</if>
		</trim>		
		)
	
	</insert>
	<insert id="addBatch" parameterType="java.util.List" >
	
		INSERT INTO ASS_OUT_SPECIAL (
		group_id
		,
		hos_id
		,
		copy_code
		,
		out_no
		,
		bill_type
		,
		store_id
		,
		store_no
		,
		dept_id
		,
		dept_no
		,
		create_emp
		,
		create_date
		,
		state
		,
		note
		,
		purc_emp
		) select  t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
			#{item.group_id,jdbcType=INTEGER}
			,
			#{item.hos_id,jdbcType=INTEGER}
			,
			#{item.copy_code,jdbcType=VARCHAR}
			,
			#{item.out_no,jdbcType=VARCHAR}
			,
			#{item.bill_type,jdbcType=VARCHAR}
			,
			#{item.store_id,jdbcType=INTEGER}
			,
			#{item.store_no,jdbcType=INTEGER}
			,
			#{item.dept_id,jdbcType=VARCHAR}
			,
			#{item.dept_no,jdbcType=VARCHAR}
			,
			#{item.create_emp,jdbcType=INTEGER}
			,
			#{item.create_date,jdbcType=DATE}
			,
			#{item.state,jdbcType=INTEGER}
			,
			#{item.note,jdbcType=VARCHAR}
			,
			#{item.purc_emp,jdbcType=INTEGER}
		    from dual
		</foreach>
		)t
	</insert>
	
	<update id="update" parameterType="java.util.Map">
	
		UPDATE ass_out_special 
		<trim prefix="SET"  suffixOverrides=","> 
		<if test="bill_type != null and bill_type != ''">
		bill_type = #{bill_type}
		,
		</if>
		<if test="store_id != null and store_id != ''">
		store_id = #{store_id}
		,
		</if>
		<if test="store_no != null and store_no != ''">
		store_no = #{store_no}
		,
		</if>
		<if test="dept_id != null and dept_id != ''">
		dept_id = #{dept_id}
		,
		</if>
		<if test="dept_no != null and dept_no != ''">
		dept_no = #{dept_no}
		,
		</if>
		<if test="create_date != null and create_date != ''">
		create_date = to_date(#{create_date},'YYYY-MM-DD')
		,
		</if>
		<if test="note != null and note != ''">
		note = #{note}
		,
		</if>
		<if test="note == null or note == ''">
		note = null
		,
		</if>
		<if test="purc_emp != null and purc_emp != ''">
		purc_emp = #{purc_emp}
		,
		</if>
		<if test="purc_emp == null or purc_emp == ''">
		purc_emp = null
		,
		</if>
		</trim>
		<where>                     
		AND group_id = #{group_id}
		AND hos_id = #{hos_id}
		AND copy_code = #{copy_code}
		AND out_no = #{out_no}
		</where>  
	</update>
	<update id="updateBatch" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_out_special 
			<trim prefix="SET"  suffixOverrides=","> 
			<if test="item.bill_type != null and item.bill_type != ''">
			bill_type = #{item.bill_type}
			,
			</if>
			<if test="item.store_id != null and item.store_id != ''">
			store_id = #{item.store_id}
			,
			</if>
			<if test="item.store_no != null and item.store_no != ''">
			store_no = #{item.store_no}
			,
			</if>
			<if test="item.dept_id != null and item.dept_id != ''">
			dept_id = #{item.dept_id}
			,
			</if>
			<if test="item.dept_no != null and item.dept_no != ''">
			dept_no = #{item.dept_no}
			,
			</if>
			<if test="item.create_emp != null and item.create_emp != ''">
			create_emp = #{item.create_emp}
			,
			</if>
			<if test="item.create_date != null and item.create_date != ''">
			create_date = #{item.create_date}
			,
			</if>
			<if test="item.audit_emp != null and item.audit_emp != ''">
			audit_emp = #{item.audit_emp}
			,
			</if>
			<if test="item.audit_date != null and item.audit_date != ''">
			audit_date = #{item.audit_date}
			,
			</if>
			<if test="item.state != null and item.state != ''">
			state = #{item.state}
			,
			</if>
			<if test="item.note != null and item.note != ''">
			note = #{item.note}
			,
			</if>
			</trim>
			<where>                     
			<if test="item.group_id != null and item.group_id != ''">
			group_id = #{item.group_id}
			</if>  
			<if test="item.hos_id != null and item.hos_id != ''">
			AND hos_id = #{item.hos_id}
			</if>  
			<if test="item.copy_code != null and item.copy_code != ''">
			AND copy_code = #{item.copy_code}
			</if>  
			<if test="item.out_no != null and item.out_no != ''">
			AND out_no = #{item.out_no}
			</if>  
			</where>  			
		</foreach>
	</update>
	
	<update id="updateConfirm" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_out_special  set
			state = 2,
			audit_emp = #{item.audit_emp},
			audit_date = to_date(#{item.audit_date},'YYYY-MM-DD')
			<where>                     
			group_id = #{item.group_id}
			AND hos_id = #{item.hos_id}
			AND copy_code = #{item.copy_code}
			AND out_no = #{item.out_no}
			</where>  			
		</foreach>
	</update>
	
	
	<update id="updateAudit" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_out_special  set
			state = 1
			<where>                     
			group_id = #{item.group_id}
			AND hos_id = #{item.hos_id}
			AND copy_code = #{item.copy_code}
			AND out_no = #{item.out_no}
			</where>  			
		</foreach>
	</update>
	
	<update id="updateReAudit" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_out_special  set
			state = 0
			<where>                     
			group_id = #{item.group_id}
			AND hos_id = #{item.hos_id}
			AND copy_code = #{item.copy_code}
			AND out_no = #{item.out_no}
			</where>  			
		</foreach>
	</update>
	
	<delete id="delete" parameterType="java.util.Map">
	
		DELETE FROM ass_out_special 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code}
		</if>
		<if test="out_no != null and out_no != ''">
		AND out_no = #{out_no}
		</if>
		</where>  
	</delete>
	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM ass_out_special 
		<where>
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				<if test="item.group_id != null and item.group_id != ''">
				group_id = #{item.group_id}
				</if>
				<if test="item.hos_id != null and item.hos_id != ''">
				AND hos_id = #{item.hos_id}
				</if>
				<if test="item.copy_code != null and item.copy_code != ''">
				AND copy_code = #{item.copy_code}
				</if>
				<if test="item.out_no != null and item.out_no != ''">
				AND out_no = #{item.out_no}
				</if>
			</foreach>
	    </where>  
	</delete>
	<select id="query" parameterType="java.util.Map" resultMap="assOutSpecial" >
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.out_no,
			a.bill_type,
			case when a.bill_type = '01' then '科室领用' when a.bill_type = '04' then '科室退库'  else '' end bill_type_name,
			a.store_id,
			a.store_no,
			s1.store_code,
			s1.store_name,
			a.dept_id,
			a.dept_no,
			d1.dept_code,
			d1.dept_name,
			a.create_emp,
			su1.user_name create_emp_name,
			a.create_date,
			a.audit_emp,
			su2.user_name audit_emp_name,
			a.audit_date,
			a.state,
			case when a.state = 0 then '新建' when a.state = 1 then '审核' when a.state = 2 then '移库确认' else '' end state_name,
			a.note,
			nvl(alms.is_import, 0) as is_import,
			a.purc_emp,
			su3.emp_name purc_emp_name
		FROM ASS_OUT_SPECIAL a
		
		
		left join hos_dept_dict d1 on
		a.group_id = d1.group_id
		and a.hos_id = d1.hos_id
		and a.dept_id = d1.dept_id
		and d1.is_stop = 0
		
		left join hos_store_dict s1 on
		a.group_id = s1.group_id
		and a.hos_id = s1.hos_id
		and a.store_id = s1.store_id
		and s1.is_stop = 0
		
		left join sys_user su1 on
		a.group_id = su1.group_id
		and a.hos_id = su1.hos_id
		and a.create_emp = su1.user_id
		
		left join sys_user su2 on
		a.group_id = su2.group_id
		and a.hos_id = su2.hos_id
		and a.audit_emp = su2.user_id
		
		left join hos_emp_dict su3 on
		a.group_id = su3.group_id
		and a.hos_id = su3.hos_id
		and a.purc_emp = su3.emp_id
		and su3.is_stop = 0
		
		left join (select a.group_id,
                           a.hos_id,
                           a.copy_code,
                           a.out_no,
                           case
                             when count(1) > 0 then
                              1
                             else
                              0
                           end as is_import
                      from ass_in_out_map_special a
                      left join ASS_OUT_SPECIAL b
                        on a.group_id = b.group_id
                       and a.hos_id = b.hos_id
                       and a.copy_code = b.copy_code
                       and a.out_no = b.out_no
                     group by a.group_id, a.hos_id, a.copy_code, a.out_no) alms
           				on  a.group_id = alms.group_id
					    and a.hos_id = alms.hos_id
					    and a.copy_code = alms.copy_code
					    and a.out_no = alms.out_no
		
		<where>                     
			<if test="group_id != null and group_id != ''">
			AND a.group_id = #{group_id}
			</if>
			<if test="hos_id != null and hos_id != ''">
			AND a.hos_id = #{hos_id}
			</if>
			<if test="copy_code != null and copy_code != ''">
			AND a.copy_code = #{copy_code}
			</if>
			<if test="user_id != null and  user_id != ''">
          	and exists (
				select 1 from v_user_data_perm b where
				a.group_id=b.group_id 
				and a.hos_id=b.hos_id 
				and to_char(a.store_id) = b.perm_code
				and user_id=#{user_id}
				AND TABLE_CODE = upper('hos_store_dict')
				and  b.is_write = 1
				
	          	union all
	          	
	          	select 1 from v_user_data_perm b where
				a.group_id=b.group_id 
				and a.hos_id=b.hos_id 
				and to_char(a.store_id) = b.perm_code
				and user_id=#{user_id}
				AND TABLE_CODE = upper('hos_store_dict')
				and b.is_read = 1
          	)
		  	</if>
			
			<if test="out_no != null and out_no != ''">
			AND a.out_no = #{out_no}
			</if>
			<if test="bill_type != null and bill_type != ''">
			AND a.bill_type = #{bill_type}
			</if>
			<if test="store_id != null and store_id != ''">
			AND a.store_id = #{store_id}
			</if>
			<if test="dept_id != null and dept_id != ''">
			AND a.dept_id = #{dept_id}
			</if>
			<if test="create_emp != null and create_emp != ''">
			AND a.create_emp = #{create_emp}
			</if>
			<if test="create_date_beg != null and create_date_beg != '' and create_date_end != null and create_date_end != ''">
			AND a.create_date between to_date(#{create_date_beg},'YYYY-MM-DD') and to_date(#{create_date_end},'YYYY-MM-DD')
			</if>
			<if test="audit_emp != null and audit_emp != ''">
			AND a.audit_emp = #{audit_emp}
			</if>
			<if test="purc_emp != null and purc_emp != ''">
			AND a.purc_emp = #{purc_emp}
			</if>
			<if test="audit_date_beg != null and audit_date_beg != '' and audit_date_end != null and audit_date_end != ''">
			AND a.audit_date between to_date(#{audit_date_beg},'YYYY-MM-DD') and to_date(#{audit_date_end},'YYYY-MM-DD')
			</if>
			<if test="state != null and state != ''">
			AND a.state = #{state}
			</if>
			<if test="note != null and note != ''">
			AND a.note = #{note}
			</if>
			<if test="ass_name != null and ass_name != ''">
			and  exists (select 1 from ASS_OUT_DETAIL_SPECIAL b
							left join ass_card_SPECIAL c
					    on b.group_id = c.group_id
					   and b.hos_id = c.hos_id
					   and b.copy_code = c.copy_code
					   and b.ass_card_no = c.ass_card_no
					
					  left join ass_no_dict d
					    on c.group_id = d.group_id
					   and c.hos_id = d.hos_id
					   and c.copy_code = d.copy_code
					   and c.ass_id = d.ass_id
					   and d.is_stop = 0
				     where 
				      a.group_id = b.group_id
			          and a.hos_id = b.hos_id
			          and a.copy_code = b.copy_code
				      and a.out_no = b.out_no
					     and (
						d.ass_code like '%${ass_name}%' or
						d.ass_name like
						'%${ass_name}%'
						or
						d.spell_code like '%${ass_name}%' or
						d.wbx_code like
						'%${ass_name}%' or
						c.ass_spec  like '%${ass_name}%'
						)
			
			
			 )
		</if>
		</where>   
		order by a.create_date desc
	</select>
	<select id="queryByCode" resultMap="assOutSpecial"  parameterType="java.util.Map" >
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.out_no,
			a.bill_type,
			case when a.bill_type = '01' then '科室领用' when a.bill_type = '04' then '科室退库'  else '' end bill_type_name,
			a.store_id,
			a.store_no,
			s1.store_code,
			s1.store_name,
			a.dept_id,
			a.dept_no,
			d1.dept_code,
			d1.dept_name,
			a.create_emp,
			su1.user_name create_emp_name,
			a.create_date,
			a.audit_emp,
			su2.user_name audit_emp_name,
			a.audit_date,
			a.state,
			case when a.state = 0 then '新建' when a.state = 1 then '审核' when a.state = 2 then '移库确认' else '' end state_name,
			a.note,
			a.purc_emp,
			su3.emp_code||' '||su3.emp_name purc_emp_name
		FROM ASS_OUT_SPECIAL a
		
		left join hos_dept_dict d1 on
		a.group_id = d1.group_id
		and a.hos_id = d1.hos_id
		and a.dept_id = d1.dept_id
		and d1.is_stop = 0
		
		left join hos_store_dict s1 on
		a.group_id = s1.group_id
		and a.hos_id = s1.hos_id
		and a.store_id = s1.store_id
		and s1.is_stop = 0
		
		left join sys_user su1 on
		a.group_id = su1.group_id
		and a.hos_id = su1.hos_id
		and a.create_emp = su1.user_id
		
		left join sys_user su2 on
		a.group_id = su2.group_id
		and a.hos_id = su2.hos_id
		and a.audit_emp = su2.user_id
		
		left join hos_emp_dict su3 on
		a.group_id = su3.group_id
		and a.hos_id = su3.hos_id
		and a.purc_emp = su3.emp_id
		and su3.is_stop = 0
		WHERE 
		a.group_id = #{group_id}   and 
		a.hos_id = #{hos_id}   and 
		a.copy_code = #{copy_code}   and 
		a.out_no = #{out_no} 
	
	</select>
	<select id="queryByUniqueness" resultMap="assOutSpecial"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		out_no,
		bill_type,
		store_id,
		store_no,
		dept_id,
		dept_no,
		create_emp,
		create_date,
		audit_emp,
		audit_date,
		state,
		note,
		purc_emp
		FROM ASS_OUT_SPECIAL 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code}
		</if>
		<if test="out_no != null and out_no != ''">
		AND out_no = #{out_no}
		</if>
		<if test="bill_type != null and bill_type != ''">
		AND bill_type = #{bill_type}
		</if>
		<if test="store_id != null and store_id != ''">
		AND store_id = #{store_id}
		</if>
		<if test="store_no != null and store_no != ''">
		AND store_no = #{store_no}
		</if>
		<if test="dept_id != null and dept_id != ''">
		AND dept_id = #{dept_id}
		</if>
		<if test="dept_no != null and dept_no != ''">
		AND dept_no = #{dept_no}
		</if>
		<if test="create_emp != null and create_emp != ''">
		AND create_emp = #{create_emp}
		</if>
		<if test="create_date != null and create_date != ''">
		AND create_date = #{create_date}
		</if>
		<if test="audit_emp != null and audit_emp != ''">
		AND audit_emp = #{audit_emp}
		</if>
		<if test="audit_date != null and audit_date != ''">
		AND audit_date = #{audit_date}
		</if>
		<if test="state != null and state != ''">
		AND state = #{state}
		</if>
		<if test="note != null and note != ''">
		AND note = #{note}
		</if>
		</where>   
		order by create_date desc
	</select>
	<select id="queryExists" resultMap="assOutSpecial"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		out_no,
		bill_type,
		store_id,
		store_no,
		dept_id,
		dept_no,
		create_emp,
		create_date,
		audit_emp,
		audit_date,
		state,
		note,
		purc_emp
		FROM ASS_OUT_SPECIAL 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code}
		</if>
		<if test="out_no != null and out_no != ''">
		AND out_no = #{out_no}
		</if>
		<if test="bill_type != null and bill_type != ''">
		AND bill_type = #{bill_type}
		</if>
		<if test="store_id != null and store_id != ''">
		AND store_id = #{store_id}
		</if>
		<if test="store_no != null and store_no != ''">
		AND store_no = #{store_no}
		</if>
		<if test="dept_id != null and dept_id != ''">
		AND dept_id = #{dept_id}
		</if>
		<if test="dept_no != null and dept_no != ''">
		AND dept_no = #{dept_no}
		</if>
		<if test="create_emp != null and create_emp != ''">
		AND create_emp = #{create_emp}
		</if>
		<if test="create_date != null and create_date != ''">
		AND create_date = #{create_date}
		</if>
		<if test="audit_emp != null and audit_emp != ''">
		AND audit_emp = #{audit_emp}
		</if>
		<if test="audit_date != null and audit_date != ''">
		AND audit_date = #{audit_date}
		</if>
		<if test="state != null and state != ''">
		AND state = #{state}
		</if>
		<if test="note != null and note != ''">
		AND note = #{note}
		</if>
		</where>   
		order by create_date desc
	</select>
	
	<select id="queryState" resultType="java.lang.String"  parameterType="java.util.Map" >
	
		SELECT
		  out_no
		FROM ASS_OUT_SPECIAL 
		WHERE                     
		group_id = #{group_id}
		
		AND hos_id = #{hos_id}
		
		AND copy_code = #{copy_code}
		
		<if test="paraId != null and paraId != ''">
		AND out_no in (${paraId})
		</if>
		<if test="out_no != null and out_no != ''">
		AND out_no = #{out_no}
		</if>
		AND  state != 2
	</select>
	
<!-- 	批量打印主表信息查询 -->
	<select id="queryAssOutSpecialPrintTemlateByMainBatch" parameterType="java.util.Map" resultType="java.util.Map" >
	
		
		SELECT a.out_no id,
				a.out_no,
		       a.bill_type,
		       case
		         when a.bill_type = '01' then
		          '科室领用'
		         when a.bill_type = '04' then
		          '科室退库'
		         else
		          ''
		       end bill_type_name,
		       a.store_id,
		       a.store_no,
		       s1.store_code sort_code,
		       s1.store_name sort_name,
		       a.dept_id,
		       a.dept_no,
		       d1.dept_code,
		       d1.dept_name,
		       su1.user_name create_emp,
		       to_char(a.create_date, 'yyyy-mm-dd') as create_date,
		       su2.user_name audit_emp,
		       to_char(a.audit_date, 'yyyy-mm-dd') as audit_date,
		       case
		         when a.state = 0 then
		          '新建'
		         when a.state = 1 then
		          '审核'
		         when a.state = 2 then
		          '移库确认'
		         else
		          ''
		       end state,
		       a.note,
		       a.purc_emp,
		       su3.emp_name purc_emp_name,
		        to_char(sum(acs.price),'FM999,999,990.00') sum_price,
		        sum(acs.ass_amount) sum_amount
		  FROM ASS_OUT_SPECIAL a
		  left join ass_out_detail_special aa
		    on aa.group_id = a.group_id
		   and aa.hos_id = a.hos_id
		   and aa.copy_code = a.copy_code
		   and aa.out_no = a.out_no
		  left join ass_card_special acs
		    on acs.group_id = aa.group_id
		   and acs.hos_id = aa.hos_id
		   and acs.copy_code = aa.copy_code
		   and acs.ass_card_no = aa.ass_card_no
		
		  left join hos_dept_dict d1
		    on a.group_id = d1.group_id
		   and a.hos_id = d1.hos_id
		   and a.dept_id = d1.dept_id
		   and d1.is_stop = 0
		
		  left join hos_store_dict s1
		    on a.group_id = s1.group_id
		   and a.hos_id = s1.hos_id
		   and a.store_id = s1.store_id
		   and s1.is_stop = 0
		
		  left join sys_user su1
		    on a.group_id = su1.group_id
		   and a.hos_id = su1.hos_id
		   and a.create_emp = su1.user_id
		
		  left join sys_user su2
		    on a.group_id = su2.group_id
		   and a.hos_id = su2.hos_id
		   and a.audit_emp = su2.user_id
		
		  left join hos_emp_dict su3
		    on a.group_id = su3.group_id
		   and a.hos_id = su3.hos_id
		   and a.purc_emp = su3.emp_id
		   and su3.is_stop = 0
		   
				WHERE                     
					a.group_id = #{group_id}
					AND a.hos_id = #{hos_id}
					AND a.copy_code = #{copy_code}
					AND a.out_no in (${paraId})
					
		   
		 group by a.out_no,
		          a.bill_type,
		          su1.user_name,
		          a.store_id,
		          a.store_no,
		          s1.store_code,
		          s1.store_name,
		          su2.user_name,
		          a.dept_id,
		          a.dept_no,
		          d1.dept_code,
		          d1.dept_name,
		          a.create_date,
		          audit_date,
		          state,
		          a.note,
		          a.purc_emp,
		          su3.emp_name
				
				order by a.create_date desc
	</select>
	
<!-- 	打印主表信息查询 -->
	<select id="queryAssOutSpecialPrintTemlateByMain" parameterType="java.util.Map" resultType="java.util.Map" >
	
		SELECT a.out_no id,
				a.out_no,
		       a.bill_type,
		       case
		         when a.bill_type = '01' then
		          '科室领用'
		         when a.bill_type = '04' then
		          '科室退库'
		         else
		          ''
		       end bill_type_name,
		       a.store_id,
		       a.store_no,
		       s1.store_code sort_code,
		       s1.store_name sort_name,
		       a.dept_id,
		       a.dept_no,
		       d1.dept_code,
		       d1.dept_name,
		       su1.user_name create_emp,
		       to_char(a.create_date, 'yyyy-mm-dd') as create_date,
		       su2.user_name audit_emp,
		       to_char(a.audit_date, 'yyyy-mm-dd') as audit_date,
		       case
		         when a.state = 0 then
		          '新建'
		         when a.state = 1 then
		          '审核'
		         when a.state = 2 then
		          '移库确认'
		         else
		          ''
		       end state,
		       a.note,
		       a.purc_emp,
		       su3.emp_name purc_emp_name,
		        to_char(sum(acs.price),'FM999,999,990.00') sum_price,
		        sum(acs.ass_amount) sum_amount
		  FROM ASS_OUT_SPECIAL a
		  left join ass_out_detail_special aa
		    on aa.group_id = a.group_id
		   and aa.hos_id = a.hos_id
		   and aa.copy_code = a.copy_code
		   and aa.out_no = a.out_no
		  left join ass_card_special acs
		    on acs.group_id = aa.group_id
		   and acs.hos_id = aa.hos_id
		   and acs.copy_code = aa.copy_code
		   and acs.ass_card_no = aa.ass_card_no
		
		  left join hos_dept_dict d1
		    on a.group_id = d1.group_id
		   and a.hos_id = d1.hos_id
		   and a.dept_id = d1.dept_id
		   and d1.is_stop = 0
		
		  left join hos_store_dict s1
		    on a.group_id = s1.group_id
		   and a.hos_id = s1.hos_id
		   and a.store_id = s1.store_id
		   and s1.is_stop = 0
		
		  left join sys_user su1
		    on a.group_id = su1.group_id
		   and a.hos_id = su1.hos_id
		   and a.create_emp = su1.user_id
		
		  left join sys_user su2
		    on a.group_id = su2.group_id
		   and a.hos_id = su2.hos_id
		   and a.audit_emp = su2.user_id
		
		  left join hos_emp_dict su3
		    on a.group_id = su3.group_id
		   and a.hos_id = su3.hos_id
		   and a.purc_emp = su3.emp_id
		   and su3.is_stop = 0
		   
				WHERE                     
			a.group_id = #{group_id}
			AND a.hos_id = #{hos_id}
			AND a.copy_code = #{copy_code}
			AND a.out_no = #{out_no}
					
		   
		 group by a.out_no,
		          a.bill_type,
		          su1.user_name,
		          a.store_id,
		          a.store_no,
		          s1.store_code,
		          s1.store_name,
		          su2.user_name,
		          a.dept_id,
		          a.dept_no,
		          d1.dept_code,
		          d1.dept_name,
		          a.create_date,
		          audit_date,
		          state,
		          a.note,
		          a.purc_emp,
		          su3.emp_name
				
				order by a.create_date desc
	</select>
	
	<!-- 打印明细信息查询 -->
	<select id="queryAssOutSpecialPrintTemlateByDetail" parameterType="java.util.Map" resultType="java.util.Map" >
	
		SELECT 
		  a.out_no ID,
	      b.ass_brand,
	      b.ass_spec,
	      b.ass_mondl,
	      b.ass_card_no,
	      b.fac_no,
	      b.fac_id,
        b.ass_amount,
        h.unit_name,
        to_char(b.price,'FM999,999,990.00') price,
        to_char(b.ass_amount*b.price,'FM999,999,990.00') price_sum,
	      hfd.fac_code,
	      hfd.fac_name,
	      to_char(b.price,'FM999,999,990.00') as price_detail,
	      to_char(b.depre_money,'FM999,999,990.00') as add_depre_detail,
	      b.add_depre_month,
	      to_char(b.cur_money,'FM999,999,990.00') as cur_money_detail,
	      to_char(b.fore_money,'FM999,999,990.00') as fore_money_detail,
	      c.ass_id,
	      c.ass_no,
	      c.ass_code,
	      c.ass_name,
	      a.note note_detail
	    FROM ASS_OUT_DETAIL_SPECIAL a
	    left join ass_card_special b on
	      a.group_id = b.group_id
	      and a.hos_id = b.hos_id
	      and a.copy_code = b.copy_code
	      and a.ass_card_no = b.ass_card_no
	    left join hos_fac_dict hfd on 
	      b.group_id = hfd.group_id
	      and b.hos_id = hfd.hos_id
	      and b.fac_no = hfd.fac_no
	      and b.fac_id = hfd.fac_id
	    left join ass_no_dict c on
	      b.group_id = c.group_id
	      and b.hos_id = c.hos_id
	      and b.copy_code = c.copy_code 
	      and b.ass_id = c.ass_id
	      and c.is_stop = 0
        left join  HOS_UNIT h  on
        h.group_id = b.group_id
        and h.hos_id = b.hos_id
        and  h.unit_code=b.unit_code
        
		WHERE                     
			a.group_id = #{group_id}
			
			AND a.hos_id = #{hos_id}
			
			AND a.copy_code = #{copy_code}
			
			<if test="p_num==1">
				and a.out_no in (${paraId})
			</if>
			<if test="p_num==0">
				and a.out_no = #{out_no,jdbcType=NUMERIC}
			</if>
		order by a.ass_card_no desc
	</select>
	
	<!-- 明细查询 -->
	<select id="queryDetails" parameterType="java.util.Map" resultMap="assOutSpecialMap">
			with detail_tmp as
						 (select a.group_id,
						         a.hos_id,
						         a.copy_code,
						         a.out_no,
						         a.bill_type,
						         case
						           when a.bill_type = '01' then
						            '科室领用'
						           when a.bill_type = '04' then
						            '科室退库'
						           else
						            ''
						         end bill_type_name,
						         a.store_id,
						         a.store_no,
						         s1.store_code,
						         s1.store_name,
						         a.dept_id,
						         a.dept_no,
						         d1.dept_code,
						         d1.dept_name,
						         a.create_emp,
						         su1.user_name create_emp_name,
						         a.create_date,
						         a.audit_emp,
						         su2.user_name audit_emp_name,
						         a.audit_date,
						         a.state,
						         case
						           when a.state = 0 then
						            '新建'
						           when a.state = 1 then
						            '审核'
						           when a.state = 2 then
						            '移库确认'
						           else
						            ''
						         end state_name,
						         a.note,
						         b.ass_card_no,
						         d.ass_id,
						         d.ass_no,
						         d.ass_code,
						         d.ass_name,
						         c.ass_spec,
						         c.ass_mondl,
						         c.ass_brand,
						         c.ass_amount,
						         c.price
						    from ASS_OUT_SPECIAL a
						    left join ASS_OUT_DETAIL_SPECIAL b
						      on a.group_id = b.group_id
						     and a.hos_id = b.hos_id
						     and a.copy_code = b.copy_code
						     and a.out_no = b.out_no
						    left join hos_dept_dict d1
						      on a.group_id = d1.group_id
						     and a.hos_id = d1.hos_id
						     and a.dept_id = d1.dept_id
						     and d1.is_stop = 0
						  
						    left join hos_store_dict s1
						      on a.group_id = s1.group_id
						     and a.hos_id = s1.hos_id
						     and a.store_id = s1.store_id
						     and s1.is_stop = 0
						  
						    left join sys_user su1
						      on a.group_id = su1.group_id
						     and a.hos_id = su1.hos_id
						     and a.create_emp = su1.user_id
						  
						    left join sys_user su2
						      on a.group_id = su2.group_id
						     and a.hos_id = su2.hos_id
						     and a.audit_emp = su2.user_id
						  
						    left join ass_card_special c
						      on b.group_id = c.group_id
						     and b.hos_id = c.hos_id
						     and b.copy_code = c.copy_code
						     and b.ass_card_no = c.ass_card_no
						  
						    left join ass_no_dict d
						      on c.group_id = d.group_id
						     and c.hos_id = d.hos_id
						     and c.copy_code = d.copy_code
						     and c.ass_id = d.ass_id
						     and d.is_stop = 0
						     <where>                     
									AND a.group_id = #{group_id}
									AND a.hos_id = #{hos_id}
									AND a.copy_code = #{copy_code}
									<if test="user_id != null and  user_id != ''">
						          	and exists (
										select 1 from v_user_data_perm b where
										a.group_id=b.group_id 
										and a.hos_id=b.hos_id 
										and to_char(a.store_id) = b.perm_code
										and user_id=#{user_id}
										AND TABLE_CODE = upper('hos_store_dict')
										and  b.is_write = 1
										
							          	union all
							          	
							          	select 1 from v_user_data_perm b where
										a.group_id=b.group_id 
										and a.hos_id=b.hos_id 
										and to_char(a.store_id) = b.perm_code
										and user_id=#{user_id}
										AND TABLE_CODE = upper('hos_store_dict')
										and b.is_read = 1
						          	)
								  	</if>
									
									<if test="out_no != null and out_no != ''">
									AND a.out_no = #{out_no}
									</if>
									<if test="bill_type != null and bill_type != ''">
									AND a.bill_type = #{bill_type}
									</if>
									<if test="store_id != null and store_id != ''">
									AND a.store_id = #{store_id}
									</if>
									<if test="dept_id != null and dept_id != ''">
									AND a.dept_id = #{dept_id}
									</if>
									<if test="create_emp != null and create_emp != ''">
									AND a.create_emp = #{create_emp}
									</if>
									<if test="create_date_beg != null and create_date_beg != '' and create_date_end != null and create_date_end != ''">
									AND a.create_date between to_date(#{create_date_beg},'YYYY-MM-DD') and to_date(#{create_date_end},'YYYY-MM-DD')
									</if>
									<if test="audit_emp != null and audit_emp != ''">
									AND a.audit_emp = #{audit_emp}
									</if>
									<if test="audit_date_beg != null and audit_date_beg != '' and audit_date_end != null and audit_date_end != ''">
									AND a.audit_date between to_date(#{audit_date_beg},'YYYY-MM-DD') and to_date(#{audit_date_end},'YYYY-MM-DD')
									</if>
									<if test="state != null and state != ''">
									AND a.state = #{state}
									</if>
									<if test="note != null and note != ''">
									AND a.note = #{note}
									</if>
									<if test="ass_name != null and ass_name != ''">
									and (
											d.ass_code like '%${ass_name}%' or
											d.ass_name like
											'%${ass_name}%'
											or
											d.spell_code like '%${ass_name}%' or
											d.wbx_code like
											'%${ass_name}%' or 
											c.ass_spec like '%${ass_name}%'
											)
									</if>
								</where>
						     ),
						sum_tmp as
						 (select null group_id,
						         null hos_id,
						         null copy_code,
						         null out_no,
						         null bill_type,
						         null bill_type_name,
						         null store_id,
						         null store_no,
						         null store_code,
						         null store_name,
						         null dept_id,
						         null dept_no,
						         null dept_code,
						         null dept_name,
						         null create_emp,
						         null create_emp_name,
						         null create_date,
						         null audit_emp,
						         null audit_emp_name,
						         null audit_date,
						         null state,
						         null state_name,
						         '合计' note,
						         null ass_card_no,
						         null ass_id,
						         null ass_no,
						         null ass_code,
						         null ass_name,
						         null ass_spec,
						         null ass_mondl,
						         null ass_brand,
						         sum(ass_amount) ass_amount,
						         sum(price) price
						    from detail_tmp)
						
						select group_id,
						       hos_id,
						       copy_code,
						       out_no,
						       bill_type,
						       bill_type_name,
						       store_id,
						       store_no,
						       store_code,
						       store_name,
						       dept_id,
						       dept_no,
						       dept_code,
						       dept_name,
						       create_emp,
						       create_emp_name,
						       create_date,
						       audit_emp,
						       audit_emp_name,
						       audit_date,
						       state,
						       state_name,
						       note,
						       ass_card_no,
						       ass_id,
						       ass_no,
						       ass_code,
						       ass_name,
						       ass_spec,
						       ass_mondl,
						       ass_brand,
						       ass_amount,
						       price
						  from detail_tmp
						union all
						select group_id,
						       hos_id,
						       copy_code,
						       out_no,
						       bill_type,
						       bill_type_name,
						       store_id,
						       store_no,
						       store_code,
						       store_name,
						       dept_id,
						       dept_no,
						       dept_code,
						       dept_name,
						       create_emp,
						       create_emp_name,
						       create_date,
						       audit_emp,
						       audit_emp_name,
						       audit_date,
						       state,
						       state_name,
						       note,
						       ass_card_no,
						       ass_id,
						       ass_no,
						       ass_code,
						       ass_name,
						       ass_spec,
						       ass_mondl,
						       ass_brand,
						       ass_amount,
						       price
						  from sum_tmp
						
						 order by create_date desc
			
	</select>
	
	<!-- 冲账 ,主表-->
	<select id="queryAssOutByIds"  parameterType="java.util.Map" resultMap="assOutSpecialMap">
		SELECT 
			t.group_id,
			t.hos_id,
			t.copy_code,
			t.out_no,
			t.bill_type,
			t.store_id,
			t.store_no,
			t1.store_code,
			t.dept_id,
			t.dept_no,
			t.create_emp,
			t.create_date,
			t.audit_emp,
			t.audit_date,
			t.state,
			t.note,
			t.purc_emp
		FROM ASS_OUT_SPECIAL t
		left join hos_store_dict t1 on
		t.group_id = t1.group_id
		and t.hos_id = t1.hos_id
		and t.store_id = t1.store_id 
	WHERE t.group_id = #{group_id,jdbcType=INTEGER}
			AND t.hos_id = #{hos_id,jdbcType=INTEGER}
			AND t.out_no = #{out_nos,jdbcType=VARCHAR}
	</select>
	
	<!-- 冲账 从表 -->
	<select id="queryAssOutDetailByIds" parameterType="java.util.Map" resultMap="assOutDetailSpecialMap" >
	SELECT 
		group_id,
		hos_id,
		copy_code,
		out_no,
		ass_card_no,
		note
		FROM ass_out_detail_special 
		WHERE group_id = #{group_id,jdbcType=INTEGER}
			AND hos_id = #{hos_id,jdbcType=INTEGER}
			AND copy_code = #{copy_code,jdbcType=VARCHAR}
			AND out_no = #{out_nos,jdbcType=VARCHAR}
	
	
	</select>
</mapper>

