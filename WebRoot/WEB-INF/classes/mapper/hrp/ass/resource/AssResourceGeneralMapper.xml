<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.ass.dao.resource.AssResourceGeneralMapper">
	
	<resultMap id="assResourceGeneral" type="com.chd.hrp.ass.entity.resource.AssResourceGeneral">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="ass_card_no" column="ass_card_no"/>
	<result property="source_id" column="source_id"/>
	<result property="price" column="price"/>
	<result property="depre_money" column="depre_money"/>
	<result property="manage_depre_money" column="manage_depre_money"/>
	<result property="cur_money" column="cur_money"/>
	<result property="fore_money" column="fore_money"/>
	<result property="pay_money" column="pay_money"/>
	<result property="unpay_money" column="unpay_money"/>
	</resultMap>
		
	<resultMap id="assResourceGeneralMap" type="java.util.Map">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="ass_card_no" column="ass_card_no"/>
	<result property="source_id" column="source_id"/>
	<result property="price" column="price"/>
	<result property="depre_money" column="depre_money"/>
	<result property="manage_depre_money" column="manage_depre_money"/>
	<result property="cur_money" column="cur_money"/>
	<result property="fore_money" column="fore_money"/>
	<result property="source_name" column="source_name"/>
	<result property="pay_money" column="pay_money"/>
	<result property="unpay_money" column="unpay_money"/>
	</resultMap>
	
	<insert id="add" useGeneratedKeys="true" >
	
		INSERT INTO ASS_RESOURCE_General (
		<trim suffix="" suffixOverrides=",">
		<if test="group_id != null and group_id != ''">
		group_id
		,
		</if>
		<if test="hos_id != null and hos_id != ''">
		hos_id
		,
		</if>
		<if test="copy_code != null and copy_code != ''">
		copy_code
		,
		</if>
		<if test="ass_card_no != null and ass_card_no != ''">
		ass_card_no
		,
		</if>
		<if test="source_id != null and source_id != ''">
		source_id
		,
		</if>
		<if test="price != null and price != ''">
		price
		,
		</if>
		<if test="depre_money != null and depre_money != ''">
		depre_money
		,
		</if>
		<if test="cur_money != null and cur_money != ''">
		cur_money
		,
		</if>
		<if test="fore_money != null and fore_money != ''">
		fore_money
		,
		</if>
		<if test="pay_money != null and pay_money != ''">
		pay_money
		,
		</if>
		<if test="unpay_money != null and unpay_money != ''">
		unpay_money
		,
		</if>
		<if test="manage_depre_money != null and manage_depre_money != ''">
		manage_depre_money
		,
		</if>
		</trim>
		) VALUES (
		<trim suffix="" suffixOverrides=",">
		<if test="group_id != null and group_id != ''">
		#{group_id}
		,
		</if>
		<if test="hos_id != null and hos_id != ''">
		#{hos_id}
		,
		</if>
		<if test="copy_code != null and copy_code != ''">
		#{copy_code}
		,
		</if>
		<if test="ass_card_no != null and ass_card_no != ''">
		#{ass_card_no}
		,
		</if>
		<if test="source_id != null and source_id != ''">
		#{source_id}
		,
		</if>
		<if test="price != null and price != ''">
		#{price}
		,
		</if>
		<if test="depre_money != null and depre_money != ''">
		#{depre_money}
		,
		</if>
		<if test="cur_money != null and cur_money != ''">
		#{cur_money}
		,
		</if>
		<if test="fore_money != null and fore_money != ''">
		#{fore_money}
		,
		</if>
		<if test="pay_money != null and pay_money != ''">
		#{pay_money}
		,
		</if>
		<if test="unpay_money != null and unpay_money != ''">
		#{unpay_money}
		,
		</if>
		<if test="manage_depre_money != null and manage_depre_money != ''">
		#{manage_depre_money}
		,
		</if>
		</trim>		
		)
	
	</insert>
	<insert id="addBatch" parameterType="java.util.List" >
	
		INSERT INTO ASS_RESOURCE_General (
		group_id
		,
		hos_id
		,
		copy_code
		,
		ass_card_no
		,
		source_id
		,
		price
		,
		depre_money
		,
		cur_money
		,
		fore_money
		,
		pay_money
		,
		unpay_money
		,
		manage_depre_money
		) select  t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
			#{item.group_id}
			,
			#{item.hos_id}
			,
			#{item.copy_code}
			,
			#{item.ass_card_no}
			,
			#{item.source_id}
			,
			nvl(#{item.price},0)
			,
			nvl(#{item.depre_money},0)
			,
			nvl(#{item.cur_money},0)
			,
			nvl(#{item.fore_money},0)
			,
			nvl(#{item.pay_money},0)
			,
			nvl(#{item.unpay_money},0)
			,
			nvl(#{item.manage_depre_money},0)
		    from dual
		</foreach>
		)t
	</insert>
	
	<update id="updateBatchByBack" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_resource_General  set 
			unpay_money = -abs(unpay_money)
			<where>                     
			AND group_id = #{item.group_id}
			AND hos_id = #{item.hos_id}
			AND copy_code = #{item.copy_code}
			AND ass_card_no = #{item.ass_card_no}
			AND unpay_money > 0
			</where>  			
		</foreach>
	</update>
	
	<update id="updateBatchByChange" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_resource_General  set 
			price = nvl(#{item.price},0)
			,
			cur_money = nvl(#{item.price},0) - nvl(depre_money,0)
			,
			unpay_money = nvl(unpay_money,0) + nvl(#{item.change_price},0)
			,
			change_price = nvl(change_price,0) + #{item.change_price}
			<where>                     
			AND group_id = #{item.group_id}
			AND hos_id = #{item.hos_id}
			AND copy_code = #{item.copy_code}
			AND ass_card_no = #{item.ass_card_no}
			AND source_id = #{item.source_id}
			</where>  			
		</foreach>
	</update>
	
	<update id="updateBatchByDepre" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_resource_General  set 
			depre_money = #{item.new_depre}
			,
			cur_money = nvl(price,0) - #{item.new_depre}
			,
			change_depre = nvl(change_depre,0) + #{item.change_depre}
			<where>                     
			AND group_id = #{item.group_id}
			AND hos_id = #{item.hos_id}
			AND copy_code = #{item.copy_code}
			AND ass_card_no = #{item.ass_card_no}
			AND source_id = #{item.source_id}
			</where>  			
		</foreach>
	</update>
	
	<insert id="addBatchByChange" parameterType="java.util.List" >
	
		INSERT INTO ASS_RESOURCE_General (
		group_id
		,
		hos_id
		,
		copy_code
		,
		ass_card_no
		,
		source_id
		,
		price
		,
		depre_money
		,
		cur_money
		,
		fore_money
		,
		pay_money
		,
		unpay_money
		,
		manage_depre_money
		,
		change_price
		) select  t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
			#{item.group_id}
			,
			#{item.hos_id}
			,
			#{item.copy_code}
			,
			#{item.ass_card_no}
			,
			to_number(#{item.source_id})
			,
			nvl(#{item.price},0)
			,
			0 depre_money
			,
			nvl(#{item.price},0)
			,
			0 fore_money
			,
			0 pay_money
			,
			nvl(#{item.change_price},0) unpay_money
			,
			0 manage_depre_money
			,
			nvl(#{item.change_price},0) change_price
		    from dual
		</foreach>
		)t
	</insert>
	
	<update id="updateBatchByPay" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_resource_General  set 
			pay_money = nvl(pay_money,0) + nvl(#{item.pay_money},0)
			,
			unpay_money = price - (nvl(#{item.pay_money},0) + nvl(pay_money,0))
			<where>                     
			AND group_id = #{item.group_id}
			AND hos_id = #{item.hos_id}
			AND copy_code = #{item.copy_code}
			AND ass_card_no = #{item.ass_card_no}
			AND source_id = #{item.source_id}
			</where>  			
		</foreach>
	</update>
	
	<update id="update" parameterType="java.util.Map">
	
		UPDATE ass_resource_General 
		<trim prefix="SET"  suffixOverrides=","> 
		<if test="price != null and price != ''">
		price = #{price}
		,
		</if>
		<if test="depre_money != null and depre_money != ''">
		depre_money = #{depre_money}
		,
		</if>
		<if test="cur_money != null and cur_money != ''">
		cur_money = #{cur_money}
		,
		</if>
		<if test="fore_money != null and fore_money != ''">
		fore_money = #{fore_money}
		,
		</if>
		<if test="pay_money != null and pay_money != ''">
		pay_money = #{pay_money}
		,
		</if>
		<if test="unpay_money != null and unpay_money != ''">
		unpay_money = #{unpay_money}
		,
		</if>
		<if test="manage_depre_money != null and manage_depre_money != ''">
		manage_depre_money = #{manage_depre_money}
		,
		</if>
		</trim>
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code}
		</if>
		<if test="ass_card_no != null and ass_card_no != ''">
		AND ass_card_no = #{ass_card_no}
		</if>
		<if test="source_id != null and source_id != ''">
		AND source_id = #{source_id}
		</if>
		</where>  
	</update>
	<update id="updateBatch" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ass_resource_General 
			<trim prefix="SET"  suffixOverrides=","> 
			<if test="item.price != null and item.price != ''">
			price = #{item.price}
			,
			</if>
			<if test="item.depre_money != null and item.depre_money != ''">
			depre_money = #{item.depre_money}
			,
			</if>
			<if test="item.cur_money != null and item.cur_money != ''">
			cur_money = #{item.cur_money}
			,
			</if>
			<if test="item.fore_money != null and item.fore_money != ''">
			fore_money = #{item.fore_money}
			,
			</if>
			<if test="item.pay_money != null and item.pay_money != ''">
			pay_money = #{item.pay_money}
			,
			</if>
			<if test="item.unpay_money != null and item.unpay_money != ''">
			unpay_money = #{item.unpay_money}
			,
			</if>
			<if test="item.manage_depre_money != null and item.manage_depre_money != ''">
			manage_depre_money = #{item.manage_depre_money}
			,
			</if>
			</trim>
			<where>                     
			<if test="item.group_id != null and item.group_id != ''">
			AND group_id = #{item.group_id}
			</if>  
			<if test="item.hos_id != null and item.hos_id != ''">
			AND hos_id = #{item.hos_id}
			</if>  
			<if test="item.copy_code != null and item.copy_code != ''">
			AND copy_code = #{item.copy_code}
			</if>  
			<if test="item.ass_card_no != null and item.ass_card_no != ''">
			AND ass_card_no = #{item.ass_card_no}
			</if>  
			<if test="item.source_id != null and item.source_id != ''">
			AND source_id = #{item.source_id}
			</if>  
			</where>  			
		</foreach>
	</update>
	
	<delete id="delete" parameterType="java.util.Map">
	
		DELETE FROM ass_resource_General 
		<where>                     
		AND group_id = #{group_id}
		AND hos_id = #{hos_id}
		AND copy_code = #{copy_code}
		AND ass_card_no = #{ass_card_no}
		</where>  
	</delete>
	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM ass_resource_General 
		<where>
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				group_id = #{item.group_id}
				AND hos_id = #{item.hos_id}
				AND copy_code = #{item.copy_code}
				AND ass_card_no = #{item.ass_card_no}
				<if test="item.source_id != null and item.source_id != ''">
				AND source_id = #{item.source_id}
				</if>
			</foreach>
	    </where>  
	</delete>
	<select id="query" parameterType="java.util.Map" resultMap="assResourceGeneral" >
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.ass_card_no,
			a.source_id,
			b.source_code||' '||b.source_name source_name,
			a.price,
			a.depre_money,
			a.cur_money,
			a.fore_money,
			a.pay_money,
			a.unpay_money,
			a.manage_depre_money
		FROM ASS_RESOURCE_General a
		left join hos_source b on
		a.group_id = b.group_id
		and a.hos_id = b.hos_id
		and a.source_id = b.source_id
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND a.group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND a.hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND a.copy_code = #{copy_code}
		</if>
		<if test="ass_card_no != null and ass_card_no != ''">
		AND a.ass_card_no = #{ass_card_no}
		</if>
		<if test="source_id != null and source_id != ''">
		AND a.source_id = #{source_id}
		</if>
		<if test="price != null and price != ''">
		AND a.price = #{price}
		</if>
		<if test="depre_money != null and depre_money != ''">
		AND a.depre_money = #{depre_money}
		</if>
		<if test="cur_money != null and cur_money != ''">
		AND a.cur_money = #{cur_money}
		</if>
		<if test="fore_money != null and fore_money != ''">
		AND a.fore_money = #{fore_money}
		</if>
		</where>   
		order by a.source_id asc
	</select>
	<select id="queryByCode" resultMap="assResourceGeneral"  parameterType="java.util.Map" >
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.ass_card_no,
			a.source_id,
			b.source_code||' '||b.source_name source_name,
			a.price,
			a.depre_money,
			a.cur_money,
			a.fore_money,
			a.pay_money,
			a.unpay_money,
			a.manage_depre_money
		FROM ASS_RESOURCE_General a
		left join hos_source b on
		a.group_id = b.group_id
		and a.hos_id = b.hos_id
		and a.source_id = b.source_id
		WHERE 
		a.group_id = #{group_id}   and 
		a.hos_id = #{hos_id}   and 
		a.copy_code = #{copy_code}   and 
		a.ass_card_no = #{ass_card_no}   and 
		a.source_id = #{source_id} 
	
	</select>
	
	<select id="queryByAssCardNo" resultMap="assResourceGeneral"  parameterType="java.util.Map" >
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.ass_card_no,
			a.source_id,
			b.source_code||' '||b.source_name source_name,
			a.price,
			a.depre_money,
			a.cur_money,
			a.fore_money,
			a.pay_money,
			a.unpay_money,
			a.manage_depre_money
		FROM ASS_RESOURCE_General a
		left join hos_source b on
		a.group_id = b.group_id
		and a.hos_id = b.hos_id
		and a.source_id = b.source_id
		WHERE 
		a.group_id = #{group_id}   and 
		a.hos_id = #{hos_id}   and 
		a.copy_code = #{copy_code}   and 
		a.ass_card_no = #{ass_card_no}
	</select>
	
	
	<select id="queryByAssCardNoMap" resultMap="assResourceGeneralMap"  parameterType="java.util.Map" >
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.ass_card_no,
			a.source_id,
			b.source_code||' '||b.source_name source_name,
			a.price,
			a.depre_money,
			a.cur_money,
			a.fore_money,
			a.pay_money,
			a.unpay_money,
			a.manage_depre_money
		FROM ASS_RESOURCE_General a
		left join hos_source b on
		a.group_id = b.group_id
		and a.hos_id = b.hos_id
		and a.source_id = b.source_id
		WHERE 
		a.group_id = #{group_id}   and 
		a.hos_id = #{hos_id}   and 
		a.copy_code = #{copy_code}   and 
		a.ass_card_no = #{ass_card_no}
	</select>
	
	
	<select id="queryByAssCardIn" resultMap="assResourceGeneralMap"  parameterType="java.util.Map" >
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.source_id,
			b.ven_id,
			b.ven_no,
			b.ass_id,
			sum(a.price) price,
			sum(a.depre_money) depre_money,
			sum(a.cur_money) cur_money,
			sum(a.fore_money) fore_money,
			sum(a.pay_money) pay_money,
			sum(a.unpay_money) unpay_money,
			sum(a.manage_depre_money) manage_depre_money
		FROM ass_resource_General a
		left join ass_card_General b on
		a.group_id = b.group_id
		and a.hos_id = b.hos_id
		and a.copy_code = b.copy_code
		and a.ass_card_no = b.ass_card_no
		WHERE 
		a.group_id = #{group_id}   and 
		a.hos_id = #{hos_id}   and 
		a.copy_code = #{copy_code}   and 
		a.ass_card_no in (${ass_card_nos})
		group by a.group_id,a.hos_id,a.copy_code,a.source_id,b.ven_id,b.ven_no,b.ass_id
	</select>
	
	<select id="queryByUniqueness" resultMap="assResourceGeneral"  parameterType="java.util.Map" >
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.ass_card_no,
			a.source_id,
			b.source_code||' '||b.source_name source_name,
			a.price,
			a.depre_money,
			a.cur_money,
			a.fore_money,
			a.pay_money,
			a.unpay_money,
			a.manage_depre_money
		FROM ASS_RESOURCE_General a
		left join hos_source b on
		a.group_id = b.group_id
		and a.hos_id = b.hos_id
		and a.source_id = b.source_id 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND a.group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND a.hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND a.copy_code = #{copy_code}
		</if>
		<if test="ass_card_no != null and ass_card_no != ''">
		AND a.ass_card_no = #{ass_card_no}
		</if>
		<if test="source_id != null and source_id != ''">
		AND a.source_id = #{source_id}
		</if>
		<if test="price != null and price != ''">
		AND a.price = #{price}
		</if>
		<if test="depre_money != null and depre_money != ''">
		AND a.depre_money = #{depre_money}
		</if>
		<if test="cur_money != null and cur_money != ''">
		AND a.cur_money = #{cur_money}
		</if>
		<if test="fore_money != null and fore_money != ''">
		AND a.fore_money = #{fore_money}
		</if>
		</where>   
		order by a.group_id asc
	</select>
	<select id="queryExists" resultMap="assResourceGeneral"  parameterType="java.util.Map" >
	
		SELECT 
		group_id,
		hos_id,
		copy_code,
		ass_card_no,
		source_id,
		price,
		depre_money,
		cur_money,
		fore_money,
		manage_depre_money
		FROM ASS_RESOURCE_General 
		<where>                     
		<if test="group_id != null and group_id != ''">
		AND group_id = #{group_id}
		</if>
		<if test="hos_id != null and hos_id != ''">
		AND hos_id = #{hos_id}
		</if>
		<if test="copy_code != null and copy_code != ''">
		AND copy_code = #{copy_code}
		</if>
		<if test="ass_card_no != null and ass_card_no != ''">
		AND ass_card_no = #{ass_card_no}
		</if>
		<if test="source_id != null and source_id != ''">
		AND source_id = #{source_id}
		</if>
		<if test="price != null and price != ''">
		AND price = #{price}
		</if>
		<if test="depre_money != null and depre_money != ''">
		AND depre_money = #{depre_money}
		</if>
		<if test="cur_money != null and cur_money != ''">
		AND cur_money = #{cur_money}
		</if>
		<if test="fore_money != null and fore_money != ''">
		AND fore_money = #{fore_money}
		</if>
		</where>   
		order by group_id asc
	</select>
</mapper>

