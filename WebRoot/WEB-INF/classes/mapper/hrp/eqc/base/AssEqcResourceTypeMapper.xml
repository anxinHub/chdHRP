<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.eqc.dao.base.AssEqcResourceTypeMapper">
	
	<resultMap id="assEqcResourceType" type="java.util.Map">
	<result property="group_id" column="group_id"/>
	<result property="hos_id" column="hos_id"/>
	<result property="copy_code" column="copy_code"/>
	<result property="oresource_code" column="oresource_code"/>
	<result property="oresource_desc" column="oresource_desc"/>
	<result property="price_type" column="price_type"/>
	<result property="price_type_name" column="price_type_name"/>
	<result property="price" column="price"/>
	<result property="unit_code" column="unit_code"/>
	<result property="unit_name" column="unit_name"/>
	<result property="remark" column="remark"/>
	<result property="invalid_flag" column="invalid_flag"/>
	</resultMap>
	
	<insert id="add" useGeneratedKeys="true" >
	
		INSERT INTO ASS_OTHER_RESOURCE_TYPE (
			group_id
			,
			hos_id
			,
			copy_code
			,
			oresource_code
			,
			oresource_desc
			,
			price_type
			,
			price
			,
			unit_code
			,
			remark
			,
			invalid_flag
		
		) VALUES (
			#{group_id}		,
			#{hos_id}		,
			#{copy_code}		,
			#{oresource_code}		,
			#{oresource_desc}		,
			#{price_type}		,
			#{price}		,
			#{unit_code}		,
			#{remark}		,
			#{invalid_flag}		
		)
	
	</insert>
	<insert id="addBatch" parameterType="java.util.List" >
	
		INSERT INTO ASS_OTHER_RESOURCE_TYPE (
			group_id
			,
			hos_id
			,
			copy_code
			,
			oresource_code
			,
			oresource_desc
			,
			price_type
			,
			price
			,
			unit_code
			,
			remark
			,
			invalid_flag
			
		) select  t.* from(
		<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
				#{item.group_id}			,
				#{item.hos_id}			,
				#{item.copy_code}			,
				#{item.oresource_code}			,
				#{item.oresource_desc}			,
				#{item.price_type}  ,
				#{item.price}			,
				#{item.unit_code}			,
				#{item.remark}			,
				#{item.invalid_flag}			
			from dual
		</foreach>
		)t
	</insert>
	
	<update id="update" parameterType="java.util.Map">
	
		UPDATE ASS_OTHER_RESOURCE_TYPE SET
			oresource_desc = #{oresource_desc}
			,
			price_type = #{price_type}
			,
			price = #{price}
			,
			unit_code = #{unit_code}
			,
			remark = #{remark}
			,
			invalid_flag = #{invalid_flag}
		
		WHERE 
			group_id = #{group_id}   
			and hos_id = #{hos_id}   
			and copy_code = #{copy_code}   
			and oresource_code = #{oresource_code}
		
	
	</update>
	<update id="updateBatch" parameterType="java.util.List">
	
		<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";" >
			UPDATE ASS_OTHER_RESOURCE_TYPE SET
				oresource_desc = #{item.oresource_desc}
				,
				price_type = #{item.price_type}
				,
				price = #{item.price}
				,
				unit_code = #{item.unit_code}
				,
				remark = #{item.remark}
				,
				invalid_flag = #{item.invalid_flag}
			
			WHERE 
				group_id = #{item.group_id}   
			and hos_id = #{item.hos_id}   
			and copy_code = #{item.copy_code}   
			and oresource_code = #{item.oresource_code} 
			
		</foreach>
	</update>
	
	<delete id="delete" parameterType="java.util.Map">
	
		DELETE FROM ASS_OTHER_RESOURCE_TYPE 
		WHERE
			group_id = #{group_id}   
			and hos_id = #{hos_id}   
			and copy_code = #{copy_code}   
			and oresource_code = #{oresource_code}
	
	</delete>
	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM ASS_OTHER_RESOURCE_TYPE WHERE
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				group_id = #{item.group_id}   
			and hos_id = #{item.hos_id}   
			and copy_code = #{item.copy_code}   
			and oresource_code = #{item.oresource_code} 
				
			</foreach>
	
	</delete>
	<select id="query" parameterType="java.util.Map" resultMap="assEqcResourceType" >
	
		SELECT 
			a.group_id,
			a.hos_id,
			a.copy_code,
			a.oresource_code,
			a.oresource_desc,
			a.price_type,
			case a.price_type when '1' then '固定单价' else '无固定单价' end price_type_name ,
			a.price,
			a.unit_code,
			b.unit_name ,
			a.remark,
			a.invalid_flag
		FROM ASS_OTHER_RESOURCE_TYPE a
		left join hos_unit b
			on a.group_id = b.group_id
			and a.hos_id = b.hos_id
			and a.unit_code = b.unit_code
			and b.is_stop = 0
		where                    
			a.group_id = #{group_id}
			AND a.hos_id = #{hos_id}
			AND a.copy_code = #{copy_code}
			<if test="oresource_code != null and oresource_code != ''">
			AND (a.oresource_code like #{oresource_code} || '%' or
				a.oresource_desc like  '%' || #{oresource_code} || '%')
			</if>
			<if test="price != null and price != ''">
			AND a.price = #{price}
			</if>
			<if test="price_type != null and price_type != ''">
			AND a.price_type = #{price_type}
			</if>
			<if test="unit_code != null and unit_code != ''">
			AND a.unit_code = #{unit_code}
			</if>
			<if test="remark != null and remark != ''">
			AND a.remark = #{remark}
			</if>
		order by a.oresource_code asc
	</select>
	<select id="queryByCode" resultMap="assEqcResourceType" parameterType="string" >
	
		SELECT 
			group_id,
			hos_id,
			copy_code,
			oresource_code,
			oresource_desc,
			price,
			unit_code,
			remark,
			invalid_flag
		FROM ASS_OTHER_RESOURCE_TYPE 
		WHERE 
			group_id = #{group_id}   
			and hos_id = #{hos_id}   
			and copy_code = #{copy_code}   
			and oresource_code = #{oresource_code} 
	</select>
	
	<!-- 查询添加数据是否已存在 -->
	<select id="queryDataExist" resultType="java.lang.String">
		<foreach collection="list" item="item" index="index" separator=" union all " >
			SELECT to_number(${item.rowNo})+ 1 rowNo
			FROM ASS_OTHER_RESOURCE_TYPE
			where
				group_id = #{item.group_id,jdbcType=INTEGER}
				AND hos_id = #{item.hos_id,jdbcType=INTEGER}
				AND copy_code = #{item.copy_code,jdbcType=VARCHAR}
				AND oresource_code = #{item.oresource_code,jdbcType=VARCHAR}
		</foreach>
	</select>
</mapper>

