<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.med.dao.info.basic.MedFacAttrMapper">
	<!-- com.chd.hrp.med.dao.info.basic.MedFacAttrMapper.assFacAttr -->
	<resultMap id="medFacAttr" type="com.chd.hrp.ass.entity.dict.AssFacAttr">
		<result property="group_id" column="group_id"/>
		<result property="hos_id" column="hos_id"/>
		<result property="fac_id" column="fac_id"/>
		<result property="fac_code" column="fac_code"/>
		<result property="fac_name" column="fac_name"/>
		<result property="mod_code" column="mod_code"/>
		<result property="mod_name" column="mod_name"/>
		<result property="spell_code" column="spell_code"/>
		<result property="wbx_code" column="wbx_code"/>
		<result property="fac_sort" column="fac_sort"/>
		<result property="type_code" column="type_code"/>
		<result property="type_name" column="type_name"/>
		<result property="bank_name" column="bank_name"/>
		<result property="bank_number" column="bank_number"/>
		<result property="legal" column="legal"/>
		<result property="regis_no" column="regis_no"/>
		<result property="phone" column="phone"/>
		<result property="mobile" column="mobile"/>
		<result property="contact" column="contact"/>
		<result property="fax" column="fax"/>
		<result property="email" column="email"/>
		<result property="region" column="region"/>
		<result property="zip_code" column="zip_code"/>
		<result property="address" column="address"/>
		<result property="note" column="note"/>
		<result property="ven_dev_date" column="ven_dev_date"/>
		<result property="end_date" column="end_date"/>
		<result property="is_stop" column="is_stop"/>
		<result property="is_mat" column="is_mat"/>
		<result property="is_ass" column="is_ass"/>
		<result property="is_med" column="is_med"/>
		<result property="is_sup" column="is_sup"/>
	</resultMap>
	
	<insert id="addMedFacAttr" useGeneratedKeys="true" >
	
		INSERT INTO ASS_FAC_ATTR (
			group_id		,
			hos_id		,
			fac_id		,
			bank_name		,
			bank_number		,
			legal		,
			regis_no		,
			phone		,
			mobile		,
			contact		,
			fax		,
			email		,
			region		,
			zip_code		,
			address		,
			note,
			is_stop
		) VALUES (
			#{group_id,jdbcType=INTEGER}		,
			#{hos_id,jdbcType=INTEGER}		,
			#{fac_id,jdbcType=INTEGER}		,
			#{bank_name,jdbcType=VARCHAR}		,
			#{bank_number,jdbcType=VARCHAR}		,
			#{legal,jdbcType=VARCHAR}		,
			#{regis_no,jdbcType=VARCHAR}		,
			#{phone,jdbcType=VARCHAR}		,
			#{mobile,jdbcType=VARCHAR}		,
			#{contact,jdbcType=VARCHAR}		,
			#{fax,jdbcType=VARCHAR}		,
			#{email,jdbcType=VARCHAR}		,
			#{region,jdbcType=VARCHAR}		,
			#{zip_code,jdbcType=VARCHAR}		,
			#{address,jdbcType=VARCHAR}		,
			#{note,jdbcType=VARCHAR},
			#{is_stop,jdbcType=INTEGER}
		)
	</insert>
	
	<insert id="addBatchMedFacAttr" parameterType="java.util.List" >
	
		INSERT INTO ASS_FAC_ATTR (
			group_id		,
			hos_id		,
			fac_id		,
			bank_name		,
			bank_number		,
			legal		,
			regis_no		,
			phone		,
			mobile		,
			contact		,
			fax		,
			email		,
			region		,
			zip_code		,
			address		,
			note,
			is_stop		
		) select ASS_FAC_ATTR_SEQ.nextval , t.* from(
			<foreach collection="list" item="item" index="index" separator=" union all " >
			select 		
				#{item.group_id}			,
				#{item.hos_id}			,
				#{item.fac_id}			,
				#{item.bank_name}			,
				#{item.bank_number}			,
				#{item.legal}			,
				#{item.regis_no}			,
				#{item.phone}			,
				#{item.mobile}			,
				#{item.contact}			,
				#{item.fax}			,
				#{item.email}			,
				#{item.region}			,
				#{item.zip_code}			,
				#{item.address}			,
				#{item.note}	,
				#{item.is_stop}
			</foreach>
			)t
	</insert>
	
	<insert id="init" parameterType="java.util.List" >
		INSERT INTO ASS_FAC_ATTR (
			group_id		,
			hos_id		,
			fac_id		,
			note		
		) select t.group_id,t.hos_id,t.fac_id,t.note from(
		     select group_id,hos_id,fac_id,note
		     from HOS_FAC
		     where fac_id not in(select fac_id from ASS_FAC_ATTR)
		)t
	</insert>
	
	<update id="updateMedFacAttr" parameterType="java.util.Map">
		UPDATE ass_fac_attr SET
			legal = #{legal,jdbcType=VARCHAR},
			regis_no = #{regis_no,jdbcType=VARCHAR}	,
			phone = #{phone,jdbcType=VARCHAR},
			mobile = #{mobile,jdbcType=VARCHAR}	,
			contact = #{contact,jdbcType=VARCHAR},
			fax = #{fax,jdbcType=VARCHAR},
			email = #{email,jdbcType=VARCHAR},
			region = #{region,jdbcType=VARCHAR}	,
			zip_code = #{zip_code,jdbcType=VARCHAR}	,
			address = #{address,jdbcType=VARCHAR}	,
			note = #{note,jdbcType=VARCHAR}	,
			is_stop = #{is_stop,jdbcType=INTEGER}	
		WHERE  group_id = #{group_id,jdbcType=INTEGER}
			and hos_id = #{hos_id,jdbcType=INTEGER}
		 	and fac_id = #{fac_id,jdbcType=INTEGER}
	</update>
	
	<update id="updateBatchMedFacAttr" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open="begin" close="end;" separator=";" >
			UPDATE ass_fac_attr SET
				legal = #{item.legal}			,
				regis_no = #{item.regis_no}			,
				phone = #{item.phone}			,
				mobile = #{item.mobile}			,
				contact = #{item.contact}			,
				fax = #{item.fax}			,
				email = #{item.email}			,
				region = #{item.region}			,
				zip_code = #{item.zip_code}			,
				address = #{item.address}			,
				note = #{item.note}			
			WHERE group_id = #{item.group_id}
				and hos_id = #{item.hos_id}
			 	and fac_id = #{item.fac_id}
		</foreach>
	</update>
	
	<delete id="deleteMedFacAttr" parameterType="java.util.Map">
		DELETE FROM ass_fac_attr 
		WHERE group_id = #{group_id}   
			and hos_id = #{hos_id}   
			and fac_id = #{fac_id} 
	</delete>
	
	<delete id="deleteBatchMedFacAttr" parameterType="java.util.List">
		DELETE FROM ass_fac_attr WHERE
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				group_id = #{item.group_id}
				and hos_id = #{item.hos_id}
				and fac_id = #{item.fac_id}
			</foreach>
	</delete>
	
	<select id="queryMedFacAttr" parameterType="java.util.Map" resultMap="medFacAttr" >
	
		SELECT
			h.group_id,
			h.hos_id,
			h.fac_id,
	        h.fac_name,
	        h.fac_code,
	        hft.type_name,
	        a.bank_name,
	        a.bank_number,
	        a.legal,
	        a.regis_no,
	        a.phone,
	        a.mobile,
	        a.contact,
	        a.fax,
	        a.email,
	        a.region,
	        a.zip_code,
	        a.address,
	        a.note,
	        h.is_stop,
	        h.is_mat,h.is_ass,h.is_med,h.is_sup
        FROM hos_fac_dict h
    	left join ASS_FAC_ATTR a
    	on 
    		h.group_id=a.group_id 
    		and h.hos_id=a.hos_id 
    		and h.fac_id=a.fac_id 
        left join hos_fac_type hft
    	on
         	h.group_id = hft.group_id and h.hos_id = hft.hos_id
         	and h.type_code = hft.type_code and hft.is_stop = 0 
		<where>  
		 	h.is_stop = 0                    
			<if test="group_id != null and group_id != ''">
			AND h.group_id = #{group_id}
			</if>
			<if test="hos_id != null and hos_id != ''">
			AND h.hos_id = #{hos_id}
			</if>
			<if test="fac_id != null and fac_id != ''">
			AND h.fac_id = #{fac_id}
			</if>
			<if test="mod_code != null and mod_code != ''">
			AND hfm.mod_code = #{mod_code}
			</if>
			<!-- 页面查询 条件匹配 -->
			<if test="fac_message != null and fac_message != ''">
				AND( h.fac_code like '${fac_message}%' 
					 or upper(h.fac_name) like '%${fac_message}%'
					 or upper(h.spell_code) like '%${fac_message}%'
					 or upper(h.wbx_code) like '%${fac_message}%'
					 or lower(h.fac_name) like '%${fac_message}%'
					 or lower(h.spell_code) like '%${fac_message}%'
					 or lower(h.wbx_code) like '%${fac_message}%'
				)	
			</if>
			<if test="type_code == '01' or type_code =='02'">
					AND h.type_code like '${type_code}%'
			</if>
			<if test="type_code != null and type_code != '' and type_code != '01' and type_code !='02'">
					AND h.type_code = #{type_code}
			</if>
			<if test="is_ass != null and is_ass != ''">
					AND h.is_ass = #{is_ass}
				</if>
				<if test="is_mat != null and is_mat != ''">
					AND h.is_mat = #{is_mat}
				</if>
				<if test="is_med != null and is_med != ''">
					AND h.is_med = #{is_med}
				</if>
			<!-- <if test="fac_type != null and fac_type != '' ">
				AND (hft.type_code like '%${fac_type}%' or hft.type_name like '%${fac_type}%')
			</if> -->
			<!--  添加用户数据权限 
				and  exists (select 1 from v_user_data_perm b where a.group_id=b.group_id and a.hos_id=b.hos_id and a.fac_id=b.perm_code 
	             and user_id=#{user_id}
	              and b.table_code='HOS_FAC_DICT'
	             ) -->
		</where>   
		order by a.fac_id ASC
	</select>
	
	<select id="queryMedFacAttrByCode" resultMap="medFacAttr" parameterType="java.util.Map" >
	
		SELECT h.group_id,
	       h.hos_id,
	       h.fac_id,
	       h.fac_name,
	       h.fac_code,
	
	       h.spell_code,
	       h.wbx_code,
	       h.fac_sort,
	       h.type_code,
	       hft.type_name,
	       a.bank_name,
	       a.bank_number,
	       a.legal,
	       a.regis_no,
	       a.phone,
	       a.mobile,
	       a.contact,
	       a.fax,
	       a.email,
	       a.region,
	       a.zip_code,
	       a.address,
	       a.note,
	       h.is_stop,
	        h.is_mat,
	       h.is_ass,
	       h.is_med,
	       h.is_sup
	  FROM hos_fac_dict h
	  left JOIN ASS_FAC_ATTR a
	    ON h.fac_id = a.fac_id
	   AND h.group_id = a.group_id
	   AND h.hos_id = a.hos_id
	   
	  LEFT JOIN hos_fac_type hft
	    ON h.group_id = hft.group_id
	   AND h.hos_id = hft.hos_id
	   AND h.type_code = hft.type_code
		WHERE 
		h.is_stop = 0 AND 
		h.group_id = #{group_id}   and 
		h.hos_id = #{hos_id}   and 
		h.fac_id = #{fac_id}  
	
	</select>
	
	<select id="queryFacIdByCode" resultType="java.lang.Long" parameterType="java.util.Map" >
		SELECT fac_id from HOS_FAC_DICT 
		WHERE 
		    is_stop=0 and
		    group_id = #{group_id}   
			and hos_id = #{hos_id}   
			and fac_code = #{fac_code} 
	</select>
	
	<!-- 添加 生产厂商 与模块的对应关系 -->
	<insert id="addHosFacMod" useGeneratedKeys="true" >
		INSERT INTO HOS_FAC_MOD (
			group_id			,
			hos_id			,
			fac_id			,
			mod_code
		) VALUES (
			#{group_id,jdbcType=INTEGER}		,
			#{hos_id,jdbcType=INTEGER}		,
			#{fac_id,jdbcType=INTEGER}		,
			#{mod_code,jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- 更新 生产厂商  与模块的对应关系 (专用Sql mms  勿动)-->
	<update id="updateHosFacMod" parameterType="java.util.Map" >
		UPDATE HOS_FAC_MOD SET
			fac_id = #{fac_id,jdbcType=INTEGER}		,
			mod_code = #{mod_code,jdbcType=VARCHAR}
		WHERE group_id = #{group_id,jdbcType=INTEGER}
			and hos_id = #{hos_id,jdbcType=INTEGER}
		 	and fac_id = #{fac_id,jdbcType=INTEGER}
		 	and mod_code = #{mod_codeOld,jdbcType=VARCHAR}
	</update>
	
	<!-- 查询生产厂商 与模块的对应关系 是否存在-->
	<select  id="queryHosFacModExist" resultType="java.lang.Integer" parameterType="java.util.Map" >
		select count(fac_id) from HOS_FAC_MOD 
		where group_id = #{group_id,jdbcType=INTEGER}		
			and hos_id = #{hos_id,jdbcType=INTEGER}		
			and fac_id = #{fac_id,jdbcType=INTEGER}		
			and mod_code = #{mod_code,jdbcType=VARCHAR}
	</select>
	
	<!-- 删除生产厂商  与模块的对应关系 -->
	<delete id="deleteBatchHosFacMod" parameterType="java.util.List">
		DELETE FROM HOS_FAC_MOD WHERE
			<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
				group_id = #{item.group_id}
				and hos_id = #{item.hos_id}
				and fac_id = #{item.fac_id}
				and mod_code = #{item.mod_code}
			</foreach> 
	</delete>
	
	<!-- 根据生产厂商 类别编码 查询该供应商类别是否存在  -->
	<select  id="queryFacTypeExist" resultType="java.lang.Integer" parameterType="java.util.Map" >
		select count(type_code) from HOS_FAC_TYPE 
		where
			group_id = #{group_id,jdbcType=INTEGER}		
			and hos_id = #{hos_id,jdbcType=INTEGER}		
			and type_code = #{type_code,jdbcType=VARCHAR}
	</select>
	
	<!-- 根据生产厂商ID 查询该供应商附属表是否存在  -->
	<select  id="querySupAttrExist" resultType="java.lang.Integer" parameterType="java.util.Map" >
		select count(1) from ASS_FAC_ATTR 
		where
			group_id = #{group_id,jdbcType=INTEGER}		
			and hos_id = #{hos_id,jdbcType=INTEGER}		
			and fac_id = #{fac_id,jdbcType=INTEGER}
	</select>
	
	<!-- 根据生产厂商ID 查询该供应商附属表是否存在  -->
	<select  id="queryFacAttrExist" resultType="java.lang.Integer" parameterType="java.util.Map" >
		select count(1) from ASS_FAC_ATTR 
		where
			group_id = #{group_id,jdbcType=INTEGER}		
			and hos_id = #{hos_id,jdbcType=INTEGER}		
			and fac_id = #{fac_id,jdbcType=INTEGER}
	</select>
	
	<!-- 根据生产厂商ID 查询该供应商附属表是否存在  -->
	<select  id="queryFacExists" resultType="java.lang.Integer" parameterType="java.util.Map" >
		select count(1) from hos_fac 
		where
			group_id = #{group_id,jdbcType=INTEGER}		
			and hos_id = #{hos_id,jdbcType=INTEGER}		
			and fac_name = #{fac_name,jdbcType=VARCHAR}
	</select>
	
	<!-- 查询 所属系统模块编码是否存在  -->
	<select  id="queryModExist" resultType="java.lang.Integer" parameterType="java.util.Map" >
		select count(1) from SYS_MOD 
		where
			 mod_code = #{mod_code,jdbcType=VARCHAR}
	</select>
</mapper>

