<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.acc.dao.wage.AccWageEmpMapper">
   
	<resultMap id="accWageEmp" type="com.chd.hrp.acc.entity.AccWageEmp">
        <result property="group_id" column="group_id"/>
        <result property="hos_id" column="hos_id"/>
        <result property="copy_code" column="copy_code"/>
        <result property="wage_code" column="wage_code"/>
        <result property="wage_name" column="wage_name"/>
        <result property="emp_id" column="emp_id"/>
        <result property="emp_no" column="emp_no"/>
         <result property="emp_code" column="emp_code"/>
        <result property="emp_name" column="emp_name"/>
        <result property="kind_code" column="kind_code"/>
        <result property="kind_name" column="kind_name"/>
        <result property="dept_id" column="dept_id"/>
        <result property="dept_code" column="dept_code"/>
        <result property="dept_name" column="dept_name"/>
        <result property="note" column="note"/>
	</resultMap>
	
    <insert id="addAccWageEmp" useGeneratedKeys="true" >
    
        INSERT INTO ACC_WAGE_EMP (
                   
                    group_id
			 ,
                    hos_id
			 ,
                    copy_code
			 ,
                    wage_code
			 ,
                    emp_id
			 ,
                    emp_no
			 ,
                 
                    note
			 
        ) VALUES (

		#{group_id}			 ,
		
		#{hos_id}			 ,
		
		#{copy_code}			 ,
		
		#{wage_code}			 ,
		
		#{emp_id}			 ,
		
		#{emp_no}			 ,
		
		#{note}			
 
        )
    
    </insert>
	<insert id="addBatchAccWageEmp" parameterType="java.util.List" >
    
        INSERT INTO ACC_WAGE_EMP (
        
                    group_id
			 ,
                    hos_id
			 ,
                    copy_code
			 ,
                    wage_code
			 ,
                    emp_id
			 ,
                    emp_no
			 ,
                 
                    note
			 
        ) 
		 <foreach collection="list" item="item" index="index" separator=" union all " >
        select
         		
		#{item.group_id}			 ,
		
		#{item.hos_id}			 ,
		
		#{item.copy_code}			 ,
		
		#{item.wage_code}			 ,
		
		#{item.emp_id}			 ,
		
		#{item.emp_no}			 ,
		
		#{item.note}	
		
		 from dual 
		</foreach>
    
    </insert>

	<update id="updateAccWageEmp" parameterType="java.util.Map">
    
        UPDATE ACC_WAGE_EMP SET
        
			 note = #{note}
			 
        WHERE 
        
		 group_id = #{group_id}
			  and 
		 hos_id = #{hos_id}
			  and 
		 copy_code = #{copy_code}
		 	  and 
		 wage_code = #{wage_code}
		      and 
		 emp_id = #{emp_id}
   
	</update>
	<update id="updateBatchAccWageEmp" parameterType="java.util.List">
     
	<foreach collection="list" item="item" index="index" open="begin" close="end;" separator=";" >
        UPDATE ACC_WAGE_EMP SET
			 
			 note = #{note}
			 
			 
        WHERE 
		 wage_code = #{item.wage_code}
			  and 
		 emp_id = #{item.emp_id}
			  and 
		 group_id = #{item.group_id}
			  and 
		 hos_id = #{item.hos_id}
			  and 
		 copy_code = #{item.copy_code}
			 
    </foreach>
	</update>

    <delete id="deleteAccWageEmp" parameterType="java.util.Map">
   
        DELETE FROM ACC_WAGE_EMP 
	     <where>
	     	<if test="wage_code != null and wage_code != ''">
         	wage_code = #{wage_code} AND 
         	</if>
         	<if test="emp_id != null and emp_id != ''">
	          emp_id = #{emp_id} AND
	         </if>
	        group_id = #{group_id}   and 
	        hos_id = #{hos_id}   and 
	        copy_code = #{copy_code} 
	     </where>
   
    </delete>
    
    <delete id="deleteBatchAccWageEmp" parameterType="java.util.List">
        DELETE FROM ACC_WAGE_EMP WHERE
		<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
			<if test="item.wage_code != null and item.wage_code != ''">
				wage_code = #{item.wage_code} AND 
			</if>
			<if test="item.emp_id != null and item.emp_id != ''">
				emp_id = #{item.emp_id} AND
			</if>
			<!-- <if test="item.emp_no!= null and item.emp_no != ''">
				emp_no = #{item.emp_no} AND
			</if> -->
			group_id = #{item.group_id} and 
			hos_id = #{item.hos_id} and 
			copy_code = #{item.copy_code}
		</foreach>
    </delete>
    
    <select id="queryAccWageEmpByCode" resultType="com.chd.hrp.acc.entity.AccWageEmp" parameterType="string" >
	  
        SELECT 
            group_id,
            hos_id,
            copy_code,
            wage_code,
            emp_id,
            emp_no,
            note
		FROM ACC_WAGE_EMP 
	        WHERE 
		        wage_code = #{wage_code}   and 
		        emp_id = #{emp_id}   and 
		        group_id = #{group_id}   and 
		        hos_id = #{hos_id}   and 
		        copy_code = #{copy_code}                                                                       
        
	</select>
	
	<select id="queryAccWageEmpCodeByImp" resultType="com.chd.hrp.acc.entity.AccWageEmp" parameterType="string" >
	  
        SELECT 
            hed.emp_id,
            hed.emp_no
		FROM hos_emp_dict hed
	        WHERE 
		        hed.emp_code = #{emp_code}   and  
		        hed.group_id = #{group_id}   and  
		        hed.hos_id = #{hos_id} and is_stop=0  <!-- and 
		        not exists (
		        select * from ACC_WAGE_EMP awe
				where awe.group_id= hed.group_id and awe.hos_id= hed.hos_id
				and awe.emp_id=hed.emp_id and awe.emp_no=hed.emp_no
				and  awe.copy_code = #{copy_code} and awe.wage_code = #{wage_code}   
		        ) -->
		                                                                            
        
	</select>
	
	<select id="queryAccWageEmp" parameterType="java.util.Map" resultMap="accWageEmp" >
		SELECT t1.group_id,
               t1.hos_id,
               t1.copy_code,
               t1.wage_code,
               t2.emp_id,
               t2.emp_no,
               t2.emp_code,
               t2.emp_name,
               t1.note,
               t3.dept_id,
               t3.dept_no,
               t3.dept_code,
               t3.dept_name
        FROM ACC_WAGE_EMP t1
        left join hos_emp_dict t2
             on t2.group_id = t1.group_id
            and t2.hos_id = t1.hos_id
            and t2.emp_id = t1.emp_id
         left join hos_dept_dict t3
         on t2.dept_id = t3.dept_id
         and t2.dept_no = t3.dept_no
         and t2.group_id = t3.group_id
         and t2.hos_id = t3.hos_id
		<where>      
			    t2.is_stop = 0 and t2.is_disable = 0
			<if test="group_id != null and group_id != ''">
				AND t1.group_id = #{group_id, jdbcType=INTEGER}
			</if>
		    <if test="hos_id != null and hos_id != ''">
                AND t1.hos_id = #{hos_id, jdbcType=INTEGER}
            </if>
		    <if test="copy_code != null and copy_code != ''">
                AND t1.copy_code = #{copy_code, jdbcType=VARCHAR}
            </if>
		    <if test="wage_code != null and wage_code != ''">
                AND t1.wage_code = #{wage_code, jdbcType=VARCHAR}
            </if>
		    <if test="emp_id != null and emp_id != ''">
                AND t1.emp_id = #{emp_id, jdbcType=INTEGER}
            </if>
		    <if test="emp_no != null and emp_no != ''">
                AND t2.emp_no = #{emp_no, jdbcType=INTEGER}
            </if>
            <if test="emp_code != null and emp_code != ''">
            	and (
            		t2.emp_code like '%${emp_code}%' or
            		t2.emp_name like '%${emp_code}%'
            	)
            </if>
        </where>   
		order by t1.wage_code, t2.emp_code asc
    </select>
    
    <select id="queryAccWageAttr" parameterType="java.util.Map" resultMap="accWageEmp" >
      
	       select 
	       hed.group_id,
	       hed.hos_id,
	       hed.emp_code,
	       hed.emp_id,
	       hed.emp_no,
	       hed.emp_name,
	       hdd.dept_id,
	       hdd.dept_name,
	       hek.kind_code,
	       hek.kind_name
		from HOS_EMP_DICT hed left join  ACC_EMP_ATTR aea
		on hed.group_id = aea.group_id and hed.hos_id = aea.hos_id
		and hed.emp_id = aea.emp_id  left join hos_emp_kind hek
		on hed.group_id = hek.group_id and hed.hos_id = hek.hos_id
		and hed.kind_code = hek.kind_code and hek.is_stop = 0  left join hos_dept_dict hdd
		on hed.group_id = hdd.group_id and hed.hos_id = hdd.hos_id
		and hed.dept_id = hdd.dept_id and hed.dept_no = hdd.dept_no and hdd.is_stop = 0
        <where><!-- 根据页面选择是否选择全部，不选择则去掉已在工资套中存在的职工(其他工资套或者当前工资套) -->
           <!-- <if test="check_box != null and check_box != '' and check_box != 'true'"> -->
           	 NOT exists (select emp_id from acc_wage_emp  awe 
            <where>
	            hed.group_id = awe.group_id
	            and hed.hos_id = awe.hos_id and hed.emp_id = awe.emp_id and hed.emp_no = hed.emp_no
            <if test="group_id != null and group_id != ''">
                    AND awe.group_id = #{group_id}
             </if>
	    	<if test="hos_id != null and hos_id != ''">
                  AND awe.hos_id = #{hos_id}
             </if>
             <if test="copy_code != null and copy_code != ''">
                  AND awe.copy_code = #{copy_code}
             </if>
             
             <if test="wage_code != null and wage_code != ''">
                  AND awe.wage_code = #{wage_code}
             </if>
            </where>)    
             	 <!-- and hdd.is_last=1 --> 
				and hed.is_stop = 0      
			    <if test="group_id != null and group_id != ''">
                    AND hed.group_id = #{group_id}
               </if>
			    <if test="hos_id != null and hos_id != ''">
                    AND hed.hos_id = #{hos_id}
               </if>
               <if test="emp_code != null and emp_code != ''">
                and (
				hed.emp_code like '%${emp_code}%' or 
				hed.emp_name like '%${emp_code}%' or
				hed.emp_id like '%${emp_code}%'  or
				hed.spell_code like UPPER('%${emp_code}%') or
				hed.wbx_code like UPPER('%${emp_code}%') 
				)
               	</if>
			    <if test="kind_code != null and kind_code != ''">
                and (
				hek.kind_code =#{kind_code} or
				hek.kind_name =#{kind_code} <!-- or
				hek.spell_code like '%${kind_code}%' or
				hek.wbx_code like '%${kind_code}%'  -->
				)
               </if>
               <if test="dept_code != null and dept_code != ''">
                and hdd.dept_id = #{dept_code}  
               </if>
          <!--  </if>  -->
           <!-- 根据页面选择是否选择全部，选择则显示所有职工 -->
           <!-- <if test="check_box != null and check_box != '' and check_box != 'false'">
           		<if test="group_id != null and group_id != ''">
                    AND hed.group_id = #{group_id}
	             </if>
		    	<if test="hos_id != null and hos_id != ''">
	                  AND hed.hos_id = #{hos_id}
	             </if>
           		<if test="emp_code != null and emp_code != ''">
                    and (
					hed.emp_code like '%${emp_code}%' or
					hed.emp_name like '%${emp_code}%' or
					hed.emp_id like '%${emp_code}%' 
					)
               	</if>
			    <if test="kind_code != null and kind_code != ''">
                    and (
					hek.kind_code like '%${kind_code}%' or
					hek.kind_name like '%${kind_code}%' 
					)
               </if>
               <if test="dept_code != null and dept_code != ''">
                    and (
					hdd.dept_code like '%${dept_code}%' or
					hdd.dept_name like '%${dept_code}%' or
					hdd.dept_id like '%${dept_code}%'
					)
               </if>
           </if> -->
           
        </where>   
				order by hed.emp_code asc
    </select>
    
    <select id="queryAccWageEmpList" parameterType="java.util.Map" resultMap="accWageEmp" >
      
	       select 
	       awe.group_id,
	       awe.hos_id,
	       awe.copy_code,
	       awe.wage_code,
	       awe.emp_id,
	       awe.emp_no,
	       hed.emp_code,
	       hed.emp_name,
	       hek.kind_name,
	       hdd.dept_name 
	       from ACC_WAGE_EMP awe left join hos_emp_dict hed 
	       on awe.group_id = hed.group_id and awe.hos_id = hed.hos_id 
	       and awe.emp_id = hed.emp_id 
	       <if test="emp_history ==1">
                    and awe.emp_no = hed.emp_no
            </if>
	       <if test="emp_history ==0">
                   and  hed.is_stop = 0
            </if>
			left join  hos_emp_kind hek on hed.group_id = hek.group_id 
			and hed.hos_id = hek.hos_id
			and hed.kind_code = hek.kind_code 
			<if test="emp_history ==0">
                   and  hek.is_stop = 0
            </if>
			left join hos_dept_dict hdd on hed.group_id = hdd.group_id
			and hed.hos_id = hdd.hos_id and hed.dept_id = hdd.dept_id 
			<if test="emp_history ==1">
                    and hed.dept_no = hdd.dept_no
            </if>
	       <if test="emp_history ==0">
                   and  hdd.is_stop = 0
            </if>
            <where>        
               <if test="group_id != null and group_id != ''">
                    AND awe.group_id = #{group_id}
               </if>
              
			    <if test="hos_id != null and hos_id != ''">
                    AND awe.hos_id = #{hos_id}
               </if>
               <if test="copy_code != null and copy_code != ''">
                    AND awe.copy_code = #{copy_code}
               </if>
               <if test="wage_code != null and wage_code != ''">
                    AND awe.wage_code = #{wage_code}
               </if>
			    <if test="emp_code != null and emp_code != ''">
                    and (
					hed.emp_code like '%${emp_code}%' or
					hed.emp_name like '%${emp_code}%' or
					<!-- hed.emp_id like '%${emp_code}%' or  -->
					hed.spell_code like '%${emp_code}%' or
					hed.wbx_code like '%${emp_code}%'
					)
               </if>
			    <if test="kind_code != null and kind_code != ''">
                    and (
					hek.kind_code like '${kind_code}%' or
					hek.kind_name like '%${kind_code}%' or
					hek.spell_code like UPPER('%${kind_code}%') or
					hek.wbx_code like UPPER('%${kind_code}%')
					)
               </if>
               <if test="dept_code != null and dept_code != ''">
                    and (
					hdd.dept_code like '${dept_code}%' or
					hdd.dept_name like '%${dept_code}%' or
					<!-- hdd.dept_id like '${dept_code}%' or -->
					hdd.spell_code like '%${dept_code}%' or
					hdd.wbx_code like '%${dept_code}%'
					)
               </if>
        </where>   
				order by hed.emp_code asc
    </select>
	
	<insert id="accExtendOldWageEmpToNew" parameterType="java.util.Map">
		  insert into acc_wage_emp
		  (group_id, hos_id, copy_code, wage_code, emp_id, emp_no, note)
		  select group_id,
		         hos_id,
		         copy_code,
		         #{new_wage_code} as wage_code,
		         emp_id,
		         emp_no,
		         note
		    from acc_wage_emp a
		   where not EXISTS (select 1
		            from acc_wage_emp b
		           where b.group_id=#{group_id} and b.hos_id=#{hos_id}
		          and b.wage_code = #{new_wage_code}
		             and a.emp_id = b.emp_id
		             )
		     and a.group_id=#{group_id} and a.hos_id=#{hos_id}
		    and a.wage_code = #{old_wage_code}

			
	</insert>
	
	<select id="queryAccWageEmpCountByEmpId" parameterType="java.util.Map" resultType="java.lang.Integer">
	select count(0) from ACC_WAGE_EMP  where group_id =#{group_id,jdbcType=INTEGER} and hos_id = #{hos_id,jdbcType=INTEGER}  and emp_id = #{emp_id,jdbcType=INTEGER}
	 
	</select>
	
	<select id="queryAccWageEmpListPrint" parameterType="java.util.Map" resultType="java.util.Map" >
      
	       select 
	       awe.group_id,
	       awe.hos_id,
	       awe.copy_code,
	       awe.wage_code,
	       awe.emp_id,
	       awe.emp_no,
	       hed.emp_code,
	       hed.emp_name,
	       hek.kind_name,
	       hdd.dept_name 
	       from ACC_WAGE_EMP awe left join hos_emp_dict hed 
	       on awe.group_id = hed.group_id and awe.hos_id = hed.hos_id 
	       and awe.emp_id = hed.emp_id 
	       <if test="emp_history ==1">
                    and awe.emp_no = hed.emp_no
            </if>
	       <if test="emp_history ==0">
                   and  hed.is_stop = 0
            </if>
			left join  hos_emp_kind hek on hed.group_id = hek.group_id 
			and hed.hos_id = hed.hos_id
			and hed.kind_code = hek.kind_code 
			<if test="emp_history ==0">
                   and  hek.is_stop = 0
            </if>
			left join hos_dept_dict hdd on hed.group_id = hdd.group_id
			and hed.hos_id = hdd.hos_id and hed.dept_id = hdd.dept_id 
			<if test="emp_history ==1">
                    and hed.dept_no = hdd.dept_no
            </if>
	       <if test="emp_history ==0">
                   and  hdd.is_stop = 0
            </if>
            <where>        
               <if test="group_id != null and group_id != ''">
                    AND hed.group_id = #{group_id}
               </if>
              
			    <if test="hos_id != null and hos_id != ''">
                    AND hed.hos_id = #{hos_id}
               </if>
               <if test="wage_code != null and wage_code != ''">
                    AND awe.wage_code = #{wage_code}
               </if>
			    <if test="emp_code != null and emp_code != ''">
                    and (
					hed.emp_code like '%${emp_code}%' or
					hed.emp_name like '%${emp_code}%' or
					<!-- hed.emp_id like '%${emp_code}%' or  -->
					hed.spell_code like '%${emp_code}%' or
					hed.wbx_code like '%${emp_code}%'
					)
               </if>
			    <if test="kind_code != null and kind_code != ''">
                    and (
					hek.kind_code like '${kind_code}%' or
					hek.kind_name like '%${kind_code}%' or
					hek.spell_code like UPPER('%${kind_code}%') or
					hek.wbx_code like UPPER('%${kind_code}%')
					)
               </if>
               <if test="dept_code != null and dept_code != ''">
                    and (
					hdd.dept_code like '${dept_code}%' or
					hdd.dept_name like '%${dept_code}%' or
					<!-- hdd.dept_id like '${dept_code}%' or -->
					hdd.spell_code like '%${dept_code}%' or
					hdd.wbx_code like '%${dept_code}%'
					)
               </if>
        </where>   
				order by hed.emp_code asc
    </select>
    
    <resultMap type="java.util.Map" id="empCodeNameMap">
    	<result column="emp_id" property="emp_id"/>
    	<result column="emp_no" property="emp_no"/>
    	<result column="emp_code" property="emp_code"/>
    	<result column="emp_name" property="emp_name"/>
    	<result column="dept_name" property="dept_name"/>
    </resultMap>
    <!-- 查询工资套与职工没有关联的记录 -->
    <select id="queryAccWageEmpNotBind" parameterType="java.util.Map" resultMap="empCodeNameMap">
    	select t1.emp_id,
    		   t2.emp_no,
    		   t1.emp_code,
    	       t1.emp_name,
    	       t3.dept_name
    	from hos_emp t1
    	left join hos_emp_dict t2
    		   on t2.group_id = t1.group_id
    		  and t2.hos_id = t1.hos_id
    		  and t2.emp_id = t1.emp_id
    		  and t2.is_stop = 0
    		  and t2.is_disable = 0
    	left join hos_dept t3
    		   on t3.group_id = t1.group_id
    		  and t3.hos_id = t1.hos_id
    		  and t3.dept_id = t1.dept_id
    	left join acc_emp_attr t4
    		   on t4.group_id = t1.group_id
    		  and t4.hos_id = t1.hos_id
    		  and t4.emp_id = t1.emp_id
    	where t1.group_id = #{group_id, jdbcType=INTEGER}
    	  and t1.hos_id = #{hos_id, jdbcType=INTEGER}
    	  <if test="dept_id != null and dept_id != ''">
    	      and t1.dept_id = #{dept_id, jdbcType=INTEGER}
    	  </if>
    	  <if test="emp_kind != null and emp_kind !=''">
    	      and t1.kind_code = #{emp_kind, jdbcType=VARCHAR}
    	  </if>
    	  <if test="dept_kind != null and dept_kind != ''">
    	      and t3.kind_code = #{dept_kind, jdbcType=VARCHAR}
    	  </if>
    	  <if test="station_code != null and station_code != ''">
    	      and t4.station_code = #{station_code, jdbcType=VARCHAR}
    	  </if>
    	  <if test="duty_code != null and duty_code != ''">
    	      and t4.duty_code = #{duty_code, jdbcType=VARCHAR}
    	  </if>
    	  <if test="emp_id != null and emp_id != ''">
    	      and t1.emp_id = #{emp_id, jdbcType=VARCHAR}
    	  </if>
    	  <if test="emp_code != null and emp_code != ''">
    	      and (
    	          t1.emp_code like '%${emp_code}%' or
    	          t1.emp_name like '%${emp_code}%'
    	      )
    	  </if>
    	  and t1.is_stop = 0
    	  and t1.emp_id not in (select tmp1.emp_id 
    	                        from acc_wage_emp tmp1
    	                        left join hos_emp tmp2
    	                               on tmp2.group_id = tmp1.group_id
    	                              and tmp2.hos_id = tmp1.hos_id
    	                              and tmp2.emp_id = tmp1.emp_id
    	                        where tmp1.group_id = #{group_id, jdbcType=INTEGER}
    	                          and tmp1.hos_id = #{hos_id, jdbcType=INTEGER}
    	                          and tmp1.copy_code = #{copy_code, jdbcType=VARCHAR}
    	                          and tmp1.wage_code = #{wage_code, jdbcType=VARCHAR}
    	                          and tmp2.is_stop = 0)
		order by t1.emp_code
    </select>
    
    <!-- 添加工资套与职工关联（批量） -->
	<insert id="addAccWageEmpBatch" parameterType="java.util.List">
		insert into acc_wage_emp(
			group_id, hos_id, copy_code, wage_code, emp_id, emp_no, note
		)
		<foreach collection="list" open=" ( " close=" ) " separator=" union all " item="item" >
			select #{item.group_id, jdbcType=INTEGER},
				   #{item.hos_id, jdbcType=INTEGER},
				   #{item.copy_code, jdbcType=VARCHAR},
				   #{item.wage_code, jdbcType=VARCHAR},
				   #{item.emp_id, jdbcType=INTEGER},
				   #{item.emp_no, jdbcType=INTEGER},
				   #{item.note, jdbcType=VARCHAR}
			from dual
		</foreach>
	</insert>
	
	<select id="queryExists" parameterType="java.util.Map" resultMap="accWageEmp">
		select t2.emp_id,
			   t2.emp_no,
			   t2.emp_code,
			   t2.emp_name
		from acc_wage_emp t1
		left join hos_emp_dict t2
			   on t2.group_id = t1.group_id
			  and t2.hos_id = t1.hos_id
			  and t2.emp_id = t1.emp_id
			  and t2.is_stop = 0
			  and t2.is_disable = 0
		where t1.group_id = #{group_id, jdbcType=INTEGER}
		  and t1.hos_id = #{hos_id, jdbcType=INTEGER}
		  and t1.copy_code = #{copy_code, jdbcType=VARCHAR}
		  and t1.wage_code = #{wage_code, jdbcType=VARCHAR}
		  and t1.emp_id in (${empIds})
	</select>
	
</mapper>

