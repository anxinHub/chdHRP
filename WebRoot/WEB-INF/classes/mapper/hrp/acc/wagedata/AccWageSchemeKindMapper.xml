<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chd.hrp.acc.dao.wagedata.AccWageSchemeKindMapper">

	<resultMap id="accWageSchemeKind" type="com.chd.hrp.acc.entity.AccWageSchemeKind">
        <result property="detail_id" column="detail_id"/>
        <result property="scheme_id" column="scheme_id"/>
        <result property="emp_id" column="emp_id"/>
        <result property="emp_code" column="emp_code"/>
        <result property="emp_name" column="emp_name"/>
        <result property="dept_name" column="dept_name"/>
	</resultMap>
	
	<resultMap id="accWageSKind" type="com.chd.hrp.acc.entity.AccWageSKind">
        <result property="group_id" column="group_id"/>
        <result property="hos_id" column="hos_id"/>
        <result property="scheme_id" column="scheme_id"/>
        <result property="scheme_name" column="scheme_name"/>
        <result property="kind_code" column="kind_code"/>
        <result property="kind_name" column="kind_name"/>
	</resultMap>
	
	
    <insert id="addAccWageSchemeKind" useGeneratedKeys="true" >
    
        INSERT INTO ACC_WAGE_SCHEME_KIND (
                   
                    detail_id
			 ,
                    scheme_id
			 ,
			 		emp_id
        ) VALUES (

					ACC_WAGE_SCHEME_KIND_SEQ.nextval
			 ,
                    #{scheme_id}
			 ,
			 		#{emp_id}
        )
    </insert>
     
    <!-- 添加工资方案与职工关联关系（批量） -->
	<insert id="addBatchAccWageSchemeKind" parameterType="java.util.List">
        INSERT INTO ACC_WAGE_SCHEME_KIND (
            detail_id, scheme_id, emp_id
        ) 
        select ACC_WAGE_SCHEME_KIND_SEQ.nextval, a.* from (
			<foreach collection="list" item="item" index="index" separator=" union all " >
	        	select #{item.scheme_id, jdbcType=INTEGER},
				 	   #{item.emp_id, jdbcType=INTEGER}	
			    from dual
			</foreach>
    	) a
    </insert>
    
    <!-- 添加工资方案与职工分类关系（批量） -->
    <insert id="addAccWageSKindBatch" parameterType="java.util.List">
    	insert into acc_wage_s_kind (scheme_id, kind_code)
    	<foreach collection="list" item="item" separator=" union all ">
    		select #{item.scheme_id, jdbcType=INTEGER}, #{item.kind_code, jdbcType=VARCHAR} from dual
    	</foreach>
    </insert>

	<update id="updateAccWageSchemeKind" parameterType="java.util.Map">
    
        UPDATE ACC_WAGE_SCHEME_KIND SET
        
        	emp_id = #{emp_id}
        	
        WHERE 
        
		 detail_id = #{detail_id}
			  and 
		 scheme_id = #{scheme_id}
		     
   
	</update>
	<update id="updateBatchAccWageSchemeKind" parameterType="java.util.List">
     
	<foreach collection="list" item="item" index="index" open="begin" close="end;" separator=";" >
        UPDATE ACC_WAGE_SCHEME SET
			 
			emp_id = #{item.emp_id}
        	
        WHERE 
		 scheme_id = #{item.scheme_id}
			  and 
		 detail_id = #{item.detail_id}
			 
    </foreach>
	</update>

    <delete id="deleteAccWageSchemeKind" parameterType="java.util.Map">
        DELETE FROM ACC_WAGE_SCHEME_KIND 
        WHERE scheme_id = #{scheme_id, jdbcType=INTEGER}
    </delete>
    
    <!-- 删除工资方案与职工关联关系（批量） -->
    <delete id="deleteBatchAccWageSchemeKind" parameterType="java.util.List">
        DELETE FROM ACC_WAGE_SCHEME_KIND WHERE
		<foreach collection="list" index="index" item="item" open="(" separator="or" close=")">
            scheme_id = #{item.scheme_id} and 
            emp_id = #{item.emp_id}
		</foreach>
    </delete>
    
    <!-- 批量删除工资方案与职工分类关系 -->
    <delete id="deleteAccWageSKindBatch" parameterType="java.util.List">
    	delete from acc_wage_s_kind
    	where
    	<foreach collection="list" item="item" separator=" or ">
    		(scheme_id = #{item.scheme_id, jdbcType=INTEGER} and kind_code = #{item.kind_code, jdbcType=VARCHAR}) 
    	</foreach>
    </delete>
    
    <!-- 通过工资方案ID删除工资方案与职工分类关系 -->
    <delete id="deleteAccWageSKindBySchemeId" parameterType="java.util.Map">
    	delete from acc_wage_s_kind where scheme_id = #{scheme_id, jdbcType=INTEGER}
    </delete>
    
    <select id="queryAccWageSchemeKindByCode" resultType="com.chd.hrp.acc.entity.AccWageSchemeKind" parameterType="string" >
	  
        SELECT to_char(wm_concat(emp_id)) emp_code
			 
		FROM ACC_WAGE_SCHEME_KIND 
		
        WHERE
        
        scheme_id = #{scheme_id}  
        
	</select>
	
	<select id="queryAccWageSchemeKind" parameterType="java.util.Map" resultMap="accWageSchemeKind" >
		select hed.emp_id,
			hed.emp_code,
			hed.emp_name,
			hdd.dept_name 
		from acc_wage_scheme_kind awsk
		left join hos_emp_dict hed 
			   on awsk.emp_id=hed.emp_id
		left join hos_dept_dict hdd 
			   on hed.group_id = hdd.group_id 
			  and hed.hos_id = hdd.hos_id
			  and hed.dept_id = hdd.dept_id 
			  and hed.dept_no = hdd.dept_no 
		<where>                     
			and hdd.is_stop = 0 and hdd.is_disable = 0
			and hed.is_stop = 0 and hed.is_disable = 0
			<if test="detail_id != null and detail_id != ''">
				AND awsk.detail_id = #{detail_id}
			</if>
			<if test="scheme_id != null and scheme_id != ''">
				AND awsk.scheme_id = #{scheme_id}
			</if>
			<if test="emp_id != null and emp_id != ''">
				AND awsk.emp_id = #{emp_id}
			</if>
			<if test="emp_code != null and emp_code != ''">
				AND (hed.emp_code like '${emp_code}%' or hed.emp_name like '%${emp_code}%')
			</if>
			<if test="dept_code != null and dept_code != ''">
				AND (hdd.dept_code like '${dept_code}%' or hdd.dept_name like '%${dept_code}%')
			</if>
			<if test="group_id != null and group_id != ''">
				AND hed.group_id = #{group_id}
			</if>
			<if test="hos_id != null and hos_id != ''">
				AND hed.hos_id = #{hos_id}
			</if>
		</where>   
		order by awsk.detail_id asc
	</select>
	
	<!-- 查工资方案与职工分类的关系 -->
	<select id="queryAccWageSKind" parameterType="java.util.Map" resultMap="accWageSKind">
		select t2.group_id,
			t2.hos_id,
			t1.scheme_id,
			t2.scheme_name,
			t1.kind_code,
			t3.kind_name
		from acc_wage_s_kind t1
		left join acc_wage_scheme t2
			   on t2.scheme_id = t1.scheme_id
		left join hos_emp_kind t3
			   on t3.kind_code = t1.kind_code
			  and t3.group_id = t2.group_id
			  and t3.hos_id = t2.hos_id
		where t2.group_id = #{group_id, jdbcType=INTEGER}
		  and t2.hos_id = #{hos_id, jdbcType=INTEGER}
		  and t2.copy_code = #{copy_code, jdbcType=VARCHAR}
		  and t1.scheme_id = #{scheme_id, jdbcType=INTEGER}
		order by t1.kind_code
	</select>
	
    <select id="queryAccWageSchemeKindList" parameterType="java.util.Map" resultMap="accWageSchemeKind" >
		select #{scheme_id, jdbcType=INTEGER} scheme_id,
			   t1.emp_id 
		from acc_wage_emp t1
		left join hos_emp_dict t2
		       on t2.group_id = t1.group_id
		      and t2.hos_id = t1.hos_id
		      and t2.emp_id = t1.emp_id
		      and t2.emp_no = t1.emp_no
		where t1.group_id = #{group_id, jdbcType=INTEGER} 
		  and t1.hos_id = #{hos_id, jdbcType=INTEGER}
          and t1.copy_code = #{copy_code, jdbcType=VARCHAR} 
          and t1.wage_code = #{wage_code, jdbcType=VARCHAR}
          and t2.is_stop = 0
          and t2.is_disable = 0
    </select>
	
	<select id="queryGztIncludeEmp" parameterType="java.util.Map" resultMap="accWageSchemeKind">
		select t1.emp_id, 
			   t3.emp_code,
			   t3.emp_name
		from acc_wage_scheme_kind t1
		left join acc_wage_scheme t2
		       on t2.scheme_id = t1.scheme_id
		left join hos_emp t3
		       on t3.group_id = t2.group_id
		      and t3.hos_id = t2.hos_id
		      and t3.emp_id = t1.emp_id
		where t2.is_gzt = 1
		  and t2.group_id = #{group_id, jdbcType=INTEGER}
		  and t2.hos_id = #{hos_id, jdbcType=INTEGER}
		  and t2.copy_code = #{copy_code, jdbcType=VARCHAR}
		  and t2.scheme_type_code = '04'
		  <if test="scheme_id != null and scheme_id != ''">
		      and t1.scheme_id != #{scheme_id, jdbcType=INTEGER}
		      and t1.emp_id in (select t5.emp_id
		                    from acc_wage_scheme_kind t5
		                    where t5.scheme_id = #{scheme_id, jdbcType=INTEGER})
		  </if>
	</select>
	
	<delete id="deleteBySchemeIdAndEmpIds" parameterType="java.util.Map">
		delete from acc_wage_scheme_kind
		where scheme_id = #{scheme_id, jdbcType=INTEGER}
		  and (
		      <foreach collection="empIdList" item="item" separator=" or ">
		          emp_id = #{item, jdbcType=INTEGER}
		      </foreach>
		  )
	</delete>
</mapper>
